{"version":3,"sources":["panels/layout/gzmtr.tsx"],"names":["useStyles","makeStyles","theme","createStyles","nestedList","paddingLeft","spacing","slider","width","marginLeft","marginRight","React","memo","DirectionGZLi","t","useTranslation","classes","dispatch","useAppDispatch","directionIndicatorX","useAppSelector","store","param","direction_gz_x","directionIndicatorY","direction_gz_y","useState","isOpen","setIsOpen","useMemo","button","onClick","prevOpen","primary","color","in","unmountOnExit","component","disablePadding","className","value","onChange","_","setDirectionIndicatorX","step","marks","label","valueLabelDisplay","variant","setDirectionIndicatorY"],"mappings":"wMAkBMA,EAAYC,sBAAW,SAAAC,GAAK,OAC9BC,uBAAa,CACTC,WAAY,CACRC,YAAaH,EAAMI,QAAQ,IAE/BC,OAAQ,CACJC,MAAO,IACPC,WAAY,EACZC,YAAa,QAKVC,cAAMC,MAAK,WACtB,OACI,qCACI,cAAC,UAAD,IACA,cAACC,EAAD,UAKZ,IAAMA,EAAgB,WAClB,IAAQC,EAAMC,2BAAND,EACFE,EAAUhB,IACViB,EAAWC,cAEXC,EAAsBC,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,kBAC1DC,EAAsBJ,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMG,kBAEhE,EAA4Bd,IAAMe,UAAS,GAA3C,mBAAOC,EAAP,KAAeC,EAAf,KAEA,OAAOjB,IAAMkB,SAAQ,WASjB,OACI,qCACI,eAAC,WAAD,CAAUC,QAAM,EAACC,QAAS,kBAAMH,GAAU,SAAAI,GAAQ,OAAKA,MAAvD,UACI,cAAC,eAAD,UACI,cAAC,OAAD,0BAEJ,cAAC,eAAD,CAAcC,QAASnB,EAAE,8BACxBa,EAAS,cAAC,OAAD,CAAMO,MAAM,SAAZ,yBAA0C,cAAC,OAAD,CAAMA,MAAM,SAAZ,4BAExD,cAAC,WAAD,CAAUC,GAAIR,EAAQS,eAAa,EAAnC,SACI,eAAC,OAAD,CAAMC,UAAU,MAAMC,gBAAc,EAACC,UAAWvB,EAAQZ,WAAxD,UACI,eAAC,WAAD,WACI,cAAC,eAAD,CAAc6B,QAASnB,EAAE,mCACzB,cAAC,SAAD,CACIyB,UAAWvB,EAAQT,OACnBiC,MAAOrB,EACPsB,SAxBF,SAACC,EAAoBF,GACvCvB,EAAS0B,YAAuBH,KAwBZI,KAAM,IACNC,MAAO,CACH,CAAEL,MAAO,EAAGM,MAAOhC,EAAE,4BACrB,CAAE0B,MAAO,IAAKM,MAAOhC,EAAE,8BAE3BiC,kBAAkB,YAG1B,cAAC,UAAD,CAASC,QAAQ,WACjB,eAAC,WAAD,WACI,cAAC,eAAD,CAAcf,QAASnB,EAAE,iCACzB,cAAC,SAAD,CACIyB,UAAWvB,EAAQT,OACnBiC,MAAOhB,EACPiB,SAnCF,SAACC,EAAoBF,GACvCvB,EAASgC,YAAuBT,KAmCZI,KAAM,IACNC,MAAO,CACH,CAAEL,MAAO,EAAGM,MAAOhC,EAAE,2BACrB,CAAE0B,MAAO,IAAKM,MAAOhC,EAAE,+BAE3BiC,kBAAkB,sBAO3C,CAAC5B,EAAqBK,EAAqBG,EAAQX,EAAQZ,WAAYY,EAAQT,OAAQO,EAAGG","file":"static/js/panelLayoutGZMTR.6ed6634c.chunk.js","sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Slider,\n    ListItem,\n    ListItemText,\n    Icon,\n    Collapse,\n    makeStyles,\n    createStyles,\n    List,\n    ListItemIcon,\n    Divider,\n} from '@material-ui/core';\nimport { useAppDispatch, useAppSelector } from '../../redux';\nimport { ChangeEvent } from 'react';\nimport { setDirectionIndicatorX, setDirectionIndicatorY } from '../../redux/param/action';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        nestedList: {\n            paddingLeft: theme.spacing(5),\n        },\n        slider: {\n            width: 168,\n            marginLeft: 8,\n            marginRight: 8,\n        },\n    })\n);\n\nexport default React.memo(function LayoutGZMTR() {\n    return (\n        <>\n            <Divider />\n            <DirectionGZLi />\n        </>\n    );\n});\n\nconst DirectionGZLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const directionIndicatorX = useAppSelector(store => store.param.direction_gz_x);\n    const directionIndicatorY = useAppSelector(store => store.param.direction_gz_y);\n\n    const [isOpen, setIsOpen] = React.useState(false);\n\n    return React.useMemo(() => {\n        const handleXChange = (_: ChangeEvent<{}>, value: number | number[]) => {\n            dispatch(setDirectionIndicatorX(value as number));\n        };\n\n        const handleYChange = (_: ChangeEvent<{}>, value: number | number[]) => {\n            dispatch(setDirectionIndicatorY(value as number));\n        };\n\n        return (\n            <>\n                <ListItem button onClick={() => setIsOpen(prevOpen => !prevOpen)}>\n                    <ListItemIcon>\n                        <Icon>open_with</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('layout.directionGZ.title')} />\n                    {isOpen ? <Icon color=\"action\">expand_less</Icon> : <Icon color=\"action\">expand_more</Icon>}\n                </ListItem>\n                <Collapse in={isOpen} unmountOnExit>\n                    <List component=\"div\" disablePadding className={classes.nestedList}>\n                        <ListItem>\n                            <ListItemText primary={t('layout.directionGZ.horizontal')} />\n                            <Slider\n                                className={classes.slider}\n                                value={directionIndicatorX}\n                                onChange={handleXChange}\n                                step={0.01}\n                                marks={[\n                                    { value: 0, label: t('layout.directionGZ.left') },\n                                    { value: 100, label: t('layout.directionGZ.right') },\n                                ]}\n                                valueLabelDisplay=\"auto\"\n                            />\n                        </ListItem>\n                        <Divider variant=\"middle\" />\n                        <ListItem>\n                            <ListItemText primary={t('layout.directionGZ.vertical')} />\n                            <Slider\n                                className={classes.slider}\n                                value={directionIndicatorY}\n                                onChange={handleYChange}\n                                step={0.01}\n                                marks={[\n                                    { value: 0, label: t('layout.directionGZ.top') },\n                                    { value: 100, label: t('layout.directionGZ.bottom') },\n                                ]}\n                                valueLabelDisplay=\"auto\"\n                            />\n                        </ListItem>\n                    </List>\n                </Collapse>\n            </>\n        );\n    }, [directionIndicatorX, directionIndicatorY, isOpen, classes.nestedList, classes.slider, t, dispatch]);\n};\n"],"sourceRoot":""}