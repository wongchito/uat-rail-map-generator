{"version":3,"sources":["svgs/railmap/main/line-box-gzmtr.tsx","svgs/railmap/main/station/station-gzmtr.tsx","svgs/railmap/main/main-gzmtr.tsx","svgs/railmap/railmap-gzmtr.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","methods.ts","svgs/railmap/methods/share.ts","svgs/strip/strip-gzmtr.tsx","svgs/station-num-gzmtr.tsx"],"names":["memo","props","textAnchor","fill","stnState","MonoColour","white","info","xlinkHref","LineBoxNameSpan","name","slice","LineBoxName","prevProps","nextProps","toString","nameZHEl","dy","match","forEach","t","i","isNaN","Number","push","dominantBaseline","fontSize","nameZHGroupEl","useRef","useState","width","zhBBox","setZhBBox","useEffect","current","getBBox","nameZHGroupScale","nameENEl","enBBox","setEnBBox","nameENScale","ref","y","navigator","userAgent","includes","className","transform","replace","length","sharedText","idx","nameEl","x","bBox","setBBox","nameScale","trim","StationGZMTR","stnId","stnY","theme","useAppSelector","store","param","lineName","line_name","lineNumber","line_num","stnInfo","stn_list","isNameShift","parents","children","tickRotation","indexOf","branch","left","right","nameENLns","split","nameDX","Math","cos","intInfos","concat","transfer","stroke","lineNum","stnNum","num","secondaryName","isExpress","services","Services","express","StationNameGElement","nameDY","stnNameEl","secNameEl","secNameBBox","setSecNameBBox","prevBBox","StationName","StationSecondaryName","secName","ExpressTag","forwardRef","useMemo","map","txt","React","IntGroup","strokeWidth","IntTicks","others","IntBoxs","other","wideFactor","stnList","MainGZMTR","helper","branches","routes","deps","depsStr","svgWidths","svgWidth","yPercentage","y_pc","paddingPercentage","padding","branchSpacing","branch_spacing","direction","currentStationIndex","current_stn_idx","stationList","adjMat","adjacencyList","xShares","console","log","Object","keys","reduce","acc","cur","criticalPath","criticalPathMethod","nodes","len","branchOfStn","filter","partSource","partSink","leftOpenJaw","rightOpenJaw","lens","getXShare","JSON","stringify","realCP","lineXs","ShortDirection","CanvasType","RailMap","xs","yShares","ys","stnStates","getStnState","linePaths","drawLine","paths","stns","_linePath","id","style","Line","Array","strokeDasharray","pass","path","d","main","stnIds","realXs","realYs","prevY","join","StationGroup","DefsGZMTR","RailMapGZMTR","psdNumber","psd_num","infoPanelType","info_panel_type","notes","notesGZMTR","curStnInfo","variant","isShowLight","PanelTypeGZMTR","gz2otis","isShowPSD","TerminusFlag","note","NoteBox","x2","strokeLinecap","height","rx","DirectionIndicator","directionIndicatorX","direction_gz_x","directionIndicatorY","direction_gz_y","validDests","Set","textGroupProps","destIds","DirectionIndicatorTextGroup","DirectionIndicatorTextGroup2","charCounts","minCharCounts","min","charSpacing","abs","Fragment","letterSpacing","max","noteTextEl","textLength","lengthAdjust","_objectWithoutProperties","source","excluded","key","target","sourceKeys","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","getYShareMTR","stnPred","leftW","rightW","a","c","from","to","allLengths","criticalPaths","child","cp","unshift","maxLength","getXShareMTR","currentId","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","namePoss","leftWideFactor","rightWideFactor","pathWeight","Infinity","pathTurnParams","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","res","getYShare","e","prevId","prevX","stnDX","stnExtraH","stnSpareH","warn","stations","lineMainStns","linePassStns","StripGZMTR","stripHeight","indicatorLight","cy","r","ry","PSD","isInStrip","psdDy","black","StationNumberText","LINE_NUM_MAX_WIDTH","lineNumEl","lineNumScale","stnNumScale"],"mappings":"iOAGeA,kBACX,SAAiBC,GACb,OACI,oBAAGC,WAAW,SAASC,MAA0B,IAApBF,EAAMG,SAAkBC,IAAWC,MAAQL,EAAMM,KAAK,GAAnF,UACI,qBAAKC,UAAU,UAAUL,MAA0B,IAApBF,EAAMG,SAAkB,OAASH,EAAMM,KAAK,KAC1EN,EAAMM,KAAK,GAAG,KAAON,EAAMM,KAAK,GAAG,GAChC,cAACE,EAAD,CAAiBC,KAAMT,EAAMM,KAAKI,OAAO,KAEzC,cAACC,EAAD,CAAaF,KAAMT,EAAMM,KAAKI,OAAO,WAKrD,SAACE,EAAWC,GAAZ,OACID,EAAUN,KAAKQ,aAAeD,EAAUP,KAAKQ,YAAcF,EAAUT,WAAaU,EAAUV,YAG9FQ,EAAcZ,gBAChB,SAACC,GAA2B,IAAD,EACnBe,EAAW,GACXC,EAAK,EACT,UAAAhB,EAAMS,KAAK,GAAGQ,MAAM,mBAApB,SAAiCC,SAAQ,SAACC,EAAGC,GACrCC,MAAMC,OAAOH,KAEbJ,EAASQ,KACL,uBAAeC,iBAAiB,UAAUR,GAAI,EAAIA,EAAlD,SACKG,GADOC,IAIhBJ,GAAM,EAAIA,IAGVD,EAASQ,KACL,uBAAeC,iBAAiB,UAAUC,SAAU,GAAIT,IAAKA,EAA7D,SACKG,GADOC,IAIhBJ,EAAK,MAIb,IAAMU,EAAgBC,iBAA8B,MACpD,EAA4BC,mBAAS,CAAEC,MAAO,IAA9C,mBAAOC,EAAP,KAAeC,EAAf,KACAC,qBACI,kBAAMD,EAAUL,EAAcO,QAASC,aAEvC,CAAClC,EAAMS,KAAK,KAEhB,IAAM0B,EAAmBL,EAAOD,MAAQ,KAAO,KAAOC,EAAOD,MAAQ,EAE/DO,EAAWT,iBAA8B,MAC/C,EAA4BC,mBAAS,CAAEC,MAAO,IAA9C,mBAAOQ,EAAP,KAAeC,EAAf,KACAN,qBACI,kBAAMM,EAAUF,EAASH,QAASC,aAElC,CAAClC,EAAMS,KAAK,KAEhB,IAAM8B,EAAcF,EAAOR,MAAQ,KAAO,KAAOQ,EAAOR,MAAQ,EAEhE,OACI,qCACI,sBACIW,IAAKd,EACLe,EAAGC,UAAUC,UAAUC,SAAS,YAAc,GAAM,EACpDC,UAAU,eACVpB,SAAU,GACVqB,UAAS,gBAAWX,EAAX,OALb,SAOKpB,IAEL,sBACIyB,IAAKJ,EACLK,EAAG,KACHhB,SAAUzB,EAAMS,KAAK,GAAGsC,QAAQ,KAAM,KAAKC,OAAS,GAAK,EAAI,EAC7DH,UAAU,eACVC,UAAS,gBAAWP,EAAX,OALb,SAOKvC,EAAMS,KAAK,WAK5B,SAACG,EAAWC,GAAZ,OAA0BD,EAAUH,KAAKK,aAAeD,EAAUJ,KAAKK,cAGrEN,EAAkBT,gBACpB,SAACC,GACG,IAAIiD,EAAa,GACjB,IAAK,IAAIC,KAAT,YAAoBlD,EAAMS,KAAK,IAAK,CAChC,GAAIT,EAAMS,KAAK,GAAGyC,KAASlD,EAAMS,KAAK,GAAGyC,GAGrC,MAFAD,GAAcjD,EAAMS,KAAK,GAAGyC,GAMpC,IAAMC,EAASxB,iBAA8B,MAC7C,EAAwBC,mBAAS,CAAEwB,EAAG,EAAGvB,MAAO,IAAhD,mBAAOwB,EAAP,KAAaC,EAAb,KACAtB,qBACI,kBAAMsB,EAAQH,EAAOlB,QAASC,aAE9B,CAAClC,EAAMS,KAAKK,aAGhB,IAAMyC,EAAYF,EAAKxB,MAAQ,KAAO,KAAOwB,EAAKxB,MAAQ,EAG1D,OACI,mBAAGiB,UAAS,gBAAWS,EAAX,OAAZ,SACI,mBAAGT,UAAS,qBAAgBO,EAAKD,EAAIC,EAAKxB,MAAQ,EAAtC,OAAZ,SACI,uBAAMW,IAAKW,EAAQN,UAAU,eAAepB,SAAU,GAAIgB,EAAG,GAAIxC,WAAW,MAA5E,UACKgD,EACD,uBAAOJ,UAAU,eAAepB,SAAU,EAAG2B,EAAG,EAAGpC,IAAK,EAAGf,WAAW,QAAtE,SACKD,EAAMS,KAAK,GAAGC,MAAMuC,EAAWD,UAEpC,uBAAOH,UAAU,eAAepB,SAAU,EAAG2B,EAAG,EAAGpC,GAAI,EAAGf,WAAW,QAArE,SACKD,EAAMS,KAAK,GAAGC,MAAMuC,EAAWD,QAAQQ,mBAOhE,SAAC5C,EAAWC,GAAZ,OAA0BD,EAAUH,KAAKK,aAAeD,EAAUJ,KAAKK,c,yFCrD5D2C,EA7DM,SAACzD,GAClB,IAAQ0D,EAA0B1D,EAA1B0D,MAAOvD,EAAmBH,EAAnBG,SAAUwD,EAAS3D,EAAT2D,KAEnBC,EAAQC,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMH,SAC5CI,EAAWH,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAME,aAC/CC,EAAaL,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMI,YACjDC,EAAUP,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMM,SAASX,MAEvDY,EAAyC,IAA3BF,EAAQG,QAAQvB,QAA4C,IAA5BoB,EAAQI,SAASxB,OAC/DyB,EACFd,EAAO,GAEyD,IAA1DS,EAAQG,QAAQG,QAAQN,EAAQO,OAAOC,KAAK,IAAM,KACU,IAA5DR,EAAQI,SAASE,QAAQN,EAAQO,OAAOE,MAAM,IAAM,IAFpD,IAIA,EACJC,EAAYV,EAAQ3D,KAAK,GAAGsE,MAAM,MAAM/B,OACxCgC,EAASV,EACQ,MAAjBG,EACI,GAAuB,IAAjBK,EAAY,GAAUG,KAAKC,KAAK,KACrC,EACY,MAAjBT,GACC,GACA,GAAuB,IAAjBK,EAAY,IAAWG,KAAKC,KAAK,IAE9C,OACI,qCACI,cAAC,EAAD,CACIC,SACIb,EAEU,CAAC,CACIV,EAAM,GAAIA,EAAM,GAAI,0BAA2B,uBADpD,mBAC8EI,KAEhFoB,OAAOhB,EAAQiB,SAAS/E,KAAK,IAC/B8D,EAAQiB,SAAS/E,KAAK,GAEhCH,SAAUA,EACVsE,aAAcA,IAElB,8BACI,qBAAKlE,UAAU,OAAO+E,QAAsB,IAAdnF,EAAkB,OAAS,4BACzD,cAAC,IAAD,CACI0C,UAAS,gBAAwB,IAAd1C,EAAkB,OAAS,UAC9CoF,QAASrB,EACTsB,OAAQpB,EAAQqB,SAGxB,mBAAG3C,UAAS,qBAAgBkC,EAAhB,OAAZ,SACI,cAAC,EAAD,CACIvE,KAAM2D,EAAQ3D,KACdiF,cAAetB,EAAQsB,cACvBvF,SAAUA,EACVsE,aAAcA,EACdkB,UAAWvB,EAAQwB,SAAShD,SAASiD,IAASC,iBAiB5DC,EAAsB,SAAC/F,GACzB,IAAMgG,EAAgC,MAAvBhG,EAAMyE,aAAuB,MAAQ,GAAwC,GAAnCzE,EAAMS,KAAK,GAAGsE,MAAM,MAAM/B,OAAciC,KAAKC,KAAK,IAErGe,EAAYtE,iBAA2B,MAC7C,EAAwBC,mBAAS,CAAEC,MAAO,IAA1C,mBAAOwB,EAAP,KAAaC,EAAb,KACAtB,qBACI,kBAAMsB,EAAQ2C,EAAUhE,QAASC,aAEjC,CAAClC,EAAMS,KAAKK,aAGhB,IAAMoF,EAAYvE,iBAA2B,MAC7C,EAAsCC,mBAAS,CAAEwB,EAAG,EAAGvB,OAAQ,KAA/D,mBAAOsE,EAAP,KAAoBC,EAApB,KAgBA,OAfApE,qBACI,WACQkE,EAAUjE,QACVmE,EAAeF,EAAUjE,QAAQC,WAEjCkE,GAAe,SAAAC,GAEX,MAAO,CAAEjD,EADKiD,EAANjD,EACIvB,OAAQ,SAKhC,CAAC7B,EAAM0F,cAAc5E,aAIrB,oBACIb,WAAmC,MAAvBD,EAAMyE,aAAuB,MAAQ,QACjD5B,UAAS,gBAA8B,IAApB7C,EAAMG,SAAkB,OAA4B,IAAnBH,EAAMG,SAAiB,YAAc,UACzF2C,UAAS,sBAAiBkD,EAAjB,gBAHb,UAKI,cAACM,EAAD,CAAa9D,IAAKyD,EAAWxF,KAAMT,EAAMS,OACxCT,EAAM0F,eACH,oBACI5C,UAAS,qBACJO,EAAKxB,MAAQsE,EAAYtE,MAAQ,EAAI,KAA8B,MAAvB7B,EAAMyE,cAAwB,EAAI,GAD1E,YAEL,EAAI,GAAKzE,EAAMS,KAAK,GAAGsE,MAAM,MAAM/B,OAAS,GAFvC,KAGTH,UAAS,gBAA8B,IAApB7C,EAAMG,SAAkB,OAAS,UAJxD,UAMI,oBAAG2C,UAAU,iBAAiBrB,SAAU,GAAxC,UACI,sBAAMxB,WAAW,MAAMmD,EAAG+C,EAAY/C,EAAI,EAAGP,UAAU,eAAvD,SACK,MAEL,sBAAM5C,WAAW,QAAQmD,EAAG+C,EAAYtE,MAAQsE,EAAY/C,EAAI,EAAGP,UAAU,eAA7E,SACK,SAGT,cAAC0D,EAAD,CAAsB/D,IAAK0D,EAAWM,QAASxG,EAAM0F,mBAG5D1F,EAAM2F,WACH,cAACc,EAAD,CACIvG,MAA0B,IAApBF,EAAMG,SAAkB,OAAS,0BACvC2C,UAAS,qBACJO,EAAKxB,MAAQsE,EAAYtE,MAAQ,GAAK,KAA8B,MAAvB7B,EAAMyE,cAAwB,EAAI,GAD3E,YAEL,EAAI,GAAKzE,EAAMS,KAAK,GAAGsE,MAAM,MAAM/B,OAAS,GAFvC,WASvBsD,EAAcI,sBAAW,SAAC1G,EAAuBwC,GAAxB,OAC3BmE,mBACI,kBACI,oBAAGnE,IAAKA,EAAR,UACI,sBAAMK,UAAU,eAAepB,SAAU,GAAzC,SACKzB,EAAMS,KAAK,KAEhB,mBAAGgB,SAAU,KAAb,SACKzB,EAAMS,KAAK,GAAGsE,MAAM,MAAM6B,KAAI,SAACC,EAAKzF,GAAN,OAC3B,sBAAcyB,UAAU,eAAe7B,GAAI,GAAS,GAAJI,EAAhD,SACKyF,GADMzF,aAQ3B,CAACpB,EAAMS,KAAK,GAAIT,EAAMS,KAAK,QAI7B8F,EAAuBG,sBAAW,SAAC1G,EAA0BwC,GAA3B,OACpCmE,mBACI,kBACI,oBAAGnE,IAAKA,EAAKvC,WAAW,SAAxB,UACI,sBAAM4C,UAAU,eAAepB,SAAU,GAAzC,SACKzB,EAAMwG,QAAQ,KAEnB,sBAAMxF,GAAI,GAAI6B,UAAU,eAAepB,SAAU,IAAjD,SACKzB,EAAMwG,QAAQ,UAK3B,CAACxG,EAAMwG,QAAQ1F,gBAIjB2F,EAAaK,IAAM/G,MAAK,SAACC,GAAD,OAC1B,4CAAGC,WAAW,UAAaD,GAA3B,cACI,sBAAM6C,UAAU,eAAepB,SAAU,GAAzC,4CAGA,sBAAMT,GAAI,GAAI6B,UAAU,eAAepB,SAAU,IAAjD,oCAYFsF,EAAW,SAAC/G,GAAD,OACb,qCACI,cAAC,EAAD,aAAUgH,YAAa,GAAOhH,IAC9B,cAAC,EAAD,aAAS8C,UAAS,sBAAwC,MAAvB9C,EAAMyE,cAAwB,GAAK,GAApD,MAA+DzE,QAInFiH,EAAW,SAACjH,GACd,IAAQmF,EAAgDnF,EAAhDmF,SAAUhF,EAAsCH,EAAtCG,SAAUsE,EAA4BzE,EAA5ByE,aAAiByC,EAA7C,YAAwDlH,EAAxD,GAEA,OACI,6CAAOkH,GAAP,aACK/B,EAASyB,KAAI,SAACtG,EAAMc,GAAP,OACV,qBAEIb,UAAU,WACV+E,QAAsB,IAAdnF,EAAkB,OAASG,EAAK,GACxCwC,UAAS,qBAAgB,GAAKqC,EAASnC,OAAS,GAAK,EAAI5B,EAAhD,qBACY,MAAjBqD,EAAuB,IAAM,EADxB,MAHJrD,UAYnB+F,EAAU,SAACnH,GACb,IAAQmF,EAA+CnF,EAA/CmF,SAAUV,EAAqCzE,EAArCyE,aAActE,EAAuBH,EAAvBG,SAAaiH,EAA7C,YAAuDpH,EAAvD,GAEA,OACI,6CAAOoH,GAAP,aACKjC,EAASyB,KAAI,SAACtG,EAAMc,GAAP,OACV,mBAAW0B,UAAS,sBAAqB,GAAJ1B,GAA2B,MAAjBqD,GAAwB,EAAI,GAAvD,KAApB,SACI,cAAC,EAAD,CAASnE,KAAMA,EAAMH,SAAUA,KAD3BiB,U,QCpOlBiG,EAAa,SAACC,EAAsB5D,GAAvB,OACmB,IAAlC4D,EAAQ5D,GAAOa,QAAQvB,QAAmD,IAAnCsE,EAAQ5D,GAAOc,SAASxB,OAAe,IAAO,GA6K1EuE,EA3GG,WAAO,IAAD,EACpB,EAA4C1D,aAAe,SAAAC,GAAK,OAAIA,EAAM0D,UAAlEC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,OAAiBC,EAAnC,EAA0BC,QAEpBC,EAAYhE,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAM+D,YAChDC,EAAclE,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMiE,QAClDC,EAAoBpE,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMmE,WACxDC,EAAgBtE,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMqE,kBACpDC,EAAYxE,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMsE,aAChDrE,EAAWH,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAME,aAC/CqE,EAAsBzE,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMwE,mBAC1DC,EAAc3E,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMM,YAElDoE,EAASC,YAAcF,EAAanB,EAAYA,GAEhDsB,EAAUhC,mBACZ,WAEI,OADAiC,QAAQC,IAAI,sBACLC,OAAOC,KAAKP,GAAaQ,QAC5B,SAACC,EAAKC,GAAN,mBAAC,eAAmBD,GAApB,kBAA0BC,EAlFxB,SAACxF,EAAe+E,EAA0ChB,GACxE,IAAI0B,EAAeC,YAAmB,YAAa,UAAWX,GAC9D,GAAIU,EAAaE,MAAMzG,SAASc,GAC5B,OAAO0F,YAAmBD,EAAaE,MAAM,GAAI3F,EAAO+E,GAAQa,IAKhE,IAFA,IAAIC,EAAc9B,EAAS+B,QAAO,SAAA7E,GAAM,OAAIA,EAAO/B,SAASc,MAAQ,GAChE+F,EAAa/F,GACTyF,EAAaE,MAAMzG,SAAS6G,IAChCA,EAAaF,EAAYA,EAAY7E,QAAQ+E,GAAc,GAG/D,IADA,IAAIC,EAAWhG,GACPyF,EAAaE,MAAMzG,SAAS8G,IAChCA,EAAWH,EAAYA,EAAY7E,QAAQgF,GAAY,GAG3D,IAAIC,EAA6B,cAAfF,EACdG,EAA4B,YAAbF,EAEnB,GAAIH,EAAYzI,aAAe2G,EAAS,GAAG3G,WAAY,CAEnD,IAAI+I,EAAO,GAkBX,OAjBKF,GAAgBC,EAKVD,GACPE,EAAK,GAAK,EACVA,EAAK,GAAKT,YAAmBD,EAAaE,MAAM,GAAIK,EAAUjB,GAAQa,IACtEO,EAAK,GAAKT,YAAmBG,EAAY,GAAI7F,EAAO+E,GAAQa,IAC5DO,EAAK,GAAKT,YAAmB1F,EAAOgG,EAAUjB,GAAQa,MAGtDO,EAAK,GAAKT,YAAmBD,EAAaE,MAAM,GAAII,EAAYhB,GAAQa,IACxEO,EAAK,GAAKT,YAAmBK,EAAYN,EAAaE,MAAM3I,OAAO,GAAG,GAAI+H,GAAQa,IAClFO,EAAK,GAAKT,YAAmBK,EAAY/F,EAAO+E,GAAQa,IACxDO,EAAK,GAAKT,YAAmB1F,EAAO6F,EAAY7I,OAAO,GAAG,GAAI+H,GAAQa,MAdtEO,EAAK,GAAKT,YAAmBD,EAAaE,MAAM,GAAII,EAAYhB,GAAQa,IACxEO,EAAK,GAAKT,YAAmBK,EAAYC,EAAUjB,GAAQa,IAC3DO,EAAK,GAAKT,YAAmBK,EAAY/F,EAAO+E,GAAQa,IACxDO,EAAK,GAAKT,YAAmB1F,EAAOgG,EAAUjB,GAAQa,KAanDO,EAAK,GAAMA,EAAK,GAAKA,EAAK,IAAOA,EAAK,GAAKA,EAAK,IAEvD,GAAKF,GAAgBC,EAOd,OAAID,EAEHP,YAAmBD,EAAaE,MAAM,GAAIK,EAAUjB,GAAQa,IAC5DF,YAAmB1F,EAAOgG,EAAUjB,GAAQa,IAK5CF,YAAmBD,EAAaE,MAAM,GAAII,EAAYhB,GAAQa,IAC9DF,YAAmBK,EAAY/F,EAAO+E,GAAQa,IAflD,IAAIO,EAAO,GAKX,OAJAA,EAAK,GAAKT,YAAmBD,EAAaE,MAAM,GAAII,EAAYhB,GAAQa,IACxEO,EAAK,GAAKT,YAAmBK,EAAYC,EAAUjB,GAAQa,IAC3DO,EAAK,GAAKT,YAAmBK,EAAY/F,EAAO+E,GAAQa,IACxDO,EAAK,GAAKT,YAAmB1F,EAAOgG,EAAUjB,GAAQa,IAC/CO,EAAK,GAAMA,EAAK,GAAKA,EAAK,IAAOA,EAAK,GAAKA,EAAK,IAmCvBC,CAAUZ,EAAKT,EAAQhB,OACvD,MAIR,CAACA,EAAS3G,WAAYiJ,KAAKC,UAAUvB,KAGnCU,EAAeC,YAAmB,YAAa,UAAWX,GAC1DwB,EAASb,YAAmBD,EAAaE,MAAM,GAAIF,EAAaE,MAAM3I,OAAO,GAAG,GAAI+H,GAEpFyB,EACF7B,IAAc8B,IAAetF,MACvB,CACKgD,EAAUuC,IAAWC,SAAWpC,EAAqB,IAAM,GAC5DJ,EAAUuC,IAAWC,UAAY,EAAIpC,EAAoB,KAAO,IAEpE,CACKJ,EAAUuC,IAAWC,SAAWpC,EAAqB,IACtDJ,EAAUuC,IAAWC,UAAY,EAAIpC,EAAoB,KAAO,IAExEqC,EAAKxB,OAAOC,KAAKJ,GAASK,QAC5B,SAACC,EAAKC,GAAN,mBAAC,eAAmBD,GAApB,kBAA0BC,EAAMgB,EAAO,GAAMvB,EAAQO,GAAOe,EAAOX,KAAQY,EAAO,GAAKA,EAAO,QAC9F,IAGEK,EAAU5D,mBACZ,WAEI,OADAiC,QAAQC,IAAI,sBACLC,OAAOC,KAAKP,GAAaQ,QAAO,SAACC,EAAKC,GACzC,GAAIzB,EAAS,GAAG7E,SAASsG,GACrB,OAAO,2BAAKD,GAAZ,kBAAkBC,EAAM,IAExB,IAAIK,EAAc9B,EAAS/G,MAAM,GAAG8I,QAAO,SAAA7E,GAAM,OAAIA,EAAO/B,SAASsG,MAAM,GAC3E,OAAO,2BAAKD,GAAZ,kBAAkBC,EAAMV,EAAYe,EAAY,IAAI/E,SAASE,QAAQ6E,EAAY,KAAO,EAAI,MAEjG,MAGP,CAAC5B,IAEC6C,EAAK1B,OAAOC,KAAKwB,GAASvB,QAC5B,SAACC,EAAKC,GAAN,mBAAC,eAAmBD,GAApB,kBAA0BC,GAAOqB,EAAQrB,GAAOf,MAChD,IAGEsC,EAAY9D,mBACd,kBAAM+D,YAAYpC,EAAqBZ,EAAQW,KAE/C,CAACC,EAAqBD,EAAWX,EAAO5G,aAGtC6J,EAAYC,YAASnD,EAAUgD,GAC/BI,EAAS/B,OAAOC,KAAK4B,GAAqD3B,QAC5E,SAACC,EAAKC,GAAN,mBAAC,eACMD,GADP,kBAEKC,EAAMyB,EAAUzB,GAAKtC,KAAI,SAAAkE,GAAI,OAAIC,EAAUD,EAAMR,EAAIE,UAE1D,IAGJ,OACI,oBACIQ,GAAG,OACHC,OAAK,mBACA,iBAA0BlD,GAD1B,0BAEU,uEAFV,GAFT,UAOI,cAACmD,EAAD,CAAML,MAAOA,IACb,cAAC,EAAD,CAAcP,GAAIA,EAAIE,GAAIA,EAAIC,UAAWA,IACzC,mBACIO,GAAG,YACHC,MAAK,eACA,gBACG5C,IAAc8B,IAAetF,MAA7B,UAAwCqF,EAAO,GAAK,GAApD,gBAAgEA,EAAO,GAAK,GAA5E,OAJZ,SAOI,cAAC,EAAD,CACI5J,KACI6K,MAAM,GAAG/F,OAAO,CAAC,0BAA2B,uBAAwBpB,GAExE7D,SAAU,UASxB+K,EAAOpE,IAAM/G,MACf,SAACC,GAAD,OACI,oBAAGE,KAAK,OAAO8G,YAAa,EAA5B,UACI,mBAAG1B,OAAO,OAAO8F,gBAAiB,EAAlC,SACKpL,EAAM6K,MAAMQ,KAAKzE,KAAI,SAAC0E,EAAMlK,GAAP,OAClB,sBAAcmK,EAAGD,GAANlK,QAGnB,mBAAGkE,OAAO,0BAAV,SACKtF,EAAM6K,MAAMW,KAAK5E,KAAI,SAAC0E,EAAMlK,GAAP,OAClB,sBAAcmK,EAAGD,GAANlK,cAK3B,SAACR,EAAWC,GAAZ,OAA0BkJ,KAAKC,UAAUpJ,EAAUiK,SAAWd,KAAKC,UAAUnJ,EAAUgK,UAGrFE,EAAY,SAACU,EAAkBC,EAAqCC,GACtE,IAAIC,EACAN,EAAO,GAsBX,OApBAG,EAAOvK,SAAQ,SAAAwC,GACX,IAAIN,EAAIsI,EAAOhI,GACXjB,EAAIkJ,EAAOjI,GACf,IAAKkI,GAAmB,IAAVA,EAGV,OAFAA,EAAQnJ,OACR6I,EAAK/J,KAAL,YAAe6B,EAAf,YAAoBX,IAGd,IAANA,GACIA,EAAImJ,GAAON,EAAK/J,KAAL,YAAe6B,EAAI,IAAM,uBAAzB,YAAsDX,IACjEA,EAAImJ,GAAON,EAAK/J,KAAL,YAAe6B,EAAI,IAAM,sBAAzB,YAAqDX,MAEhEA,EAAImJ,GAAON,EAAK/J,KAAL,YAAekB,EAAI,IAAM,uBAAzB,YAAsDW,IACjEX,EAAImJ,GAAON,EAAK/J,KAAL,YAAekB,EAAI,IAAM,sBAAzB,YAAqDW,KAExEkI,EAAK/J,KAAL,YAAe6B,IACfwI,EAAQnJ,KAIL6I,EAAKO,KAAK,KAAK9I,QAAQ,kBAAmB,UAS/C+I,EAAe,SAAC9L,GAClB,IAAQsK,EAAsBtK,EAAtBsK,GAAIE,EAAkBxK,EAAlBwK,GAAIC,EAAczK,EAAdyK,UAEVjC,EAAc3E,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMM,YAExD,OACI,mBAAG2G,GAAG,YAAN,SACKlC,OAAOC,KAAKP,GACRgB,QAAO,SAAA9F,GAAK,OAAK,CAAC,YAAa,WAAWd,SAASc,MACnDkD,KAAI,SAAAlD,GAAK,OACN,mBAEIuH,MAAO,CACHnI,UAAU,aAAD,OAAewH,EAAG5G,GAAlB,cAA8B8G,EAAG9G,GAAjC,QAHjB,SAMI,cAAC,EAAD,CAAcA,MAAOA,EAAOvD,SAAUsK,EAAU/G,GAAQC,KAAM6G,EAAG9G,MAL5DA,S,4BCtMvBqI,GAFSC,UAvCM,WACjB,IAAMnE,EAAYhE,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAM+D,YAChDO,EAAYxE,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMsE,aAChD4D,EAAYpI,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMmI,WAChDC,EAAgBtI,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMqI,mBACpDC,EAAQxI,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMuI,cAC5ChE,EAAsBzE,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMwE,mBAC1DgE,EAAa1I,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMM,SAASiE,MAEhE,OACI,qCACI,cAACyD,EAAD,IAEA,cAAC,IAAD,CACIS,QAASL,EACTM,YAAaN,IAAkBO,IAAeC,QAC9CC,UAAWT,IAAkBO,IAAeC,SAAWV,IAGzD5D,IAAc8B,IAAevF,MAAQ2H,EAAWhI,QAAQ3B,SAAS,cAClEyF,IAAc8B,IAAetF,OAAS0H,EAAW/H,SAAS5B,SAAS,WAChE,cAACiK,EAAD,IAEA,qCACI,cAAC,EAAD,IACA,cAAC,EAAD,IACCR,EAAMzF,KAAI,SAACkG,EAAM1L,GAAP,OACP,cAAC2L,EAAD,CAAiBD,KAAMA,GAAT1L,SAKzB+K,IAAkBO,IAAeC,SAC9B,sBAAMK,GAAInF,EAAUuC,IAAWC,SAAUvH,UAAU,kBAAkBkE,YAAa,EAAG1B,OAAO,cAQ1FvF,gBAAK,kBACnB,iCACI,sBACIiL,GAAG,MACHnI,UAAU,UACV0I,EAAE,4FAEN,sBACIP,GAAG,WACH1F,OAAO,OACPpF,KAAK,OACL8G,YAAa,EACbuE,EAAE,4FAEN,sBAAMP,GAAG,kBAAkBO,EAAE,kEAAkErL,KAAK,UAEpG,sBAAM8K,GAAG,UAAUO,EAAE,aAAa0B,cAAc,WAChD,sBAAMjC,GAAG,SAAS5H,GAAI,KAAM8J,OAAQ,GAAIrL,MAAO,GAAIsL,GAAI,aAIzDC,EAAqB,WAAO,IAAD,EACrB1F,EAAW7D,aAAe,SAAAC,GAAK,OAAIA,EAAM0D,UAAzCE,OACR,EAKI7D,aAAe,SAAAC,GAAK,OAAIA,EAAMC,SAJ9BsE,EADJ,EACIA,UACgBgF,EAFpB,EAEIC,eACgBC,EAHpB,EAGIC,eACiBlF,EAJrB,EAIIC,gBAGEkF,EAAa9G,mBACf,8BACO,IAAI+G,IACHhG,EACKsB,QACG,SAACC,EAAKC,GAAN,OACIA,EAAItG,SAAS0F,GACPW,EAAI7D,OACA8D,EACKM,QAAO,SAAA9F,GAAK,OAAK,CAAC,YAAa,WAAWd,SAASc,MACnDhD,MAAM2H,IAAc8B,IAAevF,KAAO,GAAK,GAAG,IAE3DqE,IACV,IAEHO,QAAO,SAAAwB,GAAE,OAAIA,IAAO1C,SAIjC,CAACA,EAAqBD,EAAWX,EAAO5G,aAGtC6M,EAAiC,CACnC1N,WAAYoI,IAAc8B,IAAevF,KAAO,QAAU,MAC1D9B,UAAU,aAAD,OAAeuF,IAAc8B,IAAevF,KAAO,IAAM,GAAzD,QACTgJ,QAASH,GAGb,OACI,oBACIzC,GAAG,eACHC,OAAK,mBAAK,iBAA0BoC,GAA/B,cAAqD,iBAA0BE,GAA/E,GAFT,UAII,qBACIhN,UAAU,mBACV0K,MAAK,eAAK,WAAoB5C,IAAc8B,IAAevF,KAAO,OAAS,YAGxD,IAAtB6I,EAAWzK,OACR,cAAC,EAAD,eAAiC2K,IAEjC,cAAC,EAAD,eAAkCA,QAU5CE,EAA8B,SAAC7N,GACjC,IAAQ4N,EAAuB5N,EAAvB4N,QAAY1G,EAApB,YAA+BlH,EAA/B,GACMwI,EAAc3E,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMM,YACxD,OACI,8CAAO6C,GAAP,cACI,sBAAMrE,UAAU,eAAepB,SAAU,GAAzC,SACKmM,EAAQhH,KAAI,SAAAlD,GAAK,OAAI8E,EAAY9E,GAAOjD,KAAK,MAAIoL,KAAK,KAAO,iBAElE,sBAAMhJ,UAAU,eAAepB,SAAU,GAAIT,GAAI,GAAjD,SACK,WAAa4M,EAAQhH,KAAI,SAAAlD,GAAK,OAAI8E,EAAY9E,GAAOjD,KAAK,GAAGsC,QAAQ,KAAM,QAAM8I,KAAK,YAMjGiC,EAA+B,SAAC9N,GAClC,IAAQ4N,EAAuB5N,EAAvB4N,QAAY1G,EAApB,YAA+BlH,EAA/B,GAEMqI,EAAYxE,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMsE,aAChDG,EAAc3E,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMM,YAElD0J,EAAaH,EAAQhH,KAAI,SAAAlD,GAAK,OAAI8E,EAAY9E,GAAOjD,KAAK,GAAGuC,UAC7DgL,EAAgB/I,KAAKgJ,IAAL,MAAAhJ,KAAI,YAAQ8I,IAC5BG,EACFF,EAAgB,GAAKD,EAAW,KAAOA,EAAW,GAC5C9I,KAAKkJ,IAAIJ,EAAW,GAAKA,EAAW,KAAOC,EAAgB,GAC3D,EAEV,OACI,8CAAO9G,GAAP,cACK0G,EAAQhH,KAAI,SAACoE,EAAI5J,GAAL,OACT,eAAC,IAAMgN,SAAP,WACI,sBACIvL,UAAU,eACVpB,SAAU,GACV2B,EAAGiF,IAAc8B,IAAevF,KAAO,GAAK,GAC5CnC,EAAS,GAAKrB,EAAV,GACJiN,cAAeN,EAAW3M,GAAK2M,EAAW,EAAI3M,GAAK,MAApC,UAA+C8M,EAA/C,MALnB,SAOK1F,EAAYwC,GAAIvK,KAAK,KAE1B,sBACIoC,UAAU,eACVpB,SAAU,KACV2B,EAAGiF,IAAc8B,IAAevF,KAAO,GAAK,GAC5CnC,EAAQ,GAAKrB,EAAT,EAJR,SAMK,WAAaoH,EAAYwC,GAAIvK,KAAK,GAAGsC,QAAQ,KAAM,SAhBvCiI,MAoBzB,sBACInI,UAAU,eACVpB,SAAU,GACV2B,EAAGiF,IAAc8B,IAAevF,KAAO,IAAMK,KAAKqJ,IAAL,MAAArJ,KAAI,YAAQ8I,IAAc,GAAK,EAC5EtL,EAAG,EAJP,+BAYNoK,EAAe/F,IAAM/G,MAAK,kBAC5B,oBAAGiL,GAAG,cAAc/K,WAAW,SAA/B,UACI,sBAAM4C,UAAU,eAAepB,SAAU,GAAzC,kCAGA,sBAAMT,GAAI,GAAI6B,UAAU,eAAepB,SAAU,GAAjD,sBAGA,oBAAGuF,YAAa,EAAG1B,OAAO,OAA1B,UACI,sBAAMiG,EAAE,qBACR,sBAAMA,EAAE,4BAKdwB,EAAUjG,IAAM/G,MAClB,SAACC,GAA2B,IAAD,EACjBuO,EAAazH,IAAMnF,OAA2B,MACpD,EAAwBmF,IAAMlF,SAAS,CAAEC,MAAO,EAAGqL,OAAQ,EAAGzK,EAAG,IAAjE,mBAAOY,EAAP,KAAaC,EAAb,KAOA,OANAwD,IAAM9E,WACF,kBAAMsB,EAAQiL,EAAWtM,QAASC,aAElC,CAAClC,EAAM8M,KAAK,GAAI9M,EAAM8M,KAAK,KAI3B,oBACIjK,UAAU,WACVoI,OAAK,mBAAK,iBAA0BjL,EAAM8M,KAAK,IAA1C,cAA+C,iBAA0B9M,EAAM8M,KAAK,IAApF,GAFT,UAIK9M,EAAM8M,KAAK,IACR,sBACII,OAAQ7J,EAAK6J,OAAS,EACtBrL,MAAOwB,EAAKxB,MAAQ,EACpBuB,GAAI,EACJX,EAAGY,EAAKZ,EAAI,EACZvC,KAAK,OACLoF,OAAO,QACP0B,YAAa,KAGrB,oBAAGxE,IAAK+L,EAAR,UACI,mBAAG9M,SAAU,GAAI4M,cAAe,IAAhC,SACKrO,EAAM8M,KAAK,GAAG/H,MAAM,MAAM6B,KAAI,SAACC,EAAKzF,GAAN,OAC3B,sBAAcyB,UAAU,eAAeJ,EAAO,GAAJrB,EAA1C,SACKyF,GADMzF,QAMnB,mBACIK,SAAU,GACV4M,cAAe,IACfvL,UAAS,sBAAiB,GAAK9C,EAAM8M,KAAK,GAAG/H,MAAM,MAAM/B,OAAhD,KAHb,SAKKhD,EAAM8M,KAAK,GAAG/H,MAAM,MAAM6B,KAAI,SAACC,EAAKzF,GAAN,aAC3B,sBAEIyB,UAAU,eACVJ,EAAO,GAAJrB,EACHoN,WACIpN,IAAK,UAAApB,EAAM8M,KAAK,GAAG7L,MAAM,cAApB,eAA4B+B,SAAU,GACrCK,EAAKxB,MACLa,UAAUC,UAAUC,SAAS,YAC5B,EACD,EAEV6L,aAAa,UAXjB,SAaK5H,GAZIzF,iBAoBjC,SAACR,EAAWC,GAAZ,OAA0BD,EAAUkM,KAAKhM,aAAeD,EAAUiM,KAAKhM,e,gCC3Q5D,SAAS4N,EAAyBC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IACIE,EAAKzN,EADL0N,ECHS,SAAuCH,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKzN,EAFL0N,EAAS,GACTC,EAAajG,OAAOC,KAAK4F,GAG7B,IAAKvN,EAAI,EAAGA,EAAI2N,EAAW/L,OAAQ5B,IACjCyN,EAAME,EAAW3N,GACbwN,EAASlK,QAAQmK,IAAQ,IAC7BC,EAAOD,GAAOF,EAAOE,IAGvB,OAAOC,EDTM,CAA6BH,EAAQC,GAGlD,GAAI9F,OAAOkG,sBAAuB,CAChC,IAAIC,EAAmBnG,OAAOkG,sBAAsBL,GAEpD,IAAKvN,EAAI,EAAGA,EAAI6N,EAAiBjM,OAAQ5B,IACvCyN,EAAMI,EAAiB7N,GACnBwN,EAASlK,QAAQmK,IAAQ,GACxB/F,OAAOoG,UAAUC,qBAAqBC,KAAKT,EAAQE,KACxDC,EAAOD,GAAOF,EAAOE,IAIzB,OAAOC,E,mEEfT,kCAGO,IAAMO,EAAe,SAAfA,EAAgB3L,EAAe4D,GACxC,GACI,CAAC,YAAa,WAAW1E,SAASc,IAClC4D,EAAQ5D,GAAOa,QAAQvB,OAAS,GAChCsE,EAAQ5D,GAAOc,SAASxB,OAAS,EAEjC,OAAO,EAEX,IAAIsM,EAAUhI,EAAQ5D,GAAOa,QAAQ,GACrC,OAAI+K,EAEyC,IAArChI,EAAQgI,GAAS9K,SAASxB,OAEnBqM,EAAaC,EAAShI,GAGuB,IAA7CA,EAAQgI,GAAS9K,SAASE,QAAQhB,GAAe,GAAK,EAI1D,I,qTChBFgF,EAAgB,SACzBpB,EACAiI,EACAC,GAEA,OAAO1G,OAAOC,KAAKzB,GAAS0B,QACxB,SAACC,EAAKC,GAAN,mBAAC,eACMD,GADP,kBAEKC,EAAM5B,EAAQ4B,GAAK1E,SAASwE,QACzB,SAACyG,EAAGC,GAAJ,mBAAC,eAAeD,GAAhB,kBAAoBC,EAAI,EAAIH,EAAMjI,EAASoI,GAAKF,EAAOlI,EAAS4B,OAChE,QAGR,KAUKE,EAAqB,SAArBA,EAAsBuG,EAAcC,EAAYnH,GACzD,GAAIkH,IAASC,EACT,MAAO,CAAEtG,IAAK,EAAGD,MAAO,CAACsG,IAE7B,IAAIE,EAAuB,GACvBC,EAA4B,GAChChH,OAAOC,KAAKN,EAAOkH,IAAOzO,SAAQ,SAAA6O,GAC9B,IAAIC,EAAK5G,EAAmB2G,EAAOH,EAAInH,GACnCuH,EAAG1G,IAAM,IACbuG,EAAWtO,KAAKkH,EAAOkH,GAAMI,GAASC,EAAG1G,KACzC0G,EAAG3G,MAAM4G,QAAQN,GACjBG,EAAcvO,KAAKyO,EAAG3G,WAE1B,IAAI6G,EAAYjL,KAAKqJ,IAAL,MAAArJ,KAAY4K,GAC5B,MAAO,CACHvG,IAAK4G,EACL7G,MAAOyG,EAAcD,EAAWnL,QAAQwL,MAInCC,EAAe,SAACzM,EAAe+E,EAA0ChB,GAClF,IAAI0B,EAAeC,EAAmB,YAAa,UAAWX,GAC9D,GAAIU,EAAaE,MAAMzG,SAASc,GAC5B,OAAO0F,EAAmBD,EAAaE,MAAM,GAAI3F,EAAO+E,GAAQa,IAMhE,IAHA,IAAIC,EAAc9B,EAAS+B,QAAO,SAAA7E,GAAM,OAAIA,EAAO/B,SAASc,MAAQ,GAEhE+F,EAAa/F,GACTyF,EAAaE,MAAMzG,SAAS6G,IAChCA,EAAaF,EAAYA,EAAY7E,QAAQ+E,GAAc,GAG/D,IADA,IAAIC,EAAWhG,GACPyF,EAAaE,MAAMzG,SAAS8G,IAChCA,EAAWH,EAAYA,EAAY7E,QAAQgF,GAAY,GAG3D,IAAIC,EAA6B,cAAfF,EAIdI,EAAO,GAkBX,OAjBKF,GAJ2B,YAAbD,EASRC,GACPE,EAAK,GAAK,EACVA,EAAK,GAAKT,EAAmBD,EAAaE,MAAM,GAAIK,EAAUjB,GAAQa,IACtEO,EAAK,GAAKT,EAAmBG,EAAY,GAAI7F,EAAO+E,GAAQa,IAC5DO,EAAK,GAAKT,EAAmB1F,EAAOgG,EAAUjB,GAAQa,MAGtDO,EAAK,GAAKT,EAAmBD,EAAaE,MAAM,GAAII,EAAYhB,GAAQa,IACxEO,EAAK,GAAKT,EAAmBK,EAAYN,EAAaE,MAAM3I,OAAO,GAAG,GAAI+H,GAAQa,IAClFO,EAAK,GAAKT,EAAmBK,EAAY/F,EAAO+E,GAAQa,IACxDO,EAAK,GAAKT,EAAmB1F,EAAO6F,EAAY7I,OAAO,GAAG,GAAI+H,GAAQa,MAdtEO,EAAK,GAAKT,EAAmBD,EAAaE,MAAM,GAAII,EAAYhB,GAAQa,IACxEO,EAAK,GAAKT,EAAmBK,EAAYC,EAAUjB,GAAQa,IAC3DO,EAAK,GAAKT,EAAmBK,EAAY/F,EAAO+E,GAAQa,IACxDO,EAAK,GAAKT,EAAmB1F,EAAOgG,EAAUjB,GAAQa,KAanDO,EAAK,GAAMA,EAAK,GAAKA,EAAK,IAAOA,EAAK,GAAKA,EAAK,KAiClDa,EAAc,SACvB0F,EACA1I,EACAW,GACmC,IAAD,EAElC,OADAO,QAAQC,IAAI,8BACL,YAAI,IAAI6E,KAAK,MAAgBtI,OAAjB,oBAA2BsC,MAAUsB,QACpD,SAACC,EAAKC,GAAN,mBAAC,eACMD,GADP,kBAEKC,EACGA,IAAQkH,EACF,GAEI/H,IAAc8B,IAAetF,MAtBlC,SAACwL,EAAgBC,EAAgB5I,GAAwB,IAAD,gBACvDA,GADuD,IACzE,2BAA0B,CAAC,IAAlB6I,EAAiB,QAClBC,EAAOD,EAAM7L,QAAQ2L,GACrBI,EAAOF,EAAM7L,QAAQ4L,GACzB,IAAc,IAAVE,GAAeA,EAAOC,EAAM,OAAO,GAJ8B,8BAMzE,OAAO,EAiBqBC,CAAaN,EAAWlH,EAAKxB,GAhCtC,SAAC2I,EAAgBC,EAAgB5I,GAAwB,IAAD,gBACzDA,GADyD,IAC3E,2BAA0B,CAAC,IAAlB6I,EAAiB,QAClBC,EAAOD,EAAM7L,QAAQ2L,GACrBI,EAAOF,EAAM7L,QAAQ4L,GACzB,IAAc,IAAVG,GAAeA,EAAOD,EAAM,OAAO,GAJgC,8BAM3E,OAAO,EA2BqBG,CAAeP,EAAWlH,EAAKxB,IAEzC,GACC,MAEf,KAIKkJ,EAAb,WAOI,WAAYC,GAA8C,IAAD,gCANzDtG,QAAU,GAM+C,KALzD5B,QAAU,GAK+C,KAJzDmI,SAAW,GAI8C,KAHzDxJ,QAAU,GAG+C,KAFzD6B,aAAe,GAE0C,KAQ/C4H,eAAiB,SAACrN,GACxB,OAAO,GAT8C,KAe/CsN,gBAAkB,SAACtN,GACzB,OAAO,GAhB8C,KAsBlDuN,WAAa,SAACZ,EAAgBC,GACjC,OAAK,EAAKhJ,QAAQ+I,GAAQ7L,SAAS5B,SAAS0N,GAGrC,EAAI,EAAKU,gBAAgBX,GAAU,EAAKU,eAAeT,IAFlDY,KAxByC,KA6EjDC,eAAiB,SAAChJ,GACtB,IAEIiJ,EAFK,GACEC,KACYpM,KAAKqM,KAAK,GAC7BC,EAAOpJ,EAAgB,EAAIiJ,EAE/B,MAAO,CAAEC,GALA,GAKIG,KAJFH,KAIQD,OAAMK,KADdF,EAAOtM,KAAKqM,KAAK,GACGC,SAnFsB,KAyFjDG,WAAa,SAACvJ,GAClB,MAAqC,EAAKgJ,eAAehJ,GAAnDkJ,EAAN,EAAMA,GAAIG,EAAV,EAAUA,KAAMJ,EAAhB,EAAgBA,KAAMK,EAAtB,EAAsBA,KAAMF,EAA5B,EAA4BA,KAC5B,MAAM,KAAN,OAAYF,EAAZ,YAAkBA,EAAlB,kBAA8BG,EAA9B,YAAsCJ,EAAtC,cAAgDK,EAAhD,YAAwDF,EAAxD,cAAkEF,EAAlE,YAAwEA,EAAxE,kBAAoFG,EAApF,YAA4FJ,IA3FvC,KAiGjDO,WAAa,SAACxJ,GAClB,MAAqC,EAAKgJ,eAAehJ,GAAnDkJ,EAAN,EAAMA,GAAIG,EAAV,EAAUA,KAAMJ,EAAhB,EAAgBA,KAAMK,EAAtB,EAAsBA,KAAMF,EAA5B,EAA4BA,KAC5B,MAAM,KAAN,OAAYF,EAAZ,YAAkBA,EAAlB,kBAA8BG,EAA9B,aAAuCJ,EAAvC,cAAiDK,EAAjD,aAA0DF,EAA1D,cAAoEF,EAApE,YAA0EA,EAA1E,kBAAsFG,EAAtF,aAA+FJ,IAlG/FQ,KAAKtK,QAAUuJ,EAAKvJ,QACpBsK,KAAKzI,aAAe0H,EAAK1H,aATjC,6CAoCI,SAAoBzF,EAAe+D,GAC/B,GAAI/D,KAASkO,KAAKrH,QAAS,OAAOqH,KAAKrH,QAAQ7G,GAE/C,GACI,CAAC,YAAa,WAAWd,SAASc,IAClCkO,KAAKtK,QAAQ5D,GAAOa,QAAQvB,OAAS,GACrC4O,KAAKtK,QAAQ5D,GAAOc,SAASxB,OAAS,EAGtC,OADA4O,KAAKrH,QAAQ7G,GAAS,EACf,EAEX,IAAI4L,EAAUsC,KAAKtK,QAAQ5D,GAAOa,QAAQ,GAC1C,GAAI+K,EAAS,CAET,GAA8C,IAA1CsC,KAAKtK,QAAQgI,GAAS9K,SAASxB,OAAc,CAE7C,IAAI6O,EAAMD,KAAKE,UAAUxC,GAEzB,OADAsC,KAAKrH,QAAQ7G,GAASmO,EACfA,EAGP,IAAIA,EAAgE,IAAlDD,KAAKtK,QAAQgI,GAAS9K,SAASE,QAAQhB,GAAe,GAAK,EAE7E,OADAkO,KAAKrH,QAAQ7G,GAASmO,EACfA,EAKX,OADAD,KAAKrH,QAAQ7G,GAAS,EACf,IAhEnB,uBAgHI,SACI+H,EACAvB,EACAzC,EACAiE,EACAC,EACAxD,EACA6H,EACA+B,GACD,IAAD,OACE,cAA6B,GAA7B,GAAKC,EAAL,KAAapG,EAAb,KAAoBqG,EAApB,KACI3G,EAAO,GAEX,EAAqBsG,KAAKT,eAAehJ,GACrC+J,EADJ,EAAMV,KAAN,EAAYC,KACc,EACtBU,GAAcjI,EAAO,GAAKA,EAAO,IAAM8F,EAAG1G,IAAO,EACjD8I,IAAclI,EAAO,GAAKA,EAAO,IAAM8F,EAAG1G,IAAM,EAAI4I,GAAS,EAiDjE,OAhDIE,EAAYD,EAAY,GACxBvJ,QAAQyJ,KAAR,+BAAqCD,EAAYD,IAGrD1G,EAAOvK,SAAQ,SAAAwC,GACX,IAAIN,EAAIsI,EAAOhI,GACXjB,EAAIkJ,EAAOjI,GACf,IAAKkI,GAAmB,IAAVA,EAmBV,OAlBCoG,EAAyBtO,EAAjBuO,EAAwB7O,EAAjBwI,EAAoBnJ,OACd,IAAlBgJ,EAAOzI,OACPsI,EAAK/J,KAAL,YAAe6B,EAAf,YAAoBX,IACZgF,EAAS,GAAG7E,SAASc,GAGtB+D,EAAS,GAAG7E,SAAS6I,EAAO,IAEnCH,EAAK/J,KAAL,YAAe6B,EAAf,YAAoBX,KAGhBiJ,EAAOD,EAAO,IAAM,GACpBH,EAAK/J,KAAL,YAAe6B,EAAf,YAAoBX,EAAIsP,IAExBpG,EAAOF,EAAO,IAAM,GACpBH,EAAK/J,KAAL,YAAe6B,EAAf,YAAoBX,EAAIsP,KAV5BzG,EAAK/J,KAAL,YAAe6B,EAAf,YAAoBX,KAexBA,EAAImJ,GACJN,EAAK/J,KACD,YAAM,IAANkB,EACWW,EAAI6O,EAAQE,EAAY,EAAKpB,eAAerN,GAAS0O,EAAoB,EAARF,EACjEC,EAAY,EAAKnB,gBAAgBgB,GAAUI,IAE1D9G,EAAK/J,KAAK,EAAKmQ,WAAWvJ,KACnB1F,EAAImJ,IACXN,EAAK/J,KACD,YAAM,IAANkB,EACWW,EAAI6O,EAAQE,EAAY,EAAKpB,eAAerN,GAAS0O,EAAoB,EAARF,EACjEC,EAAY,EAAKnB,gBAAgBgB,GAAUI,IAE1D9G,EAAK/J,KAAK,EAAKoQ,WAAWxJ,KAE9BmD,EAAK/J,KAAL,YAAe6B,IACd4O,EAAyBtO,EAAjBuO,EAAwB7O,EAAjBwI,EAAoBnJ,KAIjC6I,EAAKO,KAAK,KAAK9I,QAAQ,kBAAmB,YAjLzD,yBAoEI,SAAkBuE,EAAsBG,GACpCmB,QAAQC,IAAI,sBACZ,IAAIyJ,EAAW,IAAIV,KAAK,CAAEtK,YAQ1B,OANAwB,OAAOC,KAAKzB,GAASpG,SAAQ,SAAAwC,GACrB,CAAC,YAAa,WAAWd,SAASc,IAClCA,KAAS4O,EAAS/H,SACtB+H,EAASR,UAAUpO,EAAO+D,MAGvB6K,EAAS/H,UA9ExB,sBAoLI,SACI9C,EACAgD,EACAnD,EACA4C,EACAI,EACAE,EACArC,EACA6H,GAED,IAAD,OADE+B,EACF,uDADc,KAERpH,EAAY,CAAEa,KAAM,GAAgBH,KAAM,IAsD9C,OArDA5D,EAASvG,SAAQ,SAACyD,EAAQvD,GAEtB,IAAImR,GADJ5N,EAASA,EAAO6E,QAAO,SAAA9F,GAAK,OAAK,CAAC,YAAa,WAAWd,SAASc,OACzC8F,QAAO,SAAA9F,GAAK,OAAI+G,EAAU/G,IAAU,KAC1D8O,EAAe7N,EAAO6E,QAAO,SAAA9F,GAAK,OAAI+G,EAAU/G,IAAU,KAElC,IAAxB6O,EAAavP,SACbwP,EAAe7N,GAG6D,IAA5E4N,EAAa/I,QAAO,SAAA9F,GAAK,OAAqC,IAAjC8O,EAAa9N,QAAQhB,MAAeV,QAAgBuP,EAAavP,SAE1FwP,EAAa,KAAO7N,EAAO,GAE3B6N,EAAajR,KAAKgR,EAAa,IAE/BA,EAAa,KAAO5N,EAAO,IAC3B4N,EAAaA,EAAavP,OAAS,KAAO2B,EAAOA,EAAO3B,OAAS,IACjEwP,EAAaxP,QAEbwP,EAAe7N,EACf4N,EAAe,IAGfC,EAAavC,QAAQsC,EAAaA,EAAavP,OAAS,KAIhE2H,EAAUa,KAAKjK,KACX,IAAI,EAAK,CAAE+F,UAAS6B,aAAc6G,IAAMjF,UACpCwH,EACArI,EACAzC,EACA6C,EACAE,EACArC,EACA6H,EACA+B,IAGRpH,EAAUU,KAAK9J,KACX,IAAI,EAAK,CAAE+F,UAAS6B,aAAc6G,IAAMjF,UACpCyH,EACAtI,EACAzC,EACA6C,EACAE,EACArC,EACA6H,EACA+B,OAKLpH,MArPf,KAyPaC,EAAW,SAACnD,EAAsBgD,GAC3C,IAAIE,EAAY,CAAEa,KAAM,GAAkBH,KAAM,IAgChD,OA/BA5D,EAASvG,SAAQ,SAAAyD,GAEb,IAAI4N,GADJ5N,EAASA,EAAO6E,QAAO,SAAA9F,GAAK,OAAK,CAAC,YAAa,WAAWd,SAASc,OACzC8F,QAAO,SAAA9F,GAAK,OAAI+G,EAAU/G,IAAU,KAC1D8O,EAAe7N,EAAO6E,QAAO,SAAA9F,GAAK,OAAI+G,EAAU/G,IAAU,KAElC,IAAxB6O,EAAavP,SACbwP,EAAe7N,GAG6D,IAA5E4N,EAAa/I,QAAO,SAAA9F,GAAK,OAAqC,IAAjC8O,EAAa9N,QAAQhB,MAAeV,QAAgBuP,EAAavP,SAE1FwP,EAAa,KAAO7N,EAAO,GAE3B6N,EAAajR,KAAKgR,EAAa,IAE/BA,EAAa,KAAO5N,EAAO,IAC3B4N,EAAaA,EAAavP,OAAS,KAAO2B,EAAOA,EAAO3B,OAAS,IACjEwP,EAAaxP,QAEbwP,EAAe7N,EACf4N,EAAe,IAGfC,EAAavC,QAAQsC,EAAaA,EAAavP,OAAS,KAIhE2H,EAAUa,KAAKjK,KAAKgR,GACpB5H,EAAUU,KAAK9J,KAAKiR,MAGjB7H,I,gFCnWI8H,IAlEI,SAACzS,GAChB,IAAM0S,EAAe,SAAAlG,GACjB,OAAQA,GACJ,IAAK,OACL,IAAK,UACL,IAAK,MACL,IAAK,OACD,OAAO,GACX,IAAK,MACL,IAAK,MACD,OAAO,GACX,IAAK,MACL,IAAK,MACL,IAAK,SACD,OAAO,GACX,QACI,OAAO,GAfE,CAiBlBxM,EAAMwM,SAEHmG,EAAiB7L,IAAMH,SAAQ,WACjC,OAAQ3G,EAAMwM,SACV,IAAK,MACD,OAAO,wBAAQoG,IAAK,GAAIC,EAAG,GAAI3S,KAAK,QACxC,IAAK,OACL,IAAK,UACD,OAAO,yBAAS0S,IAAK,GAAIzF,GAAI,GAAI2F,GAAI,GAAI5S,KAAK,WAClD,IAAK,MACD,OAAO,sBAAMkD,GAAI,GAAIX,GAAI,GAAIyK,OAAQ,GAAIrL,MAAO,GAAI3B,KAAK,QAC7D,IAAK,MACD,OAAO,yBAAS0S,IAAK,GAAIzF,GAAI,GAAI2F,GAAI,GAAI5S,KAAK,UAClD,IAAK,SACD,OAAO,yBAAS0S,IAAK,GAAIzF,GAAI,GAAI2F,GAAI,GAAI5S,KAAK,WAClD,IAAK,MACD,OAAO,sBAAMkD,GAAI,GAAIX,GAAI,GAAIyK,OAAQ,GAAIrL,MAAO,GAAI3B,KAAK,WAC7D,IAAK,MACD,OAAO,sBAAMkD,GAAI,GAAIX,GAAI,GAAIyK,OAAQ,GAAIrL,MAAO,IAAK3B,KAAK,eAC9D,IAAK,OACD,OAAO,sBAAMkD,GAAI,GAAIX,GAAI,GAAIyK,OAAQ,GAAIrL,MAAO,GAAI3B,KAAK,WAC7D,QACI,OAAO,gCAEhB,CAACF,EAAMwM,UAIV,OACI,oBAAG1J,UAAS,sBAAmC,QAAlB9C,EAAMwM,SAHtB,GAGoD,EAArD,KAAZ,UACI,sBACIxB,GAAG,WACHC,MAAK,eACA,WADA,UACuByH,EADvB,SAIT,mBACIzH,MAAO,CACHnI,UAAW,mEAFnB,SAKK9C,EAAMyM,aAAekG,KAEL,IAApB3S,EAAM4M,WAAuB,cAACmG,EAAD,eAAS/S,QAOnD,IAAM+S,EAAMjM,IAAM/G,MACd,SAACC,GAAkB,IAAD,EAIRgT,EAAY,CAAC,OAAQ,UAAW,MAAO,QAAQpQ,SAAS5C,EAAMwM,SAC9DyG,EAAS,SAACzG,GACZ,OAAQA,GACJ,IAAK,MACL,IAAK,MACD,MAAO,OACX,IAAK,MACD,MAAO,OACX,IAAK,MACD,MAAO,OACX,IAAK,SACD,MAAO,OACX,QACI,MAAO,QAZJ,CAcZxM,EAAMwM,SAET,OACI,oBACIvM,WAAW,SACXC,KAAM8S,EAAY5S,IAAW8S,MAAQ,sBACrCjI,OAAK,mBACA,WAAoBgI,GADpB,0BAEU,qDAFV,cAGA,gBAAyB,yCAHzB,cAIA,gBAAyB,qDAJzB,GAHT,UAUI,sBAAM/F,OAAQ,GAAIrL,MAAO,GAAIsL,GAAI,EAAG/J,GAAI,GAAIlD,KAAM8S,EAAY,OAAS,4BACvE,sBAAMnQ,UAAU,eAAepB,SAAU,GAAIT,GAAI,GAAjD,SACKhB,EAAM4M,YAEX,sBAAM/J,UAAU,eAAepB,SAAU,GAAIT,GAAI,GAAjD,gCAGA,sBAAM6B,UAAU,eAAepB,SAAU,IAAKT,GAAI,GAAlD,+BAMZ,SAACJ,EAAWC,GAAZ,OAA0BD,EAAU4L,UAAY3L,EAAU2L,SAAW5L,EAAUgM,YAAc/L,EAAU+L,c,yGCvF5FuG,IAlCW,SAACnT,GACvB,IAAQuF,EAA+BvF,EAA/BuF,QAASC,EAAsBxF,EAAtBwF,OAAW0B,EAA5B,YAAuClH,EAAvC,GAEMoT,EAAqB,SAErBC,EAAYvM,IAAMnF,OAA8B,MACtD,EAAwBmF,IAAMlF,SAAS,CAAEC,MAAOuR,IAAhD,mBAAO/P,EAAP,KAAaC,EAAb,KACAwD,IAAM9E,WAAU,kBAAMsB,EAAQ+P,EAAUpR,QAASC,aAAY,CAACqD,IAE9D,IAAM+N,EAAejQ,EAAKxB,MAAQuR,EAAqBA,EAAqB/P,EAAKxB,MAAQ,EACnF0R,EAAiC,IAAnBhO,EAAQvC,OAAesQ,EAAe,EAE1D,OACI,2CAAGrT,WAAW,SAASwB,SAAU,MAAUyF,GAA3C,aACKJ,IAAMH,SACH,kBACI,qCACI,mBAAG7D,UAAS,kCAA6BwQ,EAA7B,KAAZ,SACI,sBAAM9Q,IAAK6Q,EAAWxQ,UAAU,eAAhC,SACK0C,MAGT,mBAAGzC,UAAS,iCAA4ByQ,EAA5B,KAAZ,SACI,sBAAM1Q,UAAU,eAAhB,SAAgC2C,WAK5C,CAACnC,EAAKxB,MAAO0D,EAASC","file":"static/js/railmapGZMTR.370b223f.chunk.js","sourcesContent":["import React, { memo, useEffect, useRef, useState } from 'react';\nimport { InterchangeInfo, MonoColour, Name } from '../../../constants/constants';\n\nexport default memo(\n    function LineBox(props: { info: InterchangeInfo; stnState: -1 | 0 | 1 }) {\n        return (\n            <g textAnchor=\"middle\" fill={props.stnState === -1 ? MonoColour.white : props.info[3]}>\n                <use xlinkHref=\"#intbox\" fill={props.stnState === -1 ? '#aaa' : props.info[2]} />\n                {props.info[4][0] === props.info[5][0] ? (\n                    <LineBoxNameSpan name={props.info.slice(-2) as Name} />\n                ) : (\n                    <LineBoxName name={props.info.slice(-2) as Name} />\n                )}\n            </g>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.info.toString() === nextProps.info.toString() && prevProps.stnState === nextProps.stnState\n);\n\nconst LineBoxName = memo(\n    (props: { name: Name }) => {\n        let nameZHEl = [] as JSX.Element[];\n        let dy = 0;\n        props.name[0].match(/\\d+|\\D+/g)?.forEach((t, i) => {\n            if (isNaN(Number(t))) {\n                // text\n                nameZHEl.push(\n                    <tspan key={i} dominantBaseline=\"hanging\" dy={1 - dy}>\n                        {t}\n                    </tspan>\n                );\n                dy += 1 - dy;\n            } else {\n                // number\n                nameZHEl.push(\n                    <tspan key={i} dominantBaseline=\"hanging\" fontSize={16} dy={-dy}>\n                        {t}\n                    </tspan>\n                );\n                dy = 0;\n            }\n        });\n\n        const nameZHGroupEl = useRef<SVGTextElement | null>(null);\n        const [zhBBox, setZhBBox] = useState({ width: 0 } as DOMRect);\n        useEffect(\n            () => setZhBBox(nameZHGroupEl.current!.getBBox()),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [props.name[0]]\n        );\n        const nameZHGroupScale = zhBBox.width > 43.5 ? 43.5 / zhBBox.width : 1;\n\n        const nameENEl = useRef<SVGTextElement | null>(null);\n        const [enBBox, setEnBBox] = useState({ width: 0 } as DOMRect);\n        useEffect(\n            () => setEnBBox(nameENEl.current!.getBBox()),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [props.name[1]]\n        );\n        const nameENScale = enBBox.width > 43.5 ? 43.5 / enBBox.width : 1;\n\n        return (\n            <>\n                <text\n                    ref={nameZHGroupEl}\n                    y={navigator.userAgent.includes('Firefox') ? -0.5 : 2}\n                    className=\"rmg-name__zh\"\n                    fontSize={12}\n                    transform={`scale(${nameZHGroupScale},1)`}\n                >\n                    {nameZHEl}\n                </text>\n                <text\n                    ref={nameENEl}\n                    y={19.5}\n                    fontSize={props.name[1].replace('\\\\', ' ').length > 10 ? 7 : 8}\n                    className=\"rmg-name__en\"\n                    transform={`scale(${nameENScale},1)`}\n                >\n                    {props.name[1]}\n                </text>\n            </>\n        );\n    },\n    (prevProps, nextProps) => prevProps.name.toString() === nextProps.name.toString()\n);\n\nconst LineBoxNameSpan = memo(\n    (props: { name: Name }) => {\n        let sharedText = '';\n        for (let idx in [...props.name[0]]) {\n            if (props.name[0][idx] === props.name[1][idx]) {\n                sharedText += props.name[0][idx];\n            } else {\n                break;\n            }\n        }\n\n        const nameEl = useRef<SVGTextElement | null>(null);\n        const [bBox, setBBox] = useState({ x: 0, width: 0 } as DOMRect);\n        useEffect(\n            () => setBBox(nameEl.current!.getBBox()),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [props.name.toString()]\n        );\n\n        const nameScale = bBox.width > 43.5 ? 43.5 / bBox.width : 1;\n\n        // unsymmetrical scaling, wrap with <g>\n        return (\n            <g transform={`scale(${nameScale},1)`}>\n                <g transform={`translate(${-bBox.x - bBox.width / 2},0)`}>\n                    <text ref={nameEl} className=\"rmg-name__zh\" fontSize={14} y={12} textAnchor=\"end\">\n                        {sharedText}\n                        <tspan className=\"rmg-name__zh\" fontSize={8} x={0} dy={-2} textAnchor=\"start\">\n                            {props.name[0].slice(sharedText.length)}\n                        </tspan>\n                        <tspan className=\"rmg-name__en\" fontSize={4} x={0} dy={6} textAnchor=\"start\">\n                            {props.name[1].slice(sharedText.length).trim()}\n                        </tspan>\n                    </text>\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.name.toString() === nextProps.name.toString()\n);\n","import React, { forwardRef, useEffect, useMemo, useRef, useState } from 'react';\nimport StationNumberText from '../../../station-num-gzmtr';\nimport LineBox from '../line-box-gzmtr';\nimport { InterchangeInfo, Name, Services } from '../../../../constants/constants';\nimport { useAppSelector } from '../../../../redux';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n    stnY: number;\n}\n\nconst StationGZMTR = (props: Props) => {\n    const { stnId, stnState, stnY } = props;\n\n    const theme = useAppSelector(store => store.param.theme);\n    const lineName = useAppSelector(store => store.param.line_name);\n    const lineNumber = useAppSelector(store => store.param.line_num);\n    const stnInfo = useAppSelector(store => store.param.stn_list[stnId]);\n\n    const isNameShift = stnInfo.parents.length === 2 || stnInfo.children.length === 2;\n    const tickRotation =\n        stnY > 0\n            ? 180\n            : stnInfo.parents.indexOf(stnInfo.branch.left[1] || '') === 1 ||\n              stnInfo.children.indexOf(stnInfo.branch.right[1] || '') === 1\n            ? 180\n            : 0;\n    const nameENLns = stnInfo.name[1].split('\\\\').length;\n    const nameDX = isNameShift\n        ? tickRotation === 180\n            ? 16 + (nameENLns - 1) * 12 * Math.cos(-45)\n            : -9\n        : tickRotation === 180\n        ? -6\n        : (25 + (nameENLns - 1) * 15) * Math.cos(-45);\n\n    return (\n        <>\n            <IntGroup\n                intInfos={\n                    isNameShift\n                        ? (\n                              [\n                                  [theme[0], theme[1], 'var(--rmg-theme-colour)', 'var(--rmg-theme-fg)', ...lineName],\n                              ] as any[] as InterchangeInfo[]\n                          ).concat(stnInfo.transfer.info[0])\n                        : stnInfo.transfer.info[0]\n                }\n                stnState={stnState}\n                tickRotation={tickRotation}\n            />\n            <g>\n                <use xlinkHref=\"#stn\" stroke={stnState === -1 ? '#aaa' : 'var(--rmg-theme-colour)'} />\n                <StationNumberText\n                    className={`Name ${stnState === -1 ? 'Pass' : 'Future'}`}\n                    lineNum={lineNumber}\n                    stnNum={stnInfo.num}\n                />\n            </g>\n            <g transform={`translate(${-nameDX},0)`}>\n                <StationNameGElement\n                    name={stnInfo.name}\n                    secondaryName={stnInfo.secondaryName}\n                    stnState={stnState}\n                    tickRotation={tickRotation}\n                    isExpress={stnInfo.services.includes(Services.express)}\n                />\n            </g>\n        </>\n    );\n};\n\nexport default StationGZMTR;\n\ninterface StationNameGElementProps {\n    name: Name;\n    secondaryName: false | Name;\n    stnState: -1 | 0 | 1;\n    tickRotation: 0 | 180;\n    isExpress: boolean;\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const nameDY = props.tickRotation === 180 ? 17.5 : -20 - props.name[1].split('\\\\').length * 14 * Math.cos(-45);\n\n    const stnNameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ width: 0 } as DOMRect);\n    useEffect(\n        () => setBBox(stnNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.name.toString()]\n    );\n\n    const secNameEl = useRef<SVGGElement | null>(null);\n    const [secNameBBox, setSecNameBBox] = useState({ x: 0, width: -20 } as SVGRect);\n    useEffect(\n        () => {\n            if (secNameEl.current) {\n                setSecNameBBox(secNameEl.current.getBBox());\n            } else {\n                setSecNameBBox(prevBBox => {\n                    const { x } = prevBBox;\n                    return { x, width: -20 } as SVGRect;\n                });\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.secondaryName.toString()]\n    );\n\n    return (\n        <g\n            textAnchor={props.tickRotation === 180 ? 'end' : 'start'}\n            className={`Name ${props.stnState === -1 ? 'Pass' : props.stnState === 0 ? 'CurrentGZ' : 'Future'}`}\n            transform={`translate(0,${nameDY})rotate(-45)`}\n        >\n            <StationName ref={stnNameEl} name={props.name} />\n            {props.secondaryName && (\n                <g\n                    transform={`translate(${\n                        (bBox.width + secNameBBox.width / 2 + 10) * (props.tickRotation === 180 ? -1 : 1)\n                    },${2 + 5 * (props.name[1].split('\\\\').length - 1)})`}\n                    className={`Name ${props.stnState === -1 ? 'Pass' : 'Future'}`}\n                >\n                    <g transform=\"translate(0,3)\" fontSize={18}>\n                        <text textAnchor=\"end\" x={secNameBBox.x - 3} className=\"rmg-name__zh\">\n                            {'('}\n                        </text>\n                        <text textAnchor=\"start\" x={secNameBBox.width + secNameBBox.x + 3} className=\"rmg-name__zh\">\n                            {')'}\n                        </text>\n                    </g>\n                    <StationSecondaryName ref={secNameEl} secName={props.secondaryName} />\n                </g>\n            )}\n            {props.isExpress && (\n                <ExpressTag\n                    fill={props.stnState === -1 ? '#aaa' : 'var(--rmg-theme-colour)'}\n                    transform={`translate(${\n                        (bBox.width + secNameBBox.width + 20 + 35) * (props.tickRotation === 180 ? -1 : 1)\n                    },${2 + 5 * (props.name[1].split('\\\\').length - 1)})`}\n                />\n            )}\n        </g>\n    );\n};\n\nconst StationName = forwardRef((props: { name: Name }, ref: React.Ref<SVGGElement>) =>\n    useMemo(\n        () => (\n            <g ref={ref}>\n                <text className=\"rmg-name__zh\" fontSize={18}>\n                    {props.name[0]}\n                </text>\n                <g fontSize={10.5}>\n                    {props.name[1].split('\\\\').map((txt, i) => (\n                        <text key={i} className=\"rmg-name__en\" dy={16 + i * 11}>\n                            {txt}\n                        </text>\n                    ))}\n                </g>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.name[0], props.name[1]]\n    )\n);\n\nconst StationSecondaryName = forwardRef((props: { secName: Name }, ref: React.Ref<SVGGElement>) =>\n    useMemo(\n        () => (\n            <g ref={ref} textAnchor=\"middle\">\n                <text className=\"rmg-name__zh\" fontSize={13}>\n                    {props.secName[0]}\n                </text>\n                <text dy={10} className=\"rmg-name__en\" fontSize={6.5}>\n                    {props.secName[1]}\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.secName.toString()]\n    )\n);\n\nconst ExpressTag = React.memo((props: React.SVGProps<SVGGElement>) => (\n    <g textAnchor=\"middle\" {...props}>\n        <text className=\"rmg-name__zh\" fontSize={13}>\n            快车停靠站\n        </text>\n        <text dy={10} className=\"rmg-name__en\" fontSize={6.5}>\n            Express Station\n        </text>\n    </g>\n));\n\ninterface IntGroupProps {\n    intInfos: InterchangeInfo[];\n    stnState: -1 | 0 | 1;\n    tickRotation: 0 | 180;\n}\n\nconst IntGroup = (props: IntGroupProps) => (\n    <>\n        <IntTicks strokeWidth={4} {...props} />\n        <IntBoxs transform={`translate(0,${props.tickRotation === 180 ? -47 : 23})`} {...props} />\n    </>\n);\n\nconst IntTicks = (props: IntGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, stnState, tickRotation, ...others } = props;\n\n    return (\n        <g {...others}>\n            {intInfos.map((info, i) => (\n                <use\n                    key={i}\n                    xlinkHref=\"#inttick\"\n                    stroke={stnState === -1 ? '#aaa' : info[2]}\n                    transform={`translate(${-2 * (intInfos.length - 1) + 4 * i},0)rotate(${\n                        tickRotation === 180 ? 180 : 0\n                    })`}\n                />\n            ))}\n        </g>\n    );\n};\n\nconst IntBoxs = (props: IntGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, tickRotation, stnState, ...other } = props;\n\n    return (\n        <g {...other}>\n            {intInfos.map((info, i) => (\n                <g key={i} transform={`translate(0,${i * 28 * (tickRotation === 180 ? -1 : 1)})`}>\n                    <LineBox info={info} stnState={stnState} />\n                </g>\n            ))}\n        </g>\n    );\n};\n","import React, { useMemo } from 'react';\nimport StationGZMTR from './station/station-gzmtr';\nimport LineBox from './line-box-gzmtr';\nimport { adjacencyList, criticalPathMethod, drawLine, getStnState } from '../methods/share';\nimport { CanvasType, InterchangeInfo, ShortDirection, StationDict } from '../../../constants/constants';\nimport { useAppSelector } from '../../../redux';\n\nconst wideFactor = (stnList: StationDict, stnId: string) =>\n    stnList[stnId].parents.length === 2 || stnList[stnId].children.length === 2 ? 0.25 : 0;\n\nconst getXShare = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]): number => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        if (branchOfStn.toString() === branches[0].toString()) {\n            // station on main line, expand to fit\n            let lens = [];\n            if (!leftOpenJaw && !rightOpenJaw) {\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n            } else if (leftOpenJaw) {\n                lens[0] = 0;\n                lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n                lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n            } else {\n                // right open jaw\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n            }\n            return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n        } else {\n            if (!leftOpenJaw && !rightOpenJaw) {\n                let lens = [];\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n                return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n            } else if (leftOpenJaw) {\n                return (\n                    criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len -\n                    criticalPathMethod(stnId, partSink, adjMat).len\n                );\n            } else {\n                // right open jaw\n                return (\n                    criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len +\n                    criticalPathMethod(partSource, stnId, adjMat).len\n                );\n            }\n        }\n    }\n};\n\nconst MainGZMTR = () => {\n    const { branches, routes, depsStr: deps } = useAppSelector(store => store.helper);\n\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const yPercentage = useAppSelector(store => store.param.y_pc);\n    const paddingPercentage = useAppSelector(store => store.param.padding);\n    const branchSpacing = useAppSelector(store => store.param.branch_spacing);\n    const direction = useAppSelector(store => store.param.direction);\n    const lineName = useAppSelector(store => store.param.line_name);\n    const currentStationIndex = useAppSelector(store => store.param.current_stn_idx);\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    const adjMat = adjacencyList(stationList, wideFactor, wideFactor);\n\n    const xShares = useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(stationList).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShare(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const lineXs: [number, number] =\n        direction === ShortDirection.right\n            ? [\n                  (svgWidths[CanvasType.RailMap] * paddingPercentage) / 100 + 65,\n                  svgWidths[CanvasType.RailMap] * (1 - paddingPercentage / 100) - 20,\n              ]\n            : [\n                  (svgWidths[CanvasType.RailMap] * paddingPercentage) / 100,\n                  svgWidths[CanvasType.RailMap] * (1 - paddingPercentage / 100) - 65,\n              ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = useMemo(\n        () => {\n            console.log('computing y shares');\n            return Object.keys(stationList).reduce((acc, cur) => {\n                if (branches[0].includes(cur)) {\n                    return { ...acc, [cur]: 0 };\n                } else {\n                    let branchOfStn = branches.slice(1).filter(branch => branch.includes(cur))[0];\n                    return { ...acc, [cur]: stationList[branchOfStn[0]].children.indexOf(branchOfStn[1]) ? -2 : 2 };\n                }\n            }, {} as { [stnId: string]: number });\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: -yShares[cur] * branchSpacing }),\n        {} as typeof yShares\n    );\n\n    const stnStates = useMemo(\n        () => getStnState(currentStationIndex, routes, direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [currentStationIndex, direction, routes.toString()]\n    );\n\n    const linePaths = drawLine(branches, stnStates);\n    const paths = (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: linePaths[cur].map(stns => _linePath(stns, xs, ys)),\n        }),\n        {} as { [key in keyof ReturnType<typeof drawLine>]: string[] }\n    );\n\n    return (\n        <g\n            id=\"main\"\n            style={{\n                ['--y-percentage' as any]: yPercentage,\n                transform: 'translateY(calc(var(--y-percentage) * var(--rmg-svg-height) / 100))',\n            }}\n        >\n            <Line paths={paths} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} />\n            <g\n                id=\"line_name\"\n                style={{\n                    ['--translate-x' as any]:\n                        direction === ShortDirection.right ? `${lineXs[0] - 65}px` : `${lineXs[1] + 65}px`,\n                }}\n            >\n                <LineBox\n                    info={\n                        Array(2).concat(['var(--rmg-theme-colour)', 'var(--rmg-theme-fg)'], lineName) as InterchangeInfo\n                    }\n                    stnState={1}\n                />\n            </g>\n        </g>\n    );\n};\n\nexport default MainGZMTR;\n\nconst Line = React.memo(\n    (props: { paths: { main: string[]; pass: string[] } }) => (\n        <g fill=\"none\" strokeWidth={4}>\n            <g stroke=\"#aaa\" strokeDasharray={4}>\n                {props.paths.pass.map((path, i) => (\n                    <path key={i} d={path} />\n                ))}\n            </g>\n            <g stroke=\"var(--rmg-theme-colour)\">\n                {props.paths.main.map((path, i) => (\n                    <path key={i} d={path} />\n                ))}\n            </g>\n        </g>\n    ),\n    (prevProps, nextProps) => JSON.stringify(prevProps.paths) === JSON.stringify(nextProps.paths)\n);\n\nconst _linePath = (stnIds: string[], realXs: { [stnId: string]: number }, realYs: { [stnId: string]: number }) => {\n    let prevY: number;\n    var path = [] as string[];\n\n    stnIds.forEach(stnId => {\n        let x = realXs[stnId];\n        let y = realYs[stnId];\n        if (!prevY && prevY !== 0) {\n            prevY = y;\n            path.push(`M ${x},${y}`);\n            return;\n        }\n        if (y === 0) {\n            if (y < prevY) path.push(`H ${x - 40}`, 'a 40,40 0 0,0 40,-40', `V ${y}`);\n            if (y > prevY) path.push(`H ${x - 40}`, 'a 40,40 0 0,1 40,40', `V ${y}`);\n        } else {\n            if (y < prevY) path.push(`V ${y + 40}`, 'a 40,40 0 0,1 40,-40', `H ${x}`);\n            if (y > prevY) path.push(`V ${y - 40}`, 'a 40,40 0 0,0 40,40', `H ${x}`);\n        }\n        path.push(`H ${x}`);\n        prevY = y;\n    });\n\n    // simplify path\n    return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n};\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { xs, ys, stnStates } = props;\n\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    return (\n        <g id=\"stn_icons\">\n            {Object.keys(stationList)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (\n                    <g\n                        key={stnId}\n                        style={{\n                            transform: `translate(${xs[stnId]}px,${ys[stnId]}px)`,\n                        }}\n                    >\n                        <StationGZMTR stnId={stnId} stnState={stnStates[stnId]} stnY={ys[stnId]} />\n                    </g>\n                ))}\n        </g>\n    );\n};\n","import React, { memo, useMemo } from 'react';\nimport StripGZMTR from '../strip/strip-gzmtr';\nimport MainGZMTR from './main/main-gzmtr';\nimport { CanvasType, Note, PanelTypeGZMTR, ShortDirection } from '../../constants/constants';\nimport { useAppSelector } from '../../redux';\n\nconst RailMapGZMTR = () => {\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const direction = useAppSelector(store => store.param.direction);\n    const psdNumber = useAppSelector(store => store.param.psd_num);\n    const infoPanelType = useAppSelector(store => store.param.info_panel_type);\n    const notes = useAppSelector(store => store.param.notesGZMTR);\n    const currentStationIndex = useAppSelector(store => store.param.current_stn_idx);\n    const curStnInfo = useAppSelector(store => store.param.stn_list[currentStationIndex]);\n\n    return (\n        <>\n            <DefsGZMTR />\n\n            <StripGZMTR\n                variant={infoPanelType}\n                isShowLight={infoPanelType === PanelTypeGZMTR.gz2otis}\n                isShowPSD={infoPanelType === PanelTypeGZMTR.gz2otis && psdNumber}\n            />\n\n            {(direction === ShortDirection.left && curStnInfo.parents.includes('linestart')) ||\n            (direction === ShortDirection.right && curStnInfo.children.includes('lineend')) ? (\n                <TerminusFlag />\n            ) : (\n                <>\n                    <MainGZMTR />\n                    <DirectionIndicator />\n                    {notes.map((note, i) => (\n                        <NoteBox key={i} note={note} />\n                    ))}\n                </>\n            )}\n\n            {infoPanelType === PanelTypeGZMTR.gz2otis && (\n                <line x2={svgWidths[CanvasType.RailMap]} transform=\"translate(0,90)\" strokeWidth={3} stroke=\"black\" />\n            )}\n        </>\n    );\n};\n\nexport default RailMapGZMTR;\n\nconst DefsGZMTR = memo(() => (\n    <defs>\n        <path\n            id=\"stn\"\n            className=\"rmg-stn\"\n            d=\"M 0,9.25 V -9.25 H -9.25 a 9.25,9.25 0 0,0 0,18.5 h 18.5 a 9.25,9.25 0 0,0 0,-18.5 H 0 \"\n        />\n        <path\n            id=\"stn_pass\"\n            stroke=\"#aaa\"\n            fill=\"#fff\"\n            strokeWidth={2}\n            d=\"M 0,9.25 V -9.25 H -9.25 a 9.25,9.25 0 0,0 0,18.5 h 18.5 a 9.25,9.25 0 0,0 0,-18.5 H 0 \"\n        />\n        <path id=\"arrow_direction\" d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\" fill=\"black\" />\n\n        <path id=\"inttick\" d=\"M 0,0 v 18\" strokeLinecap=\"square\" />\n        <rect id=\"intbox\" x={-22.5} height={24} width={45} rx={4.5} />\n    </defs>\n));\n\nconst DirectionIndicator = () => {\n    const { routes } = useAppSelector(store => store.helper);\n    const {\n        direction,\n        direction_gz_x: directionIndicatorX,\n        direction_gz_y: directionIndicatorY,\n        current_stn_idx: currentStationIndex,\n    } = useAppSelector(store => store.param);\n\n    const validDests = useMemo(\n        () => [\n            ...new Set(\n                routes\n                    .reduce(\n                        (acc, cur) =>\n                            cur.includes(currentStationIndex)\n                                ? acc.concat(\n                                      cur\n                                          .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                                          .slice(direction === ShortDirection.left ? 0 : -1)[0]\n                                  )\n                                : acc,\n                        []\n                    )\n                    .filter(id => id !== currentStationIndex)\n            ),\n        ],\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [currentStationIndex, direction, routes.toString()]\n    );\n\n    const textGroupProps: TextGroupProps = {\n        textAnchor: direction === ShortDirection.left ? 'start' : 'end',\n        transform: `translate(${direction === ShortDirection.left ? 65 : -65},-5)`,\n        destIds: validDests,\n    };\n\n    return (\n        <g\n            id=\"direction_gz\"\n            style={{ ['--x-percentage' as any]: directionIndicatorX, ['--y-percentage' as any]: directionIndicatorY }}\n        >\n            <use\n                xlinkHref=\"#arrow_direction\"\n                style={{ ['--rotate' as any]: direction === ShortDirection.left ? '0deg' : '180deg' }}\n            />\n\n            {validDests.length !== 2 ? (\n                <DirectionIndicatorTextGroup {...textGroupProps} />\n            ) : (\n                <DirectionIndicatorTextGroup2 {...textGroupProps} />\n            )}\n        </g>\n    );\n};\n\ntype TextGroupProps = {\n    destIds: string[];\n} & React.SVGProps<SVGGElement>;\n\nconst DirectionIndicatorTextGroup = (props: TextGroupProps) => {\n    const { destIds, ...others } = props;\n    const stationList = useAppSelector(store => store.param.stn_list);\n    return (\n        <g {...others}>\n            <text className=\"rmg-name__zh\" fontSize={28}>\n                {destIds.map(stnId => stationList[stnId].name[0]).join('/') + '方向'}\n            </text>\n            <text className=\"rmg-name__en\" fontSize={14} dy={22}>\n                {'Towards ' + destIds.map(stnId => stationList[stnId].name[1].replace('\\\\', ' ')).join('/')}\n            </text>\n        </g>\n    );\n};\n\nconst DirectionIndicatorTextGroup2 = (props: TextGroupProps) => {\n    const { destIds, ...others } = props;\n\n    const direction = useAppSelector(store => store.param.direction);\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    const charCounts = destIds.map(stnId => stationList[stnId].name[0].length);\n    const minCharCounts = Math.min(...charCounts);\n    const charSpacing =\n        minCharCounts > 1 && charCounts[0] !== charCounts[1]\n            ? Math.abs(charCounts[0] - charCounts[1]) / (minCharCounts - 1)\n            : 0;\n\n    return (\n        <g {...others}>\n            {destIds.map((id, i) => (\n                <React.Fragment key={id}>\n                    <text\n                        className=\"rmg-name__zh\"\n                        fontSize={25}\n                        x={direction === ShortDirection.left ? 0 : -75}\n                        y={-21 + 42 * i}\n                        letterSpacing={charCounts[i] > charCounts[1 - i] ? '0em' : `${charSpacing}em`}\n                    >\n                        {stationList[id].name[0]}\n                    </text>\n                    <text\n                        className=\"rmg-name__en\"\n                        fontSize={11.5}\n                        x={direction === ShortDirection.left ? 0 : -75}\n                        y={-1 + 42 * i}\n                    >\n                        {'Towards ' + stationList[id].name[1].replace('\\\\', ' ')}\n                    </text>\n                </React.Fragment>\n            ))}\n            <text\n                className=\"rmg-name__zh\"\n                fontSize={28}\n                x={direction === ShortDirection.left ? 25 * (Math.max(...charCounts) + 1) : 0}\n                y={5}\n            >\n                方向\n            </text>\n        </g>\n    );\n};\n\nconst TerminusFlag = React.memo(() => (\n    <g id=\"terminus_gz\" textAnchor=\"middle\">\n        <text className=\"rmg-name__zh\" fontSize={90}>\n            终 点 站\n        </text>\n        <text dy={70} className=\"rmg-name__en\" fontSize={36}>\n            Terminal\n        </text>\n        <g strokeWidth={8} stroke=\"#000\">\n            <path d=\"M -160,68 h -160\" />\n            <path d=\"M 160,68 h 160\" />\n        </g>\n    </g>\n));\n\nconst NoteBox = React.memo(\n    (props: { note: Note }) => {\n        const noteTextEl = React.useRef<SVGGElement | null>(null);\n        const [bBox, setBBox] = React.useState({ width: 0, height: 0, y: 0 } as DOMRect);\n        React.useEffect(\n            () => setBBox(noteTextEl.current!.getBBox()),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [props.note[0], props.note[1]]\n        );\n\n        return (\n            <g\n                className=\"note-box\"\n                style={{ ['--x-percentage' as any]: props.note[2], ['--y-percentage' as any]: props.note[3] }}\n            >\n                {props.note[4] && (\n                    <rect\n                        height={bBox.height + 4}\n                        width={bBox.width + 4}\n                        x={-2}\n                        y={bBox.y - 2}\n                        fill=\"none\"\n                        stroke=\"black\"\n                        strokeWidth={0.5}\n                    />\n                )}\n                <g ref={noteTextEl}>\n                    <g fontSize={16} letterSpacing={1.2}>\n                        {props.note[0].split('\\n').map((txt, i) => (\n                            <text key={i} className=\"rmg-name__zh\" y={i * 18}>\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n\n                    <g\n                        fontSize={10}\n                        letterSpacing={0.33}\n                        transform={`translate(0,${18 * props.note[0].split('\\n').length})`}\n                    >\n                        {props.note[1].split('\\n').map((txt, i) => (\n                            <text\n                                key={i}\n                                className=\"rmg-name__en\"\n                                y={i * 11}\n                                textLength={\n                                    i < (props.note[1].match(/\\n/g)?.length || 0)\n                                        ? bBox.width\n                                        : navigator.userAgent.includes('Firefox')\n                                        ? -1\n                                        : 0\n                                }\n                                lengthAdjust=\"spacing\"\n                            >\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.note.toString() === nextProps.note.toString()\n);\n","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { StationDict } from './constants/constants';\n\n/**\n * Vertical position (in shares) of station icon if using MTR style (for consistency of method `RMGLine.newStnPossibleLoc()`).\n */\nexport const getYShareMTR = (stnId: string, stnList: StationDict): -1 | 0 | 1 => {\n    if (\n        ['linestart', 'lineend'].includes(stnId) ||\n        stnList[stnId].parents.length > 1 ||\n        stnList[stnId].children.length > 1\n    ) {\n        return 0;\n    }\n    var stnPred = stnList[stnId].parents[0];\n    if (stnPred) {\n        // parent exist\n        if (stnList[stnPred].children.length === 1) {\n            // no sibling, then y same as parent\n            return getYShareMTR(stnPred, stnList);\n        } else {\n            // sibling exists, then y depends on its idx of being children\n            return stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n        }\n    } else {\n        // no parent, must be linestart\n        return 0;\n    }\n};\n","import * as Global from '../../../methods';\nimport { RMGParam, ShortDirection, StationDict, StationInfo } from '../../../constants/constants';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (\n                          direction === ShortDirection.right\n                              ? _isSuccessor(currentId, cur, routes)\n                              : _isPredecessor(currentId, cur, routes)\n                      )\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as StationDict;\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number\n    ) {\n        var [prevId, prevY, prevX] = [] as unknown as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 2;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + e}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - e}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number = 9.68\n    ) {\n        let linePaths = { main: [] as string[], pass: [] as string[] };\n        branches.forEach((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branches: string[][], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    let linePaths = { main: [] as string[][], pass: [] as string[][] };\n    branches.forEach(branch => {\n        branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n        var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n        var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n        if (lineMainStns.length === 1) {\n            linePassStns = branch;\n        }\n\n        if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n            // if two set disjoint\n            if (linePassStns[0] === branch[0]) {\n                // -1 -1 1 1\n                linePassStns.push(lineMainStns[0]);\n            } else if (\n                lineMainStns[0] === branch[0] &&\n                lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                linePassStns.length\n            ) {\n                linePassStns = branch;\n                lineMainStns = [];\n            } else {\n                // 1 1 -1 -1\n                linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n            }\n        }\n\n        linePaths.main.push(lineMainStns);\n        linePaths.pass.push(linePassStns);\n    });\n\n    return linePaths;\n};\n","import React from 'react';\nimport { MonoColour, PanelTypeGZMTR, PanelTypeShmetro } from '../../constants/constants';\n\ninterface Props {\n    variant: PanelTypeGZMTR | PanelTypeShmetro;\n    isShowLight: boolean;\n    isShowPSD: false | string;\n}\n\nconst StripGZMTR = (props: Props) => {\n    const stripHeight = (variant => {\n        switch (variant) {\n            case 'gz28':\n            case 'gz2otis':\n            case 'gz6':\n            case 'gzgf':\n                return 60;\n            case 'gz1':\n            case 'gz3':\n                return 40;\n            case 'gz4':\n            case 'gz5':\n            case 'gz1421':\n                return 20;\n            default:\n                return 0;\n        }\n    })(props.variant);\n\n    const indicatorLight = React.useMemo(() => {\n        switch (props.variant) {\n            case 'gz1':\n                return <circle cy={-58} r={16} fill=\"red\" />;\n            case 'gz28':\n            case 'gz2otis':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz3':\n                return <rect x={-15} y={-55} height={30} width={30} fill=\"red\" />;\n            case 'gz6':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"white\" />;\n            case 'gz1421':\n                return <ellipse cy={-38} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz5':\n                return <rect x={-30} y={-70} height={30} width={60} fill=\"orange\" />;\n            case 'gz4':\n                return <rect x={-50} y={-50} height={25} width={100} fill=\"whitesmoke\" />;\n            case 'gzgf':\n                return <rect x={-30} y={-58} height={30} width={60} fill=\"orange\" />;\n            default:\n                return <></>;\n        }\n    }, [props.variant]);\n\n    const stripDy = -20;\n\n    return (\n        <g transform={`translate(0,${props.variant === 'gz4' ? stripDy : 0})`}>\n            <rect\n                id=\"strip_gz\"\n                style={{\n                    ['--height' as any]: `${stripHeight}px`,\n                }}\n            />\n            <g\n                style={{\n                    transform: 'translate(calc(var(--rmg-svg-width) / 2),var(--rmg-svg-height))',\n                }}\n            >\n                {props.isShowLight && indicatorLight}\n            </g>\n            {props.isShowPSD !== false && <PSD {...props} />}\n        </g>\n    );\n};\n\nexport default StripGZMTR;\n\nconst PSD = React.memo(\n    (props: Props) => {\n        /**\n         * Flag of whether PSD number is stick within the strip area. If `true`, should fill with white, otherwise, fill with theme colour.\n         */\n        const isInStrip = ['gz28', 'gz2otis', 'gz6', 'gzgf'].includes(props.variant);\n        const psdDy = ((variant: PanelTypeGZMTR | PanelTypeShmetro) => {\n            switch (variant) {\n                case 'gz1':\n                case 'gz3':\n                    return '82px';\n                case 'gz4':\n                    return '65px';\n                case 'gz5':\n                    return '80px';\n                case 'gz1421':\n                    return '62px';\n                default:\n                    return '58px';\n            }\n        })(props.variant);\n\n        return (\n            <g\n                textAnchor=\"middle\"\n                fill={isInStrip ? MonoColour.black : 'var(--rmg-theme-fg)'}\n                style={{\n                    ['--psd-dy' as any]: psdDy,\n                    transform: 'translate(var(--translate-x), var(--translate-y))',\n                    ['--translate-x' as any]: 'calc(var(--rmg-svg-width) / 2 + 80px)',\n                    ['--translate-y' as any]: 'calc(var(--rmg-svg-height) - var(--psd-dy, 58px))',\n                }}\n            >\n                <rect height={40} width={40} rx={4} x={-20} fill={isInStrip ? '#fff' : 'var(--rmg-theme-colour)'} />\n                <text className=\"rmg-name__en\" fontSize={20} dy={12}>\n                    {props.isShowPSD}\n                </text>\n                <text className=\"rmg-name__zh\" fontSize={12} dy={26}>\n                    屏蔽门\n                </text>\n                <text className=\"rmg-name__en\" fontSize={6.5} dy={36}>\n                    Screen Door\n                </text>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.variant === nextProps.variant && prevProps.isShowPSD === nextProps.isShowPSD\n);\n","import React from 'react';\n\nconst StationNumberText = (props: { lineNum: string; stnNum: string } & React.SVGProps<SVGGElement>) => {\n    const { lineNum, stnNum, ...others } = props;\n\n    const LINE_NUM_MAX_WIDTH = 15.03125;\n\n    const lineNumEl = React.useRef<SVGTextElement | null>(null);\n    const [bBox, setBBox] = React.useState({ width: LINE_NUM_MAX_WIDTH } as DOMRect);\n    React.useEffect(() => setBBox(lineNumEl.current!.getBBox()), [lineNum]);\n\n    const lineNumScale = bBox.width > LINE_NUM_MAX_WIDTH ? LINE_NUM_MAX_WIDTH / bBox.width : 1;\n    const stnNumScale = lineNum.length === 2 ? lineNumScale : 1;\n\n    return (\n        <g textAnchor=\"middle\" fontSize={13.5} {...others}>\n            {React.useMemo(\n                () => (\n                    <>\n                        <g transform={`translate(-9.25,0)scale(${lineNumScale})`}>\n                            <text ref={lineNumEl} className=\"rmg-name__zh\">\n                                {lineNum}\n                            </text>\n                        </g>\n                        <g transform={`translate(9.25,0)scale(${stnNumScale})`}>\n                            <text className=\"rmg-name__zh\">{stnNum}</text>\n                        </g>\n                    </>\n                ),\n                // eslint-disable-next-line react-hooks/exhaustive-deps\n                [bBox.width, lineNum, stnNum]\n            )}\n        </g>\n    );\n};\n\nexport default StationNumberText;\n"],"sourceRoot":""}