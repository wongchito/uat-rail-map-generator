{"version":3,"sources":["constants/city-config.ts","i18n.ts","app-appbar.tsx","panels/panels.tsx","panels/index.tsx","error-boundary.tsx","svgs/svg-wrapper.tsx","svgs/svg-router.tsx","components/side-panel.tsx","components/page-header/canvas-button-group.tsx","components/page-header/download-actions.tsx","components/page-header/header-actions.tsx","components/page-header/page-header.tsx","components/data-table/data-table.tsx","components/data-table/table-row-actions.tsx","components/data-table/station-data-table.tsx","util/config.ts","components/window-header.tsx","theme/theme.ts","components/app-root.tsx","App.tsx","serviceWorker.ts","util/storage/storageService.ts","util/storage/storageLocalStorage.ts","util/storage/index.ts","index.tsx","util/auto-save-scheduler.ts","redux/param/action.ts","redux/app/reducer.ts","redux/param/reducer.ts","redux/helper/reducer.ts","redux/index.ts","redux/app/action.ts","redux/helper/action.ts","redux/helper/graph-theory-util.ts","constants/constants.ts","utils.ts"],"names":["CityCode","cityList","id","Baku","country","name","en","az","Barcelona","es","Beijing","zh","Cairo","ar","Changsha","Chengdu","Chongqing","Dalian","Delhi","hi","Dongguan","Dortmund","de","Edinburgh","ga","Foshan","Glasgow","Guangzhou","Hangzhou","Harbin","HongKong","KlangValley","ms","Kansai","ja","Kaohsiung","Istanbul","tr","London","Macao","pt","Madrid","Nanjing","NewTaipei","Osaka","Oslo","Paris","Qingdao","SanFrancisco","SanktPeterburg","ru","Santiago","SaoPaulo","Seoul","ko","Shanghai","Shenzhen","Singapore","Stockholm","Suzhou","Taipei","Tehran","fa","Tianjin","Tokyo","Toronto","TyneAndWear","Wuxi","Xiamen","Xian","Other","i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","default","backend","loadPath","process","interpolation","escapeValue","then","t","document","title","documentElement","setAttribute","language","useStyles","makeStyles","theme","createStyles","rootLight","backgroundColor","palette","primary","main","rootDark","background","paper","flexGrow","color","menuButton","AppAppBar","useTranslation","classes","prefersDarkMode","useMediaQuery","React","useMemo","AppBar","position","className","Toolbar","variant","Typography","includes","CanvasToggle","dispatch","useAppDispatch","rmgStyle","useAppSelector","store","param","style","useState","canvasButtonEl","setCanvasButtonEl","handleClick","action","selectCanvas","Tooltip","IconButton","onClick","e","currentTarget","Icon","Menu","anchorEl","open","Boolean","onClose","canvasConfig","map","c","MenuItem","Divider","margin","AllCanvas","ZoomToggles","zoomOut","zoomIn","PanelSave","PanelLayout","PanelDesign","PanelStations","PanelInfo","root","display","flexDirection","height","breakpoints","down","typography","tab","padding","up","justifyContent","minWidth","minHeight","marginBottom","paddingLeft","tabs","overflow","width","scrollbarWidth","WebkitOverflowScrolling","tabpanel","flex","spacing","paddingBottom","alignItems","PanelTab","useTheme","isMobile","value","setValue","tabNav","component","Tabs","orientation","indicatorColor","textColor","onChange","_","val","scrollButtons","i","Tab","label","icon","role","fallback","CircularProgress","index","panel","Panel","ErrorBoundary","props","state","hasError","error","errorInfo","this","children","Component","SvgWrapper","type","svgWidth","svgHeight","canvasScale","useEffect","getElementById","href","xmlns","xmlnsXlink","viewBox","colorInterpolationFilters","fill","Suspense","strokeWidth","stroke","overflowX","content","border","SvgRouter","location","useLocation","navigate","useNavigate","useDispatch","app","canvasToShow","svgWidths","svg_height","pathname","nextStyle","split","slice","Object","values","RmgStyle","setStyle","filteredCanvas","keys","canvasList","filter","canvas","RunInGZMTR","lazy","RailMapGZMTR","DestinationMTR","RailMapMTR","DestinationSHMetro","RunInSHMetro","RailMapSHMetro","IndoorSHMetro","GZMTR","CanvasType","RunIn","RailMap","MTR","Destination","SHMetro","Indoor","SidePanel","sidePanelMode","selectedStation","stn_list","as","maxW","SidePanelMode","CLOSE","visibility","boxShadow","shrink","direction","transition","status","size","pl","pr","pb","ml","setSidePanelMode","CanvasButtonGroup","mt","sx","fontSize","marginRight","isAttached","colorScheme","DownloadActions","Button","rightIcon","HeaderActions","leftIcon","PageHeader","align","wrap","DataTable","data","fields","wrapperBg","useColorModeValue","pageData","d","reduce","acc","cur","key","toString","displayHandler","bg","field","item","tabIndex","selected","isSelected","hover","TableRowActions","stationId","setCurrentStation","setSelectedStation","STATION","StationDataTable","stationList","entries","station","chineseName","englishName","interchange","transfer","info","length","join","Environments","WindowHeader","environment","window","hostname","DEV","UAT","PRD","p","justify","env","getBadgeColour","version","extendTheme","config","initialColorMode","useSystemColorMode","AppRoot","mr","overflowY","darkTheme","createTheme","secondary","overrides","MuiDialog","lightTheme","light","App","basename","path","element","ThemeProvider","LinearProgress","AppBody","paramString","JSON","stringify","rmgStorage","writeFile","match","StorageLocalStorage","currentBusyFilename","a","console","warn","localStorage","alert","Error","setItem","removeItem","filename","contents","getItem","indexedDB","log","Promise","resolve","request","onerror","err","onsuccess","navigator","serviceWorker","ready","registration","unregister","catch","message","head","append","tag","link","createElement","rel","renderApp","ReactDOM","reRenderApp","history","pushState","setFullParam","getRmgStorage","readFile","updatedParam","updateParam","parse","module","canvasScaleString","Number","setCanvasScale","setCanvasToShow","rmgStore","setInterval","getState","SET_FULL_PARAM","SET_STYLE","SET_SVG_HEIGHT","SET_SVG_WIDTH","SET_Y_PERCENTAGE","SET_BRANCH_SPACING","SET_PADDING_PERCENTAGE","SET_DIRECTION_INDICATOR_X","SET_DIRECTION_INDICATOR_Y","SET_THEME","SET_LINE_NAME","SET_DIRECTION","SET_PLATFORM","SET_LINE_NUM","SET_PSD_NUM","SET_PANEL_TYPE","SET_NOTES","SET_NAME_POSITION","SET_CUSTOMISED_MTR_DESTINATION","SET_CURRENT_STATION","SET_STATION","SET_STATIONS_BULK","fullParam","triggerHelpersUpdate","setSvgHeight","setSvgWidth","setYPercentage","yPercentage","setBranchSpacing","branchSpacing","setPaddingPercentage","paddingPercentage","setDirectionIndicatorX","directionIndicatorX","setDirectionIndicatorY","directionIndicatorY","setTheme","setLineName","lineName","setDirection","setPlatform","platform","setLineNum","lineNum","setPsdNum","psdNum","setPanelType","panelType","setNotes","notes","addNote","notesGZMTR","concat","updateNote","updatedNote","originalNote","idx","removeNote","setNamePosition","namePosition","staggerStationNames","isStagger","namePosMTR","flipStationNames","isFlip","setCustomisedMtrDestination","customisedMtrDestination","toggleLineNameBeforeDestination","isShow","customiseMTRDest","isLegacy","customiseDestinationName","customisedName","terminal","currentStation","setStation","setStationsBulk","stations","reverseStations","newStationList","stnId","lineend","parents","reverse","branch","left","right","linestart","updateStationName","stationInfo","updateStationSecondaryName","secondaryName","updateStationNum","num","addInterchange","setIndex","interchangeInfo","newTransferInfo","push","removeInterchange","interchangeIndex","set","setIdx","intIdx","updateInterchange","int","undefined","updateStationOsiName","osiName","newOsiNames","osi_names","updateStationTickDirection","tickDirection","tick_direc","updateStationPaidArea","isPaidArea","paid_area","updateStationBranchType","branchStyle","updateStationBranchFirstStation","branches","first","flipStationBranchPosition","updateStationFacility","facility","addStationService","service","services","removeStationService","s","initialState","canvasScaleStatus","LoadingStatus","canvasToShowStatus","destination","runin","railmap","indoor","y_pc","branch_spacing","ShortDirection","platform_num","MonoColour","white","line_name","current_stn_idx","line_num","psd_num","info_panel_type","PanelTypeGZMTR","gz1","direction_gz_x","direction_gz_y","depsStr","routes","tpo","rootReducer","combineReducers","SET_CANVAS_SCALE","SET_CANVAS_SCALE_STATUS","SET_CANVAS_TO_SHOW","SET_CANVAS_TO_SHOW_STATUS","SET_SIDE_PANEL_MODE","SET_SELECTED_STATION","helper","SET_DEPS_STR","SET_BRANCHES","SET_ROUTES","SET_TPO","createStore","applyMiddleware","thunk","useSelector","setCanvasScaleStatus","loading","newScale","toFixed","loaded","failed","setCanvasToShowStatus","calcAndGetDepsStr","stnList","nextDepsStr","calcBranches","nextBranches","stack","branchCount","curId","shift","prevId","branchNextId","getBranches","calcRoutes","getRoutes","prevBranches","indexOf","Direction","BranchStyle","Services","Facilities","PanelTypeShmetro","LanguageCode","StationState","dest_legacy","fontZH","fontEN","weightZH","weightEN","stnInfo","arr","forEach","intInfo","splice","change_type","usage","svg_dest_width","svg_width","note","char_form","show_outer","strip_pc","txt_bg_gap","txt_flip","getTransText2","obj","langs","l","English","formatStnName","replace"],"mappings":"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","file":"static/js/main.fa599d44.chunk.js","sourcesContent":["import { Translation } from './constants';\n\nexport enum CityCode {\n    Baku = 'baku',\n    Barcelona = 'barcelona',\n    Beijing = 'beijing',\n    Cairo = 'cairo',\n    Changsha = 'changsha',\n    Chengdu = 'chengdu',\n    Chongqing = 'chongqing',\n    Dalian = 'dalian',\n    Delhi = 'delhi',\n    Dongguan = 'dongguan',\n    Dortmund = 'dortmund',\n    Edinburgh = 'edinburgh',\n    Foshan = 'foshan',\n    Glasgow = 'glasgow',\n    Guangzhou = 'guangzhou',\n    Hangzhou = 'hangzhou',\n    Harbin = 'harbin',\n    HongKong = 'hongkong',\n    KlangValley = 'klangvalley',\n    Kansai = 'kansai',\n    Kaohsiung = 'kaohsiung',\n    Istanbul = 'istanbul',\n    London = 'london',\n    Macao = 'macao',\n    Madrid = 'madrid',\n    Nanjing = 'nanjing',\n    NewTaipei = 'newtaipei',\n    Osaka = 'osaka',\n    Oslo = 'oslo',\n    Paris = 'paris',\n    Qingdao = 'qingdao',\n    SanFrancisco = 'sanfrancisco',\n    SanktPeterburg = 'sanktpeterburg',\n    Santiago = 'santiago',\n    SaoPaulo = 'saopaulo',\n    Seoul = 'seoul',\n    Shanghai = 'shanghai',\n    Shenzhen = 'shenzhen',\n    Singapore = 'singapore',\n    Stockholm = 'stockholm',\n    Suzhou = 'suzhou',\n    Taipei = 'taipei',\n    Tehran = 'tehran',\n    Tianjin = 'tianjin',\n    Tokyo = 'tokyo',\n    Toronto = 'toronto',\n    TyneAndWear = 'tyneandwear',\n    Wuxi = 'wuxi',\n    Xiamen = 'xiamen',\n    Xian = 'xian',\n    Other = 'other',\n}\n\ninterface CityEntry {\n    id: CityCode;\n    /**\n     * ISO 3166-1 alpha-2 country code. (For cities in Britain, append BS 6879 subdivision code. )\n     */\n    country: string;\n    /**\n     * Key-value pairs of multi-lingual names of the city.\n     */\n    name: Translation;\n}\n\nexport const cityList: CityEntry[] = [\n    {\n        id: CityCode.Baku,\n        country: 'AZ',\n        name: {\n            en: 'Baku',\n            az: 'Bakı',\n            'zh-Hans': '巴库',\n            'zh-Hant': '巴庫',\n        },\n    },\n    {\n        id: CityCode.Barcelona,\n        country: 'ES',\n        name: {\n            en: 'Barcelona',\n            es: 'Barcelona',\n            'zh-Hans': '巴塞罗那',\n            'zh-HK': '巴塞隆拿',\n            'zh-TW': '巴塞隆納',\n        },\n    },\n    {\n        id: CityCode.Beijing,\n        country: 'CN',\n        name: {\n            en: 'Beijing',\n            zh: '北京',\n        },\n    },\n    {\n        id: CityCode.Cairo,\n        country: 'EG',\n        name: {\n            en: 'Cairo (Greater Cairo Area)',\n            ar: 'القاهرة (منطقة القاهرة الكبرى)',\n            'zh-Hans': '开罗（大开罗地区）',\n            'zh-Hant': '開羅（大開羅地區）',\n        },\n    },\n    {\n        id: CityCode.Changsha,\n        country: 'CN',\n        name: {\n            en: 'Changsha',\n            'zh-Hans': '长沙',\n            'zh-Hant': '長沙',\n        },\n    },\n    {\n        id: CityCode.Chengdu,\n        country: 'CN',\n        name: {\n            en: 'Chengdu',\n            zh: '成都',\n        },\n    },\n    {\n        id: CityCode.Chongqing,\n        country: 'CN',\n        name: {\n            en: 'Chongqing',\n            'zh-Hans': '重庆',\n            'zh-Hant': '重慶',\n        },\n    },\n    {\n        id: CityCode.Dalian,\n        country: 'CN',\n        name: {\n            en: 'Dalian',\n            'zh-Hans': '大连',\n            'zh-Hant': '大連',\n        },\n    },\n    {\n        id: CityCode.Delhi,\n        country: 'IN',\n        name: {\n            en: 'Delhi',\n            hi: 'दिल्ली',\n            'zh-Hans': '德里',\n            'zh-Hant': '德里',\n        },\n    },\n    {\n        id: CityCode.Dongguan,\n        country: 'CN',\n        name: {\n            en: 'Dongguan',\n            'zh-Hans': '东莞',\n            'zh-Hant': '東莞',\n        },\n    },\n    {\n        id: CityCode.Dortmund,\n        country: 'DE',\n        name: {\n            en: 'Dortmund',\n            de: 'Dortmund',\n            'zh-Hans': '多特蒙德',\n            'zh-Hant': '多特蒙德',\n        },\n    },\n    {\n        id: CityCode.Edinburgh,\n        country: 'GBSCT',\n        name: {\n            en: 'Edinburgh',\n            ga: 'Dùn Èideann',\n            'zh-Hans': '爱丁堡',\n            'zh-Hant': '愛丁堡',\n        },\n    },\n    {\n        id: CityCode.Foshan,\n        country: 'CN',\n        name: {\n            en: 'Foshan',\n            zh: '佛山',\n        },\n    },\n    {\n        id: CityCode.Glasgow,\n        country: 'GBSCT',\n        name: {\n            en: 'Glasgow',\n            ga: 'Glaschu',\n            zh: '格拉斯哥',\n        },\n    },\n    {\n        id: CityCode.Guangzhou,\n        country: 'CN',\n        name: {\n            en: 'Guangzhou',\n            'zh-Hans': '广州',\n            'zh-Hant': '廣州',\n        },\n    },\n    {\n        id: CityCode.Hangzhou,\n        country: 'CN',\n        name: {\n            en: 'Hangzhou',\n            zh: '杭州',\n        },\n    },\n    {\n        id: CityCode.Harbin,\n        country: 'CN',\n        name: {\n            en: 'Harbin',\n            'zh-Hans': '哈尔滨',\n            'zh-Hant': '哈爾濱',\n        },\n    },\n    {\n        id: CityCode.HongKong,\n        country: 'HK',\n        name: {\n            en: 'Hong Kong',\n            zh: '香港',\n        },\n    },\n    {\n        id: CityCode.KlangValley,\n        country: 'MY',\n        name: {\n            en: 'Greater KL/Klang Valley',\n            ms: 'Greater KL/Klang Valley',\n            'zh-Hans': '大吉隆坡/巴生谷',\n            'zh-Hant': '大吉隆坡/巴生谷',\n        },\n    },\n    {\n        id: CityCode.Kansai,\n        country: 'JP',\n        name: {\n            en: 'Kansai Area',\n            ja: '近畿地方',\n            'zh-Hans': '近畿地方（关西地方）',\n            'zh-Hant': '近畿地方（關西地方）',\n        },\n    },\n    {\n        id: CityCode.Kaohsiung,\n        country: 'TW',\n        name: {\n            en: 'Kaohsiung',\n            zh: '高雄',\n        },\n    },\n    {\n        id: CityCode.Istanbul,\n        country: 'TR',\n        name: {\n            en: 'Istanbul',\n            tr: 'İstanbul',\n            'zh-Hans': '伊斯坦布尔',\n            'zh-Hant': '伊斯坦布爾',\n        },\n    },\n    {\n        id: CityCode.London,\n        country: 'GBENG',\n        name: {\n            en: 'London',\n            'zh-Hans': '伦敦',\n            'zh-Hant': '倫敦',\n        },\n    },\n    {\n        id: CityCode.Macao,\n        country: 'MO',\n        name: {\n            en: 'Macao',\n            pt: 'Macau',\n            'zh-Hans': '澳门',\n            'zh-Hant': '澳門',\n        },\n    },\n    {\n        id: CityCode.Madrid,\n        country: 'ES',\n        name: {\n            en: 'Madrid',\n            'zh-Hans': '马德里',\n            'zh-Hant': '馬德里',\n        },\n    },\n    {\n        id: CityCode.Nanjing,\n        country: 'CN',\n        name: {\n            en: 'Nanjing',\n            zh: '南京',\n        },\n    },\n    {\n        id: CityCode.NewTaipei,\n        country: 'TW',\n        name: {\n            en: 'New Taipei',\n            zh: '新北',\n        },\n    },\n    {\n        id: CityCode.Osaka,\n        country: 'JP',\n        name: {\n            en: 'Osaka',\n            ja: '大阪',\n            zh: '大阪',\n        },\n    },\n    {\n        id: CityCode.Oslo,\n        country: 'NO',\n        name: {\n            en: 'Oslo',\n            'zh-Hans': '奥斯陆',\n            'zh-Hant': '奧斯陸',\n        },\n    },\n    {\n        id: CityCode.Paris,\n        country: 'FR',\n        name: {\n            en: 'Paris',\n            zh: '巴黎',\n        },\n    },\n    {\n        id: CityCode.Qingdao,\n        country: 'CN',\n        name: {\n            en: 'Qingdao',\n            'zh-Hans': '青岛',\n            'zh-Hant': '青島',\n        },\n    },\n    {\n        id: CityCode.SanFrancisco,\n        country: 'US',\n        name: {\n            en: 'San Francisco',\n            'zh-Hans': '旧金山',\n            'zh-HK': '三藩市',\n            'zh-TW': '舊金山',\n        },\n    },\n    {\n        id: CityCode.SanktPeterburg,\n        country: 'RU',\n        name: {\n            en: 'Sankt Peterburg',\n            ru: 'Санкт-Петербург',\n            'zh-Hans': '圣彼得堡',\n            'zh-Hant': '聖彼得堡',\n        },\n    },\n    {\n        id: CityCode.Santiago,\n        country: 'CL',\n        name: {\n            en: 'Santiago',\n            es: 'Santiago',\n            'zh-Hans': '圣地亚哥',\n            'zh-Hant': '聖地亞哥 ',\n        },\n    },\n    {\n        id: CityCode.SaoPaulo,\n        country: 'BR',\n        name: {\n            en: 'Sao Paulo',\n            pt: 'São Paulo',\n            'zh-Hans': '圣保罗',\n            'zh-Hant': '聖保羅',\n        },\n    },\n    {\n        id: CityCode.Seoul,\n        country: 'KR',\n        name: {\n            en: 'Seoul (Metropolitan Area)',\n            ko: '서울(수도권)',\n            'zh-Hans': '首尔（首都圈）',\n            'zh-Hant': '首爾（首都圈）',\n        },\n    },\n    {\n        id: CityCode.Shanghai,\n        country: 'CN',\n        name: {\n            en: 'Shanghai',\n            zh: '上海',\n        },\n    },\n    {\n        id: CityCode.Shenzhen,\n        country: 'CN',\n        name: {\n            en: 'Shenzhen',\n            zh: '深圳',\n        },\n    },\n    {\n        id: CityCode.Singapore,\n        country: 'SG',\n        name: {\n            en: 'Singapore',\n            zh: '新加坡',\n        },\n    },\n    {\n        id: CityCode.Stockholm,\n        country: 'SE',\n        name: {\n            en: 'Stockholm',\n            'zh-Hans': '斯德哥尔摩',\n            'zh-Hant': '斯德哥爾摩',\n        },\n    },\n    {\n        id: CityCode.Suzhou,\n        country: 'CN',\n        name: {\n            en: 'Suzhou',\n            'zh-Hans': '苏州',\n            'zh-Hant': '蘇州',\n        },\n    },\n    {\n        id: CityCode.Taipei,\n        country: 'TW',\n        name: {\n            en: 'Taipei',\n            zh: '台北',\n        },\n    },\n    {\n        id: CityCode.Tehran,\n        country: 'IR',\n        name: {\n            en: 'Tehran',\n            fa: 'تهران‎',\n            'zh-Hans': '德黑兰',\n            'zh-Hant': '德黑蘭',\n        },\n    },\n    {\n        id: CityCode.Tianjin,\n        country: 'CN',\n        name: {\n            en: 'Tianjin',\n            zh: '天津',\n        },\n    },\n    {\n        id: CityCode.Tokyo,\n        country: 'JP',\n        name: {\n            en: 'Tokyo (Greater Tokyo Area)',\n            ja: '東京（首都圏）',\n            'zh-Hans': '东京（首都圈）',\n            'zh-Hant': '東京（首都圈）',\n        },\n    },\n    {\n        id: CityCode.Toronto,\n        country: 'CA',\n        name: {\n            en: 'Toronto',\n            'zh-Hans': '多伦多',\n            'zh-Hant': '多倫多',\n        },\n    },\n    {\n        id: CityCode.TyneAndWear,\n        country: 'GBENG',\n        name: {\n            en: 'Tyne and Wear',\n            'zh-Hans': '泰恩-威尔',\n            'zh-HK': '泰威',\n            'zh-TW': '泰恩-威爾',\n        },\n    },\n    {\n        id: CityCode.Wuxi,\n        country: 'CN',\n        name:\n        {\n             en: 'Wuxi',\n             'zh-Hans': '无锡',\n             'zh-Hant': '無錫',\n        },\n    },\n    {\n        id: CityCode.Xiamen,\n        country: 'CN',\n        name: {\n            en: 'Xiamen',\n            'zh-Hans': '厦门',\n            'zh-Hant': '廈門',\n        },\n    },\n    {\n        id: CityCode.Xian,\n        country: 'CN',\n        name: {\n            en: \"Xi'an\",\n            zh: '西安',\n        },\n    },\n    {\n        id: CityCode.Other,\n        country: 'UN',\n        name: {\n            en: 'Customise',\n            'zh-Hans': '自定义',\n            'zh-Hant': '自訂',\n        },\n    },\n];\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\ni18n.use(Backend)\n    .use(LanguageDetector)\n    .use(initReactI18next)\n    .init({\n        fallbackLng: {\n            'zh-CN': ['zh-Hans', 'en'],\n            'zh-Hant': ['zh-HK', 'en'],\n            'zh-HK': ['zh-Hant', 'en'],\n            'zh-TW': ['zh-HK', 'zh-Hant'],\n            default: ['en'],\n        },\n        // debug: true,\n        backend: {\n            // for all available options read the backend's repository readme file\n            loadPath: process.env.PUBLIC_URL + '/locale/{{lng}}.json',\n        },\n\n        interpolation: {\n            escapeValue: false, // not needed for react as it escapes by default\n        },\n    })\n    .then(t => {\n        document.title = t('title');\n        document.documentElement.setAttribute('lang', i18n.language);\n    });\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    AppBar,\n    Toolbar,\n    Tooltip,\n    IconButton,\n    Typography,\n    Icon,\n    makeStyles,\n    createStyles,\n    Menu,\n    MenuItem,\n    Divider,\n    useMediaQuery,\n} from '@material-ui/core';\nimport { AllCanvas, canvasConfig, CanvasType } from './constants/constants';\nimport { useAppDispatch, useAppSelector } from './redux';\nimport { selectCanvas, zoomIn, zoomOut } from './redux/app/action';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        rootLight: {\n            backgroundColor: theme.palette.primary.main,\n        },\n        rootDark: {\n            backgroundColor: theme.palette.background.paper,\n        },\n        title: {\n            flexGrow: 1,\n            color: '#fff',\n        },\n        menuButton: {\n            color: '#fff',\n        },\n    })\n);\n\nconst AppAppBar = () => {\n    const { t, i18n } = useTranslation();\n    const classes = useStyles();\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n    return React.useMemo(\n        () => (\n            <AppBar position=\"sticky\" className={prefersDarkMode ? classes.rootDark : classes.rootLight}>\n                <Toolbar variant=\"dense\">\n                    <Typography variant=\"h6\" className={classes.title} color=\"textPrimary\">\n                        {process.env.PUBLIC_URL.includes('uat') ? t('titleUAT') : t('title')}\n                    </Typography>\n\n                    <CanvasToggle />\n                    <ZoomToggles />\n                </Toolbar>\n            </AppBar>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [prefersDarkMode, i18n.language]\n    );\n};\n\nexport default AppAppBar;\n\nconst CanvasToggle = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const rmgStyle = useAppSelector(store => store.param.style);\n\n    const [canvasButtonEl, setCanvasButtonEl] = React.useState<null | HTMLElement>(null);\n    const handleClick = (action: CanvasType | typeof AllCanvas) => () => {\n        dispatch(selectCanvas(action));\n        setCanvasButtonEl(null);\n    };\n\n    return React.useMemo(\n        () => (\n            <>\n                <Tooltip title={t('toggle.tooltip') || ''}>\n                    <IconButton onClick={e => setCanvasButtonEl(e.currentTarget)} className={classes.menuButton}>\n                        <Icon>photo_library</Icon>\n                    </IconButton>\n                </Tooltip>\n                <Menu anchorEl={canvasButtonEl} open={Boolean(canvasButtonEl)} onClose={() => setCanvasButtonEl(null)}>\n                    {canvasConfig[rmgStyle].map(c => (\n                        <MenuItem key={c} onClick={handleClick(c)}>\n                            {t('toggle.' + c)}\n                        </MenuItem>\n                    ))}\n                    <Divider style={{ margin: '6px 0' }} />\n                    <MenuItem onClick={handleClick(AllCanvas)}>{t('toggle.all')}</MenuItem>\n                </Menu>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [rmgStyle, canvasButtonEl, classes.menuButton]\n    );\n};\n\nconst ZoomToggles = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    return React.useMemo(\n        () => (\n            <>\n                <Tooltip title={t('zoom.out') || ''}>\n                    <IconButton onClick={() => dispatch(zoomOut())} className={classes.menuButton}>\n                        <Icon>zoom_out</Icon>\n                    </IconButton>\n                </Tooltip>\n                <Tooltip title={t('zoom.in') || ''}>\n                    <IconButton onClick={() => dispatch(zoomIn())} className={classes.menuButton}>\n                        <Icon>zoom_in</Icon>\n                    </IconButton>\n                </Tooltip>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [classes.menuButton]\n    );\n};\n","import * as React from 'react';\n\nimport {\n    Typography,\n    CircularProgress,\n    Tabs,\n    Tab,\n    Icon,\n    makeStyles,\n    createStyles,\n    useTheme,\n    useMediaQuery,\n} from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nconst PanelSave = React.lazy(() => import(/* webpackChunkName: \"panelSave\" */ './save'));\nconst PanelLayout = React.lazy(() => import(/* webpackChunkName: \"panelLayout\" */ './layout'));\nconst PanelDesign = React.lazy(() => import(/* webpackChunkName: \"panelDesign\" */ './design'));\nconst PanelStations = React.lazy(() => import(/* webpackChunkName: \"panelStations\" */ './stations'));\nconst PanelInfo = React.lazy(() => import(/* webpackChunkName: \"panelInfo\" */ './panel-info'));\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        root: {\n            display: 'flex',\n            flexDirection: 'row',\n            height: '100%',\n            [theme.breakpoints.down('xs')]: {\n                flexDirection: 'column',\n            },\n        },\n        typography: {\n            background: theme.palette.background.default,\n        },\n        tab: {\n            padding: '6px 24px',\n            height: 48,\n            '& .MuiTab-wrapper': {\n                flexDirection: 'row',\n            },\n            [theme.breakpoints.up('sm')]: {\n                '& .MuiTab-wrapper': {\n                    justifyContent: 'flex-start',\n                },\n            },\n            [theme.breakpoints.down('xs')]: {\n                minWidth: 'calc(100% / 5)',\n            },\n            '&.MuiTab-labelIcon': {\n                minHeight: 'unset',\n                '& .MuiTab-wrapper': {\n                    '& > *:first-child': {\n                        marginBottom: 0,\n                    },\n                    '& > *:not(first-child)': {\n                        paddingLeft: 8,\n                    },\n                },\n            },\n        },\n        tabs: {\n            overflow: 'auto',\n            '&::-webkit-scrollbar': {\n                width: 0,\n            },\n            scrollbarWidth: 'none',\n            WebkitOverflowScrolling: 'touch',\n        },\n        tabpanel: {\n            overflow: 'auto',\n            flex: 1,\n            padding: theme.spacing(3),\n            paddingBottom: 0,\n            height: `calc(100% - ${theme.spacing(3)}px)`,\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'flex-start',\n        },\n    })\n);\n\nexport default function PanelTab() {\n    const { t, i18n } = useTranslation();\n\n    const classes = useStyles();\n    const theme = useTheme();\n    const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\n\n    const [value, setValue] = React.useState(0);\n\n    const panel = (index: number) => {\n        switch (index) {\n            case 0:\n                return <PanelSave />;\n            case 1:\n                return <PanelLayout />;\n            case 2:\n                return <PanelDesign />;\n            case 3:\n                return <PanelStations />;\n            case 4:\n                return <PanelInfo />;\n            default:\n                return <PanelSave />;\n        }\n    };\n\n    const tabNav = React.useMemo(\n        () => (\n            <Typography className={`${classes.typography} ${classes.tabs}`} component=\"div\">\n                <Tabs\n                    value={value}\n                    orientation={isMobile ? 'horizontal' : 'vertical'}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    onChange={(_, val) => setValue(val)}\n                    variant=\"scrollable\"\n                    scrollButtons=\"off\"\n                >\n                    {[\n                        ['file', 'insert_drive_file'],\n                        ['layout', 'panorama'],\n                        ['design', 'brush'],\n                        ['stations', 'directions_transit'],\n                        ['info', 'info'],\n                    ].map((val, i) => (\n                        <Tab\n                            label={<span>{t('tab.' + val[0])}</span>}\n                            icon={<Icon>{val[1]}</Icon>}\n                            key={i}\n                            className={classes.tab}\n                        />\n                    ))}\n                </Tabs>\n            </Typography>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [value, i18n.language, classes.tab, isMobile]\n    );\n\n    return (\n        <div className={classes.root}>\n            {tabNav}\n            <Typography className={`${classes.typography} ${classes.tabpanel}`} component=\"div\" role=\"tabpanel\">\n                <React.Suspense fallback={<CircularProgress />}>{panel(value)}</React.Suspense>\n            </Typography>\n        </div>\n    );\n}\n","import * as React from 'react';\nimport { CircularProgress } from '@material-ui/core';\n\nimport PanelTabs from './panels';\n\nexport default function Panel() {\n    return (\n        <React.Suspense fallback={<CircularProgress />}>\n            <PanelTabs />\n        </React.Suspense>\n    );\n}\n","import React from 'react';\n\nexport default class ErrorBoundary extends React.Component<{ children: React.ReactNode }, { hasError: boolean }> {\n    constructor(props: { children: React.ReactNode }) {\n        super(props);\n        this.state = { hasError: false };\n    }\n\n    static getDerivedStateFromError(error: any) {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true };\n    }\n\n    componentDidCatch(error: any, errorInfo: any) {\n        // You can also log the error to an error reporting service\n        // logErrorToMyService(error, errorInfo);\n    }\n\n    render() {\n        if (this.state.hasError) {\n            // You can render any custom fallback UI\n            return <h1>Something went wrong.</h1>;\n        }\n\n        return this.props.children;\n    }\n}\n","import { CanvasType, RmgStyle, Theme } from '../constants/constants';\nimport React, { ReactNode, useEffect } from 'react';\nimport { CircularProgress } from '@material-ui/core';\nimport ErrorBoundary from '../error-boundary';\n\ninterface SvgWrapperProps {\n    type: CanvasType;\n    style: RmgStyle;\n    svgWidth: number;\n    svgHeight: number;\n    canvasScale: number;\n    theme: Theme;\n    children: ReactNode;\n}\n\nexport default function SvgWrapper(props: SvgWrapperProps) {\n    const { type, style, svgWidth, svgHeight, canvasScale, theme, children } = props;\n\n    useEffect(() => {\n        (document.getElementById('css_' + type) as HTMLLinkElement).href =\n            process.env.PUBLIC_URL + `/styles/${type}_${style}.css`;\n        return () => {\n            (document.getElementById('css_' + type) as HTMLLinkElement).href = '';\n        };\n    }, [style]);\n\n    return (\n        <svg\n            id={type}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            height={svgHeight * canvasScale}\n            viewBox={`0 0 ${svgWidth} ${svgHeight}`}\n            colorInterpolationFilters=\"sRGB\"\n            style={{\n                ['--rmg-svg-width' as any]: svgWidth + 'px',\n                ['--rmg-svg-height' as any]: svgHeight + 'px',\n                ['--rmg-theme-colour' as any]: theme[2],\n                ['--rmg-theme-fg' as any]: theme[3],\n            }}\n        >\n            <rect\n                id=\"canvas-bg\"\n                fill=\"white\"\n                style={{ height: 'var(--rmg-svg-height)', width: 'var(--rmg-svg-width)' }}\n            />\n            <React.Suspense fallback={<CircularProgress />}>\n                <ErrorBoundary>{children}</ErrorBoundary>\n            </React.Suspense>\n            <rect\n                id=\"canvas-border\"\n                fill=\"none\"\n                strokeWidth={3}\n                stroke=\"none\"\n                style={{ height: 'var(--rmg-svg-height)', width: 'var(--rmg-svg-width)' }}\n            />\n        </svg>\n    );\n}\n","import { createStyles, makeStyles } from '@material-ui/core';\nimport React, { lazy, ReactNode, useEffect } from 'react';\nimport { CanvasType, RmgStyle } from '../constants/constants';\nimport { useAppSelector } from '../redux';\nimport SvgWrapper from './svg-wrapper';\nimport { useDispatch } from 'react-redux';\nimport { setStyle } from '../redux/param/action';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            display: 'flex',\n            flexDirection: 'row',\n            overflowX: 'scroll',\n            '&::before, &::after': {\n                content: '\"\"',\n                margin: 'auto',\n            },\n            '& > svg': {\n                flex: '0 0 auto',\n                border: '1px solid black',\n            },\n        },\n    })\n);\n\nexport default function SvgRouter() {\n    const classes = useStyles();\n    const location = useLocation();\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n\n    const { canvasToShow, canvasScale } = useAppSelector(state => state.app);\n    const { svgWidth: svgWidths, svg_height: svgHeight, style: rmgStyle, theme } = useAppSelector(state => state.param);\n\n    if (location.pathname !== '/' + rmgStyle && location.pathname !== '/v5/' + rmgStyle) {\n        const nextStyle = location.pathname.split('/').slice(-1)[0] as RmgStyle;\n        if (Object.values(RmgStyle).includes(nextStyle)) {\n            // set style in param\n            dispatch(setStyle(nextStyle));\n        } else {\n            // push route to match param's style\n            navigate(rmgStyle);\n        }\n    }\n\n    useEffect(() => {\n        (document.getElementById('css_share') as HTMLLinkElement).href =\n            process.env.PUBLIC_URL + `/styles/share_${rmgStyle}.css`;\n    }, [rmgStyle]);\n\n    const filteredCanvas = (Object.keys(canvasList[rmgStyle]) as CanvasType[]).filter(canvas =>\n        canvasToShow === 'all' ? true : canvasToShow === canvas\n    );\n\n    return (\n        <div className={classes.root}>\n            {filteredCanvas.map(canvas => (\n                <SvgWrapper\n                    key={canvas + rmgStyle}\n                    type={canvas}\n                    style={rmgStyle}\n                    svgWidth={svgWidths[canvas]}\n                    svgHeight={svgHeight}\n                    canvasScale={canvasScale}\n                    theme={theme}\n                >\n                    {canvasList[rmgStyle][canvas]}\n                </SvgWrapper>\n            ))}\n        </div>\n    );\n}\n\n// Canvas available\n\nconst RunInGZMTR = lazy(() => import(/* webpackChunkName: \"runinGZMTR\" */ './runin/runin-gzmtr'));\nconst RailMapGZMTR = lazy(() => import(/* webpackChunkName: \"railmapGZMTR\" */ './railmap/railmap-gzmtr'));\n\nconst DestinationMTR = lazy(() => import(/* webpackChunkName: \"destinationMTR\" */ './destination/destination-mtr'));\nconst RailMapMTR = lazy(() => import(/* webpackChunkName: \"railmapMTR\" */ './railmap/railmap-mtr'));\n\nconst DestinationSHMetro = lazy(\n    () => import(/* webpackChunkName: \"destinationSHMetro\" */ './destination/destination-shmetro')\n);\nconst RunInSHMetro = lazy(() => import(/* webpackChunkName: \"runinSHMetro\" */ './runin/runin-shmetro'));\nconst RailMapSHMetro = lazy(() => import(/* webpackChunkName: \"railmapSHMetro\" */ './railmap/railmap-shmetro'));\nconst IndoorSHMetro = lazy(() => import(/* webpackChunkName: \"indoorSHMetro\" */ './indoor/indoor-shmetro'));\n\n/**\n * Each value of this object is an object of ORDERED key-value pairs\n */\nconst canvasList: Record<RmgStyle, { [c in CanvasType]?: ReactNode }> = {\n    [RmgStyle.GZMTR]: {\n        [CanvasType.RunIn]: <RunInGZMTR />,\n        [CanvasType.RailMap]: <RailMapGZMTR />,\n    },\n    [RmgStyle.MTR]: {\n        [CanvasType.Destination]: <DestinationMTR />,\n        [CanvasType.RailMap]: <RailMapMTR />,\n    },\n    [RmgStyle.SHMetro]: {\n        [CanvasType.Destination]: <DestinationSHMetro />,\n        [CanvasType.RunIn]: <RunInSHMetro />,\n        [CanvasType.RailMap]: <RailMapSHMetro />,\n        [CanvasType.Indoor]: <IndoorSHMetro />,\n    },\n};\n","import React, { useEffect } from 'react';\nimport { useAppSelector } from '../redux';\nimport { setSelectedStation, setSidePanelMode } from '../redux/app/action';\nimport { useDispatch } from 'react-redux';\nimport { Alert, AlertIcon, Box, CloseButton, Flex } from '@chakra-ui/react';\nimport { SidePanelMode } from '../constants/constants';\n\nexport default function SidePanel() {\n    const dispatch = useDispatch();\n\n    const { sidePanelMode, selectedStation } = useAppSelector(state => state.app);\n    const { name } = useAppSelector(state => state.param.stn_list[selectedStation]);\n\n    const handleClose = () => {\n        dispatch(setSidePanelMode(SidePanelMode.CLOSE));\n    };\n\n    return (\n        <Flex\n            as=\"section\"\n            height=\"100%\"\n            maxW={sidePanelMode !== SidePanelMode.CLOSE ? 320 : 0}\n            visibility={sidePanelMode !== SidePanelMode.CLOSE ? 'initial' : 'hidden'}\n            position=\"relative\"\n            boxShadow=\"xl\"\n            shrink={0}\n            direction=\"column\"\n            transition=\"0.3s\"\n        >\n            <Box width={320}>\n                <Alert status=\"info\" variant=\"solid\" size=\"xs\" pl={3} pr={1} pb={0} pt={0}>\n                    <AlertIcon />\n                    {name[0] + ' - ' + name[1]}\n                    <CloseButton ml=\"auto\" onClick={handleClose} />\n                </Alert>\n            </Box>\n        </Flex>\n    );\n}\n","import React from 'react';\nimport { Button, ButtonGroup, FormControl, FormLabel } from '@chakra-ui/react';\n\nexport default function CanvasButtonGroup() {\n    return (\n        <FormControl width=\"unset\" mt={-1}>\n            <FormLabel size=\"xs\" sx={{ fontSize: 12, marginRight: 0, marginBottom: -0.5 }}>\n                Canvas to show\n            </FormLabel>\n            <ButtonGroup size=\"xs\" isAttached variant=\"outline\" colorScheme=\"teal\">\n                <Button variant=\"solid\">Destination</Button>\n                <Button>Rail map</Button>\n            </ButtonGroup>\n        </FormControl>\n    );\n}\n","import React from 'react';\nimport { Button, Menu, MenuButton, MenuList, MenuItem } from '@chakra-ui/react';\nimport { ChevronDownIcon } from '@chakra-ui/icons';\n\nexport default function DownloadActions() {\n    return (\n        <Menu>\n            <MenuButton as={Button} variant=\"ghost\" size=\"sm\" rightIcon={<ChevronDownIcon />}>\n                Downloads\n            </MenuButton>\n            <MenuList>\n                <MenuItem>Configuration file</MenuItem>\n                <MenuItem>Images</MenuItem>\n            </MenuList>\n        </Menu>\n    );\n}\n","import React from 'react';\nimport { HStack, Button } from '@chakra-ui/react';\nimport DownloadActions from './download-actions';\nimport { SmallAddIcon } from '@chakra-ui/icons';\n\nexport default function HeaderActions() {\n    return (\n        <HStack ml=\"auto\">\n            <DownloadActions />\n            <Button variant=\"ghost\" size=\"sm\">\n                Upload\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" colorScheme=\"brand\" leftIcon={<SmallAddIcon />}>\n                Add station\n            </Button>\n        </HStack>\n    );\n}\n","import React from 'react';\nimport { Flex } from '@chakra-ui/react';\nimport CanvasButtonGroup from './canvas-button-group';\nimport HeaderActions from './header-actions';\n\nexport default function PageHeader() {\n    return (\n        <Flex align=\"center\" wrap=\"wrap\" pl={3} pr={3} pb={2} pt={2}>\n            <CanvasButtonGroup />\n            <HeaderActions />\n        </Flex>\n    );\n}\n","import React, { ReactElement } from 'react';\nimport { Box, Table, Thead, Tbody, Tr, Th, Td, useColorModeValue } from '@chakra-ui/react';\n\ntype valueField<T> = {\n    label: string;\n    key: keyof T;\n};\n\ntype customField<T> = {\n    label: string;\n    displayHandler: (d: T) => ReactElement | string | number;\n};\n\nexport type DataTableFieldType<T> = valueField<T> | customField<T>;\nexport type DataTableDataType = { id: string; isSelected: boolean } & { [key: string]: any };\n\ninterface StationDisplayDataProps<T> {\n    data: T[];\n    fields: Array<DataTableFieldType<T>>;\n}\n\nexport default function DataTable<T extends DataTableDataType>(props: StationDisplayDataProps<T>) {\n    const { data, fields } = props;\n\n    const wrapperBg = useColorModeValue('gray.50', 'gray.700');\n\n    const pageData = data.map(d => ({\n        data: d,\n        display: fields.reduce<{ [key: string]: { value: any } }>((acc, cur) => {\n            const value = (cur as any).key ? (d[(cur as any).key] || '').toString() : (cur as any).displayHandler(d);\n            acc[cur.label] = { value };\n            return acc;\n        }, {}),\n    }));\n\n    return (\n        <Box bg={wrapperBg}>\n            <Table size=\"sm\" >\n                <Thead>\n                    <Tr>\n                        {fields.map((field, i) => (\n                            <Th key={i}>{field.label}</Th>\n                        ))}\n                    </Tr>\n                </Thead>\n                <Tbody>\n                    {pageData.map(item => (\n                        <Tr key={item.data.id} tabIndex={-1} selected={item.data.isSelected} hover>\n                            {fields.map((field, i) => (\n                                <Td key={item.data.id + '-' + i}>{item.display[field.label].value}</Td>\n                            ))}\n                        </Tr>\n                    ))}\n                </Tbody>\n            </Table>\n        </Box>\n    );\n}\n","import React from 'react';\nimport { setCurrentStation } from '../../redux/param/action';\nimport { setSelectedStation, setSidePanelMode } from '../../redux/app/action';\nimport { useDispatch } from 'react-redux';\nimport { HStack, IconButton } from '@chakra-ui/react';\nimport { DeleteIcon, EditIcon, StarIcon } from '@chakra-ui/icons';\nimport { SidePanelMode } from '../../constants/constants';\n\ninterface TableRowActionsProps {\n    stationId: string;\n}\n\nexport default function TableRowActions(props: TableRowActionsProps) {\n    const { stationId } = props;\n\n    const dispatch = useDispatch();\n\n    const handleEdit = () => {\n        dispatch(setSelectedStation(stationId));\n        dispatch(setSidePanelMode(SidePanelMode.STATION));\n    };\n\n    const handleDelete = () => {};\n\n    return (\n        <HStack>\n            <IconButton\n                size=\"xs\"\n                aria-label=\"Set as current station\"\n                onClick={() => dispatch(setCurrentStation(stationId))}\n                icon={<StarIcon />}\n            />\n            <IconButton\n                size=\"xs\"\n                aria-label=\"Edit this station\"\n                onClick={handleEdit}\n                icon={<EditIcon />}\n            />\n            <IconButton size=\"xs\" aria-label=\"Delete this station\" onClick={handleDelete} icon={<DeleteIcon />} />\n        </HStack>\n    );\n}\n","import React from 'react';\nimport { useAppSelector } from '../../redux';\nimport DataTable, { DataTableFieldType } from './data-table';\nimport TableRowActions from './table-row-actions';\n\ntype StationDisplayData = {\n    id: string;\n    chineseName: string;\n    englishName: string;\n    interchange: string;\n    isSelected: boolean;\n};\n\nexport default function StationDataTable() {\n    const selectedStation = useAppSelector(state => state.app.selectedStation);\n    const stationList = useAppSelector(state => state.param.stn_list);\n\n    const data: StationDisplayData[] = Object.entries(stationList)\n        .filter(([id]) => !['linestart', 'lineend'].includes(id))\n        .map(([id, station]) => {\n            return {\n                id,\n                chineseName: station.name[0],\n                englishName: station.name[1],\n                interchange: station.transfer.info.map(info => info.length).join('-'),\n                isSelected: id === selectedStation,\n            };\n        });\n\n    const fields: DataTableFieldType<StationDisplayData>[] = [\n        { key: 'chineseName', label: 'Chinese name' },\n        { key: 'englishName', label: 'English name' },\n        { key: 'interchange', label: 'Interchange' },\n        {\n            label: 'Actions',\n            displayHandler: item => <TableRowActions stationId={item.id} />,\n        },\n    ];\n\n    return <DataTable data={data} fields={fields} />;\n}\n","import { version } from '../../package.json';\n\nexport enum Environments {\n    DEV = 'DEV',\n    UAT = 'UAT',\n    PRD = 'PRD',\n}\n\nexport const getEnvironment = () => {\n    if (window.location.hostname === 'localhost') {\n        return Environments.DEV;\n    } else if (window.location.pathname.includes('uat')) {\n        return Environments.UAT;\n    } else {\n        return Environments.PRD;\n    }\n};\n\nexport const getVersion = () => {\n    return version;\n};\n","import React from 'react';\nimport { Flex, Heading, Badge, Box } from '@chakra-ui/react';\nimport { Environments, getEnvironment, getVersion } from '../util/config';\n\nexport default function WindowHeader() {\n    const environment = getEnvironment();\n    const getBadgeColour = (env: Environments) => {\n        switch (env) {\n            case Environments.DEV:\n                return 'red';\n            case Environments.UAT:\n                return 'orange';\n            case Environments.PRD:\n                return 'green';\n        }\n    };\n\n    return (\n        <Flex p={1} align=\"center\" justify=\"space-between\">\n            <Box ml={2}>\n                <Heading as=\"h4\" size=\"md\">\n                    Rail Map Generator\n                    <Badge ml={1} colorScheme={getBadgeColour(environment)}>\n                        {environment === Environments.PRD ? getVersion() : environment}\n                    </Badge>\n                </Heading>\n            </Box>\n        </Flex>\n    );\n}\n","import { extendTheme } from '@chakra-ui/react';\n\nconst config = {\n    initialColorMode: 'light',\n    useSystemColorMode: true,\n};\n\nconst theme = extendTheme({ config });\n\nexport default theme;\n","import React from 'react';\nimport SvgRouter from '../svgs/svg-router';\nimport SidePanel from './side-panel';\nimport PageHeader from './page-header/page-header';\nimport StationDataTable from './data-table/station-data-table';\nimport WindowHeader from './window-header';\nimport { ChakraProvider, Box, Flex } from '@chakra-ui/react';\nimport theme from '../theme/theme';\n\nexport default function AppRoot() {\n    return (\n        <ChakraProvider theme={theme}>\n            <Flex direction=\"column\" height=\"100%\" overflow=\"hidden\">\n                <WindowHeader />\n                <Flex direction=\"column\" flex={1} overflow=\"hidden\">\n                    <PageHeader />\n                    <Flex flex={1} overflow=\"hidden\">\n                        <Flex as=\"section\" direction=\"column\" flex={1} ml={1} mr={1} overflow=\"hidden\">\n                            <Box>\n                                <SvgRouter />\n                            </Box>\n                            <Box flex={1} overflowY=\"auto\">\n                                <StationDataTable />\n                            </Box>\n                        </Flex>\n\n                        <SidePanel />\n                    </Flex>\n                </Flex>\n            </Flex>\n        </ChakraProvider>\n    );\n}\n","import React, { useEffect } from 'react';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport AppAppBar from './app-appbar';\nimport Panels from './panels';\nimport { createTheme, ThemeProvider, useMediaQuery, LinearProgress } from '@material-ui/core';\nimport { useAppSelector } from './redux';\nimport SvgRouter from './svgs/svg-router';\nimport AppRoot from './components/app-root';\n\nconst darkTheme = createTheme({\n    palette: {\n        type: 'dark',\n        primary: {\n            main: '#bb86fc',\n        },\n        secondary: {\n            main: '#018786',\n        },\n        error: {\n            main: '#cf6679',\n        },\n    },\n    // palette: {\n    //     type: 'dark',\n    //     primary: {\n    //         main: '#8ab4f8',\n    //     },\n    // },\n    overrides: {\n        MuiDialog: {\n            paper: {\n                minWidth: 280,\n            },\n        },\n    },\n});\n\nconst lightTheme = createTheme({\n    palette: {\n        primary: {\n            light: '#bb86fc',\n            main: '#6200ee',\n        },\n        secondary: {\n            main: '#018786',\n        },\n        error: {\n            main: '#b00020',\n        },\n    },\n    // palette: {\n    //     primary: {\n    //         main: '#1a73e8',\n    //     },\n    //     text: {\n    //         primary: '#202124',\n    //         secondary: '#5f6368',\n    //     },\n    // },\n    overrides: {\n        MuiDialog: {\n            paper: {\n                minWidth: 280,\n            },\n        },\n    },\n});\n\nexport default function App() {\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n    const theme = prefersDarkMode ? darkTheme : lightTheme;\n\n    return (\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <Routes>\n                <Route path=\"/v5/*\" element={<AppRoot />} />\n                <Route\n                    path=\"*\"\n                    element={\n                        <ThemeProvider theme={theme}>\n                            <React.Suspense fallback={<LinearProgress />}>\n                                <AppAppBar />\n                            </React.Suspense>\n                            <AppBody />\n                        </ThemeProvider>\n                    }\n                />\n            </Routes>\n        </BrowserRouter>\n    );\n}\n\nconst AppBody = () => {\n    const param = useAppSelector(store => store.param);\n\n    const paramString = JSON.stringify(param);\n    useEffect(() => {\n        window.rmgStorage.writeFile('rmgParam', paramString).then();\n    }, [paramString]);\n\n    return (\n        <>\n            <div style={{ overflowY: 'auto' }}>\n                <SvgRouter />\n            </div>\n            <div style={{ flex: 1, overflow: 'hidden' }}>\n                <Panels />\n            </div>\n\n            <canvas style={{ display: 'none' }} />\n        </>\n    );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","export const FILE_NOT_FOUND = 'FILE_NOT_FOUND';\n\nexport default interface StorageService {\n    init: () => Promise<void>;\n\n    writeFile: (filename: string, contents: string) => Promise<void>;\n\n    readFile: (filename: string) => Promise<string>;\n\n    deleteFile: (filename: string) => Promise<void>;\n}\n","import { FILE_NOT_FOUND } from './storageService';\n\nexport default class StorageLocalStorage {\n    private currentBusyFilename: false | string;\n\n    constructor() {\n        this.currentBusyFilename = false;\n    }\n\n    async init() {\n        console.warn('Using localStorage, please update your browser');\n\n        if (!window.localStorage) {\n            alert('Local storage is not available! Please upgrade to a newer browser!');\n            throw new Error('LocalStorage unavailable');\n        }\n\n        try {\n            window.localStorage.setItem('storage_test', '1');\n            window.localStorage.removeItem('storage_test');\n        } catch (e) {\n            alert(\n                \"Local storage is not accessible! Please modify your browser's settings or try with another browser!\"\n            );\n            throw new Error('LocalStorage no write permission');\n        }\n    }\n\n    async writeFile(filename: string, contents: string) {\n        if (this.currentBusyFilename === filename) {\n            console.warn('Attempt to write', filename, 'while write process is not finished!');\n        }\n\n        this.currentBusyFilename = filename;\n        window.localStorage.setItem(filename, contents);\n        this.currentBusyFilename = false;\n    }\n\n    async readFile(filename: string) {\n        if (this.currentBusyFilename === filename) {\n            console.warn('Attempt to read', filename, 'while write process is not finished!');\n        }\n\n        const contents = window.localStorage.getItem(filename);\n        if (!contents) {\n            throw new Error(FILE_NOT_FOUND);\n        }\n        return contents;\n    }\n\n    async deleteFile(filename: string) {\n        if (this.currentBusyFilename === filename) {\n            console.warn('Attempt to delete', filename, 'while write process is not finished!');\n        }\n\n        this.currentBusyFilename = filename;\n        window.localStorage.removeItem(filename);\n        this.currentBusyFilename = false;\n    }\n}\n","import StorageLocalStorage from './storageLocalStorage';\nimport StorageService from './storageService';\n\nexport default async function getRmgStorage(): Promise<StorageService> {\n    if (!window.indexedDB) {\n        console.log('IndexedDB not supported');\n        return new StorageLocalStorage();\n    }\n\n    return await new Promise<StorageService>(resolve => {\n        try {\n            const request = window.indexedDB.open('indexeddb_feature_detection', 1);\n\n            request.onerror = err => {\n                console.log('IndexedDB can NOT be accessed:', err);\n                console.log('Fallback to LocalStorage');\n                resolve(new StorageLocalStorage());\n            };\n\n            request.onsuccess = () => {\n                console.log('IndexedDB can be accessed');\n                // TODO: toggle on indexedDB\n                // resolve(new StorageIndexedDB());\n                resolve(new StorageLocalStorage());\n            };\n        } catch (error) {\n            console.warn('Error while opening IndexedDB:', error);\n            resolve(new StorageLocalStorage());\n        }\n    });\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport './i18n';\nimport App from './App';\nimport { updateParam } from './utils';\nimport * as serviceWorker from './serviceWorker';\n\nimport { AllCanvas, CanvasType, RMGParam } from './constants/constants';\nimport StorageService from './util/storage/storageService';\nimport getRmgStorage from './util/storage';\nimport store from './redux';\nimport { Provider } from 'react-redux';\nimport { setCanvasScale, setCanvasToShow } from './redux/app/action';\nimport { setFullParam } from './redux/param/action';\nimport autoSaveScheduler from './util/auto-save-scheduler';\n\ndeclare global {\n    interface Window {\n        gtag: any;\n        rmgStorage: StorageService;\n        rmgStore: any;\n    }\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// load empty stylesheet elements\ndocument.head.append(\n    ...['share', ...Object.values(CanvasType)].map(tag => {\n        let link = document.createElement('link');\n        link.rel = 'stylesheet';\n        link.id = 'css_' + tag;\n        return link;\n    })\n);\n\nconst renderApp = () => {\n    ReactDOM.render(\n        // <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>,\n        // </React.StrictMode>,\n        document.getElementById('root')\n    );\n};\n\nexport const reRenderApp = (param: RMGParam) => {\n    ReactDOM.unmountComponentAtNode(document.getElementById('root')!);\n    window.history.pushState({}, '', process.env.PUBLIC_URL + '/' + param.style);\n    store.dispatch(setFullParam(param));\n    renderApp();\n};\n\ngetRmgStorage()\n    .then(async rmgStorage => {\n        // setup storage and param\n        await rmgStorage.init();\n        try {\n            const contents = await rmgStorage.readFile('rmgParam');\n\n            const updatedParam = updateParam(JSON.parse(contents));\n            await rmgStorage.writeFile('rmgParam', JSON.stringify(updatedParam));\n        } catch (err) {\n            console.warn('Error in reading rmgParam', err);\n            const module = await import('./constants/templates/basic/blank');\n            const updatedParam = updateParam(module.default);\n            await rmgStorage.writeFile('rmgParam', JSON.stringify(updatedParam));\n        } finally {\n            window.rmgStorage = rmgStorage;\n        }\n    })\n    .then(async () => {\n        // init param store with localStorage\n        const contents = await window.rmgStorage.readFile('rmgParam');\n        store.dispatch(setFullParam(JSON.parse(contents)));\n    })\n    .then(async () => {\n        // style being setup in SVG's router\n\n        // setup canvas scale\n        try {\n            const canvasScaleString = await window.rmgStorage.readFile('rmgScale');\n            const canvasScale = Number(canvasScaleString);\n            canvasScale >= 0.1 && store.dispatch(setCanvasScale(canvasScale));\n        } catch (err) {\n            console.warn('Error in reading rmgScale file', err);\n            console.log('Initiating rmgScale as 1');\n            await window.rmgStorage.writeFile('rmgScale', '1');\n            store.dispatch(setCanvasScale(1));\n        }\n\n        // setup canvas to show\n        try {\n            const canvasToShow = (await window.rmgStorage.readFile('rmgCanvas')) as CanvasType | typeof AllCanvas;\n            store.dispatch(setCanvasToShow(canvasToShow));\n        } catch (err) {\n            console.warn('Error in reading rmgCanvas file', err);\n            console.log('Initiating rmgCanvas as \"all\"');\n            await window.rmgStorage.writeFile('rmgCanvas', AllCanvas);\n            store.dispatch(setCanvasToShow(AllCanvas));\n        }\n\n        window.rmgStore = store;\n    })\n    .then(() => {\n        renderApp();\n    })\n    .then(() => {\n        autoSaveScheduler();\n    });\n","export default function autoSaveScheduler() {\n    setInterval(async () => {\n        await window.rmgStorage.writeFile('rmgParamRedux', JSON.stringify(window.rmgStore.getState().param));\n        console.log('Parameter auto saved!');\n    }, 60 * 1000);\n}\n","import {\n    BranchStyle,\n    CanvasType,\n    Direction,\n    Facilities,\n    InterchangeInfo,\n    Name,\n    Note,\n    PanelTypeGZMTR,\n    PanelTypeShmetro,\n    RMGParam,\n    RmgStyle,\n    Services,\n    ShortDirection,\n    StationDict,\n    StationInfo,\n    Theme,\n} from '../../constants/constants';\nimport { AppDispatch, RootState } from '../index';\nimport { triggerHelpersUpdate } from '../helper/action';\n\nexport const SET_FULL_PARAM = 'SET_FULL_PARAM';\n\n// file\nexport const SET_STYLE = 'SET_STYLE';\n\n// layout\nexport const SET_SVG_HEIGHT = 'SET_SVG_HEIGHT';\nexport const SET_SVG_WIDTH = 'SET_SVG_WIDTH';\nexport const SET_Y_PERCENTAGE = 'SET_Y_PERCENTAGE';\nexport const SET_BRANCH_SPACING = 'SET_BRANCH_SPACING';\nexport const SET_PADDING_PERCENTAGE = 'SET_PADDING_PERCENTAGE';\nexport const SET_DIRECTION_INDICATOR_X = 'SET_DIRECTION_INDICATOR_X';\nexport const SET_DIRECTION_INDICATOR_Y = 'SET_DIRECTION_INDICATOR_Y';\n\n// design\nexport const SET_THEME = 'SET_THEME';\nexport const SET_LINE_NAME = 'SET_LINE_NAME';\nexport const SET_DIRECTION = 'SET_DIRECTION';\nexport const SET_PLATFORM = 'SET_PLATFORM';\nexport const SET_LINE_NUM = 'SET_LINE_NUM';\nexport const SET_PSD_NUM = 'SET_PSD_NUM';\nexport const SET_PANEL_TYPE = 'SET_PANEL_TYPE';\nexport const SET_NOTES = 'SET_NOTES';\nexport const SET_NAME_POSITION = 'SET_NAME_POSITION';\nexport const SET_CUSTOMISED_MTR_DESTINATION = 'SET_CUSTOMISED_MTR_DESTINATION';\n\n// stations\nexport const SET_CURRENT_STATION = 'SET_CURRENT_STATION';\nexport const SET_STATION = 'SET_STATION';\nexport const SET_STATIONS_BULK = 'SET_STATIONS_BULK';\n\nexport interface setFullParamAction {\n    type: typeof SET_FULL_PARAM;\n    fullParam: RMGParam;\n}\n\nexport interface setStyleAction {\n    type: typeof SET_STYLE;\n    style: RmgStyle;\n}\n\nexport interface setSvgHeightAction {\n    type: typeof SET_SVG_HEIGHT;\n    svgHeight: number;\n}\n\nexport interface setSvgWidthAction {\n    type: typeof SET_SVG_WIDTH;\n    svgWidth: number;\n    canvas: CanvasType;\n}\n\nexport interface setYPercentageAction {\n    type: typeof SET_Y_PERCENTAGE;\n    yPercentage: number;\n}\n\nexport interface setBranchSpacingAction {\n    type: typeof SET_BRANCH_SPACING;\n    branchSpacing: number;\n}\n\nexport interface setPaddingPercentageAction {\n    type: typeof SET_PADDING_PERCENTAGE;\n    paddingPercentage: number;\n}\n\nexport interface setDirectionIndicatorXAction {\n    type: typeof SET_DIRECTION_INDICATOR_X;\n    directionIndicatorX: number;\n}\n\nexport interface setDirectionIndicatorYAction {\n    type: typeof SET_DIRECTION_INDICATOR_Y;\n    directionIndicatorY: number;\n}\n\nexport interface setThemeAction {\n    type: typeof SET_THEME;\n    theme: Theme;\n}\n\nexport interface setLineNameAction {\n    type: typeof SET_LINE_NAME;\n    lineName: Name;\n}\n\nexport interface setDirectionAction {\n    type: typeof SET_DIRECTION;\n    direction: ShortDirection;\n}\n\nexport interface setPlatformAction {\n    type: typeof SET_PLATFORM;\n    platform: string | false;\n}\n\nexport interface setLineNumAction {\n    type: typeof SET_LINE_NUM;\n    lineNum: string;\n}\n\nexport interface setPsdNumAction {\n    type: typeof SET_PSD_NUM;\n    psdNum: string;\n}\n\nexport interface setPanelTypeAction {\n    type: typeof SET_PANEL_TYPE;\n    panelType: PanelTypeGZMTR | PanelTypeShmetro;\n}\n\nexport interface setNotesAction {\n    type: typeof SET_NOTES;\n    notes: Note[];\n}\n\nexport interface setNamePositionAction {\n    type: typeof SET_NAME_POSITION;\n    namePosition: RMGParam['namePosMTR'];\n}\n\nexport interface setCustomisedMtrDestinationAction {\n    type: typeof SET_CUSTOMISED_MTR_DESTINATION;\n    customisedMtrDestination: RMGParam['customiseMTRDest'];\n}\n\nexport interface setCurrentStationAction {\n    type: typeof SET_CURRENT_STATION;\n    currentStation: string;\n    stn_list_keys: string[];\n}\n\nexport interface setStationAction {\n    type: typeof SET_STATION;\n    stationId: string;\n    station: StationInfo;\n}\n\nexport interface setStationsBulkAction {\n    type: typeof SET_STATIONS_BULK;\n    stations: StationDict;\n}\n\n// export const setFullParam = (fullParam: RMGParam): setFullParamAction => {\n//     return { type: SET_FULL_PARAM, fullParam };\n// };\n\nexport const setFullParam = (fullParam: RMGParam) => {\n    return (dispatch: AppDispatch) => {\n        dispatch({ type: SET_FULL_PARAM, fullParam });\n        dispatch(triggerHelpersUpdate());\n    };\n};\n\nexport const setSvgHeight = (svgHeight: number): setSvgHeightAction => {\n    return { type: SET_SVG_HEIGHT, svgHeight };\n};\n\nexport const setSvgWidth = (svgWidth: number, canvas: CanvasType): setSvgWidthAction => {\n    return { type: SET_SVG_WIDTH, svgWidth, canvas };\n};\n\nexport const setStyle = (style: RmgStyle): setStyleAction => {\n    return { type: SET_STYLE, style };\n};\n\nexport const setYPercentage = (yPercentage: number): setYPercentageAction => {\n    return { type: SET_Y_PERCENTAGE, yPercentage };\n};\n\nexport const setBranchSpacing = (branchSpacing: number): setBranchSpacingAction => {\n    return { type: SET_BRANCH_SPACING, branchSpacing };\n};\n\nexport const setPaddingPercentage = (paddingPercentage: number): setPaddingPercentageAction => {\n    return { type: SET_PADDING_PERCENTAGE, paddingPercentage };\n};\n\nexport const setDirectionIndicatorX = (directionIndicatorX: number): setDirectionIndicatorXAction => {\n    return { type: SET_DIRECTION_INDICATOR_X, directionIndicatorX };\n};\n\nexport const setDirectionIndicatorY = (directionIndicatorY: number): setDirectionIndicatorYAction => {\n    return { type: SET_DIRECTION_INDICATOR_Y, directionIndicatorY };\n};\n\nexport const setTheme = (theme: Theme): setThemeAction => {\n    return { type: SET_THEME, theme };\n};\n\nexport const setLineName = (lineName: Name): setLineNameAction => {\n    return { type: SET_LINE_NAME, lineName };\n};\n\nexport const setDirection = (direction: ShortDirection): setDirectionAction => {\n    return { type: SET_DIRECTION, direction };\n};\n\nexport const setPlatform = (platform: string | false): setPlatformAction => {\n    return { type: SET_PLATFORM, platform };\n};\n\nexport const setLineNum = (lineNum: string): setLineNumAction => {\n    return { type: SET_LINE_NUM, lineNum };\n};\n\nexport const setPsdNum = (psdNum: string): setPsdNumAction => {\n    return { type: SET_PSD_NUM, psdNum };\n};\n\nexport const setPanelType = (panelType: PanelTypeShmetro | PanelTypeGZMTR): setPanelTypeAction => {\n    return { type: SET_PANEL_TYPE, panelType };\n};\n\nconst setNotes = (notes: Note[]): setNotesAction => {\n    return { type: SET_NOTES, notes };\n};\n\nexport const addNote = () => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const notes = getState().param.notesGZMTR;\n        dispatch(setNotes(notes.concat([['', '', 0, 0, false]])));\n    };\n};\n\nexport const updateNote = (index: number, updatedNote: Note) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const notes = getState().param.notesGZMTR;\n        dispatch(setNotes(notes.map((originalNote, idx) => (idx === index ? updatedNote : originalNote))));\n    };\n};\n\nexport const removeNote = (index: number) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const notes = getState().param.notesGZMTR;\n        dispatch(setNotes(notes.filter((_, idx) => idx !== index)));\n    };\n};\n\nconst setNamePosition = (namePosition: RMGParam['namePosMTR']): setNamePositionAction => {\n    return { type: SET_NAME_POSITION, namePosition };\n};\n\nexport const staggerStationNames = (isStagger: boolean) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const namePosition = getState().param.namePosMTR;\n        dispatch(setNamePosition({ ...namePosition, isStagger }));\n    };\n};\n\nexport const flipStationNames = () => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const namePosition = getState().param.namePosMTR;\n        dispatch(setNamePosition({ ...namePosition, isFlip: !namePosition.isFlip }));\n    };\n};\n\nconst setCustomisedMtrDestination = (\n    customisedMtrDestination: RMGParam['customiseMTRDest']\n): setCustomisedMtrDestinationAction => {\n    return { type: SET_CUSTOMISED_MTR_DESTINATION, customisedMtrDestination };\n};\n\nexport const toggleLineNameBeforeDestination = (isShow: boolean) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const customisedMtrDestination = getState().param.customiseMTRDest;\n        dispatch(setCustomisedMtrDestination({ ...customisedMtrDestination, isLegacy: isShow }));\n    };\n};\n\nexport const customiseDestinationName = (customisedName: Name | false) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const customisedMtrDestination = getState().param.customiseMTRDest;\n        dispatch(setCustomisedMtrDestination({ ...customisedMtrDestination, terminal: customisedName }));\n    };\n};\n\n/**\n * Set the current station from `currentStation`.\n * @param currentStation The station id which we want to set.\n * @returns A promise that we can do something after svg elements are completely updated in `downloadSvg` of `PreviewDialog`.\n */\nexport const setCurrentStation = (currentStation: string) => {\n    return (dispatch: AppDispatch) => {\n        dispatch({ type: SET_CURRENT_STATION, currentStation });\n        return Promise.resolve();\n    };\n};\n\nexport const setStation = (stationId: string, station: StationInfo) => {\n    return (dispatch: AppDispatch) => {\n        dispatch({ type: SET_STATION, stationId, station });\n        dispatch(triggerHelpersUpdate());\n    };\n};\n\n// export const setStationsBulk = (stations: StationDict): setStationsBulkAction => {\n//     return { type: SET_STATIONS_BULK, stations };\n// };\n\nexport const setStationsBulk = (stations: StationDict) => {\n    return (dispatch: AppDispatch) => {\n        dispatch({ type: SET_STATIONS_BULK, stations });\n        dispatch(triggerHelpersUpdate());\n    };\n};\n\nexport const reverseStations = () => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const { stn_list } = getState().param;\n        const newStationList = Object.keys(stn_list).reduce(\n            (acc, stnId) => ({\n                ...acc,\n                [stnId]: (id => {\n                    switch (id) {\n                        case 'linestart':\n                            return {\n                                ...stn_list.lineend,\n                                parents: [],\n                                children: stn_list.lineend.parents.slice().reverse(),\n                                branch: { left: [] as [], right: stn_list.lineend.branch.left },\n                            };\n                        case 'lineend':\n                            return {\n                                ...stn_list.linestart,\n                                parents: stn_list.linestart.children.slice().reverse(),\n                                children: [],\n                                branch: { left: stn_list.linestart.branch.right, right: [] as [] },\n                            };\n                        default:\n                            return {\n                                ...stn_list[id],\n                                parents: stn_list[id].children\n                                    .map(id => (id === 'linestart' ? 'lineend' : id === 'lineend' ? 'linestart' : id))\n                                    .reverse(),\n                                children: stn_list[id].parents\n                                    .map(id => (id === 'linestart' ? 'lineend' : id === 'lineend' ? 'linestart' : id))\n                                    .reverse(),\n                                branch: {\n                                    left: stn_list[id].branch.right,\n                                    right: stn_list[id].branch.left,\n                                },\n                            };\n                    }\n                })(stnId),\n            }),\n            {} as StationDict\n        );\n        dispatch(setStationsBulk(newStationList));\n    };\n};\n\nexport const updateStationName = (stationId: string, name: Name) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(setStation(stationId, { ...stationInfo, name }));\n    };\n};\n\nexport const updateStationSecondaryName = (stationId: string, secondaryName: Name | false) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(setStation(stationId, { ...stationInfo, secondaryName }));\n    };\n};\n\nexport const updateStationNum = (stationId: string, num: string) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(setStation(stationId, { ...stationInfo, num }));\n    };\n};\n\n/**\n *\n * @param stationId\n * @param setIndex - set 0: within-station interchange. set 1: Out of station(OSI) transfer. set 2: Out of system(OSysI) transfer\n * @param interchangeInfo\n */\nexport const addInterchange = (stationId: string, setIndex: number, interchangeInfo: InterchangeInfo) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n\n        const newTransferInfo = stationInfo.transfer.info.map(i => i.slice());\n        if (newTransferInfo.length > setIndex) {\n            newTransferInfo[setIndex].push(interchangeInfo);\n        } else {\n            for (let i = newTransferInfo.length; i < setIndex; i++) {\n                newTransferInfo[i] = [];\n            }\n            newTransferInfo[setIndex] = [interchangeInfo];\n        }\n\n        dispatch(\n            setStation(stationId, { ...stationInfo, transfer: { ...stationInfo.transfer, info: newTransferInfo } })\n        );\n    };\n};\n\nexport const removeInterchange = (stationId: string, setIndex: number, interchangeIndex: number) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n\n        if (\n            stationInfo.transfer.info.length > setIndex &&\n            stationInfo.transfer.info[setIndex].length > interchangeIndex\n        ) {\n            const newTransferInfo = stationInfo.transfer.info.map((set, setIdx) =>\n                setIdx === setIndex ? set.filter((_, intIdx) => intIdx !== interchangeIndex) : set\n            );\n            dispatch(\n                setStation(stationId, { ...stationInfo, transfer: { ...stationInfo.transfer, info: newTransferInfo } })\n            );\n        }\n    };\n};\n\nexport const updateInterchange = (\n    stationId: string,\n    setIndex: number,\n    interchangeIndex: number,\n    interchangeInfo: InterchangeInfo\n) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n\n        if (\n            stationInfo.transfer.info.length > setIndex &&\n            stationInfo.transfer.info[setIndex].length > interchangeIndex\n        ) {\n            const newTransferInfo = stationInfo.transfer.info.map((set, setIdx) =>\n                setIdx === setIndex\n                    ? set.map((int, intIdx) =>\n                          intIdx === interchangeIndex\n                              ? ([0, 1, 2, 3, 4, 5].map(i =>\n                                    interchangeInfo[i] === undefined ? int[i] : interchangeInfo[i]\n                                ) as InterchangeInfo)\n                              : int\n                      )\n                    : set\n            );\n            dispatch(\n                setStation(stationId, { ...stationInfo, transfer: { ...stationInfo.transfer, info: newTransferInfo } })\n            );\n        }\n    };\n};\n\nexport const updateStationOsiName = (stationId: string, setIndex: number, osiName: Name) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n\n        const newOsiNames = stationInfo.transfer.osi_names.map(i => i.slice()) as Name[];\n        if (newOsiNames.length > setIndex) {\n            newOsiNames[setIndex] = osiName;\n        } else {\n            for (let i = newOsiNames.length; i < setIndex; i++) {\n                newOsiNames[i] = ['車站名', 'Stn Name'];\n            }\n            newOsiNames[setIndex] = osiName;\n        }\n        dispatch(\n            setStation(stationId, {\n                ...stationInfo,\n                transfer: { ...stationInfo.transfer, osi_names: newOsiNames },\n            })\n        );\n    };\n};\n\nexport const updateStationTickDirection = (stationId: string, tickDirection: ShortDirection) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(\n            setStation(stationId, {\n                ...stationInfo,\n                transfer: { ...stationInfo.transfer, tick_direc: tickDirection },\n            })\n        );\n    };\n};\n\nexport const updateStationPaidArea = (stationId: string, isPaidArea: boolean) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(\n            setStation(stationId, {\n                ...stationInfo,\n                transfer: { ...stationInfo.transfer, paid_area: isPaidArea },\n            })\n        );\n    };\n};\n\nexport const updateStationBranchType = (stationId: string, direction: Direction, branchStyle: BranchStyle) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(\n            setStation(stationId, {\n                ...stationInfo,\n                branch: { ...stationInfo.branch, [direction]: [branchStyle, stationInfo.branch[direction][1]] },\n            })\n        );\n    };\n};\n\nexport type UpdateStationBranchFirstStationArgType = { stnId: string; direction: Direction; first: string };\n\n// FIXME\nexport const updateStationBranchFirstStation = (\n    branches: [UpdateStationBranchFirstStationArgType, UpdateStationBranchFirstStationArgType]\n) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const { stn_list } = getState().param;\n        dispatch(\n            setStationsBulk({\n                ...stn_list,\n                [branches[0].stnId]: {\n                    ...stn_list[branches[0].stnId],\n                    branch: {\n                        ...stn_list[branches[0].stnId].branch,\n                        [branches[0].direction]: [\n                            stn_list[branches[0].stnId].branch[branches[0].direction][0],\n                            branches[0].first,\n                        ],\n                    },\n                },\n                [branches[1].stnId]: {\n                    ...stn_list[branches[1].stnId],\n                    branch: {\n                        ...stn_list[branches[1].stnId].branch,\n                        [branches[1].direction]: [\n                            stn_list[branches[1].stnId].branch[branches[1].direction][0],\n                            branches[1].first,\n                        ],\n                    },\n                },\n            })\n        );\n    };\n};\n\nexport const flipStationBranchPosition = (left: string, right: string) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const { stn_list } = getState().param;\n        dispatch(\n            setStationsBulk({\n                ...stn_list,\n                [left]: { ...stn_list[left], parents: stn_list[left].parents.slice().reverse() },\n                [right]: { ...stn_list[right], children: stn_list[right].children.slice().reverse() },\n            })\n        );\n    };\n};\n\nexport const updateStationFacility = (stationId: string, facility: Facilities) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(setStation(stationId, { ...stationInfo, facility }));\n    };\n};\n\nexport const addStationService = (stationId: string, service: Services) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n\n        if (!stationInfo.services.includes(service)) {\n            dispatch(setStation(stationId, { ...stationInfo, services: stationInfo.services.concat(service) }));\n        }\n    };\n};\n\nexport const removeStationService = (stationId: string, service: Services) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n\n        if (stationInfo.services.includes(service)) {\n            dispatch(\n                setStation(stationId, {\n                    ...stationInfo,\n                    services: stationInfo.services.filter(s => s !== service),\n                })\n            );\n        }\n    };\n};\n","import { AllCanvas, CanvasType, LoadingStatus, RmgStyle, SidePanelMode } from '../../constants/constants';\nimport {\n    SET_CANVAS_SCALE,\n    SET_CANVAS_SCALE_STATUS,\n    SET_CANVAS_TO_SHOW,\n    SET_CANVAS_TO_SHOW_STATUS,\n    SET_SELECTED_STATION,\n    SET_SIDE_PANEL_MODE,\n    setCanvasScaleAction,\n    setCanvasScaleStatusAction,\n    setCanvasToShowAction,\n    setCanvasToShowStatusAction,\n    setSelectedStationAction,\n    setSidePanelModeAction,\n} from './action';\n\ninterface AppState {\n    rmgStyle: RmgStyle;\n    canvasScale: number;\n    canvasScaleStatus: LoadingStatus;\n    canvasToShow: CanvasType | typeof AllCanvas;\n    canvasToShowStatus: LoadingStatus;\n    sidePanelMode: SidePanelMode;\n    selectedStation: string;\n}\n\nconst initialState: AppState = {\n    rmgStyle: RmgStyle.MTR,\n    canvasScale: 1,\n    canvasScaleStatus: LoadingStatus.init,\n    canvasToShow: AllCanvas,\n    canvasToShowStatus: LoadingStatus.init,\n    sidePanelMode: SidePanelMode.CLOSE,\n    selectedStation: 'linestart',\n};\n\nexport default function AppReducer(\n    state = initialState,\n    action:\n        | setCanvasScaleAction\n        | setCanvasScaleStatusAction\n        | setCanvasToShowAction\n        | setCanvasToShowStatusAction\n        | setSidePanelModeAction\n        | setSelectedStationAction\n): AppState {\n    switch (action.type) {\n        case SET_CANVAS_SCALE:\n            state.canvasScale = action.canvasScale;\n            break;\n        case SET_CANVAS_SCALE_STATUS:\n            state.canvasScaleStatus = action.canvasScaleStatus;\n            break;\n        case SET_CANVAS_TO_SHOW:\n            state.canvasToShow = action.canvasToShow;\n            break;\n        case SET_CANVAS_TO_SHOW_STATUS:\n            state.canvasToShowStatus = action.canvasToShowStatus;\n            break;\n        case SET_SIDE_PANEL_MODE:\n            state.sidePanelMode = action.sidePanelMode;\n            break;\n        case SET_SELECTED_STATION:\n            state.selectedStation = action.selectedStation;\n            break;\n        default:\n            break;\n    }\n\n    return { ...state };\n}\n","import { CityCode } from '../../constants/city-config';\nimport { MonoColour, PanelTypeGZMTR, RMGParam, ShortDirection, RmgStyle } from '../../constants/constants';\nimport {\n    SET_BRANCH_SPACING,\n    SET_CURRENT_STATION,\n    SET_CUSTOMISED_MTR_DESTINATION,\n    SET_DIRECTION,\n    SET_DIRECTION_INDICATOR_X,\n    SET_DIRECTION_INDICATOR_Y,\n    SET_FULL_PARAM,\n    SET_LINE_NAME,\n    SET_LINE_NUM,\n    SET_NAME_POSITION,\n    SET_NOTES,\n    SET_PADDING_PERCENTAGE,\n    SET_PANEL_TYPE,\n    SET_PLATFORM,\n    SET_PSD_NUM,\n    SET_STATION,\n    SET_STATIONS_BULK,\n    SET_SVG_HEIGHT,\n    SET_SVG_WIDTH,\n    SET_THEME,\n    SET_Y_PERCENTAGE,\n    SET_STYLE,\n    setBranchSpacingAction,\n    setCurrentStationAction,\n    setCustomisedMtrDestinationAction,\n    setDirectionAction,\n    setDirectionIndicatorXAction,\n    setDirectionIndicatorYAction,\n    setFullParamAction,\n    setLineNameAction,\n    setLineNumAction,\n    setNamePositionAction,\n    setNotesAction,\n    setPaddingPercentageAction,\n    setPanelTypeAction,\n    setPlatformAction,\n    setPsdNumAction,\n    setStationAction,\n    setStationsBulkAction,\n    setSvgHeightAction,\n    setSvgWidthAction,\n    setThemeAction,\n    setYPercentageAction,\n    setStyleAction,\n} from './action';\n\nconst initialState: RMGParam = {\n    svgWidth: {\n        destination: 100,\n        runin: 100,\n        railmap: 100,\n        indoor: 100,\n    },\n    svg_height: 100,\n    style: RmgStyle.MTR,\n    y_pc: 50,\n    padding: 10,\n    branch_spacing: 10,\n    direction: ShortDirection.left,\n    platform_num: '1',\n    theme: [CityCode.HongKong, 'twl', '#E2231A', MonoColour.white],\n    line_name: ['線', 'line'],\n    current_stn_idx: '',\n    stn_list: {},\n    namePosMTR: {\n        isStagger: true,\n        isFlip: true,\n    },\n    customiseMTRDest: {\n        isLegacy: false,\n        terminal: false,\n    },\n    line_num: '1',\n    psd_num: '1',\n    info_panel_type: PanelTypeGZMTR.gz1,\n    notesGZMTR: [],\n    direction_gz_x: 0,\n    direction_gz_y: 0,\n};\n\nexport default function ParamReducer(\n    state = initialState,\n    action:\n        | setFullParamAction\n        | setStyleAction\n        | setSvgHeightAction\n        | setSvgWidthAction\n        | setYPercentageAction\n        | setBranchSpacingAction\n        | setPaddingPercentageAction\n        | setDirectionIndicatorXAction\n        | setDirectionIndicatorYAction\n        | setThemeAction\n        | setLineNameAction\n        | setDirectionAction\n        | setPlatformAction\n        | setLineNumAction\n        | setPsdNumAction\n        | setPanelTypeAction\n        | setNotesAction\n        | setNamePositionAction\n        | setCustomisedMtrDestinationAction\n        | setCurrentStationAction\n        | setStationAction\n        | setStationsBulkAction\n) {\n    switch (action.type) {\n        case SET_FULL_PARAM:\n            return action.fullParam;\n        case SET_STYLE:\n            state.style = action.style;\n            break;\n        case SET_SVG_HEIGHT:\n            state.svg_height = action.svgHeight;\n            break;\n        case SET_SVG_WIDTH:\n            state.svgWidth[action.canvas] = action.svgWidth;\n            break;\n        case SET_Y_PERCENTAGE:\n            state.y_pc = action.yPercentage;\n            break;\n        case SET_BRANCH_SPACING:\n            state.branch_spacing = action.branchSpacing;\n            break;\n        case SET_PADDING_PERCENTAGE:\n            state.padding = action.paddingPercentage;\n            break;\n        case SET_DIRECTION_INDICATOR_X:\n            state.direction_gz_x = action.directionIndicatorX;\n            break;\n        case SET_DIRECTION_INDICATOR_Y:\n            state.direction_gz_y = action.directionIndicatorY;\n            break;\n        case SET_THEME:\n            state.theme = action.theme;\n            break;\n        case SET_LINE_NAME:\n            state.line_name = action.lineName;\n            break;\n        case SET_DIRECTION:\n            state.direction = action.direction;\n            break;\n        case SET_PLATFORM:\n            state.platform_num = action.platform;\n            break;\n        case SET_LINE_NUM:\n            state.line_num = action.lineNum;\n            break;\n        case SET_PSD_NUM:\n            state.psd_num = action.psdNum;\n            break;\n        case SET_PANEL_TYPE:\n            state.info_panel_type = action.panelType;\n            break;\n        case SET_NOTES:\n            state.notesGZMTR = action.notes;\n            break;\n        case SET_NAME_POSITION:\n            state.namePosMTR = action.namePosition;\n            break;\n        case SET_CUSTOMISED_MTR_DESTINATION:\n            state.customiseMTRDest = action.customisedMtrDestination;\n            break;\n        case SET_CURRENT_STATION:\n            state.current_stn_idx = action.currentStation;\n            break;\n        case SET_STATION:\n            state.stn_list[action.stationId] = action.station;\n            break;\n        case SET_STATIONS_BULK:\n            state.stn_list = action.stations;\n            break;\n        default:\n            break;\n    }\n    return { ...state };\n}\n","import {\n    SET_BRANCHES,\n    SET_DEPS_STR,\n    SET_ROUTES,\n    SET_TPO,\n    setBranchesAction,\n    setDepsStrAction,\n    setRoutesAction,\n    setTpoAction,\n} from './action';\n\ninterface HelperState {\n    depsStr: string;\n    branches: string[][];\n    routes: string[][];\n    tpo: string[];\n}\n\nconst initialState: HelperState = { depsStr: '', branches: [], routes: [], tpo: [] };\n\nexport default function HelperReducer(\n    state = initialState,\n    action: setDepsStrAction | setBranchesAction | setRoutesAction | setTpoAction\n) {\n    switch (action.type) {\n        case SET_DEPS_STR:\n            state.depsStr = action.depsStr;\n            break;\n        case SET_BRANCHES:\n            state.branches = action.branches;\n            break;\n        case SET_ROUTES:\n            state.routes = action.routes;\n            break;\n        case SET_TPO:\n            state.tpo = action.tpo;\n            break;\n        default:\n            break;\n    }\n\n    return { ...state };\n}\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunk, { ThunkMiddleware } from 'redux-thunk';\nimport AppReducer from './app/reducer';\nimport ParamReducer from './param/reducer';\nimport HelperReducer from './helper/reducer';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\n\nconst rootReducer = combineReducers({\n    app: AppReducer,\n    param: ParamReducer,\n    helper: HelperReducer,\n});\nexport type RootState = ReturnType<typeof rootReducer>;\n\nconst store = createStore(rootReducer, applyMiddleware(thunk as ThunkMiddleware<RootState>));\nexport default store;\n\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { AllCanvas, CanvasType, LoadingStatus, SidePanelMode } from '../../constants/constants';\nimport { Dispatch } from 'redux';\nimport { RootState } from '../index';\n\nexport const SET_CANVAS_SCALE = 'SET_CANVAS_SCALE';\nexport const SET_CANVAS_SCALE_STATUS = 'SET_CANVAS_SCALE_STATUS';\nexport const SET_CANVAS_TO_SHOW = 'SET_CANVAS_TO_SHOW';\nexport const SET_CANVAS_TO_SHOW_STATUS = 'SET_CANVAS_TO_SHOW_STATUS';\nexport const SET_SIDE_PANEL_MODE = 'SET_SIDE_PANEL_MODE';\nexport const SET_SELECTED_STATION = 'SET_SELECTED_STATION';\n\nexport interface setCanvasScaleAction {\n    type: typeof SET_CANVAS_SCALE;\n    canvasScale: number;\n}\n\nexport interface setCanvasScaleStatusAction {\n    type: typeof SET_CANVAS_SCALE_STATUS;\n    canvasScaleStatus: LoadingStatus;\n}\n\nexport interface setCanvasToShowAction {\n    type: typeof SET_CANVAS_TO_SHOW;\n    canvasToShow: CanvasType | typeof AllCanvas;\n}\n\nexport interface setCanvasToShowStatusAction {\n    type: typeof SET_CANVAS_TO_SHOW_STATUS;\n    canvasToShowStatus: LoadingStatus;\n}\n\nexport interface setSidePanelModeAction {\n    type: typeof SET_SIDE_PANEL_MODE;\n    sidePanelMode: SidePanelMode;\n}\n\nexport interface setSelectedStationAction {\n    type: typeof SET_SELECTED_STATION;\n    selectedStation: string;\n}\n\nexport const setCanvasScale = (canvasScale: number) => {\n    return { type: SET_CANVAS_SCALE, canvasScale } as setCanvasScaleAction;\n};\n\nconst setCanvasScaleStatus = (canvasScaleStatus: LoadingStatus) => {\n    return { type: SET_CANVAS_SCALE_STATUS, canvasScaleStatus } as setCanvasScaleStatusAction;\n};\n\nexport const zoomIn = () => {\n    return async (dispatch: Dispatch, getState: () => RootState) => {\n        dispatch(setCanvasScaleStatus(LoadingStatus.loading));\n        try {\n            const newScale = Number((getState().app.canvasScale + 0.1).toFixed(1));\n            dispatch(setCanvasScale(newScale));\n            await window.rmgStorage.writeFile('rmgScale', newScale.toString());\n            dispatch(setCanvasScaleStatus(LoadingStatus.loaded));\n        } catch (err) {\n            dispatch(setCanvasScaleStatus(LoadingStatus.failed));\n        }\n    };\n};\n\nexport const zoomOut = () => {\n    return async (dispatch: Dispatch, getState: () => RootState) => {\n        dispatch(setCanvasScaleStatus(LoadingStatus.loading));\n        try {\n            const { canvasScale } = getState().app;\n            const newScale =\n                Number(canvasScale.toFixed(1)) <= 0.1\n                    ? Number(canvasScale.toFixed(1))\n                    : Number((canvasScale - 0.1).toFixed(1));\n            dispatch(setCanvasScale(newScale));\n            await window.rmgStorage.writeFile('rmgScale', newScale.toString());\n            dispatch(setCanvasScaleStatus(LoadingStatus.loaded));\n        } catch (err) {\n            dispatch(setCanvasScaleStatus(LoadingStatus.failed));\n        }\n    };\n};\n\nexport const setCanvasToShow = (canvasToShow: CanvasType | typeof AllCanvas) => {\n    return { type: SET_CANVAS_TO_SHOW, canvasToShow } as setCanvasToShowAction;\n};\n\nconst setCanvasToShowStatus = (canvasToShowStatus: LoadingStatus) => {\n    return { type: SET_CANVAS_TO_SHOW_STATUS, canvasToShowStatus } as setCanvasToShowStatusAction;\n};\n\nexport const selectCanvas = (canvas: CanvasType | typeof AllCanvas) => {\n    return async (dispatch: Dispatch) => {\n        dispatch(setCanvasToShowStatus(LoadingStatus.loading));\n        try {\n            dispatch(setCanvasToShow(canvas));\n            await window.rmgStorage.writeFile('rmgCanvas', canvas);\n            dispatch(setCanvasToShowStatus(LoadingStatus.loaded));\n        } catch (err) {\n            dispatch(setCanvasToShowStatus(LoadingStatus.failed));\n        }\n    };\n};\n\nexport const setSidePanelMode = (sidePanelMode: SidePanelMode): setSidePanelModeAction => {\n    return { type: SET_SIDE_PANEL_MODE, sidePanelMode };\n};\n\nexport const setSelectedStation = (selectedStation: string): setSelectedStationAction => {\n    return { type: SET_SELECTED_STATION, selectedStation };\n};\n","import { AppDispatch, RootState } from '../index';\nimport { getBranches, getRoutes, getTpo } from './graph-theory-util';\n\nexport const SET_DEPS_STR = 'SET_DEPS_STR';\nexport const SET_BRANCHES = 'SET_BRANCHES';\nexport const SET_ROUTES = 'SET_ROUTES';\nexport const SET_TPO = 'SET_TPO';\n\nexport type setDepsStrAction = {\n    type: typeof SET_DEPS_STR;\n    depsStr: string;\n};\nexport type setBranchesAction = {\n    type: typeof SET_BRANCHES;\n    branches: string[][];\n};\nexport type setRoutesAction = {\n    type: typeof SET_ROUTES;\n    routes: string[][];\n};\nexport type setTpoAction = {\n    type: typeof SET_TPO;\n    tpo: string[];\n};\n\nconst setDepsStr = (depsStr: string): setDepsStrAction => {\n    return { type: SET_DEPS_STR, depsStr };\n};\n\nconst setBranches = (branches: string[][]): setBranchesAction => {\n    return { type: SET_BRANCHES, branches };\n};\n\nconst setRoutes = (routes: string[][]): setRoutesAction => {\n    return { type: SET_ROUTES, routes };\n};\n\nconst setTpo = (tpo: string[]): setTpoAction => {\n    return { type: SET_TPO, tpo };\n};\n\nconst calcAndGetDepsStr = () => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stnList = getState().param.stn_list;\n        const nextDepsStr = Object.entries(stnList)\n            .map(\n                ([stationId, stationInfo]) =>\n                    stationId +\n                    stationInfo.parents.toString() +\n                    stationInfo.children.toString() +\n                    JSON.stringify(stationInfo.branch)\n            )\n            .join('');\n        dispatch(setDepsStr(nextDepsStr));\n        return nextDepsStr;\n    };\n};\n\nconst calcBranches = () => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        console.log('Re-calculating branches...');\n        const stnList = getState().param.stn_list;\n        const nextBranches = getBranches(stnList);\n        dispatch(setBranches(nextBranches));\n        return nextBranches;\n    };\n};\n\nconst calcRoutes = () => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        console.log('Re-calculating routes...');\n        const stnList = getState().param.stn_list;\n        dispatch(setRoutes(getRoutes(stnList)));\n    };\n};\n\nexport const triggerHelpersUpdate = () => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const prevDepsStr = getState().helper.depsStr;\n        const nextDepsStr = dispatch(calcAndGetDepsStr());\n        if (prevDepsStr !== nextDepsStr) {\n            dispatch(calcRoutes());\n\n            const prevBranches = getState().helper.branches;\n            const nextBranches = dispatch(calcBranches());\n            if (prevBranches.toString() !== nextBranches.toString()) {\n                console.log('Re-calculating topology ordering...');\n                dispatch(setTpo(getTpo(nextBranches)));\n            }\n        }\n    };\n};\n","import { StationDict } from '../../constants/constants';\n\n/**\n * Getter of all branches (支線段) of the line (both ends included). The first branch must be the main line.\n * @example MTREastRailLine.branches\n * /*\n * [0]: [LineStart, Lo Wu, ..., Hung Hom, LineEnd]\n * [1]: [LineStart, Lok Ma Chau, Sheung Shui]\n * [2]: [University, Racecourse, Sha Tin]\n * /\n */\nexport const getBranches = (stnList: StationDict) => {\n    const stack = ['linestart'];\n    const branches = [['linestart']];\n    let branchCount = 0;\n\n    while (stack.length) {\n        let curId = stack.shift() as string;\n        let prevId = branches[branchCount].slice(-1)[0] || null;\n        if (prevId && curId !== 'linestart') {\n            branches[branchCount].push(curId);\n        } else {\n            branches[branchCount] = [curId];\n        }\n        while (curId !== 'lineend') {\n            prevId = curId;\n            const children = stnList[prevId].children;\n            switch (children.length) {\n                case 1:\n                    curId = children[0];\n                    break;\n                case 2:\n                    let branchNextId = stnList[prevId].branch.right[1] as string;\n                    // if (branchCount === 0) {\n                    if (stnList[prevId].branch.right[0] === 'through') {\n                        branches.push([curId]);\n                        stack.push(branchNextId);\n                    } else {\n                        if (branchCount === 0) {\n                            branches.push([prevId]);\n                            stack.push(branchNextId);\n                            // all branching out nodes are added to stack in the first loop\n                        }\n                    }\n                    curId = children.filter(stnId => stnId !== branchNextId)[0];\n                    break;\n            }\n            branches[branchCount].push(curId);\n\n            if (prevId === stnList[curId].branch.left[1]) {\n                break;\n            }\n        }\n        // branches[branchCount] = curBranch;\n        branchCount++;\n    }\n\n    return branches;\n};\n\n/**\n * Getter of all routes (行車交路) of the line (both ends included). The first branch must be the main line.\n * @example MTREastRailLine.branches\n * /*\n * [0]: [LineStart, Lo Wu, Sheung Shui, ..., Hung Hom, LineEnd]\n * [1]: [LineStart, Lok Ma Chau, Sheung Shui, ..., Hung Hom, LineEnd]\n * [2]: [LineStart, Lo Wu, Sheung Shui, ..., University, Racecourse, Sha Tin, ..., Hung Hom, LineEnd]\n * [3]: [LineStart, Lok Ma Chau, Sheung Shui, ..., University, Racecourse, Sha Tin, ..., Hung Hom, LineEnd]\n * /\n */\nexport const getRoutes = (stnList: StationDict) => {\n    const stack = ['linestart'];\n    const branches = [['linestart']];\n    let branchCount = 0;\n\n    while (stack.length) {\n        let curId = stack.shift() as string;\n        let prevId = branches[branchCount].slice(-1)[0] || null;\n        if (prevId && curId !== 'linestart') {\n            branches[branchCount].push(curId);\n        } else {\n            branches[branchCount] = [curId];\n        }\n        while (curId !== 'lineend') {\n            prevId = curId;\n            const children = stnList[prevId].children;\n            switch (children.length) {\n                case 1:\n                    curId = children[0];\n                    break;\n                case 2:\n                    let branchNextId = stnList[prevId].branch.right[1] as string;\n                    // if (branchCount === 0) {\n                    if (stnList[prevId].branch.right[0] === 'through') {\n                        branches.push(branches[branchCount].slice());\n                        stack.push(branchNextId);\n                    } else {\n                        if (branchCount === 0) {\n                            branches.push([prevId]);\n                            stack.push(branchNextId);\n                        }\n                        // branches.push([prevId]);\n                    }\n                    // stack.push(branchNextId);\n                    // }\n                    curId = children.filter(stnId => stnId !== branchNextId)[0];\n                    break;\n            }\n            branches[branchCount].push(curId);\n\n            if (prevId === stnList[curId].branch.left[1] && stnList[curId].branch.left[0] === 'nonthrough') {\n                break;\n            }\n        }\n        // branches[branchCount] = curBranch;\n        branchCount++;\n    }\n\n    return branches;\n};\n\n/**\n * Calculate topology ordering for all stations by stacking all branches into an 1-dimension array\n */\nexport const getTpo = (branches: string[][]) => {\n    if (branches.length === 1) {\n        return branches[0].slice(1, -1);\n    } else {\n        return branches\n            .reduce(\n                (acc, cur) => {\n                    // insert the other branch before the rest of the main branch\n                    const idx = acc.indexOf(cur[cur.length - 1]);\n                    return [...acc.slice(0, idx), ...cur.slice(1), ...acc.slice(idx + 1)];\n                },\n                ['lineend']\n            )\n            .slice(0, -1);\n    }\n};\n","import { CityCode } from './city-config';\n\nexport enum LoadingStatus {\n    init = 'init',\n    loading = 'loading',\n    loaded = 'loaded',\n    failed = 'failed',\n}\n\nexport enum RmgStyle {\n    MTR = 'mtr',\n    GZMTR = 'gzmtr',\n    SHMetro = 'shmetro',\n}\n\nexport enum CanvasType {\n    Destination = 'destination',\n    RunIn = 'runin',\n    RailMap = 'railmap',\n    Indoor = 'indoor',\n}\n\nexport const AllCanvas = 'all';\n\nexport const canvasConfig: { [s in RmgStyle]: CanvasType[] } = {\n    [RmgStyle.MTR]: [CanvasType.Destination, CanvasType.RailMap],\n    [RmgStyle.GZMTR]: [CanvasType.RunIn, CanvasType.RailMap],\n    [RmgStyle.SHMetro]: [CanvasType.Destination, CanvasType.RunIn, CanvasType.RailMap, CanvasType.Indoor],\n};\n\nexport enum SidePanelMode {\n    CLOSE = 'CLOSE',\n    STATION = 'STATION',\n    STYLE = 'STYLE'\n}\n\n/**\n * @property {string} 0 - Chinese characters\n * @property {string} 1 - Latin characters\n */\nexport type Name = [string, string];\n\nexport enum Direction {\n    left = 'left',\n    right = 'right',\n}\n\nexport enum ShortDirection {\n    left = 'l',\n    right = 'r',\n}\n\nexport enum BranchStyle {\n    through = 'through',\n    nonThrough = 'nonthrough',\n}\n\n/**\n * Information of branch on both side.\n * @property 0 - branch type\n * @property 1 - ID of the first station of the branch (should also be one of the station's parents/children) or empty\n */\nexport type BranchInfo = Record<Direction, [BranchStyle, string] | []>;\n\nexport enum MonoColour {\n    black = '#000',\n    white = '#fff',\n}\n\nexport type ColourHex = `#${string}`;\n\n/**\n * Colour theme of line, derived from `LineEntry`.\n * @property 0 - city id\n * @property 1 - line id\n * @property 2 - background colour\n * @property 3 - foreground colour\n */\nexport type Theme = [CityCode, string, ColourHex, MonoColour];\n\nexport type InterchangeInfo = [...Theme, ...Name];\n\nexport interface StationTransfer {\n    /**\n     * Direction of text/tick of interchanges.\n     */\n    tick_direc: ShortDirection;\n    /**\n     * Flag of paid area within out-of-station interchange.\n     */\n    paid_area: boolean;\n    /**\n     * Array of name (in two languages) of all out-of-station interchange stations.\n     */\n    osi_names: Name[];\n    /**\n     * Array of arrays of interchange info.\n     * @property 0 - array of within-station interchange info\n     * @property remaining - arrays of out-of-station interchange info (from the nearest to the furthest station)\n     */\n    info: InterchangeInfo[][];\n}\n\nexport enum Services {\n    local = 'local',\n    express = 'express',\n    direct = 'direct',\n}\n\nexport enum Facilities {\n    airport = 'airport',\n    disney = 'disney',\n    hsr = 'hsr',\n    railway = 'railway',\n    none = '',\n}\n\nexport interface StationInfo {\n    /**\n     * Station name in two languages.\n     */\n    name: Name;\n    secondaryName: false | Name;\n    /**\n     * Station number. (GZMTR specific)\n     */\n    num: string;\n    /**\n     * Dictionary of the information of branch on the station's both side.\n     */\n    branch: BranchInfo;\n    /**\n     * Array of parents' IDs.\n     */\n    parents: string[];\n    /**\n     * Array of children's IDs.\n     */\n    children: string[];\n    /**\n     * Detail of interchanges.\n     */\n    transfer: StationTransfer;\n    /**\n     * Array of services at this station.\n     */\n    services: Services[];\n    /**\n     * Facility near the station\n     */\n    facility: Facilities;\n}\n\nexport type StationDict = Record<string, StationInfo>;\n\nexport enum PanelTypeGZMTR {\n    gz1 = 'gz1',\n    gz28 = 'gz28',\n    gz2otis = 'gz2otis',\n    gz3 = 'gz3',\n    gz4 = 'gz4',\n    gz5 = 'gz5',\n    gz1421 = 'gz1421',\n    gz6 = 'gz6',\n    gzgf = 'gzgf',\n}\n\nexport enum PanelTypeShmetro {\n    sh = 'sh',\n    sh2020 = 'sh2020',\n}\n\n/**\n * Dictionary of configuration parameters for RMG, stored in `localStorage` as string.\n */\nexport interface RMGParam {\n    svgWidth: Record<CanvasType, number>;\n    svg_height: number;\n    style: RmgStyle;\n    /**\n     * Vertical position (in percentage) of line.\n     */\n    y_pc: number;\n    /**\n     * Left and right margin of line (in percentage).\n     */\n    padding: number;\n    /**\n     * Branch spacing (in pixels) of line.\n     */\n    branch_spacing: number;\n    direction: ShortDirection;\n    platform_num: string | false;\n    theme: Theme;\n    line_name: Name;\n    current_stn_idx: keyof StationDict;\n    /**\n     * Key-value pairs of the information of each station.\n     */\n    stn_list: StationDict;\n    namePosMTR: {\n        /**\n         * Flag of whether station names staggered. If false, place name above line.\n         */\n        isStagger: boolean;\n        /**\n         * Flag of flipping station names.\n         * When `isStagger === false`, names are above line if `isFlip === false`.\n         */\n        isFlip: boolean;\n    };\n    /**\n     * Customise destination sign of MTR style.\n     */\n    customiseMTRDest: {\n        /**\n         * Flag of legacy style. (Show line name before 'to').\n         */\n        isLegacy: boolean;\n        /**\n         * Customise terminal stations.\n         */\n        terminal: false | Name;\n    };\n    line_num: string;\n    psd_num: string;\n    info_panel_type: PanelTypeGZMTR | PanelTypeShmetro;\n    notesGZMTR: Note[];\n    direction_gz_x: number;\n    direction_gz_y: number;\n}\n\n/**\n * Array of a single note entry for Guangzhou Metro style.\n * @property 0 - text in Chinese characters\n * @property 1 - text in Latin characters\n * @property 2 - percentage of horizontal position\n * @property 3 - percentage of vertical position\n * @property 4 - flag of showing border\n */\nexport type Note = [...Name, number, number, boolean];\n\nexport enum LanguageCode {\n    Azerbaijani = 'az',\n    Arabic = 'ar',\n    Catalan = 'ca',\n    Chinese = 'zh',\n    ChineseCN = 'zh-CN',\n    ChineseSimp = 'zh-Hans',\n    ChineseTrad = 'zh-Hant',\n    ChineseHK = 'zh-HK',\n    ChineseTW = 'zh-TW',\n    English = 'en',\n    French = 'fr',\n    Gaelic = 'ga',\n    German = 'de',\n    Hindi = 'hi',\n    Japanese = 'ja',\n    Korean = 'ko',\n    Malay = 'ms',\n    Norwegian = 'no',\n    Spanish = 'es',\n    Persian = 'fa',\n    Portuguese = 'pt',\n    Russian = 'ru',\n    Swedish = 'sv',\n    Turkish = 'tr',\n}\n\nexport type Translation = { [l in LanguageCode]?: string };\n\nexport interface PaletteEntry {\n    /**\n     * ID of line.\n     */\n    id: string;\n    /**\n     * Key-value pairs of multi-lingual names of the line.\n     */\n    name: Translation;\n    /**\n     * Background colour (in #HEX).\n     */\n    colour: ColourHex;\n    /**\n     * Foreground colour. Mandatory field if foreground colour is black.\n     */\n    fg?: MonoColour;\n    /**\n     * Pantone colour. If defined, colour is converted with Pantone Color Finder (https://www.pantone.com/color-finder).\n     */\n    pantone?: string;\n}\n\nexport enum StationState {\n    PASSED = -1,\n    CURRENT = 0,\n    FUTURE = 1,\n}\n","import { LanguageCode, Note, RmgStyle, StationInfo, Translation } from './constants/constants';\n\nexport const updateParam = (param: { [x: string]: any }) => {\n    // Version 0.10\n    if (!('line_name' in param)) {\n        param.line_name = ['路線名', 'Name of Line'];\n    }\n    if (!('dest_legacy' in param)) {\n        param.dest_legacy = false;\n    }\n\n    // Version 0.11\n    delete param.fontZH;\n    delete param.fontEN;\n    delete param.weightZH;\n    delete param.weightEN;\n\n    // Version 0.12\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (!('branch' in stnInfo)) {\n            param.stn_list[stnId].branch = { left: [], right: [] };\n            if (stnInfo.children.length === 2) {\n                param.stn_list[stnId].branch.right = ['through', stnInfo.children[1]];\n            } else {\n                param.stn_list[stnId].branch.right = [];\n            }\n            if (stnInfo.parents.length === 2) {\n                param.stn_list[stnId].branch.left = ['through', stnInfo.parents[1]];\n            } else {\n                param.stn_list[stnId].branch.left = [];\n            }\n        }\n    }\n\n    // Version 1.2\n    if (!('psd_num' in param)) {\n        param.psd_num = '1';\n    } else {\n        param.psd_num = param.psd_num.toString();\n    }\n\n    if (!('line_num' in param)) {\n        param.line_num = '1';\n    }\n    if (param.theme.length === 3) {\n        param.theme.push('#fff');\n    }\n\n    // Version 1.3\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (!('num' in stnInfo)) {\n            param.stn_list[stnId].num = '00';\n        }\n        if ('interchange' in stnInfo) {\n            stnInfo.interchange.map((arr: any) => {\n                return arr.forEach((intInfo: any) => {\n                    if (intInfo.length === 5) {\n                        intInfo.splice(3, 0, '#fff');\n                    }\n                });\n            });\n        }\n    }\n\n    // Version 1.5\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (stnInfo.change_type === 'osi22_end_p') {\n            param.stn_list[stnId].change_type = 'osi22_pr';\n        }\n        if (stnInfo.change_type === 'osi22_end_u') {\n            param.stn_list[stnId].change_type = 'osi22_ur';\n        }\n    }\n\n    // Version 2.1\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (!('interchange' in stnInfo)) {\n            param.stn_list[stnId].interchange = [[]];\n        }\n    }\n\n    // Version 1.4\n    // Version 2.2\n    // Version 2.3\n    if (!('info_panel_type' in param)) {\n        param.info_panel_type = 'gz28';\n    } else {\n        param.info_panel_type = (type => {\n            switch (type) {\n                case 'gz_1':\n                case 'panasonic':\n                    return 'gz28';\n                case 'gz_2':\n                    return 'gz6';\n                case 'gz_3':\n                    return 'gz3';\n                default:\n                    return type;\n            }\n        })(param.info_panel_type);\n    }\n\n    if (!('direction_gz_x' in param)) {\n        param.direction_gz_x = 50;\n    }\n    if (!('direction_gz_y' in param)) {\n        param.direction_gz_y = 70;\n    }\n\n    // Version 2.6\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (!('transfer' in stnInfo)) {\n            param.stn_list[stnId].transfer = {\n                // type: stnInfo.change_type?.split('_')[0] as 'none' | 'int2' | 'int3' | 'osi11' | 'osi12' | 'osi22',\n                tick_direc:\n                    stnInfo.change_type === 'none' || stnInfo.change_type === 'int2'\n                        ? 'r'\n                        : (stnInfo.change_type?.split('_')[1].split('').slice().reverse()[0] as 'l' | 'r'),\n                paid_area:\n                    stnInfo.change_type?.indexOf('osi') !== -1 ? stnInfo.change_type?.split('_')[1][0] === 'p' : true,\n                osi_names: stnInfo.change_type?.indexOf('osi') !== -1 ? [stnInfo.interchange[1][0]] : [],\n                info:\n                    stnInfo.interchange.length === 2\n                        ? [stnInfo.interchange[0], stnInfo.interchange[1].slice(1)]\n                        : stnInfo.interchange,\n            };\n        }\n        delete param.stn_list[stnId].change_type;\n        delete param.stn_list[stnId].interchange;\n    }\n\n    // Version 2.8\n    // Version 3.0\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (!('services' in stnInfo)) {\n            param.stn_list[stnId].services = ['local'];\n        }\n        if (!('facility' in stnInfo)) {\n            if ('usage' in stnInfo) {\n                param.stn_list[stnId].facility = stnInfo.usage;\n            } else {\n                param.stn_list[stnId].facility = '';\n            }\n        }\n        delete param.stn_list[stnId].usage;\n    }\n\n    // Version 3.4\n    if (!('customiseMTRDest' in param)) {\n        param.customiseMTRDest = { isLegacy: param.dest_legacy || false, terminal: false };\n    }\n    delete param.dest_legacy;\n\n    // Version 3.4\n    if (!('svgWidth' in param)) {\n        param.svgWidth = {\n            destination: param.svg_dest_width,\n            runin: param.svg_dest_width,\n            railmap: param.svg_width,\n            indoor: param.svg_width,\n        };\n    }\n    // Version 3.8\n    if (!('indoor' in param.svgWidth)) {\n        param.svgWidth.indoor = param.svgWidth.railmap;\n    }\n    delete param.svg_width;\n    delete param.svg_dest_width;\n\n    if (!('notesGZMTR' in param)) {\n        param.notesGZMTR = [];\n    }\n\n    param.notesGZMTR = param.notesGZMTR?.map((note: any[]) =>\n        note.length === 4 ? note.concat([false]) : note\n    ) as Note[];\n\n    // Version 3.5.3\n    delete param.char_form;\n    delete param.show_outer;\n    delete param.strip_pc;\n    delete param.txt_bg_gap;\n\n    // Version 3.5.4\n    if (!('namePosMTR' in param)) {\n        param.namePosMTR = {\n            isStagger: true,\n            isFlip: param.txt_flip,\n        };\n    }\n    delete param.txt_flip;\n\n    // Version 3.5.6\n    // Version 3.6.2\n    Object.keys(param.stn_list).forEach(stnId => {\n        if (!('secondaryName' in param.stn_list[stnId])) {\n            param.stn_list[stnId].secondaryName = false;\n        } else {\n            if (param.stn_list[stnId].secondaryName !== false && param.stn_list[stnId].secondaryName.join() === ',') {\n                param.stn_list[stnId].secondaryName = false;\n            }\n        }\n\n        if ('type' in param.stn_list[stnId].transfer) {\n            delete param.stn_list[stnId].transfer.type;\n        }\n    });\n\n    // Version 3.9.36\n    // Set unknown and missing style to mtr\n    param.style = (param.style === undefined || !Object.values(RmgStyle).includes(param.style))\n        ? RmgStyle.MTR : param.style;\n\n    return param;\n};\n\nexport const getTransText2 = (obj: Translation, langs: LanguageCode[]) => {\n    for (let l of langs) {\n        if (obj[l]) return obj[l];\n    }\n    return obj[LanguageCode.English];\n};\n\n/**\n * Format display style of station name as `[num: ]nameZH,nameEN`.\n */\nexport const formatStnName = (stnInfo: StationInfo, style: RmgStyle) =>\n    (style === RmgStyle.GZMTR ? (stnInfo?.num || '-') + ': ' : '') + stnInfo?.name.join().replace('\\\\', ' ');\n"],"sourceRoot":""}