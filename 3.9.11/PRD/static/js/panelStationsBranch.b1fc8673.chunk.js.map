{"version":3,"sources":["panels/stations/edit-diag/branch-tab.tsx"],"names":["useStyles","makeStyles","createStyles","select","width","StationEditBranchTab","props","t","useTranslation","style","margin","BranchSelectSet","stnId","direction","Direction","left","right","rmgStyle","useSelector","store","app","branchEntry","useContext","ParamContext","param","stn_list","branch","React","useMemo","BranchTypeItem","BranchFirstItem","RmgStyle","SHMetro","BranchPosItem","classes","reduxDispatch","useDispatch","dispatch","handleChange","event","branchType","target","value","type","updateStationBranchType","primary","native","onChange","className","disabled","length","stnInfo","neighbours","parents","children","branchFirst","branchEndFirst","branchEndId","stnList","indexOf","branchesArg","first","branches","updateStationBranchFirstStation","transform","map","formatStnName","toString","branchPos","flipStationBranchPosition","p"],"mappings":"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","file":"static/js/panelStationsBranch.b1fc8673.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    createStyles,\n    Divider,\n    Icon,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    makeStyles,\n    Select,\n} from '@material-ui/core';\nimport { formatStnName } from '../../../utils';\nimport { ParamContext } from '../../../context';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../../redux';\nimport { BranchStyle, Direction, RmgStyle } from '../../../constants/constants';\nimport {\n    flipStationBranchPosition,\n    updateStationBranchFirstStation,\n    UpdateStationBranchFirstStationArgType,\n    updateStationBranchType,\n} from '../../../redux/param/action';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        select: {\n            width: 166,\n        },\n    })\n);\n\nfunction StationEditBranchTab(props: { stnId: string }) {\n    const { t } = useTranslation();\n\n    return (\n        <List>\n            <ListItem>\n                <ListItemText>\n                    <h3 style={{ margin: 0 }}>{t('stations.edit.branch.left')}</h3>\n                </ListItemText>\n            </ListItem>\n            <BranchSelectSet stnId={props.stnId} direction={Direction.left} />\n            <Divider />\n            <ListItem>\n                <ListItemText>\n                    <h3 style={{ margin: 0 }}>{t('stations.edit.branch.right')}</h3>\n                </ListItemText>\n            </ListItem>\n            <BranchSelectSet stnId={props.stnId} direction={Direction.right} />\n        </List>\n    );\n}\n\nexport default StationEditBranchTab;\n\ninterface BranchSelectSetProps {\n    stnId: string;\n    direction: Direction;\n}\n\nconst BranchSelectSet = (props: BranchSelectSetProps) => {\n    const rmgStyle = useSelector((store: RootState) => store.app.rmgStyle);\n    const { param } = useContext(ParamContext);\n    const stnInfo = param.stn_list[props.stnId];\n    const branchEntry = stnInfo.branch[props.direction];\n\n    return React.useMemo(\n        () => (\n            <>\n                <BranchTypeItem {...props} />\n                {branchEntry[0] && (\n                    <>\n                        <BranchFirstItem {...props} />\n                        {rmgStyle !== RmgStyle.SHMetro && <BranchPosItem {...props} />}\n                    </>\n                )}\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.stnId, props.direction, branchEntry[0]]\n    );\n};\n\ninterface ItemProps {\n    stnId: string;\n    direction: Direction;\n}\n\nconst BranchTypeItem = (props: ItemProps) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const reduxDispatch = useDispatch();\n\n    const { param, dispatch } = React.useContext(ParamContext);\n    const stnInfo = param.stn_list[props.stnId];\n    const branchEntry = stnInfo.branch[props.direction];\n\n    const handleChange = (event: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n        let branchType = event.target.value as 'na' | BranchStyle;\n        if (branchType === 'na') {\n            // no changes\n            return;\n        } else if (branchType === branchEntry[0]) {\n            // no changes\n            return;\n        } else {\n            dispatch({\n                type: 'UPDATE_STATION_BRANCH_TYPE',\n                stnId: props.stnId,\n                direction: props.direction,\n                branchType,\n            });\n            reduxDispatch(updateStationBranchType(props.stnId, props.direction, branchType));\n        }\n    };\n\n    return React.useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>merge_type</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('stations.edit.branch.type.title')} />\n                <Select native onChange={handleChange} value={branchEntry[0] || 'na'} className={classes.select}>\n                    <option value=\"na\" disabled={branchEntry.length !== 0}>\n                        {t('stations.edit.branch.type.na')}\n                    </option>\n                    <option value=\"through\" disabled={branchEntry.length === 0}>\n                        {t('stations.edit.branch.type.through')}\n                    </option>\n                    <option value=\"nonthrough\" disabled={branchEntry.length === 0}>\n                        {t('stations.edit.branch.type.nonThrough')}\n                    </option>\n                </Select>\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.stnId, branchEntry[0]]\n    );\n};\n\nconst BranchFirstItem = (props: ItemProps) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const reduxDispatch = useDispatch();\n\n    const rmgStyle = useSelector((store: RootState) => store.app.rmgStyle);\n    const { param, dispatch } = useContext(ParamContext);\n    const stnInfo = param.stn_list[props.stnId];\n    const branchEntry = stnInfo.branch[props.direction];\n    const neighbours = props.direction === 'left' ? stnInfo.parents : stnInfo.children;\n\n    const handleChange = (event: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n        let branchFirst = event.target.value as string;\n        if (branchEntry[1] === branchFirst) {\n            // no changes\n            return;\n        } else {\n            let branchEndId = branchFirst;\n            let branchEndFirst: string;\n            let stnList = param.stn_list;\n            if (props.direction === 'right') {\n                while (stnList[branchEndId].parents.length === 1) {\n                    branchEndId = stnList[branchEndId].children[0];\n                }\n                branchEndFirst = stnList[branchEndId].parents[neighbours.indexOf(branchFirst)];\n            } else {\n                while (stnList[branchEndId].children.length === 1) {\n                    branchEndId = stnList[branchEndId].parents[0];\n                }\n                branchEndFirst = stnList[branchEndId].children[neighbours.indexOf(branchFirst)];\n            }\n            const branchesArg: [UpdateStationBranchFirstStationArgType, UpdateStationBranchFirstStationArgType] = [\n                {\n                    stnId: props.stnId,\n                    direction: props.direction,\n                    first: branchFirst,\n                },\n                {\n                    stnId: branchEndId,\n                    direction: props.direction === Direction.left ? Direction.right : Direction.left,\n                    first: branchEndFirst,\n                },\n            ];\n            dispatch({\n                type: 'UPDATE_STATION_BRANCH_FIRST',\n                branches: branchesArg,\n            });\n            reduxDispatch(updateStationBranchFirstStation(branchesArg));\n        }\n    };\n\n    return React.useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon style={{ transform: props.direction === 'left' ? 'scale(-1)' : 'scale(1)' }}>share</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('stations.edit.branch.first')} />\n                <Select\n                    native\n                    onChange={handleChange}\n                    value={branchEntry[1] || neighbours[0]}\n                    className={classes.select}\n                >\n                    {neighbours.map(stnId => (\n                        <option key={stnId} value={stnId}>\n                            {formatStnName(param.stn_list[stnId], rmgStyle)}\n                        </option>\n                    ))}\n                </Select>\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.stnId, branchEntry[1], neighbours.toString()]\n    );\n};\n\nconst BranchPosItem = (props: ItemProps) => {\n    // mount only if branchEntry[0] is not undefined\n\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const reduxDispatch = useDispatch();\n\n    const { param, dispatch } = React.useContext(ParamContext);\n    const stnInfo = param.stn_list[props.stnId];\n    const branchEntry = stnInfo.branch[props.direction] as ['through' | 'nonthrough', string];\n    const neighbours = props.direction === 'left' ? stnInfo.parents : stnInfo.children;\n\n    const handleChange = (event: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n        let branchPos: 0 | 1 = event.target.value === 'lower' ? 1 : 0;\n        if (neighbours.indexOf(branchEntry[1]) === branchPos) {\n            // no changes\n            return;\n        } else {\n            let branchEndId = branchEntry[1];\n            let stnList = param.stn_list;\n            if (props.direction === Direction.right) {\n                while (stnList[branchEndId].parents.length === 1) {\n                    branchEndId = stnList[branchEndId].children[0];\n                }\n                dispatch({\n                    type: 'UPDATE_STATION_BRANCH_POS',\n                    right: props.stnId,\n                    left: branchEndId,\n                });\n                reduxDispatch(flipStationBranchPosition(branchEndId, props.stnId));\n            } else {\n                while (stnList[branchEndId].children.length === 1) {\n                    branchEndId = stnList[branchEndId].parents[0];\n                }\n                dispatch({\n                    type: 'UPDATE_STATION_BRANCH_POS',\n                    left: props.stnId,\n                    right: branchEndId,\n                });\n                reduxDispatch(flipStationBranchPosition(props.stnId, branchEndId));\n            }\n        }\n    };\n\n    return React.useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>swap_vert</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('stations.edit.branch.pos.title')} />\n                <Select\n                    native\n                    onChange={handleChange}\n                    value={neighbours.indexOf(branchEntry[1]) === 1 ? 'lower' : 'upper'}\n                    className={classes.select}\n                >\n                    {['upper', 'lower'].map(p => (\n                        <option key={p} value={p}>\n                            {t('stations.edit.branch.pos.' + p)}\n                        </option>\n                    ))}\n                </Select>\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.stnId, branchEntry[1], neighbours.toString()]\n    );\n};\n"],"sourceRoot":""}