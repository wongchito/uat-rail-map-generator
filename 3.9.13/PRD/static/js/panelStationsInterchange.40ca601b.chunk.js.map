{"version":3,"sources":["panels/stations/edit-diag/name-list-items.tsx","panels/stations/edit-diag/interchange-tab.tsx","constants/colours lazy /^/.//.*$/ groupOptions: {} namespace object","panels/colour-diag/theme-items.tsx","panels/colour-diag/dialog.tsx","panels/colour-diag/index.ts"],"names":["useStyles","makeStyles","createStyles","listItemIcon","width","fontSize","textAlign","NameListItems","props","t","useTranslation","classes","React","className","style","variant","label","onChange","onUpdate","value","name","autoFocus","helperText","toString","intChipSetStyles","StationEditInterchangeTab","stnId","reduxDispatch","useDispatch","rmgStyle","useSelector","store","app","theme","param","transfer","stn_list","dispatch","useContext","ParamContext","useState","osiNameDialogOpened","setOsiNameDialogOpened","addClick","index","newInfo","type","setIdx","info","addInterchange","deleteClick","intIdx","removeInterchange","margin","title","onClick","setIndex","onDelete","i","RmgStyle","MTR","SHMetro","includes","color","lineHeight","whiteSpace","marginRight","osi_names","join","OSINameDialog","open","osiName","onClose","intChip","borderRadius","height","intChipText","display","intChipTextZH","intChipTextEN","intChipLabel","paddingLeft","paddingRight","intChipDeleteIcon","marginLeft","InterchangeChipSet","intInfos","chipSelected","setChipSelected","nameDialogOpened","setNameDialogOpened","intChips","map","intInfo","deleteIcon","backgroundColor","undefined","lineName","key","concat","Array","updateInterchange","memo","dividers","target","newOSIName","val","updateStationOsiName","prevProps","nextProps","InterchangeMore","useMemo","primary","native","tick_direc","direction","ShortDirection","left","right","updateStationTickDirection","Object","values","d","edge","_","checked","isPaid","updateStationPaidArea","paid_area","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","module","exports","cityItem","flexDirection","alignItems","menuItemSpan","padding","button","minWidth","inputColour","position","top","buttonContainer","flexShrink","PalettePanel","i18n","lineList","list","setList","listPromise","default","useEffect","a","data","CityCode","Other","colour","fg","MonoColour","white","useLineList","length","filter","l","newTheme","component","disablePadding","event","slice","select","line","disabled","getTransText2","languages","CustomPanel","hexTemp","setHexTemp","rgb","opacity","htmlFor","borderColor","error","match","hex","idx","toUpperCase","CitySelectItem","items","cityList","c","CountryFlag","country","useEmojiStyles","img","codePoints","split","char","codePointAt","LanguageCode","ChineseCN","ChineseSimp","language","navigator","platform","indexOf","src","process","alt","String","fromCodePoint","cp","parseInt","contentWrapper","overflow","paddingTop","spacing","paddingBottom","breakpoints","down","contentLeft","maxWidth","contentControl","flexGrow","paperRoot","listItemPaper","justifyContent","iconRoot","palette","action","active","inputBaseRoot","inputBaseInputZH","inputBaseInputEN","chipWrapper","overflowX","chipRoot","chipLabel","Dialog2","LineNameInput","nameChange","newName","root","input","RecentChipSet","line_name","stationList","allInfos","Set","reduce","acc","JSON","stringify","reverse","chips","x","parse","txt","secondary","secondaryTypographyProps","ColourControl","tabIndex","setTabIndex","tabNav","indicatorColor","textColor","scrollButtons","panel","ColourDialog"],"mappings":"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GACA,IAED,iBAAkB,CACjB,GACA,IAED,aAAc,CACb,GACA,GAED,gBAAiB,CAChB,GACA,GAED,cAAe,CACd,GACA,GAED,iBAAkB,CACjB,GACA,GAED,WAAY,CACX,GACA,GAED,cAAe,CACd,GACA,GAED,YAAa,CACZ,GACA,GAED,eAAgB,CACf,GACA,GAED,cAAe,CACd,GACA,GAED,iBAAkB,CACjB,GACA,GAED,aAAc,CACb,GACA,GAED,gBAAiB,CAChB,GACA,GAED,aAAc,CACb,GACA,GAED,gBAAiB,CAChB,GACA,GAED,WAAY,CACX,GACA,GAED,cAAe,CACd,GACA,GAED,cAAe,CACd,GACA,IAED,iBAAkB,CACjB,GACA,IAED,WAAY,CACX,GACA,IAED,cAAe,CACd,GACA,IAED,UAAW,CACV,GACA,IAED,aAAc,CACb,GACA,IAED,WAAY,CACX,GACA,IAED,cAAe,CACd,GACA,IAED,YAAa,CACZ,GACA,IAED,eAAgB,CACf,GACA,IAED,cAAe,CACd,GACA,IAED,iBAAkB,CACjB,GACA,IAED,UAAW,CACV,GACA,IAED,aAAc,CACb,GACA,IAED,SAAU,CACT,GACA,IAED,YAAa,CACZ,GACA,IAED,UAAW,CACV,GACA,IAED,aAAc,CACb,GACA,IAED,UAAW,CACV,GACA,IAED,aAAc,CACb,GACA,IAED,YAAa,CACZ,GACA,IAED,eAAgB,CACf,GACA,IAED,iBAAkB,CACjB,GACA,IAED,oBAAqB,CACpB,GACA,IAED,UAAW,CACV,GACA,IAED,aAAc,CACb,GACA,IAED,aAAc,CACb,GACA,IAED,gBAAiB,CAChB,GACA,IAED,aAAc,CACb,GACA,IAED,gBAAiB,CAChB,GACA,IAED,cAAe,CACd,GACA,IAED,iBAAkB,CACjB,GACA,IAED,cAAe,CACd,GACA,IAED,iBAAkB,CACjB,GACA,IAED,WAAY,CACX,GACA,IAED,cAAe,CACd,GACA,IAED,YAAa,CACZ,GACA,IAED,eAAgB,CACf,GACA,IAED,UAAW,CACV,GACA,IAED,aAAc,CACb,GACA,IAED,YAAa,CACZ,GACA,IAED,eAAgB,CACf,GACA,IAED,gBAAiB,CAChB,GACA,IAED,mBAAoB,CACnB,GACA,IAED,SAAU,CACT,GACA,IAED,YAAa,CACZ,GACA,KAGF,SAASqC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAExC,EAAKsC,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAM/C,EAAIsC,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,WACzC,OAAOJ,EAAoBS,MAG7BX,EAAoBY,KAAO,WAC1B,OAAOrB,OAAOqB,KAAKjD,IAEpBqC,EAAoBW,GAAK,GACzBE,EAAOC,QAAUd,G,sJCrSXjI,EAAYC,sBAAW,kBACzBC,uBAAa,CACT8I,SAAU,CACNnE,QAAS,OACToE,cAAe,MACfC,WAAY,UAEhBC,aAAc,CACVC,QAAS,WAEbC,OAAQ,CACJ3E,aAAc,MACdC,OAAQ,GACRvE,MAAO,GACPkJ,SAAU,EACVpF,YAAa,EAEbkF,QAAS,GAEbG,YAAa,CACTC,SAAU,WACVpJ,MAAO,EACPuE,OAAQ,EACR0C,KAAM,GACNoC,IAAK,IAETC,gBAAiB,CACb7E,QAAS,OACT8E,WAAY,QAwCXC,EAAe,SAACpJ,GACzB,MAAoBE,2BAAZD,EAAR,EAAQA,EAAGoJ,EAAX,EAAWA,KACLlJ,EAAUX,IAMV8J,EA3CU,SAAC7H,GACjB,MAAwBrB,IAAM4B,SAAS,IAAvC,mBAAOuH,EAAP,KAAaC,EAAb,KAEMC,EAAchI,EAAM,GACpB,kBAAoEA,EAAM,KAAMsG,MAC5E,SAAAO,GAAM,OAAIA,EAAOoB,WAErB7B,QAAQC,QAAQ,IAoBtB,OAlBA6B,qBACI,WAC4B,qBAAblI,EAAM,IAGjB,sBAAC,4BAAAmI,EAAA,sEACsBH,EADtB,OACSI,EADT,OAEGL,EACI/H,EAAM,KAAOqI,IAASC,MAChB,CAAC,2BAAKF,EAAK,IAAX,IAAeG,OAAQvI,EAAM,GAAIwI,GAAIxI,EAAM,IAAMyI,IAAWC,SAC5DN,GALb,0CAAD,KAUJ,CAACpI,EAAMV,aAGJwI,EAgBUa,CAAYpK,EAAMyB,OAGnCkI,qBACI,WACI,GAAwB,IAApBL,EAASe,SACTf,EAASgB,QAAO,SAAAC,GAAC,OAAIA,EAAEnC,KAAOpI,EAAMyB,MAAM,MAAI4I,OAAlD,CACA,MAAyBf,EAAS,GAA5BlB,EAAN,EAAMA,GAAI4B,EAAV,EAAUA,OAAQC,EAAlB,EAAkBA,GACdO,EAAW,CAACxK,EAAMyB,MAAM,GAAI2G,EAAI4B,EAAQC,GAAMC,IAAWC,OAC7DnK,EAAMU,SAAS,QAAS8J,MAG5B,CAAClB,IAUL,OACI,eAAC,OAAD,CAAMmB,UAAU,MAAMC,gBAAc,EAApC,UACI,cAAC,EAAD,CAAgB/J,MAAOX,EAAMyB,MAAM,GAAIhB,SA5B5B,SAACkK,GAAD,OACf3K,EAAMU,SAAS,QAAf,CAAyBiK,EAAM3E,OAAOrF,OAAtC,mBAAgDX,EAAMyB,MAAMmJ,MAAM,SA4B9D,cAAC,UAAD,CAASrK,QAAQ,WACjB,eAAC,WAAD,WACI,cAAC,eAAD,CAAciG,QAASvG,EAAE,iBACzB,cAAC,YAAD,CACI4K,QAAM,EACNvK,MAAO,CAAEV,MAAO,KAChBa,SAhBG,SAACkK,GAChB,IAAIG,EAAOH,EAAM3E,OAAOrF,MACxB,EAAqB2I,EAASgB,QAAO,SAAAC,GAAC,OAAIA,EAAEnC,KAAO0C,KAAM,GAAnDd,EAAN,EAAMA,OAAQC,EAAd,EAAcA,GACVO,EAAW,CAACxK,EAAMyB,MAAM,GAAIqJ,EAAMd,EAAQC,GAAMC,IAAWC,OAC/DnK,EAAMU,SAAS,QAAS8J,IAaZ7J,MAAOX,EAAMyB,MAAM,GACnBsJ,SAA6B,UAAnB/K,EAAMyB,MAAM,GAL1B,SAOK6H,EAASlE,KAAI,SAAAmF,GAAC,OACX,cAAC,WAAD,CAAqB5J,MAAO4J,EAAEnC,GAA9B,SACI,sBACI/H,UAAWF,EAAQwI,aACnBrI,MAAO,CACHiF,gBAAiBgF,EAAEP,OACnBzG,MAAOgH,EAAEN,IAAMC,IAAWC,OAJlC,SAOKa,YAAcT,EAAE3J,KAAMyI,EAAK4B,cARrBV,EAAEnC,gBAkB5B8C,EAAc,SAAClL,GACxB,IAAQC,EAAMC,2BAAND,EACFE,EAAUX,IAEhB,EAA8BwC,mBAAShC,EAAMyB,MAAM,IAAnD,mBAAO0J,EAAP,KAAgBC,EAAhB,KAEAzB,qBACI,kBAAMyB,EAAWpL,EAAMyB,MAAM,MAE7B,CAACzB,EAAMyB,MAAM,KA6CjB,OACI,eAAC,OAAD,CAAMgJ,UAAU,MAAMC,gBAAc,EAApC,UACI,eAAC,WAAD,WACI,cAAC,eAAD,CAAclE,QAASvG,EAAE,mBACzB,sBAAKI,UAAWF,EAAQ+I,gBAAxB,UACI,uBACI5G,KAAK,QACL8F,GAAG,cACHzH,MAAOX,EAAMyB,MAAM,GACnBhB,SAnDC,SAACkK,GAClB,IAAIU,EAAMV,EAAM3E,OAAOrF,MAEvBX,EAAMU,SAAS,QAAS,CAACoJ,IAASC,MAAO,QAASsB,EAAKrL,EAAMyB,MAAM,MAiDnDpB,UAAWF,EAAQ4I,YACnBzI,MAAO,CAAEgL,QAAS,KAEtB,uBAAOC,QAAQ,cAAf,SACI,cAAC,UAAD,CAASzI,MAAO7C,EAAE,kBAAmB,aAAW,gBAAhD,SACI,cAAC,SAAD,CACII,UAAWF,EAAQ0I,OACnBvI,MAAO,CACHiF,gBAAiBvF,EAAMyB,MAAM,GAC7B+J,YAAaxL,EAAMyB,MAAM,IAAMyI,IAAWC,OAE9C5J,QAAQ,YACRkK,UAAU,OAPd,SASK,aAKjB,cAAC,YAAD,CACIgB,QAAO,OAACN,QAAD,IAACA,OAAD,EAACA,EAASO,MAAM,uBACvBpL,MAAO,CAAEV,MAAO,IAChBa,SApEE,SAACkK,GACf,IAAIgB,EAAMhB,EAAM3E,OAAOrF,MACvB,GAAyC,OAArCgL,EAAID,MAAM,uBAGd,GAFAN,EAAWO,GAEY,UAAnB3L,EAAMyB,MAAM,GACZ,GAAuC,OAAnCkK,EAAID,MAAM,qBAA+B,CAEzC,IAAIlB,EAAW,CAACV,IAASC,MAAO,QAAS4B,EAAK3L,EAAMyB,MAAM,IAC1DzB,EAAMU,SAAS,QAAS8J,OAGrB,CAEH,IAAIA,EAAQ,CAAIV,IAASC,MAAO,SAApB,mBAAgC/J,EAAMyB,MAAMmJ,MAAM,KAC9D5K,EAAMU,SAAS,QAAS8J,QAK5B,GAAuC,OAAnCmB,EAAID,MAAM,qBAA+B,CAEzC,IAAIlB,EAAWxK,EAAMyB,MAAM2D,KAAI,SAACc,EAAK0F,GAAN,OAAuB,IAARA,EAAYD,EAAMzF,KAChElG,EAAMU,SAAS,QAAS8J,KA8CpB7J,MAAK,OAAEwK,QAAF,IAAEA,OAAF,EAAEA,EAASU,mBAGxB,cAAC,UAAD,CAAStL,QAAQ,WACjB,eAAC,WAAD,WACI,cAAC,eAAD,CAAciG,QAASvG,EAAE,eACzB,eAAC,SAAD,CACIwG,QAAM,EACNnG,MAAO,CAAEV,MAAO,IAChBY,MAAOP,EAAE,aACTQ,SAhDC,SAACkK,GACd,IAAIH,EAAW,CAACV,IAASC,MAAO,QAAS/J,EAAMyB,MAAM,GAAIkJ,EAAM3E,OAAOrF,OACtEX,EAAMU,SAAS,QAAS8J,IA+CZ7J,MAAOX,EAAMyB,MAAM,IAAMyI,IAAWC,MALxC,UAOI,wBAAQxJ,MAAM,OAAd,SAAsBV,EAAE,oBACxB,wBAAQU,MAAM,OAAd,SAAsBV,EAAE,8BAOtC6L,EAAiB,SAAC9L,GACpB,MAAoBE,2BAAZD,EAAR,EAAQA,EAAGoJ,EAAX,EAAWA,KACLlJ,EAAUX,IAEVuM,EAAQxF,mBACV,kBACIyF,IAAS5G,KAAI,SAAA6G,GAAC,OACV,cAAC,WAAD,CAAqBtL,MAAOsL,EAAE7D,GAA9B,SACI,uBAAM/H,UAAWF,EAAQqI,SAAzB,UACI,cAAC0D,EAAD,CAAahE,KAAM+D,EAAEE,UACrB,+BAAOnB,YAAciB,EAAErL,KAAMyI,EAAK4B,iBAH3BgB,EAAE7D,SAQzB,IAEJ,OACI,eAAC,WAAD,WACI,cAAC,eAAD,CAAc5B,QAASvG,EAAE,iBACzB,cAAC,YAAD,CAAW4K,QAAM,EAACvK,MAAO,CAAEV,MAAO,KAAOe,MAAOX,EAAMW,MAAOF,SAAUT,EAAMS,SAA7E,SACKsL,QAMXK,EAAiB3M,sBAAW,kBAC9BC,uBAAa,CACT2M,IAAK,CACDlI,OAAQ,GACRT,YAAa,eAQzB,SAASwI,EAAYlM,GACjB,IAAQqJ,EAASnJ,2BAATmJ,KACFlJ,EAAUiM,IAEZE,EAAa,GAwBjB,OArBIA,EADsB,IAAtBtM,EAAMkI,KAAKmC,OACErK,EAAMkI,KACd2D,cACAU,MAAM,IACNnH,KAAI,SAAAoH,GAAI,QAAMA,EAAKC,YAAY,IAAM,GAAK,QAAQ1L,SAAS,IAAI8K,iBAEvD,CAAC,SAASlG,OACnB3F,EAAMkI,KACD2D,cACAU,MAAM,IACNnH,KAAI,SAAAoH,GAAI,QAAMA,EAAKC,YAAY,IAAM,GAAK,QAAQ1L,SAAS,IAAI8K,iBACpE,SAMJ,CAACa,IAAaC,UAAWD,IAAaE,aAAatJ,SAAS+F,EAAKwD,WAClD,OAAf7M,EAAMkI,OAENoE,EAAa,CAAC,WAE8B,IAAzCQ,UAAUC,SAASC,QAAQ,WAA4D,IAAzCF,UAAUC,SAASC,QAAQ,SAC5E,qBACIC,IAAKC,oBAAA,wBAA0CZ,EAAW1I,KAAK,KAA1D,QACLvD,UAAWF,EAAQkM,IACnBc,IAAG,kBAAanN,EAAMkI,QAI1B,+BAAOkF,OAAOC,cAAP,MAAAD,OAAM,YAAkBd,EAAWlH,KAAI,SAAAkI,GAAE,OAAIC,SAASD,EAAI,W,YCjTnE9N,EAAYC,sBAAW,SAAAgC,GAAK,OAC9B/B,uBAAa,CACT8N,eAAe,aACXnJ,QAAS,OACToJ,SAAU,SACVC,WAAYjM,EAAMkM,QAAQ,GAC1BC,cAAenM,EAAMkM,QAAQ,GAC7BlJ,YAAahD,EAAMkM,QAAQ,GAC3BjJ,aAAcjD,EAAMkM,QAAQ,IAC3BlM,EAAMoM,YAAYC,KAAK,MAAQ,CAC5BrF,cAAe,WAGvBsF,YAAa,CACTC,SAAU,KAEdC,eAAgB,CACZC,SAAU,EACV/E,WAAY,EACZ9E,QAAS,OACToE,cAAe,SACf7I,MAAO,KAGXuO,UAAW,CACPH,SAAU,KAEdI,cAAe,CACXC,eAAgB,UAEpBC,SAAU,CACNtF,SAAU,WACVzF,MAAO9B,EAAM8M,QAAQC,OAAOC,QAEhCC,cAAe,CACXrK,QAAS,SAEbsK,iBAAkB,CACd7O,UAAW,SACXD,SAAU,GACV+I,QAAS,EACT8E,WAAY,EACZvJ,OAAQ,IAEZyK,iBAAkB,CACd9O,UAAW,SACXD,SAAU,GACV+I,QAAS,EACTgF,cAAe,EACfzJ,OAAQ,QAGZ0K,YAAa,CACTC,UAAW,OACXzK,QAAS,QAEb0K,SAAU,CACN7K,aAAc,IACdC,OAAQ,GACRX,WAAY,OACZX,OAAQ,GAEZmM,UAAW,CACPpG,QAAS,QACT,WAAY,CACRvE,QAAS,QACTvE,UAAW,UAEf,uBAAwB,CACpBD,SAAU,QAEd,sBAAuB,CACnB2D,WAAY,gBAwCbyL,EA1BC,SAACjP,GACb,IAAQC,EAAMC,2BAAND,EACFE,EAAUX,IAEhB,OACI,eAAC,SAAD,CAAQsE,KAAM9D,EAAM8D,KAAME,QAAShE,EAAMgE,QAAzC,UACI,cAAC,cAAD,UAAc/D,EAAE,kBAChB,eAAC,gBAAD,CAAeI,UAAWF,EAAQqN,eAAlC,UACI,eAAC,OAAD,CAAM/C,UAAU,MAAMC,gBAAc,EAACrK,UAAWF,EAAQ4N,YAAxD,UACI,cAAC,EAAD,CAAetM,MAAOzB,EAAMyB,MAAOgE,SAAUzF,EAAMyF,SAAU/E,SAAUV,EAAMU,WAC7E,cAAC,UAAD,IACA,cAAC,EAAD,CAAeA,SAAUV,EAAMU,cAEnC,qBAAKL,UAAWF,EAAQ8N,eAAxB,SACI,cAAC,EAAD,CAAexM,MAAOzB,EAAMyB,MAAOf,SAAUV,EAAMU,gBAG3D,cAAC,gBAAD,UACI,cAAC,SAAD,CAAQqC,QAAS/C,EAAMgE,QAAST,MAAM,UAAtC,SACKtD,EAAE,uBASjBiP,EAAgB,SAAClP,GACnB,IAAMG,EAAUX,IAEV2P,EAAa,SAACxO,EAAeyB,GAC/B,IAAIgN,EAAUpP,EAAMyF,SAASL,KAAI,SAACc,EAAK0F,GAAN,OAAeA,IAAQxJ,EAAQzB,EAAQuF,KACxElG,EAAMU,SAAS,OAAQ0O,IAG3B,OACI,cAAC,WAAD,CAAU9O,MAAO,CAAE+N,eAAgB,UAAnC,SACI,eAAC,QAAD,CAAOhO,UAAWF,EAAQgO,UAAW7N,MAAO,CAAEiF,gBAAiBvF,EAAMyB,MAAM,IAA3E,UACI,cAAC,OAAD,CAAMpB,UAAWF,EAAQmO,SAAzB,kBACA,cAAC,YAAD,CACI3N,MAAOX,EAAMyF,SAAS,GACtBtF,QAAS,CACLkP,KAAMlP,EAAQuO,cACdY,MAAOnP,EAAQwO,kBAEnBrO,MAAO,CAAEiD,MAAOvD,EAAMyB,MAAM,IAAMyI,IAAWC,OAC7C1J,SAAU,SAAAuH,GAAC,OAAImH,EAAWnH,EAAEhC,OAAOrF,MAAO,IAC1CE,WAAS,IAEb,cAAC,YAAD,CACIF,MAAOX,EAAMyF,SAAS,GACtBtF,QAAS,CACLkP,KAAMlP,EAAQuO,cACdY,MAAOnP,EAAQyO,kBAEnBtO,MAAO,CAAEiD,MAAOvD,EAAMyB,MAAM,IAAMyI,IAAWC,OAC7C1J,SAAU,SAAAuH,GAAC,OAAImH,EAAWnH,EAAEhC,OAAOrF,MAAO,YAOxD4O,EAAgB,SAACvP,GACnB,IAAQC,EAAMC,2BAAND,EACFE,EAAUX,IAEViC,EAAQH,uBAAY,SAACC,GAAD,OAAsBA,EAAMG,MAAMD,SACtDgE,EAAWnE,uBAAY,SAACC,GAAD,OAAsBA,EAAMG,MAAM8N,aACzDC,EAAcnO,uBAAY,SAACC,GAAD,OAAsBA,EAAMG,MAAME,YAE5D8N,EAAWnJ,mBACb,kBACI,IAAIoJ,IACA3I,OAAOC,OAAOwI,GACTG,QACG,SAACC,EAAD,GAAwB,IACZrN,EADW,EAAfb,SACIa,KACR,OAAOqN,EAAIlK,OAAJ,MAAAkK,EAAG,YAAWrN,MAEzB,CAAC,GAAD,mBAAKf,GAAL,YAAegE,MAElBL,KAAI,SAAAc,GAAG,OAAI4J,KAAKC,UAAU7J,MAC1B8J,aAGb,IAGEC,EAAQ1J,mBACV,kBACI,YAAImJ,GAAUtK,KAAI,SAAC8K,EAAGhN,GAClB,IAAMV,EAAwBsN,KAAKK,MAAMD,GACnC1P,EAAQgC,EAAKoI,MAAM,GAAGxF,KAAI,SAACgL,EAAKlN,GAAN,OAC5B,sBAAc5C,MAAO,CAAEiD,MAAOf,EAAK,IAAnC,SACK4N,GADMlN,MAKf,OACI,cAAC,OAAD,CAEIH,QAAS,WACL/C,EAAMU,SAAS,QAAS8B,EAAKoI,MAAM,EAAG,IACtC5K,EAAMU,SAAS,OAAQ8B,EAAKoI,MAAM,KAEtCtK,MAAO,CAAEiF,gBAAiB/C,EAAK,IAC/BnC,UAAWF,EAAQ4O,SACnB5O,QAAS,CAAEK,MAAOL,EAAQ6O,WACpBxO,SARD0C,QAarB,IAGJ,OACI,cAAC,WAAD,UACI,cAAC,eAAD,CACIsD,QAASvG,EAAE,iBACXoQ,UAAWJ,EACXK,yBAA0B,CAAE7F,UAAW,OACvCtK,QAAS,CAAEkQ,UAAWlQ,EAAQ0O,kBAMxC0B,EAAgB,SAACvQ,GACnB,IAAQC,EAAMC,2BAAND,EACR,EAAgC+B,mBAA4B,UAAnBhC,EAAMyB,MAAM,GAAiB,EAAI,GAA1E,mBAAO+O,EAAP,KAAiBC,EAAjB,KAEMC,EACF,eAAC,OAAD,CACI/P,MAAO6P,EACPG,eAAe,UACfC,UAAU,UACVnQ,SAAU,SAAC2G,EAAGlB,GAAJ,OAAYuK,EAAYvK,IAClC3F,QAAQ,YACRsQ,cAAc,MANlB,UAQI,cAAC,MAAD,CAAKrQ,MAAOP,EAAE,kBAAmBK,MAAO,CAAEwI,SAAU,WACpD,cAAC,MAAD,CAAKtI,MAAOP,EAAE,iBAAkBK,MAAO,CAAEwI,SAAU,cAIrDgI,EAAS,SAAAlF,GACX,OAAQA,GACJ,KAAK,EACD,OAAO,cAAC,EAAD,eAAkB5L,IAC7B,KAAK,EACD,OAAO,cAAC,EAAD,eAAiBA,IAC5B,QACI,OAAO,8BAPJ,CASZwQ,GAEH,OACI,qCACKE,EACAI,MCjREC","file":"static/js/panelStationsInterchange.40ca601b.chunk.js","sourcesContent":["import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ListItem, ListItemIcon, TextField, makeStyles, createStyles } from '@material-ui/core';\nimport { Name } from '../../../constants/constants';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        listItemIcon: {\n            width: '1em',\n            fontSize: '1.5rem',\n            textAlign: 'center',\n        },\n    })\n);\n\ninterface Props {\n    onUpdate: (index: number) => (event: React.ChangeEvent<HTMLInputElement>) => void;\n    name: Name;\n}\n\nconst NameListItems = (props: Props) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    return React.useMemo(\n        () => (\n            <>\n                <ListItem>\n                    <ListItemIcon>\n                        <span className={classes.listItemIcon}>文</span>\n                    </ListItemIcon>\n                    <TextField\n                        style={{ width: '100%' }}\n                        variant=\"outlined\"\n                        label={t('stations.edit.name.nameZH')}\n                        onChange={props.onUpdate(0)}\n                        value={props.name[0]}\n                        autoFocus\n                    />\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <span className={classes.listItemIcon}>A</span>\n                    </ListItemIcon>\n                    <TextField\n                        style={{ width: '100%' }}\n                        variant=\"outlined\"\n                        label={t('stations.edit.name.nameEN')}\n                        onChange={props.onUpdate(1)}\n                        value={props.name[1]}\n                        helperText={t('stations.edit.name.nameENHelper')}\n                    />\n                </ListItem>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.name.toString()]\n    );\n};\n\nexport default NameListItems;\n","import React, { useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    Chip,\n    createStyles,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Divider,\n    Icon,\n    IconButton,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    makeStyles,\n    Select,\n    Switch,\n    Tooltip,\n} from '@material-ui/core';\nimport { ParamContext } from '../../../context';\nimport ColourDialog from '../../colour-diag';\nimport NameListItems from './name-list-items';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../../redux';\nimport { InterchangeInfo, MonoColour, Name, RmgStyle, ShortDirection, Theme } from '../../../constants/constants';\nimport {\n    addInterchange,\n    removeInterchange,\n    updateInterchange,\n    updateStationOsiName,\n    updateStationPaidArea,\n    updateStationTickDirection,\n} from '../../../redux/param/action';\n\nconst StationEditInterchangeTab = (props: { stnId: string }) => {\n    const { stnId } = props;\n    const { t } = useTranslation();\n    const reduxDispatch = useDispatch();\n\n    const rmgStyle = useSelector((store: RootState) => store.app.rmgStyle);\n    const theme = useSelector((store: RootState) => store.param.theme);\n    const { transfer } = useSelector((store: RootState) => store.param.stn_list[stnId]);\n    const { dispatch } = useContext(ParamContext);\n\n    const [osiNameDialogOpened, setOsiNameDialogOpened] = React.useState(false);\n\n    const addClick = (index: number) => {\n        let newInfo: InterchangeInfo = [...theme, '轉綫', 'Line'];\n        dispatch({\n            type: 'ADD_STATION_INTERCHANGE_INFO',\n            stnId,\n            setIdx: index,\n            info: newInfo,\n        });\n        reduxDispatch(addInterchange(stnId, index, newInfo));\n    };\n\n    const deleteClick = (setIdx: number, intIdx: number) => {\n        dispatch({\n            type: 'REMOVE_STATION_INTERCHANGE_INFO',\n            stnId,\n            setIdx,\n            intIdx,\n        });\n        reduxDispatch(removeInterchange(stnId, setIdx, intIdx));\n    };\n\n    return (\n        <List>\n            <ListItem>\n                <ListItemText>\n                    <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.within')}</h3>\n                </ListItemText>\n                <ListItemSecondaryAction>\n                    <Tooltip title={t('stations.edit.interchange.add')} aria-label=\"add\">\n                        <IconButton onClick={() => addClick(0)}>\n                            <Icon>add_circle</Icon>\n                        </IconButton>\n                    </Tooltip>\n                </ListItemSecondaryAction>\n            </ListItem>\n            <ListItem>\n                <InterchangeChipSet stnId={stnId} setIndex={0} onDelete={i => deleteClick(0, i)} />\n            </ListItem>\n            {[RmgStyle.MTR, RmgStyle.SHMetro].includes(rmgStyle || '') && (\n                <>\n                    <Divider />\n                    <ListItem>\n                        <ListItemText>\n                            <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.osi')}</h3>\n                        </ListItemText>\n                        <ListItemSecondaryAction>\n                            <Button\n                                variant=\"outlined\"\n                                color=\"primary\"\n                                style={{ lineHeight: '1rem', whiteSpace: 'pre', marginRight: 5 }}\n                                onClick={() => setOsiNameDialogOpened(true)}\n                            >\n                                {transfer.osi_names[0] ? transfer.osi_names[0].join('\\r\\n') : '車站名\\r\\nStn Name'}\n                            </Button>\n                            <OSINameDialog\n                                open={osiNameDialogOpened}\n                                osiName={transfer.osi_names[0] || ['', '']}\n                                stnId={stnId}\n                                onClose={() => setOsiNameDialogOpened(false)}\n                            />\n                            <Tooltip title={t('stations.edit.interchange.add')} aria-label=\"add\">\n                                <IconButton onClick={() => addClick(1)}>\n                                    <Icon>add_circle</Icon>\n                                </IconButton>\n                            </Tooltip>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                    <ListItem>\n                        <InterchangeChipSet stnId={stnId} setIndex={1} onDelete={i => deleteClick(1, i)} />\n                    </ListItem>\n                    <ListItem>\n                        <span>{t('stations.edit.interchange.note')}</span>\n                    </ListItem>\n                </>\n            )}\n            {rmgStyle === RmgStyle.MTR && <InterchangeMore stnId={stnId} />}\n        </List>\n    );\n};\n\nexport default StationEditInterchangeTab;\n\nconst intChipSetStyles = makeStyles(() =>\n    createStyles({\n        intChip: {\n            borderRadius: 4.5,\n            height: 40,\n            lineHeight: '1rem',\n            margin: 2,\n        },\n        intChipText: {\n            display: 'block',\n            textAlign: 'center' as 'center',\n        },\n        intChipTextZH: {\n            fontSize: 18,\n            lineHeight: '1.2rem',\n        },\n        intChipTextEN: {\n            fontSize: '.75rem',\n            lineHeight: '.9rem',\n            whiteSpace: 'pre-wrap' as 'pre-wrap',\n        },\n        intChipLabel: {\n            paddingLeft: 6,\n            paddingRight: 6,\n        },\n        intChipDeleteIcon: {\n            marginLeft: -3,\n        },\n    })\n);\n\ninterface InterchangeChipSetProps {\n    stnId: string;\n    setIndex: number;\n    onDelete: (i: number) => void;\n}\n\nconst InterchangeChipSet = (props: InterchangeChipSetProps) => {\n    const { stnId, setIndex, onDelete } = props;\n    const classes = intChipSetStyles();\n    const reduxDispatch = useDispatch();\n\n    const { dispatch } = React.useContext(ParamContext);\n    const intInfos = useSelector((store: RootState) => store.param.stn_list[stnId].transfer.info[setIndex]);\n\n    const [chipSelected, setChipSelected] = React.useState(-1);\n    const [nameDialogOpened, setNameDialogOpened] = React.useState(false);\n\n    const handleClick = (index: number) => {\n        setChipSelected(index);\n        setNameDialogOpened(true);\n    };\n\n    const nameDialogUpdate = (key: string, value: any) => {\n        if (key === 'theme') {\n            const newInfo = (value as string[]).concat(Array(2)) as InterchangeInfo;\n            dispatch({\n                type: 'UPDATE_STATION_INTERCHANGE_INFO',\n                stnId,\n                setIdx: setIndex,\n                intIdx: chipSelected,\n                info: newInfo,\n            });\n            reduxDispatch(updateInterchange(stnId, setIndex, chipSelected, newInfo));\n        }\n        if (key === 'name') {\n            const newInfo = Array(4).concat(value) as InterchangeInfo;\n            dispatch({\n                type: 'UPDATE_STATION_INTERCHANGE_INFO',\n                stnId,\n                setIdx: setIndex,\n                intIdx: chipSelected,\n                info: newInfo,\n            });\n            reduxDispatch(updateInterchange(stnId, setIndex, chipSelected, newInfo));\n        }\n    };\n\n    const intChips = intInfos?.map((intInfo, i) => {\n        let label = (\n            <span style={{ color: intInfo[3] }}>\n                <span className={`${classes.intChipText} ${classes.intChipTextZH}`}>{intInfo[4]}</span>\n                <span className={`${classes.intChipText} ${classes.intChipTextEN}`}>{intInfo[5]}</span>\n            </span>\n        );\n        return (\n            <Chip\n                key={i}\n                label={label}\n                className={classes.intChip}\n                classes={{\n                    label: classes.intChipLabel,\n                    deleteIcon: classes.intChipDeleteIcon,\n                }}\n                style={{ backgroundColor: intInfo[2] }}\n                onDelete={() => onDelete(i)}\n                onClick={() => handleClick(i)}\n            />\n        );\n    });\n\n    return (\n        <div>\n            {intChips}\n\n            <ColourDialog\n                open={nameDialogOpened}\n                theme={\n                    intInfos?.[chipSelected] === undefined\n                        ? ([] as any as Theme)\n                        : [\n                              intInfos[chipSelected][0],\n                              intInfos[chipSelected][1],\n                              intInfos[chipSelected][2],\n                              intInfos[chipSelected][3] as MonoColour,\n                          ]\n                }\n                lineName={\n                    intInfos?.[chipSelected] === undefined\n                        ? ['', '']\n                        : [intInfos[chipSelected][4], intInfos[chipSelected][5]]\n                }\n                onUpdate={nameDialogUpdate}\n                onClose={() => setNameDialogOpened(false)}\n            />\n        </div>\n    );\n};\n\ninterface OSINameDialogProps {\n    open: boolean;\n    stnId: string;\n    osiName: Name;\n    onClose: () => void;\n}\n\nconst OSINameDialog = React.memo(\n    (props: OSINameDialogProps) => {\n        const { open, stnId, osiName, onClose } = props;\n        const { t } = useTranslation();\n        const reduxDispatch = useDispatch();\n\n        const { dispatch } = useContext(ParamContext);\n\n        const handleUpdate =\n            (index: number) =>\n            ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\n                let newOSIName = osiName.map((val, i) => (i === index ? value : val)) as Name;\n                dispatch({ type: 'UPDATE_STATION_OSI_NAME', stnId, name: newOSIName });\n                reduxDispatch(updateStationOsiName(stnId, newOSIName));\n            };\n\n        return (\n            <Dialog open={open} onClose={onClose}>\n                <DialogTitle>{t('stations.edit.interchange.osiName')}</DialogTitle>\n                <DialogContent dividers>\n                    <List>\n                        <NameListItems onUpdate={handleUpdate} name={osiName} />\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={onClose} color=\"primary\" autoFocus>\n                        {t('dialog.done')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.open === nextProps.open && prevProps.osiName.toString() === nextProps.osiName.toString()\n);\n\nconst InterchangeMore = (props: { stnId: string }) => {\n    const { stnId } = props;\n    const { t } = useTranslation();\n    const reduxDispatch = useDispatch();\n\n    const { dispatch } = React.useContext(ParamContext);\n    const { transfer } = useSelector((store: RootState) => store.param.stn_list[stnId]);\n\n    return React.useMemo(() => {\n        const tickDirecChange = ({ target: { value } }: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n            let direction = value;\n            if (direction === ShortDirection.left || direction === ShortDirection.right) {\n                dispatch({ type: 'UPDATE_STATION_TICK_DIREC', stnId, direction });\n                reduxDispatch(updateStationTickDirection(stnId, direction as ShortDirection));\n            }\n        };\n\n        return (\n            <>\n                <Divider />\n                <ListItem>\n                    <ListItemText>\n                        <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.settings')}</h3>\n                    </ListItemText>\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>format_textdirection_l_to_r</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('stations.edit.interchange.tickDirec.label')} />\n                    <ListItemSecondaryAction>\n                        <Select native value={transfer.tick_direc} onChange={tickDirecChange}>\n                            {Object.values(ShortDirection).map(d => (\n                                <option key={d} value={d}>\n                                    {t('stations.edit.interchange.tickDirec.' + d)}\n                                </option>\n                            ))}\n                        </Select>\n                    </ListItemSecondaryAction>\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>attach_money</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('stations.edit.interchange.paidArea')} />\n                    <ListItemSecondaryAction>\n                        <Switch\n                            color=\"primary\"\n                            edge=\"end\"\n                            onChange={(_, checked) => {\n                                dispatch({\n                                    type: 'UPDATE_STATION_PAID_AREA',\n                                    stnId,\n                                    isPaid: checked,\n                                });\n                                reduxDispatch(updateStationPaidArea(stnId, checked));\n                            }}\n                            checked={transfer.paid_area}\n                        />\n                    </ListItemSecondaryAction>\n                </ListItem>\n            </>\n        );\n    }, [stnId, t, dispatch, reduxDispatch, transfer.paid_area, transfer.tick_direc]);\n};\n","var map = {\n\t\"./README.md\": [\n\t\t82,\n\t\t75\n\t],\n\t\"./barcelona\": [\n\t\t38,\n\t\t1\n\t],\n\t\"./barcelona.ts\": [\n\t\t38,\n\t\t1\n\t],\n\t\"./beijing\": [\n\t\t39,\n\t\t12\n\t],\n\t\"./beijing.ts\": [\n\t\t39,\n\t\t12\n\t],\n\t\"./changsha\": [\n\t\t40,\n\t\t23\n\t],\n\t\"./changsha.ts\": [\n\t\t40,\n\t\t23\n\t],\n\t\"./chengdu\": [\n\t\t41,\n\t\t34\n\t],\n\t\"./chengdu.ts\": [\n\t\t41,\n\t\t34\n\t],\n\t\"./chongqing\": [\n\t\t42,\n\t\t36\n\t],\n\t\"./chongqing.ts\": [\n\t\t42,\n\t\t36\n\t],\n\t\"./dongguan\": [\n\t\t43,\n\t\t2\n\t],\n\t\"./dongguan.ts\": [\n\t\t43,\n\t\t2\n\t],\n\t\"./edinburgh\": [\n\t\t44,\n\t\t3\n\t],\n\t\"./edinburgh.ts\": [\n\t\t44,\n\t\t3\n\t],\n\t\"./foshan\": [\n\t\t45,\n\t\t4\n\t],\n\t\"./foshan.ts\": [\n\t\t45,\n\t\t4\n\t],\n\t\"./glasgow\": [\n\t\t46,\n\t\t5\n\t],\n\t\"./glasgow.ts\": [\n\t\t46,\n\t\t5\n\t],\n\t\"./guangzhou\": [\n\t\t47,\n\t\t6\n\t],\n\t\"./guangzhou.ts\": [\n\t\t47,\n\t\t6\n\t],\n\t\"./hangzhou\": [\n\t\t48,\n\t\t7\n\t],\n\t\"./hangzhou.ts\": [\n\t\t48,\n\t\t7\n\t],\n\t\"./hongkong\": [\n\t\t49,\n\t\t8\n\t],\n\t\"./hongkong.ts\": [\n\t\t49,\n\t\t8\n\t],\n\t\"./kansai\": [\n\t\t50,\n\t\t9\n\t],\n\t\"./kansai.ts\": [\n\t\t50,\n\t\t9\n\t],\n\t\"./kaohsiung\": [\n\t\t51,\n\t\t10\n\t],\n\t\"./kaohsiung.ts\": [\n\t\t51,\n\t\t10\n\t],\n\t\"./london\": [\n\t\t52,\n\t\t11\n\t],\n\t\"./london.ts\": [\n\t\t52,\n\t\t11\n\t],\n\t\"./macao\": [\n\t\t53,\n\t\t13\n\t],\n\t\"./macao.ts\": [\n\t\t53,\n\t\t13\n\t],\n\t\"./madrid\": [\n\t\t54,\n\t\t14\n\t],\n\t\"./madrid.ts\": [\n\t\t54,\n\t\t14\n\t],\n\t\"./nanjing\": [\n\t\t55,\n\t\t15\n\t],\n\t\"./nanjing.ts\": [\n\t\t55,\n\t\t15\n\t],\n\t\"./newtaipei\": [\n\t\t56,\n\t\t16\n\t],\n\t\"./newtaipei.ts\": [\n\t\t56,\n\t\t16\n\t],\n\t\"./osaka\": [\n\t\t57,\n\t\t17\n\t],\n\t\"./osaka.ts\": [\n\t\t57,\n\t\t17\n\t],\n\t\"./oslo\": [\n\t\t58,\n\t\t18\n\t],\n\t\"./oslo.ts\": [\n\t\t58,\n\t\t18\n\t],\n\t\"./other\": [\n\t\t59,\n\t\t19\n\t],\n\t\"./other.ts\": [\n\t\t59,\n\t\t19\n\t],\n\t\"./paris\": [\n\t\t60,\n\t\t20\n\t],\n\t\"./paris.ts\": [\n\t\t60,\n\t\t20\n\t],\n\t\"./qingdao\": [\n\t\t61,\n\t\t21\n\t],\n\t\"./qingdao.ts\": [\n\t\t61,\n\t\t21\n\t],\n\t\"./sanfrancisco\": [\n\t\t62,\n\t\t22\n\t],\n\t\"./sanfrancisco.ts\": [\n\t\t62,\n\t\t22\n\t],\n\t\"./seoul\": [\n\t\t63,\n\t\t24\n\t],\n\t\"./seoul.ts\": [\n\t\t63,\n\t\t24\n\t],\n\t\"./shanghai\": [\n\t\t64,\n\t\t25\n\t],\n\t\"./shanghai.ts\": [\n\t\t64,\n\t\t25\n\t],\n\t\"./shenzhen\": [\n\t\t65,\n\t\t26\n\t],\n\t\"./shenzhen.ts\": [\n\t\t65,\n\t\t26\n\t],\n\t\"./singapore\": [\n\t\t66,\n\t\t27\n\t],\n\t\"./singapore.ts\": [\n\t\t66,\n\t\t27\n\t],\n\t\"./stockholm\": [\n\t\t67,\n\t\t28\n\t],\n\t\"./stockholm.ts\": [\n\t\t67,\n\t\t28\n\t],\n\t\"./taipei\": [\n\t\t68,\n\t\t29\n\t],\n\t\"./taipei.ts\": [\n\t\t68,\n\t\t29\n\t],\n\t\"./tianjin\": [\n\t\t69,\n\t\t30\n\t],\n\t\"./tianjin.ts\": [\n\t\t69,\n\t\t30\n\t],\n\t\"./tokyo\": [\n\t\t70,\n\t\t31\n\t],\n\t\"./tokyo.ts\": [\n\t\t70,\n\t\t31\n\t],\n\t\"./toronto\": [\n\t\t71,\n\t\t32\n\t],\n\t\"./toronto.ts\": [\n\t\t71,\n\t\t32\n\t],\n\t\"./tyneandwear\": [\n\t\t72,\n\t\t33\n\t],\n\t\"./tyneandwear.ts\": [\n\t\t72,\n\t\t33\n\t],\n\t\"./xian\": [\n\t\t73,\n\t\t35\n\t],\n\t\"./xian.ts\": [\n\t\t73,\n\t\t35\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 78;\nmodule.exports = webpackAsyncContext;","import React, { useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    createStyles,\n    Divider,\n    List,\n    ListItem,\n    ListItemText,\n    makeStyles,\n    MenuItem,\n    Select,\n    TextField,\n    Tooltip,\n} from '@material-ui/core';\nimport { getTransText2 } from '../../utils';\nimport { CityCode, cityList } from '../../constants/city-config';\nimport { ColourHex, LanguageCode, MonoColour, PaletteEntry, Theme } from '../../constants/constants';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        cityItem: {\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n        },\n        menuItemSpan: {\n            padding: '0 .3rem',\n        },\n        button: {\n            borderRadius: '50%',\n            height: 24,\n            width: 24,\n            minWidth: 0,\n            marginRight: 8,\n            // border: 'solid',\n            padding: 0,\n        },\n        inputColour: {\n            position: 'absolute',\n            width: 0,\n            height: 0,\n            left: 27,\n            top: 32,\n        },\n        buttonContainer: {\n            display: 'flex',\n            flexShrink: 1,\n        },\n    })\n);\n\nconst useLineList = (theme: Theme) => {\n    const [list, setList] = React.useState([] as PaletteEntry[]);\n\n    const listPromise = theme[0]\n        ? import(/* webpackChunkName: \"colours\" */ `../../constants/colours/${theme[0]}`).then(\n              module => module.default as PaletteEntry[]\n          )\n        : Promise.resolve([] as PaletteEntry[]);\n\n    useEffect(\n        () => {\n            if (typeof theme[0] === 'undefined') {\n                return;\n            }\n            (async () => {\n                const data = await listPromise;\n                setList(\n                    theme[0] === CityCode.Other\n                        ? [{ ...data[0], colour: theme[2], fg: theme[3] || MonoColour.white }]\n                        : data\n                );\n            })();\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [theme.toString()]\n    );\n\n    return list;\n};\n\ninterface ColourDialogProps {\n    theme: Theme;\n    onUpdate: (key: string, value: any) => void;\n}\n\nexport const PalettePanel = (props: ColourDialogProps) => {\n    const { t, i18n } = useTranslation();\n    const classes = useStyles();\n\n    const cityChange = (event: React.ChangeEvent<HTMLInputElement>) =>\n        props.onUpdate('theme', [event.target.value, ...props.theme.slice(1)]);\n\n    // Hook for fetching line list of current city\n    const lineList = useLineList(props.theme);\n\n    // Hook for updating props.theme when lineList changed\n    useEffect(\n        () => {\n            if (lineList.length === 0) return; // initialising, ignore\n            if (lineList.filter(l => l.id === props.theme[1]).length) return; // current city, ignore\n            let { id, colour, fg } = lineList[0];\n            let newTheme = [props.theme[0], id, colour, fg || MonoColour.white];\n            props.onUpdate('theme', newTheme);\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [lineList]\n    );\n\n    const lineChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let line = event.target.value;\n        let { colour, fg } = lineList.filter(l => l.id === line)[0];\n        let newTheme = [props.theme[0], line, colour, fg || MonoColour.white];\n        props.onUpdate('theme', newTheme);\n    };\n\n    return (\n        <List component=\"div\" disablePadding>\n            <CitySelectItem value={props.theme[0]} onChange={cityChange} />\n            <Divider variant=\"middle\" />\n            <ListItem>\n                <ListItemText primary={t('colour.line')} />\n                <TextField\n                    select\n                    style={{ width: 166 }}\n                    onChange={lineChange}\n                    value={props.theme[1]}\n                    disabled={props.theme[0] === 'other'}\n                >\n                    {lineList.map(l => (\n                        <MenuItem key={l.id} value={l.id}>\n                            <span\n                                className={classes.menuItemSpan}\n                                style={{\n                                    backgroundColor: l.colour,\n                                    color: l.fg || MonoColour.white,\n                                }}\n                            >\n                                {getTransText2(l.name, i18n.languages as LanguageCode[])}\n                            </span>\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </ListItem>\n        </List>\n    );\n};\n\nexport const CustomPanel = (props: ColourDialogProps) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const [hexTemp, setHexTemp] = useState(props.theme[2]);\n\n    useEffect(\n        () => setHexTemp(props.theme[2]),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.theme[2]]\n    );\n\n    const colourChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let rgb = event.target.value;\n        // setHexTemp(rgb);\n        props.onUpdate('theme', [CityCode.Other, 'other', rgb, props.theme[3]]);\n    };\n\n    const hexChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let hex = event.target.value;\n        if (hex.match(/^#[0-9a-fA-F]{0,6}$/) === null) return;\n        setHexTemp(hex as ColourHex);\n\n        if (props.theme[0] !== 'other') {\n            if (hex.match(/^#[0-9a-fA-f]{6}$/) !== null) {\n                // if hex valid, modify theme city and props.hex\n                let newTheme = [CityCode.Other, 'other', hex, props.theme[3]];\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (along with selection)\n                // then line will be updated by hook\n            } else {\n                // if hex not valid, modify theme city only\n                let newTheme = [CityCode.Other, 'other', ...props.theme.slice(2)];\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (along with selection)\n                // then line will be updated by hook\n            }\n        } else {\n            if (hex.match(/^#[0-9a-fA-F]{6}$/) !== null) {\n                // if hex valid, modify props.hex\n                let newTheme = props.theme.map((val, idx) => (idx === 2 ? hex : val));\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (actually only hex is changed)\n            } else {\n                // if hex not valid, do nothing\n            }\n        }\n    };\n\n    const fgChange = (event: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n        let newTheme = [CityCode.Other, 'other', props.theme[2], event.target.value];\n        props.onUpdate('theme', newTheme);\n    };\n\n    return (\n        <List component=\"div\" disablePadding>\n            <ListItem>\n                <ListItemText primary={t('colour.colour')} />\n                <div className={classes.buttonContainer}>\n                    <input\n                        type=\"color\"\n                        id=\"input-color\"\n                        value={props.theme[2]}\n                        onChange={colourChange}\n                        className={classes.inputColour}\n                        style={{ opacity: 0 }}\n                    />\n                    <label htmlFor=\"input-color\">\n                        <Tooltip title={t('colour.tooltip')} aria-label=\"colour picker\">\n                            <Button\n                                className={classes.button}\n                                style={{\n                                    backgroundColor: props.theme[2],\n                                    borderColor: props.theme[3] || MonoColour.white,\n                                }}\n                                variant=\"contained\"\n                                component=\"span\"\n                            >\n                                {' '}\n                            </Button>\n                        </Tooltip>\n                    </label>\n                </div>\n                <TextField\n                    error={!hexTemp?.match(/^#[0-9a-fA-F]{6}$/g)}\n                    style={{ width: 85 }}\n                    onChange={hexChange}\n                    value={hexTemp?.toUpperCase()}\n                />\n            </ListItem>\n            <Divider variant=\"middle\" />\n            <ListItem>\n                <ListItemText primary={t('colour.fg')} />\n                <Select\n                    native\n                    style={{ width: 85 }}\n                    label={t('colour.fg')}\n                    onChange={fgChange}\n                    value={props.theme[3] || MonoColour.white}\n                >\n                    <option value=\"#fff\">{t('colour.fgWhite')}</option>\n                    <option value=\"#000\">{t('colour.fgBlack')}</option>\n                </Select>\n            </ListItem>\n        </List>\n    );\n};\n\nconst CitySelectItem = (props: { value: string; onChange: (event: React.ChangeEvent<HTMLInputElement>) => void }) => {\n    const { t, i18n } = useTranslation();\n    const classes = useStyles();\n\n    const items = useMemo(\n        () =>\n            cityList.map(c => (\n                <MenuItem key={c.id} value={c.id}>\n                    <span className={classes.cityItem}>\n                        <CountryFlag code={c.country} />\n                        <span>{getTransText2(c.name, i18n.languages as LanguageCode[])}</span>\n                    </span>\n                </MenuItem>\n            )),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n    return (\n        <ListItem>\n            <ListItemText primary={t('colour.city')} />\n            <TextField select style={{ width: 166 }} value={props.value} onChange={props.onChange}>\n                {items}\n            </TextField>\n        </ListItem>\n    );\n};\n\nconst useEmojiStyles = makeStyles(() =>\n    createStyles({\n        img: {\n            height: 20,\n            marginRight: '0.2rem',\n        },\n    })\n);\n\n/**\n * Convert ISO 3166 alpha-2 country code (followed by BS 6879 UK subdivision code, if applicable) to flag Emoji. For Windows platform, an `img` element with image source from OpenMoji is returned.\n */\nfunction CountryFlag(props: { code: string }) {\n    const { i18n } = useTranslation();\n    const classes = useEmojiStyles();\n\n    let codePoints = [] as string[];\n\n    if (props.code.length === 2) {\n        codePoints = props.code\n            .toUpperCase()\n            .split('')\n            .map(char => ((char.codePointAt(0) || 0) + 127397).toString(16).toUpperCase());\n    } else {\n        codePoints = ['1F3F4'].concat(\n            props.code\n                .toUpperCase()\n                .split('')\n                .map(char => ((char.codePointAt(0) || 0) + 917536).toString(16).toUpperCase()),\n            'E007F'\n        );\n    }\n\n    // special case for simplified Chinese\n    if (\n        [LanguageCode.ChineseCN, LanguageCode.ChineseSimp].includes(i18n.language as LanguageCode) &&\n        props.code === 'TW'\n    )\n        codePoints = ['1F3F4'];\n\n    return navigator.platform.indexOf('Win32') !== -1 || navigator.platform.indexOf('Win64') !== -1 ? (\n        <img\n            src={process.env.PUBLIC_URL + `/images/flags/${codePoints.join('-')}.svg`}\n            className={classes.img}\n            alt={`Flag of ${props.code}`}\n        />\n    ) : (\n        // <img src={process.env.PUBLIC_URL + `/images/flags/${codePoints.join('-')}.svg`} className={classes.img} />\n        <span>{String.fromCodePoint(...codePoints.map(cp => parseInt(cp, 16)))}</span>\n    );\n}\n","import React, { useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n    Button,\n    Chip,\n    createStyles,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Divider,\n    Icon,\n    InputBase,\n    List,\n    ListItem,\n    ListItemText,\n    makeStyles,\n    Paper,\n    Tab,\n    Tabs,\n} from '@material-ui/core';\nimport { CustomPanel, PalettePanel } from './theme-items';\nimport { InterchangeInfo, MonoColour, Name, Theme } from '../../constants/constants';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../redux';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        contentWrapper: {\n            display: 'flex',\n            overflow: 'hidden',\n            paddingTop: theme.spacing(1),\n            paddingBottom: theme.spacing(1),\n            paddingLeft: theme.spacing(3),\n            paddingRight: theme.spacing(3),\n            [theme.breakpoints.down('xs')]: {\n                flexDirection: 'column',\n            },\n        },\n        contentLeft: {\n            maxWidth: 280,\n        },\n        contentControl: {\n            flexGrow: 0,\n            flexShrink: 0,\n            display: 'flex',\n            flexDirection: 'column',\n            width: 270,\n        },\n\n        paperRoot: {\n            maxWidth: 250,\n        },\n        listItemPaper: {\n            justifyContent: 'center',\n        },\n        iconRoot: {\n            position: 'absolute',\n            color: theme.palette.action.active,\n        },\n        inputBaseRoot: {\n            display: 'block',\n        },\n        inputBaseInputZH: {\n            textAlign: 'center',\n            fontSize: 36,\n            padding: 0,\n            paddingTop: 6,\n            height: 45,\n        },\n        inputBaseInputEN: {\n            textAlign: 'center',\n            fontSize: 18,\n            padding: 0,\n            paddingBottom: 6,\n            height: 'auto',\n        },\n\n        chipWrapper: {\n            overflowX: 'auto',\n            display: 'flex',\n        },\n        chipRoot: {\n            borderRadius: 4.5,\n            height: 32,\n            lineHeight: '1rem',\n            margin: 2,\n        },\n        chipLabel: {\n            padding: '0 6px',\n            '& > span': {\n                display: 'block',\n                textAlign: 'center',\n            },\n            '& > span:first-child': {\n                fontSize: '1rem',\n            },\n            '& > span:last-child': {\n                lineHeight: '0.8rem',\n            },\n        },\n    })\n);\n\ninterface Props {\n    open: boolean;\n    theme: Theme;\n    lineName: Name;\n    onUpdate: (key: string, value: any) => void;\n    onClose: () => void;\n}\n\nconst Dialog2 = (props: Props) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    return (\n        <Dialog open={props.open} onClose={props.onClose}>\n            <DialogTitle>{t('colour.title')}</DialogTitle>\n            <DialogContent className={classes.contentWrapper}>\n                <List component=\"div\" disablePadding className={classes.contentLeft}>\n                    <LineNameInput theme={props.theme} lineName={props.lineName} onUpdate={props.onUpdate} />\n                    <Divider />\n                    <RecentChipSet onUpdate={props.onUpdate} />\n                </List>\n                <div className={classes.contentControl}>\n                    <ColourControl theme={props.theme} onUpdate={props.onUpdate} />\n                </div>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose} color=\"primary\">\n                    {t('dialog.done')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default Dialog2;\n\nconst LineNameInput = (props: { lineName: Name; theme: Theme; onUpdate: Props['onUpdate'] }) => {\n    const classes = useStyles();\n\n    const nameChange = (value: string, index: number) => {\n        let newName = props.lineName.map((val, idx) => (idx === index ? value : val));\n        props.onUpdate('name', newName);\n    };\n\n    return (\n        <ListItem style={{ justifyContent: 'center' }}>\n            <Paper className={classes.paperRoot} style={{ backgroundColor: props.theme[2] }}>\n                <Icon className={classes.iconRoot}>edit</Icon>\n                <InputBase\n                    value={props.lineName[0]}\n                    classes={{\n                        root: classes.inputBaseRoot,\n                        input: classes.inputBaseInputZH,\n                    }}\n                    style={{ color: props.theme[3] || MonoColour.white }}\n                    onChange={e => nameChange(e.target.value, 0)}\n                    autoFocus\n                />\n                <InputBase\n                    value={props.lineName[1]}\n                    classes={{\n                        root: classes.inputBaseRoot,\n                        input: classes.inputBaseInputEN,\n                    }}\n                    style={{ color: props.theme[3] || MonoColour.white }}\n                    onChange={e => nameChange(e.target.value, 1)}\n                />\n            </Paper>\n        </ListItem>\n    );\n};\n\nconst RecentChipSet = (props: { onUpdate: Props['onUpdate'] }) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const theme = useSelector((store: RootState) => store.param.theme);\n    const lineName = useSelector((store: RootState) => store.param.line_name);\n    const stationList = useSelector((store: RootState) => store.param.stn_list);\n\n    const allInfos = useMemo(\n        () =>\n            new Set(\n                Object.values(stationList)\n                    .reduce(\n                        (acc, { transfer }) => {\n                            const { info } = transfer;\n                            return acc.concat(...info);\n                        },\n                        [[...theme, ...lineName]]\n                    )\n                    .map(val => JSON.stringify(val))\n                    .reverse()\n            ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n\n    const chips = useMemo(\n        () =>\n            [...allInfos].map((x, i) => {\n                const info: InterchangeInfo = JSON.parse(x);\n                const label = info.slice(4).map((txt, i) => (\n                    <span key={i} style={{ color: info[3] }}>\n                        {txt}\n                    </span>\n                ));\n\n                return (\n                    <Chip\n                        key={i}\n                        onClick={() => {\n                            props.onUpdate('theme', info.slice(0, 4));\n                            props.onUpdate('name', info.slice(4));\n                        }}\n                        style={{ backgroundColor: info[2] }}\n                        className={classes.chipRoot}\n                        classes={{ label: classes.chipLabel }}\n                        {...{ label }}\n                    />\n                );\n            }),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n\n    return (\n        <ListItem>\n            <ListItemText\n                primary={t('colour.recent')}\n                secondary={chips}\n                secondaryTypographyProps={{ component: 'div' }}\n                classes={{ secondary: classes.chipWrapper }}\n            />\n        </ListItem>\n    );\n};\n\nconst ColourControl = (props: { theme: Theme; onUpdate: Props['onUpdate'] }) => {\n    const { t } = useTranslation();\n    const [tabIndex, setTabIndex] = useState(props.theme[0] === 'other' ? 1 : 0);\n\n    const tabNav = (\n        <Tabs\n            value={tabIndex}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            onChange={(_, val) => setTabIndex(val)}\n            variant=\"fullWidth\"\n            scrollButtons=\"off\"\n        >\n            <Tab label={t('colour.palette')} style={{ minWidth: 'unset' }} />\n            <Tab label={t('colour.custom')} style={{ minWidth: 'unset' }} />\n        </Tabs>\n    );\n\n    const panel = (idx => {\n        switch (idx) {\n            case 0:\n                return <PalettePanel {...props} />;\n            case 1:\n                return <CustomPanel {...props} />;\n            default:\n                return <></>;\n        }\n    })(tabIndex);\n\n    return (\n        <>\n            {tabNav}\n            {panel}\n        </>\n    );\n};\n","import ColourDialog from './dialog';\n\nexport default ColourDialog;\n"],"sourceRoot":""}