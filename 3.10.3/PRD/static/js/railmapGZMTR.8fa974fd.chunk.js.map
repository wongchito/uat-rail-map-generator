{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","methods.ts","svgs/railmap/methods/share.ts","svgs/strip/strip-gzmtr.tsx","svgs/gzmtr/station-number.tsx","svgs/gzmtr/line-icon/line-icon-type2.tsx","svgs/gzmtr/line-icon/line-icon.tsx","svgs/railmap/main/station/station-gzmtr.tsx","svgs/railmap/main/main-gzmtr.tsx","svgs/railmap/railmap-gzmtr.tsx"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","getYShareMTR","stnId","stnList","includes","parents","children","stnPred","adjacencyList","leftW","rightW","reduce","acc","cur","a","c","criticalPathMethod","from","to","adjMat","len","nodes","allLengths","criticalPaths","forEach","child","cp","push","unshift","maxLength","Math","max","getXShareMTR","branches","criticalPath","branchOfStn","filter","branch","partSource","partSink","leftOpenJaw","lens","slice","getStnState","currentId","routes","direction","console","log","Set","concat","ShortDirection","right","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","yShares","xShares","namePoss","leftWideFactor","rightWideFactor","pathWeight","Infinity","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","res","getYShare","stnIds","lineXs","realXs","realYs","e","prevId","prevY","prevX","path","stnDX","stnExtraH","stnSpareH","warn","x","y","join","replace","stations","stnStates","xs","ys","linePaths","main","pass","lineMainStns","linePassStns","_linePath","drawLine","StripGZMTR","props","stripHeight","variant","indicatorLight","React","useMemo","cy","r","fill","rx","ry","height","width","transform","id","style","isShowLight","isShowPSD","PSD","memo","isInStrip","psdDy","textAnchor","MonoColour","black","className","fontSize","dy","prevProps","nextProps","StationNumber","lineNum","stnNum","others","lineNumEl","useRef","stnNumEl","useState","lineNumBBox","setLineNumBBox","stnNumBBox","setStnNumBBox","useEffect","current","getBBox","lineNumScale","stnNumScale","ref","lineName","commonPart","wrapperEl","bBox","setBBox","toString","scale","MAX_WIDTH","dx","trim","foregroundColour","backgroundColour","stationState","getType","type","nameZhEl","nameEnEl","nameZhBBox","setNameZhBBox","nameEnBBox","setNameEnBBox","nameZhScale","nameEnScale","white","xlinkHref","getYByType","name","matchResultForType1","match","matchResultForType2","map","text","field","StationGZMTR","stnState","stnY","theme","useAppSelector","store","param","line_name","lineNumber","line_num","stnInfo","stn_list","isNameShift","tickRotation","left","nameENLns","split","nameDX","cos","intInfos","transfer","info","stroke","num","secondaryName","isExpress","services","Services","express","StationNameGElement","nameDY","stnNameEl","secNameEl","secNameBBox","setSecNameBBox","prevBBox","StationName","StationSecondaryName","secName","ExpressTag","forwardRef","txt","IntGroup","strokeWidth","IntTicks","IntBoxs","other","wideFactor","MainGZMTR","helper","deps","depsStr","svgWidths","svgWidth","yPercentage","y_pc","paddingPercentage","padding","branch_spacing","currentStationIndex","current_stn_idx","stationList","rightOpenJaw","getXShare","JSON","stringify","realCP","CanvasType","RailMap","paths","stns","Line","strokeDasharray","d","StationGroup","DefsGZMTR","RailMapGZMTR","psdNumber","psd_num","infoPanelType","info_panel_type","notes","notesGZMTR","curStnInfo","PanelTypeGZMTR","gz2otis","TerminusFlag","note","NoteBox","x2","strokeLinecap","DirectionIndicator","directionIndicatorX","direction_gz_x","directionIndicatorY","direction_gz_y","validDests","textGroupProps","destIds","DirectionIndicatorTextGroup","DirectionIndicatorTextGroup2","charCounts","minCharCounts","min","charSpacing","abs","Fragment","letterSpacing","noteTextEl","textLength","navigator","userAgent","lengthAdjust"],"mappings":"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","file":"static/js/railmapGZMTR.8fa974fd.chunk.js","sourcesContent":["import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { StationDict } from './constants/constants';\n\n/**\n * Vertical position (in shares) of station icon if using MTR style (for consistency of method `RMGLine.newStnPossibleLoc()`).\n */\nexport const getYShareMTR = (stnId: string, stnList: StationDict): -1 | 0 | 1 => {\n    if (\n        ['linestart', 'lineend'].includes(stnId) ||\n        stnList[stnId].parents.length > 1 ||\n        stnList[stnId].children.length > 1\n    ) {\n        return 0;\n    }\n    var stnPred = stnList[stnId].parents[0];\n    if (stnPred) {\n        // parent exist\n        if (stnList[stnPred].children.length === 1) {\n            // no sibling, then y same as parent\n            return getYShareMTR(stnPred, stnList);\n        } else {\n            // sibling exists, then y depends on its idx of being children\n            return stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n        }\n    } else {\n        // no parent, must be linestart\n        return 0;\n    }\n};\n","import * as Global from '../../../methods';\nimport { RMGParam, ShortDirection, StationDict, StationInfo } from '../../../constants/constants';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (\n                          direction === ShortDirection.right\n                              ? _isSuccessor(currentId, cur, routes)\n                              : _isPredecessor(currentId, cur, routes)\n                      )\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as StationDict;\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number\n    ) {\n        var [prevId, prevY, prevX] = [] as unknown as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 2;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + e}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - e}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number = 9.68\n    ) {\n        let linePaths = { main: [] as string[], pass: [] as string[] };\n        branches.forEach((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branches: string[][], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    let linePaths = { main: [] as string[][], pass: [] as string[][] };\n    branches.forEach(branch => {\n        branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n        var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n        var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n        if (lineMainStns.length === 1) {\n            linePassStns = branch;\n        }\n\n        if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n            // if two set disjoint\n            if (linePassStns[0] === branch[0]) {\n                // -1 -1 1 1\n                linePassStns.push(lineMainStns[0]);\n            } else if (\n                lineMainStns[0] === branch[0] &&\n                lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                linePassStns.length\n            ) {\n                linePassStns = branch;\n                lineMainStns = [];\n            } else {\n                // 1 1 -1 -1\n                linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n            }\n        }\n\n        linePaths.main.push(lineMainStns);\n        linePaths.pass.push(linePassStns);\n    });\n\n    return linePaths;\n};\n","import React from 'react';\nimport { MonoColour, PanelTypeGZMTR, PanelTypeShmetro } from '../../constants/constants';\n\ninterface Props {\n    variant: PanelTypeGZMTR | PanelTypeShmetro;\n    isShowLight: boolean;\n    isShowPSD: false | string;\n}\n\nconst StripGZMTR = (props: Props) => {\n    const stripHeight = (variant => {\n        switch (variant) {\n            case 'gz28':\n            case 'gz2otis':\n            case 'gz6':\n            case 'gzgf':\n                return 60;\n            case 'gz1':\n            case 'gz3':\n                return 40;\n            case 'gz4':\n            case 'gz5':\n            case 'gz1421':\n                return 20;\n            default:\n                return 0;\n        }\n    })(props.variant);\n\n    const indicatorLight = React.useMemo(() => {\n        switch (props.variant) {\n            case 'gz1':\n                return <circle cy={-58} r={16} fill=\"red\" />;\n            case 'gz28':\n            case 'gz2otis':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz3':\n                return <rect x={-15} y={-55} height={30} width={30} fill=\"red\" />;\n            case 'gz6':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"white\" />;\n            case 'gz1421':\n                return <ellipse cy={-38} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz5':\n                return <rect x={-30} y={-70} height={30} width={60} fill=\"orange\" />;\n            case 'gz4':\n                return <rect x={-50} y={-50} height={25} width={100} fill=\"whitesmoke\" />;\n            case 'gzgf':\n                return <rect x={-30} y={-58} height={30} width={60} fill=\"orange\" />;\n            default:\n                return <></>;\n        }\n    }, [props.variant]);\n\n    const stripDy = -20;\n\n    return (\n        <g transform={`translate(0,${props.variant === 'gz4' ? stripDy : 0})`}>\n            <rect\n                id=\"strip_gz\"\n                style={{\n                    ['--height' as any]: `${stripHeight}px`,\n                }}\n            />\n            <g\n                style={{\n                    transform: 'translate(calc(var(--rmg-svg-width) / 2),var(--rmg-svg-height))',\n                }}\n            >\n                {props.isShowLight && indicatorLight}\n            </g>\n            {props.isShowPSD !== false && <PSD {...props} />}\n        </g>\n    );\n};\n\nexport default StripGZMTR;\n\nconst PSD = React.memo(\n    (props: Props) => {\n        /**\n         * Flag of whether PSD number is stick within the strip area. If `true`, should fill with white, otherwise, fill with theme colour.\n         */\n        const isInStrip = ['gz28', 'gz2otis', 'gz6', 'gzgf'].includes(props.variant);\n        const psdDy = ((variant: PanelTypeGZMTR | PanelTypeShmetro) => {\n            switch (variant) {\n                case 'gz1':\n                case 'gz3':\n                    return '82px';\n                case 'gz4':\n                    return '65px';\n                case 'gz5':\n                    return '80px';\n                case 'gz1421':\n                    return '62px';\n                default:\n                    return '58px';\n            }\n        })(props.variant);\n\n        return (\n            <g\n                textAnchor=\"middle\"\n                fill={isInStrip ? MonoColour.black : 'var(--rmg-theme-fg)'}\n                style={{\n                    ['--psd-dy' as any]: psdDy,\n                    transform: 'translate(var(--translate-x), var(--translate-y))',\n                    ['--translate-x' as any]: 'calc(var(--rmg-svg-width) / 2 + 80px)',\n                    ['--translate-y' as any]: 'calc(var(--rmg-svg-height) - var(--psd-dy, 58px))',\n                }}\n            >\n                <rect height={40} width={40} rx={4} x={-20} fill={isInStrip ? '#fff' : 'var(--rmg-theme-colour)'} />\n                <text className=\"rmg-name__en\" fontSize={20} dy={12}>\n                    {props.isShowPSD}\n                </text>\n                <text className=\"rmg-name__zh\" fontSize={12} dy={26}>\n                    屏蔽门\n                </text>\n                <text className=\"rmg-name__en\" fontSize={6.5} dy={36}>\n                    Screen Door\n                </text>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.variant === nextProps.variant && prevProps.isShowPSD === nextProps.isShowPSD\n);\n","import React, { SVGProps, useEffect, useRef, useState } from 'react';\n\nconst TEXT_MAX_WIDTH = 15;\n\ninterface StationNumberProps extends SVGProps<SVGGElement> {\n    lineNum: string;\n    stnNum: string;\n}\n\nexport default function StationNumber(props: StationNumberProps) {\n    const { lineNum, stnNum, ...others } = props;\n\n    const lineNumEl = useRef<SVGTextElement | null>(null);\n    const stnNumEl = useRef<SVGTextElement | null>(null);\n\n    const [lineNumBBox, setLineNumBBox] = useState({ width: 0 } as DOMRect);\n    const [stnNumBBox, setStnNumBBox] = useState({ width: 0 } as DOMRect);\n\n    useEffect(() => {\n        setLineNumBBox(lineNumEl.current!.getBBox());\n        setStnNumBBox(stnNumEl.current!.getBBox());\n    }, [lineNum, stnNum]);\n\n    const lineNumScale = TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, lineNumBBox.width);\n    const stnNumScale =\n        lineNum.length === 2 && stnNum.length === 2\n            ? lineNumScale\n            : TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, stnNumBBox.width);\n\n    return (\n        <g textAnchor=\"middle\" fontSize={13.5} {...others}>\n            <g transform={`translate(-9.25,0)scale(${lineNumScale})`}>\n                <text ref={lineNumEl} className=\"rmg-name__zh\">\n                    {lineNum}\n                </text>\n            </g>\n            <g transform={`translate(9.25,0)scale(${stnNumScale})`}>\n                <text ref={stnNumEl} className=\"rmg-name__zh\">\n                    {stnNum}\n                </text>\n            </g>\n        </g>\n    );\n}\n","import React, { memo, useEffect, useRef, useState } from 'react';\nimport { Name } from '../../../constants/constants';\nimport { MAX_WIDTH } from './line-icon';\n\ninterface LineIconType2Props {\n    lineName: Name;\n    commonPart: string;\n}\n\nexport default memo(\n    function LineIconType2(props: LineIconType2Props) {\n        const { lineName, commonPart } = props;\n\n        const wrapperEl = useRef<SVGGElement | null>(null);\n        const [bBox, setBBox] = useState({ x: 0, height: 0, width: 0 } as DOMRect);\n        useEffect(() => {\n            wrapperEl.current && setBBox(wrapperEl.current.getBBox());\n        }, [lineName.toString()]);\n\n        const scale = MAX_WIDTH / Math.max(MAX_WIDTH, bBox.width);\n        const dx = (-bBox.x - bBox.width / 2) * scale;\n        const dy = (bBox.height * (1 - scale) * 1.2) / 2;\n\n        return (\n            <g ref={wrapperEl} transform={`translate(${dx},${dy})scale(${scale})`}>\n                <text className=\"rmg-name__zh\" fontSize={14} y={12} textAnchor=\"end\">\n                    {commonPart}\n                    <tspan className=\"rmg-name__zh\" fontSize={8} x={0} dy={-2} textAnchor=\"start\">\n                        {lineName[0].slice(commonPart.length).trim()}\n                    </tspan>\n                    <tspan className=\"rmg-name__en\" fontSize={4} x={0} dy={6} textAnchor=\"start\">\n                        {lineName[1].slice(commonPart.length).trim()}\n                    </tspan>\n                </text>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.lineName.toString() === nextProps.lineName.toString()\n);\n","import React, { memo, useEffect, useRef, useState } from 'react';\nimport { ColourHex, MonoColour, Name } from '../../../constants/constants';\nimport LineIconType2 from './line-icon-type2';\n\nexport const MAX_WIDTH = 42;\n\ninterface LineIconProps {\n    lineName: Name;\n    foregroundColour: MonoColour;\n    backgroundColour: ColourHex;\n    stationState: -1 | 0 | 1;\n}\n\nexport default memo(\n    function LineIcon(props: LineIconProps) {\n        const { lineName, foregroundColour, backgroundColour, stationState } = props;\n\n        const [type, commonPart] = getType(lineName);\n\n        const nameZhEl = useRef<SVGTextElement | null>(null);\n        const nameEnEl = useRef<SVGTextElement | null>(null);\n\n        const [nameZhBBox, setNameZhBBox] = useState({ width: 0 } as DOMRect);\n        const [nameEnBBox, setNameEnBBox] = useState({ width: 0 } as DOMRect);\n\n        useEffect(() => {\n            nameZhEl.current && setNameZhBBox(nameZhEl.current.getBBox());\n            nameEnEl.current && setNameEnBBox(nameEnEl.current.getBBox());\n        }, [lineName.toString()]);\n\n        const nameZhScale = MAX_WIDTH / Math.max(MAX_WIDTH, nameZhBBox.width);\n        const nameEnScale = MAX_WIDTH / Math.max(MAX_WIDTH, nameEnBBox.width);\n\n        return (\n            <g textAnchor=\"middle\" fill={stationState === -1 ? MonoColour.white : foregroundColour}>\n                <use xlinkHref=\"#intbox\" fill={stationState === -1 ? '#aaa' : backgroundColour} />\n                {type === 2 ? (\n                    <LineIconType2 lineName={lineName} commonPart={commonPart} />\n                ) : (\n                    <>\n                        <text\n                            ref={nameZhEl}\n                            y={getYByType(type, 'zh', nameZhScale)}\n                            className=\"rmg-name__zh\"\n                            fontSize={12}\n                            transform={`scale(${nameZhScale})`}\n                        >\n                            {type === 1 ? (\n                                <>\n                                    <tspan fontSize={16} dy={0.7}>\n                                        {commonPart}\n                                    </tspan>\n                                    <tspan dy={-0.7}>{lineName[0].slice(commonPart.length)}</tspan>\n                                </>\n                            ) : (\n                                lineName[0]\n                            )}\n                        </text>\n                        <text\n                            ref={nameEnEl}\n                            y={getYByType(type, 'en', nameEnScale)}\n                            className=\"rmg-name__en\"\n                            fontSize={8}\n                            transform={`scale(${nameEnScale})`}\n                        >\n                            {lineName[1]}\n                        </text>\n                    </>\n                )}\n            </g>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.lineName.toString() === nextProps.lineName.toString() &&\n        prevProps.foregroundColour === nextProps.foregroundColour &&\n        prevProps.backgroundColour === nextProps.backgroundColour &&\n        prevProps.stationState === nextProps.stationState\n);\n\n/**\n * type 1: 2号线\n * type 2: APM线\n * type 3: 佛山2号线\n */\nconst getType = (name: Name): [1 | 2 | 3, string] => {\n    const matchResultForType1 = name[0].match(/^(\\d+)\\D+$/);\n    if (matchResultForType1) return [1, matchResultForType1[1]];\n\n    const matchResultForType2 = name.map(text => text.match(/^([\\w\\d]+).+$/));\n    if (matchResultForType2[0] && matchResultForType2[1] && matchResultForType2[0][1] === matchResultForType2[1][1]) {\n        return [2, matchResultForType2[0][1]];\n    }\n\n    return [3, ''];\n};\n\nconst getYByType = (type: ReturnType<typeof getType>[0], field: 'zh' | 'en', scale: number) => {\n    switch (type) {\n        case 1:\n            return (field === 'zh' ? 7.3 : 19.5) * (1 + 1 - scale);\n        case 2:\n            return 0;\n        case 3:\n            return (field === 'zh' ? 8 : 19.5) * (1 + 1 - scale);\n    }\n};\n","import React, { forwardRef, useEffect, useMemo, useRef, useState } from 'react';\nimport StationNumber from '../../../gzmtr/station-number';\nimport { InterchangeInfo, Name, Services } from '../../../../constants/constants';\nimport { useAppSelector } from '../../../../redux';\nimport LineIcon from '../../../gzmtr/line-icon/line-icon';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n    stnY: number;\n}\n\nconst StationGZMTR = (props: Props) => {\n    const { stnId, stnState, stnY } = props;\n\n    const theme = useAppSelector(store => store.param.theme);\n    const lineName = useAppSelector(store => store.param.line_name);\n    const lineNumber = useAppSelector(store => store.param.line_num);\n    const stnInfo = useAppSelector(store => store.param.stn_list[stnId]);\n\n    const isNameShift = stnInfo.parents.length === 2 || stnInfo.children.length === 2;\n    const tickRotation =\n        stnY > 0\n            ? 180\n            : stnInfo.parents.indexOf(stnInfo.branch.left[1] || '') === 1 ||\n              stnInfo.children.indexOf(stnInfo.branch.right[1] || '') === 1\n            ? 180\n            : 0;\n    const nameENLns = stnInfo.name[1].split('\\\\').length;\n    const nameDX = isNameShift\n        ? tickRotation === 180\n            ? 16 + (nameENLns - 1) * 12 * Math.cos(-45)\n            : -9\n        : tickRotation === 180\n        ? -6\n        : (25 + (nameENLns - 1) * 15) * Math.cos(-45);\n\n    return (\n        <>\n            <IntGroup\n                intInfos={\n                    isNameShift\n                        ? (\n                              [\n                                  [theme[0], theme[1], 'var(--rmg-theme-colour)', 'var(--rmg-theme-fg)', ...lineName],\n                              ] as any[] as InterchangeInfo[]\n                          ).concat(stnInfo.transfer.info[0])\n                        : stnInfo.transfer.info[0]\n                }\n                stnState={stnState}\n                tickRotation={tickRotation}\n            />\n            <g>\n                <use xlinkHref=\"#stn\" stroke={stnState === -1 ? '#aaa' : 'var(--rmg-theme-colour)'} />\n                <StationNumber\n                    className={`Name ${stnState === -1 ? 'Pass' : 'Future'}`}\n                    lineNum={lineNumber}\n                    stnNum={stnInfo.num}\n                />\n            </g>\n            <g transform={`translate(${-nameDX},0)`}>\n                <StationNameGElement\n                    name={stnInfo.name}\n                    secondaryName={stnInfo.secondaryName}\n                    stnState={stnState}\n                    tickRotation={tickRotation}\n                    isExpress={stnInfo.services.includes(Services.express)}\n                />\n            </g>\n        </>\n    );\n};\n\nexport default StationGZMTR;\n\ninterface StationNameGElementProps {\n    name: Name;\n    secondaryName: false | Name;\n    stnState: -1 | 0 | 1;\n    tickRotation: 0 | 180;\n    isExpress: boolean;\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const nameDY = props.tickRotation === 180 ? 17.5 : -20 - props.name[1].split('\\\\').length * 14 * Math.cos(-45);\n\n    const stnNameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ width: 0 } as DOMRect);\n    useEffect(\n        () => setBBox(stnNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.name.toString()]\n    );\n\n    const secNameEl = useRef<SVGGElement | null>(null);\n    const [secNameBBox, setSecNameBBox] = useState({ x: 0, width: -20 } as SVGRect);\n    useEffect(\n        () => {\n            if (secNameEl.current) {\n                setSecNameBBox(secNameEl.current.getBBox());\n            } else {\n                setSecNameBBox(prevBBox => {\n                    const { x } = prevBBox;\n                    return { x, width: -20 } as SVGRect;\n                });\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.secondaryName.toString()]\n    );\n\n    return (\n        <g\n            textAnchor={props.tickRotation === 180 ? 'end' : 'start'}\n            className={`Name ${props.stnState === -1 ? 'Pass' : props.stnState === 0 ? 'CurrentGZ' : 'Future'}`}\n            transform={`translate(0,${nameDY})rotate(-45)`}\n        >\n            <StationName ref={stnNameEl} name={props.name} />\n            {props.secondaryName && (\n                <g\n                    transform={`translate(${\n                        (bBox.width + secNameBBox.width / 2 + 10) * (props.tickRotation === 180 ? -1 : 1)\n                    },${2 + 5 * (props.name[1].split('\\\\').length - 1)})`}\n                    className={`Name ${props.stnState === -1 ? 'Pass' : 'Future'}`}\n                >\n                    <g transform=\"translate(0,3)\" fontSize={18}>\n                        <text textAnchor=\"end\" x={secNameBBox.x - 3} className=\"rmg-name__zh\">\n                            {'('}\n                        </text>\n                        <text textAnchor=\"start\" x={secNameBBox.width + secNameBBox.x + 3} className=\"rmg-name__zh\">\n                            {')'}\n                        </text>\n                    </g>\n                    <StationSecondaryName ref={secNameEl} secName={props.secondaryName} />\n                </g>\n            )}\n            {props.isExpress && (\n                <ExpressTag\n                    fill={props.stnState === -1 ? '#aaa' : 'var(--rmg-theme-colour)'}\n                    transform={`translate(${\n                        (bBox.width + secNameBBox.width + 20 + 35) * (props.tickRotation === 180 ? -1 : 1)\n                    },${2 + 5 * (props.name[1].split('\\\\').length - 1)})`}\n                />\n            )}\n        </g>\n    );\n};\n\nconst StationName = forwardRef((props: { name: Name }, ref: React.Ref<SVGGElement>) =>\n    useMemo(\n        () => (\n            <g ref={ref}>\n                <text className=\"rmg-name__zh\" fontSize={18}>\n                    {props.name[0]}\n                </text>\n                <g fontSize={10.5}>\n                    {props.name[1].split('\\\\').map((txt, i) => (\n                        <text key={i} className=\"rmg-name__en\" dy={16 + i * 11}>\n                            {txt}\n                        </text>\n                    ))}\n                </g>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.name[0], props.name[1]]\n    )\n);\n\nconst StationSecondaryName = forwardRef((props: { secName: Name }, ref: React.Ref<SVGGElement>) =>\n    useMemo(\n        () => (\n            <g ref={ref} textAnchor=\"middle\">\n                <text className=\"rmg-name__zh\" fontSize={13}>\n                    {props.secName[0]}\n                </text>\n                <text dy={10} className=\"rmg-name__en\" fontSize={6.5}>\n                    {props.secName[1]}\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.secName.toString()]\n    )\n);\n\nconst ExpressTag = React.memo((props: React.SVGProps<SVGGElement>) => (\n    <g textAnchor=\"middle\" {...props}>\n        <text className=\"rmg-name__zh\" fontSize={13}>\n            快车停靠站\n        </text>\n        <text dy={10} className=\"rmg-name__en\" fontSize={6.5}>\n            Express Station\n        </text>\n    </g>\n));\n\ninterface IntGroupProps {\n    intInfos: InterchangeInfo[];\n    stnState: -1 | 0 | 1;\n    tickRotation: 0 | 180;\n}\n\nconst IntGroup = (props: IntGroupProps) => (\n    <>\n        <IntTicks strokeWidth={4} {...props} />\n        <IntBoxs transform={`translate(0,${props.tickRotation === 180 ? -47 : 23})`} {...props} />\n    </>\n);\n\nconst IntTicks = (props: IntGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, stnState, tickRotation, ...others } = props;\n\n    return (\n        <g {...others}>\n            {intInfos.map((info, i) => (\n                <use\n                    key={i}\n                    xlinkHref=\"#inttick\"\n                    stroke={stnState === -1 ? '#aaa' : info[2]}\n                    transform={`translate(${-2 * (intInfos.length - 1) + 4 * i},0)rotate(${\n                        tickRotation === 180 ? 180 : 0\n                    })`}\n                />\n            ))}\n        </g>\n    );\n};\n\nconst IntBoxs = (props: IntGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, tickRotation, stnState, ...other } = props;\n\n    return (\n        <g {...other}>\n            {intInfos.map((info, i) => (\n                <g key={i} transform={`translate(0,${i * 28 * (tickRotation === 180 ? -1 : 1)})`}>\n                    <LineIcon\n                        lineName={[info[4], info[5]]}\n                        foregroundColour={info[3]}\n                        backgroundColour={info[2]}\n                        stationState={stnState}\n                    />\n                </g>\n            ))}\n        </g>\n    );\n};\n","import React, { useMemo } from 'react';\nimport StationGZMTR from './station/station-gzmtr';\nimport { adjacencyList, criticalPathMethod, drawLine, getStnState } from '../methods/share';\nimport {\n    CanvasType,\n    ColourHex,\n    MonoColour,\n    ShortDirection,\n    StationDict,\n} from '../../../constants/constants';\nimport { useAppSelector } from '../../../redux';\nimport LineIcon from '../../gzmtr/line-icon/line-icon';\n\nconst wideFactor = (stnList: StationDict, stnId: string) =>\n    stnList[stnId].parents.length === 2 || stnList[stnId].children.length === 2 ? 0.25 : 0;\n\nconst getXShare = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]): number => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        if (branchOfStn.toString() === branches[0].toString()) {\n            // station on main line, expand to fit\n            let lens = [];\n            if (!leftOpenJaw && !rightOpenJaw) {\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n            } else if (leftOpenJaw) {\n                lens[0] = 0;\n                lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n                lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n            } else {\n                // right open jaw\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n            }\n            return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n        } else {\n            if (!leftOpenJaw && !rightOpenJaw) {\n                let lens = [];\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n                return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n            } else if (leftOpenJaw) {\n                return (\n                    criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len -\n                    criticalPathMethod(stnId, partSink, adjMat).len\n                );\n            } else {\n                // right open jaw\n                return (\n                    criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len +\n                    criticalPathMethod(partSource, stnId, adjMat).len\n                );\n            }\n        }\n    }\n};\n\nconst MainGZMTR = () => {\n    const { branches, routes, depsStr: deps } = useAppSelector(store => store.helper);\n\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const yPercentage = useAppSelector(store => store.param.y_pc);\n    const paddingPercentage = useAppSelector(store => store.param.padding);\n    const branchSpacing = useAppSelector(store => store.param.branch_spacing);\n    const direction = useAppSelector(store => store.param.direction);\n    const lineName = useAppSelector(store => store.param.line_name);\n    const currentStationIndex = useAppSelector(store => store.param.current_stn_idx);\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    const adjMat = adjacencyList(stationList, wideFactor, wideFactor);\n\n    const xShares = useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(stationList).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShare(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const lineXs: [number, number] =\n        direction === ShortDirection.right\n            ? [\n                  (svgWidths[CanvasType.RailMap] * paddingPercentage) / 100 + 65,\n                  svgWidths[CanvasType.RailMap] * (1 - paddingPercentage / 100) - 20,\n              ]\n            : [\n                  (svgWidths[CanvasType.RailMap] * paddingPercentage) / 100,\n                  svgWidths[CanvasType.RailMap] * (1 - paddingPercentage / 100) - 65,\n              ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = useMemo(\n        () => {\n            console.log('computing y shares');\n            return Object.keys(stationList).reduce((acc, cur) => {\n                if (branches[0].includes(cur)) {\n                    return { ...acc, [cur]: 0 };\n                } else {\n                    let branchOfStn = branches.slice(1).filter(branch => branch.includes(cur))[0];\n                    return { ...acc, [cur]: stationList[branchOfStn[0]].children.indexOf(branchOfStn[1]) ? -2 : 2 };\n                }\n            }, {} as { [stnId: string]: number });\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: -yShares[cur] * branchSpacing }),\n        {} as typeof yShares\n    );\n\n    const stnStates = useMemo(\n        () => getStnState(currentStationIndex, routes, direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [currentStationIndex, direction, routes.toString()]\n    );\n\n    const linePaths = drawLine(branches, stnStates);\n    const paths = (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: linePaths[cur].map(stns => _linePath(stns, xs, ys)),\n        }),\n        {} as { [key in keyof ReturnType<typeof drawLine>]: string[] }\n    );\n\n    return (\n        <g\n            id=\"main\"\n            style={{\n                ['--y-percentage' as any]: yPercentage,\n                transform: 'translateY(calc(var(--y-percentage) * var(--rmg-svg-height) / 100))',\n            }}\n        >\n            <Line paths={paths} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} />\n            <g\n                id=\"line_name\"\n                style={{\n                    ['--translate-x' as any]:\n                        direction === ShortDirection.right ? `${lineXs[0] - 65}px` : `${lineXs[1] + 65}px`,\n                }}\n            >\n                <LineIcon\n                    lineName={lineName}\n                    foregroundColour={'var(--rmg-theme-fg)' as MonoColour}\n                    backgroundColour={'var(--rmg-theme-colour)' as ColourHex}\n                    stationState={1}\n                />\n            </g>\n        </g>\n    );\n};\n\nexport default MainGZMTR;\n\nconst Line = React.memo(\n    (props: { paths: { main: string[]; pass: string[] } }) => (\n        <g fill=\"none\" strokeWidth={4}>\n            <g stroke=\"#aaa\" strokeDasharray={4}>\n                {props.paths.pass.map((path, i) => (\n                    <path key={i} d={path} />\n                ))}\n            </g>\n            <g stroke=\"var(--rmg-theme-colour)\">\n                {props.paths.main.map((path, i) => (\n                    <path key={i} d={path} />\n                ))}\n            </g>\n        </g>\n    ),\n    (prevProps, nextProps) => JSON.stringify(prevProps.paths) === JSON.stringify(nextProps.paths)\n);\n\nconst _linePath = (stnIds: string[], realXs: { [stnId: string]: number }, realYs: { [stnId: string]: number }) => {\n    let prevY: number;\n    var path = [] as string[];\n\n    stnIds.forEach(stnId => {\n        let x = realXs[stnId];\n        let y = realYs[stnId];\n        if (!prevY && prevY !== 0) {\n            prevY = y;\n            path.push(`M ${x},${y}`);\n            return;\n        }\n        if (y === 0) {\n            if (y < prevY) path.push(`H ${x - 40}`, 'a 40,40 0 0,0 40,-40', `V ${y}`);\n            if (y > prevY) path.push(`H ${x - 40}`, 'a 40,40 0 0,1 40,40', `V ${y}`);\n        } else {\n            if (y < prevY) path.push(`V ${y + 40}`, 'a 40,40 0 0,1 40,-40', `H ${x}`);\n            if (y > prevY) path.push(`V ${y - 40}`, 'a 40,40 0 0,0 40,40', `H ${x}`);\n        }\n        path.push(`H ${x}`);\n        prevY = y;\n    });\n\n    // simplify path\n    return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n};\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { xs, ys, stnStates } = props;\n\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    return (\n        <g id=\"stn_icons\">\n            {Object.keys(stationList)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (\n                    <g\n                        key={stnId}\n                        style={{\n                            transform: `translate(${xs[stnId]}px,${ys[stnId]}px)`,\n                        }}\n                    >\n                        <StationGZMTR stnId={stnId} stnState={stnStates[stnId]} stnY={ys[stnId]} />\n                    </g>\n                ))}\n        </g>\n    );\n};\n","import React, { memo, useMemo } from 'react';\nimport StripGZMTR from '../strip/strip-gzmtr';\nimport MainGZMTR from './main/main-gzmtr';\nimport { CanvasType, Note, PanelTypeGZMTR, ShortDirection } from '../../constants/constants';\nimport { useAppSelector } from '../../redux';\n\nconst RailMapGZMTR = () => {\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const direction = useAppSelector(store => store.param.direction);\n    const psdNumber = useAppSelector(store => store.param.psd_num);\n    const infoPanelType = useAppSelector(store => store.param.info_panel_type);\n    const notes = useAppSelector(store => store.param.notesGZMTR);\n    const currentStationIndex = useAppSelector(store => store.param.current_stn_idx);\n    const curStnInfo = useAppSelector(store => store.param.stn_list[currentStationIndex]);\n\n    return (\n        <>\n            <DefsGZMTR />\n\n            <StripGZMTR\n                variant={infoPanelType}\n                isShowLight={infoPanelType === PanelTypeGZMTR.gz2otis}\n                isShowPSD={infoPanelType === PanelTypeGZMTR.gz2otis && psdNumber}\n            />\n\n            {(direction === ShortDirection.left && curStnInfo.parents.includes('linestart')) ||\n            (direction === ShortDirection.right && curStnInfo.children.includes('lineend')) ? (\n                <TerminusFlag />\n            ) : (\n                <>\n                    <MainGZMTR />\n                    <DirectionIndicator />\n                    {notes.map((note, i) => (\n                        <NoteBox key={i} note={note} />\n                    ))}\n                </>\n            )}\n\n            {infoPanelType === PanelTypeGZMTR.gz2otis && (\n                <line x2={svgWidths[CanvasType.RailMap]} transform=\"translate(0,90)\" strokeWidth={3} stroke=\"black\" />\n            )}\n        </>\n    );\n};\n\nexport default RailMapGZMTR;\n\nconst DefsGZMTR = memo(() => (\n    <defs>\n        <path\n            id=\"stn\"\n            className=\"rmg-stn\"\n            d=\"M 0,9.25 V -9.25 H -9.25 a 9.25,9.25 0 0,0 0,18.5 h 18.5 a 9.25,9.25 0 0,0 0,-18.5 H 0 \"\n        />\n        <path\n            id=\"stn_pass\"\n            stroke=\"#aaa\"\n            fill=\"#fff\"\n            strokeWidth={2}\n            d=\"M 0,9.25 V -9.25 H -9.25 a 9.25,9.25 0 0,0 0,18.5 h 18.5 a 9.25,9.25 0 0,0 0,-18.5 H 0 \"\n        />\n        <path id=\"arrow_direction\" d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\" fill=\"black\" />\n\n        <path id=\"inttick\" d=\"M 0,0 v 18\" strokeLinecap=\"square\" />\n        <rect id=\"intbox\" x={-22.5} height={24} width={45} rx={4.5} />\n    </defs>\n));\n\nconst DirectionIndicator = () => {\n    const { routes } = useAppSelector(store => store.helper);\n    const {\n        direction,\n        direction_gz_x: directionIndicatorX,\n        direction_gz_y: directionIndicatorY,\n        current_stn_idx: currentStationIndex,\n    } = useAppSelector(store => store.param);\n\n    const validDests = useMemo(\n        () => [\n            ...new Set(\n                routes\n                    .reduce(\n                        (acc, cur) =>\n                            cur.includes(currentStationIndex)\n                                ? acc.concat(\n                                      cur\n                                          .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                                          .slice(direction === ShortDirection.left ? 0 : -1)[0]\n                                  )\n                                : acc,\n                        []\n                    )\n                    .filter(id => id !== currentStationIndex)\n            ),\n        ],\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [currentStationIndex, direction, routes.toString()]\n    );\n\n    const textGroupProps: TextGroupProps = {\n        textAnchor: direction === ShortDirection.left ? 'start' : 'end',\n        transform: `translate(${direction === ShortDirection.left ? 65 : -65},-5)`,\n        destIds: validDests,\n    };\n\n    return (\n        <g\n            id=\"direction_gz\"\n            style={{ ['--x-percentage' as any]: directionIndicatorX, ['--y-percentage' as any]: directionIndicatorY }}\n        >\n            <use\n                xlinkHref=\"#arrow_direction\"\n                style={{ ['--rotate' as any]: direction === ShortDirection.left ? '0deg' : '180deg' }}\n            />\n\n            {validDests.length !== 2 ? (\n                <DirectionIndicatorTextGroup {...textGroupProps} />\n            ) : (\n                <DirectionIndicatorTextGroup2 {...textGroupProps} />\n            )}\n        </g>\n    );\n};\n\ntype TextGroupProps = {\n    destIds: string[];\n} & React.SVGProps<SVGGElement>;\n\nconst DirectionIndicatorTextGroup = (props: TextGroupProps) => {\n    const { destIds, ...others } = props;\n    const stationList = useAppSelector(store => store.param.stn_list);\n    return (\n        <g {...others}>\n            <text className=\"rmg-name__zh\" fontSize={28}>\n                {destIds.map(stnId => stationList[stnId].name[0]).join('/') + '方向'}\n            </text>\n            <text className=\"rmg-name__en\" fontSize={14} dy={22}>\n                {'Towards ' + destIds.map(stnId => stationList[stnId].name[1].replace('\\\\', ' ')).join('/')}\n            </text>\n        </g>\n    );\n};\n\nconst DirectionIndicatorTextGroup2 = (props: TextGroupProps) => {\n    const { destIds, ...others } = props;\n\n    const direction = useAppSelector(store => store.param.direction);\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    const charCounts = destIds.map(stnId => stationList[stnId].name[0].length);\n    const minCharCounts = Math.min(...charCounts);\n    const charSpacing =\n        minCharCounts > 1 && charCounts[0] !== charCounts[1]\n            ? Math.abs(charCounts[0] - charCounts[1]) / (minCharCounts - 1)\n            : 0;\n\n    return (\n        <g {...others}>\n            {destIds.map((id, i) => (\n                <React.Fragment key={id}>\n                    <text\n                        className=\"rmg-name__zh\"\n                        fontSize={25}\n                        x={direction === ShortDirection.left ? 0 : -75}\n                        y={-21 + 42 * i}\n                        letterSpacing={charCounts[i] > charCounts[1 - i] ? '0em' : `${charSpacing}em`}\n                    >\n                        {stationList[id].name[0]}\n                    </text>\n                    <text\n                        className=\"rmg-name__en\"\n                        fontSize={11.5}\n                        x={direction === ShortDirection.left ? 0 : -75}\n                        y={-1 + 42 * i}\n                    >\n                        {'Towards ' + stationList[id].name[1].replace('\\\\', ' ')}\n                    </text>\n                </React.Fragment>\n            ))}\n            <text\n                className=\"rmg-name__zh\"\n                fontSize={28}\n                x={direction === ShortDirection.left ? 25 * (Math.max(...charCounts) + 1) : 0}\n                y={5}\n            >\n                方向\n            </text>\n        </g>\n    );\n};\n\nconst TerminusFlag = React.memo(() => (\n    <g id=\"terminus_gz\" textAnchor=\"middle\">\n        <text className=\"rmg-name__zh\" fontSize={90}>\n            终 点 站\n        </text>\n        <text dy={70} className=\"rmg-name__en\" fontSize={36}>\n            Terminal\n        </text>\n        <g strokeWidth={8} stroke=\"#000\">\n            <path d=\"M -160,68 h -160\" />\n            <path d=\"M 160,68 h 160\" />\n        </g>\n    </g>\n));\n\nconst NoteBox = React.memo(\n    (props: { note: Note }) => {\n        const noteTextEl = React.useRef<SVGGElement | null>(null);\n        const [bBox, setBBox] = React.useState({ width: 0, height: 0, y: 0 } as DOMRect);\n        React.useEffect(\n            () => setBBox(noteTextEl.current!.getBBox()),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [props.note[0], props.note[1]]\n        );\n\n        return (\n            <g\n                className=\"note-box\"\n                style={{ ['--x-percentage' as any]: props.note[2], ['--y-percentage' as any]: props.note[3] }}\n            >\n                {props.note[4] && (\n                    <rect\n                        height={bBox.height + 4}\n                        width={bBox.width + 4}\n                        x={-2}\n                        y={bBox.y - 2}\n                        fill=\"none\"\n                        stroke=\"black\"\n                        strokeWidth={0.5}\n                    />\n                )}\n                <g ref={noteTextEl}>\n                    <g fontSize={16} letterSpacing={1.2}>\n                        {props.note[0].split('\\n').map((txt, i) => (\n                            <text key={i} className=\"rmg-name__zh\" y={i * 18}>\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n\n                    <g\n                        fontSize={10}\n                        letterSpacing={0.33}\n                        transform={`translate(0,${18 * props.note[0].split('\\n').length})`}\n                    >\n                        {props.note[1].split('\\n').map((txt, i) => (\n                            <text\n                                key={i}\n                                className=\"rmg-name__en\"\n                                y={i * 11}\n                                textLength={\n                                    i < (props.note[1].match(/\\n/g)?.length || 0)\n                                        ? bBox.width\n                                        : navigator.userAgent.includes('Firefox')\n                                        ? -1\n                                        : 0\n                                }\n                                lengthAdjust=\"spacing\"\n                            >\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.note.toString() === nextProps.note.toString()\n);\n"],"sourceRoot":""}