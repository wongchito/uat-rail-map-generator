{"version":3,"sources":["panels/design/list-common.tsx","panels/design/panel.tsx","panels/design/index.ts","constants/colours lazy /^/.//.*$/ groupOptions: {} namespace object","panels/colour-diag/theme-items.tsx","panels/colour-diag/dialog.tsx","panels/colour-diag/index.ts"],"names":["useStyles","makeStyles","theme","createStyles","dividerVertical","margin","spacing","nestedList","paddingLeft","DesignList","t","useTranslation","rmgStyle","useSelector","store","app","React","useContext","ParamContext","param","dispatch","useState","isCDiagOpen","setIsCDiagOpen","button","onClick","primary","secondary","style","backgroundColor","color","padding","Object","values","line_name","join","open","lineName","onUpdate","key","value","type","name","onClose","RmgStyle","SHMetro","DirectionLi","classes","useMemo","direction","orientation","flexItem","className","variant","PlatformNumLi","platform_num","onChange","e","platform","target","PlatformNumSHMetroLi","handleSwitch","_","checked","in","unmountOnExit","component","disablePadding","placeholder","DesignMTR","lazy","DesignGZMTR","DesignShmetro","DesignPanel","container","justify","alignItems","item","xs","sm","md","lg","MTR","Suspense","fallback","GZMTR","Panel","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","Error","code","ids","id","keys","module","exports","cityItem","display","flexDirection","menuItemSpan","borderRadius","height","width","minWidth","marginRight","inputColour","position","left","top","buttonContainer","flexShrink","PalettePanel","props","i18n","lineList","list","setList","listPromise","default","useEffect","a","data","CityCode","Other","colour","fg","MonoColour","white","toString","useLineList","length","filter","l","newTheme","event","slice","select","line","disabled","getTransText2","languages","CustomPanel","hexTemp","setHexTemp","rgb","opacity","htmlFor","title","borderColor","error","match","hex","val","idx","toUpperCase","native","label","CitySelectItem","items","cityList","c","CountryFlag","country","useEmojiStyles","img","codePoints","split","char","codePointAt","concat","LanguageCode","ChineseCN","ChineseSimp","includes","language","navigator","indexOf","src","process","alt","String","fromCodePoint","cp","parseInt","contentWrapper","overflow","paddingTop","paddingBottom","paddingRight","breakpoints","down","contentLeft","maxWidth","contentControl","flexGrow","paperRoot","listItemPaper","justifyContent","iconRoot","palette","action","active","inputBaseRoot","inputBaseInputZH","textAlign","fontSize","inputBaseInputEN","chipWrapper","overflowX","chipRoot","lineHeight","chipLabel","Dialog2","LineNameInput","nameChange","index","newName","root","input","autoFocus","RecentChipSet","allInfos","Set","stn_list","reduce","acc","info","transfer","JSON","stringify","reverse","chips","x","i","parse","txt","secondaryTypographyProps","ColourControl","tabIndex","setTabIndex","tabNav","indicatorColor","textColor","scrollButtons","panel","ColourDialog"],"mappings":"wNAuBMA,EAAYC,sBAAW,SAAAC,GAAK,OAC9BC,uBAAa,CACTC,gBAAiB,CACbC,OAAQH,EAAMI,QAAQ,EAAG,IAE7BC,WAAY,CACRC,YAAaN,EAAMI,QAAQ,SA2DxBG,EAtDI,WACf,IAAQC,EAAMC,2BAAND,EAEFE,EAAWC,uBAAY,SAACC,GAAD,OAAsBA,EAAMC,IAAIH,YAC7D,EAA4BI,IAAMC,WAAWC,KAArCC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAEf,EAAsCJ,IAAMK,UAAS,GAArD,mBAAOC,EAAP,KAAoBC,EAApB,KAWA,OACI,qCACI,eAAC,WAAD,CAAUC,QAAM,EAACC,QAAS,kBAAMF,GAAe,IAA/C,UACI,cAAC,eAAD,UACI,cAAC,OAAD,2BAEJ,cAAC,eAAD,CACIG,QAAShB,EAAE,gBACXiB,UACI,sBACIC,MAAO,CACHC,gBAAiBV,EAAMjB,MAAM,GAC7B4B,MAAOX,EAAMjB,MAAM,GACnB6B,QAAS,eAJjB,SAOKC,OAAOC,OAAOd,EAAMe,WAAWC,WAI5C,cAAC,OAAD,CAAML,MAAM,SAAZ,4BAEJ,cAAC,IAAD,CACIM,KAAMd,EACNpB,MAAOiB,EAAMjB,MACbmC,SAAUlB,EAAMe,UAChBI,SAnCa,SAACC,EAAaC,GACvB,SAARD,GACAnB,EAAS,CAAEqB,KAAM,gBAAiBC,KAAMV,OAAOC,OAAOO,KAE9C,UAARD,GACAnB,EAAS,CAAEqB,KAAM,YAAavC,MAAOsC,KA+BjCG,QAAS,kBAAMpB,GAAe,MAElC,cAAC,UAAD,IACA,cAAC,EAAD,IACA,cAAC,UAAD,IACCX,IAAagC,IAASC,QAAU,cAAC,EAAD,IAA2B,cAAC,EAAD,QAOlEC,EAAc,WAChB,IAAQpC,EAAMC,2BAAND,EACFqC,EAAU/C,IAChB,EAA4BgB,IAAMC,WAAWC,KAArCC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAEf,OAAOJ,IAAMgC,SACT,kBACI,eAAC,WAAD,WACI,cAAC,eAAD,UACI,cAAC,OAAD,2BAEJ,cAAC,eAAD,CACItB,QAAShB,EAAE,2BACXiB,UAAWjB,EAAE,oBAAsBS,EAAM8B,aAE7C,cAAC,UAAD,CAASC,YAAY,WAAWC,UAAQ,EAACC,UAAWL,EAAQ3C,kBAC5D,cAAC,SAAD,CAAQiD,QAAQ,WAAWvB,MAAM,UAAUL,QAAS,kBAAML,EAAS,CAAEqB,KAAM,mBAA3E,SACK/B,EAAE,kCAKf,CAACqC,EAAQ3C,gBAAiBe,EAAM8B,aAIlCK,EAAgB,WAClB,IAAQ5C,EAAMC,2BAAND,EACR,EAA4BM,IAAMC,WAAWC,KAArCC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAEf,OAAOJ,IAAMgC,SACT,kBACI,eAAC,WAAD,WACI,cAAC,eAAD,UACI,cAAC,OAAD,0BAEJ,cAAC,eAAD,CAActB,QAAShB,EAAE,qBACzB,cAAC,YAAD,CACI8B,MAAOrB,EAAMoC,aACbC,SAAU,SAAAC,GAAC,OAAIrC,EAAS,CAAEqB,KAAM,eAAgBiB,SAAUD,EAAEE,OAAOnB,gBAK/E,CAACrB,EAAMoC,gBAITK,EAAuB,WACzB,IAAQlD,EAAMC,2BAAND,EACFqC,EAAU/C,IAChB,EAA4BiB,qBAAWC,KAA/BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAETyC,EAAe,SAACC,EAAwCC,GAEtD3C,EADA2C,EACS,CAAEtB,KAAM,eAAgBiB,SAAU,IAElC,CAAEjB,KAAM,eAAgBiB,UAAU,KAInD,OAAOV,mBACH,kBACI,qCACI,eAAC,WAAD,WACI,cAAC,eAAD,UACI,cAAC,OAAD,0BAEJ,cAAC,eAAD,CAActB,QAAShB,EAAE,qBACzB,cAAC,0BAAD,UACI,cAAC,SAAD,CAAQoB,MAAM,UAAUiC,SAAgC,IAAvB5C,EAAMoC,aAAwBC,SAAUK,SAGjF,cAAC,WAAD,CAAUG,IAA2B,IAAvB7C,EAAMoC,aAAwBU,eAAa,EAAzD,SACI,cAAC,OAAD,CAAMC,UAAU,MAAMC,gBAAc,EAACf,UAAWL,EAAQxC,WAAxD,SACI,cAAC,WAAD,UACI,cAAC,YAAD,CACI6D,YAAa1D,EAAE,mBACf8B,MAAOrB,EAAMoC,aACbC,SAAU,SAAAC,GAAC,OAAIrC,EAAS,CAAEqB,KAAM,eAAgBiB,SAAUD,EAAEE,OAAOnB,sBAQ3F,CAACrB,EAAMoC,aAAcR,EAAQxC,cCxK/B8D,EAAYrD,IAAMsD,MAAK,kBAAM,kCAC7BC,EAAcvD,IAAMsD,MAAK,kBAAM,kCAC/BE,EAAgBxD,IAAMsD,MAAK,kBAAM,kCAmCxBG,EAjCK,WAChB,IAAM7D,EAAWC,uBAAY,SAACC,GAAD,OAAsBA,EAAMC,IAAIH,YAC7D,OACI,cAAC,OAAD,CAAM8D,WAAS,EAACpE,QAAS,EAAGqE,QAAQ,SAASC,WAAW,aAAxD,SACI,cAAC,OAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAtC,SACI,cAAC,QAAD,UACI,eAAC,OAAD,CAAMf,UAAU,MAAMC,gBAAc,EAApC,UACI,cAAC,EAAD,IACCvD,IAAagC,IAASsC,KACnB,eAAC,IAAMC,SAAP,CAAgBC,SAAU,cAAC,iBAAD,IAA1B,UACI,cAAC,UAAD,IACA,cAACf,EAAD,OAGPzD,IAAagC,IAASyC,OACnB,eAAC,IAAMF,SAAP,CAAgBC,SAAU,cAAC,iBAAD,IAA1B,UACI,cAAC,UAAD,IACA,cAACb,EAAD,OAGP3D,IAAagC,IAASC,SACnB,eAAC,IAAMsC,SAAP,CAAgBC,SAAU,cAAC,iBAAD,IAA1B,UACI,cAAC,UAAD,IACA,cAACZ,EAAD,iBClCjBc,a,mBCFf,IAAIC,EAAM,CACT,cAAe,CACd,GACA,IAED,cAAe,CACd,GACA,GAED,iBAAkB,CACjB,GACA,GAED,YAAa,CACZ,GACA,IAED,eAAgB,CACf,GACA,IAED,aAAc,CACb,GACA,IAED,gBAAiB,CAChB,GACA,IAED,YAAa,CACZ,GACA,IAED,eAAgB,CACf,GACA,IAED,cAAe,CACd,GACA,IAED,iBAAkB,CACjB,GACA,IAED,aAAc,CACb,GACA,GAED,gBAAiB,CAChB,GACA,GAED,cAAe,CACd,GACA,GAED,iBAAkB,CACjB,GACA,GAED,WAAY,CACX,GACA,GAED,cAAe,CACd,GACA,GAED,YAAa,CACZ,GACA,GAED,eAAgB,CACf,GACA,GAED,cAAe,CACd,GACA,GAED,iBAAkB,CACjB,GACA,GAED,aAAc,CACb,GACA,GAED,gBAAiB,CAChB,GACA,GAED,aAAc,CACb,GACA,GAED,gBAAiB,CAChB,GACA,GAED,WAAY,CACX,GACA,GAED,cAAe,CACd,GACA,GAED,cAAe,CACd,GACA,IAED,iBAAkB,CACjB,GACA,IAED,WAAY,CACX,GACA,IAED,cAAe,CACd,GACA,IAED,UAAW,CACV,GACA,IAED,aAAc,CACb,GACA,IAED,WAAY,CACX,GACA,IAED,cAAe,CACd,GACA,IAED,YAAa,CACZ,GACA,IAED,eAAgB,CACf,GACA,IAED,cAAe,CACd,GACA,IAED,iBAAkB,CACjB,GACA,IAED,UAAW,CACV,GACA,IAED,aAAc,CACb,GACA,IAED,SAAU,CACT,GACA,IAED,YAAa,CACZ,GACA,IAED,UAAW,CACV,GACA,IAED,aAAc,CACb,GACA,IAED,UAAW,CACV,GACA,IAED,aAAc,CACb,GACA,IAED,YAAa,CACZ,GACA,IAED,eAAgB,CACf,GACA,IAED,iBAAkB,CACjB,GACA,IAED,oBAAqB,CACpB,GACA,IAED,UAAW,CACV,GACA,IAED,aAAc,CACb,GACA,IAED,aAAc,CACb,GACA,IAED,gBAAiB,CAChB,GACA,IAED,aAAc,CACb,GACA,IAED,gBAAiB,CAChB,GACA,IAED,cAAe,CACd,GACA,IAED,iBAAkB,CACjB,GACA,IAED,cAAe,CACd,GACA,IAED,iBAAkB,CACjB,GACA,IAED,WAAY,CACX,GACA,IAED,cAAe,CACd,GACA,IAED,YAAa,CACZ,GACA,IAED,eAAgB,CACf,GACA,IAED,UAAW,CACV,GACA,IAED,aAAc,CACb,GACA,IAED,YAAa,CACZ,GACA,IAED,eAAgB,CACf,GACA,IAED,gBAAiB,CAChB,GACA,IAED,mBAAoB,CACnB,GACA,IAED,SAAU,CACT,GACA,IAED,YAAa,CACZ,GACA,KAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIrC,EAAI,IAAIsC,MAAM,uBAAyBN,EAAM,KAEjD,MADAhC,E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","file":"static/js/panelDesign.0ac6ce91.chunk.js","sourcesContent":["import React, { useContext, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    Collapse,\n    createStyles,\n    Divider,\n    Icon,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    makeStyles,\n    Switch,\n    TextField,\n} from '@material-ui/core';\nimport ColourDialog from '../colour-diag';\nimport { ParamContext } from '../../context';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../redux';\nimport { Name, RmgStyle } from \"../../constants/constants\";\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        dividerVertical: {\n            margin: theme.spacing(0, 2),\n        },\n        nestedList: {\n            paddingLeft: theme.spacing(5),\n        },\n    })\n);\n\nconst DesignList = () => {\n    const { t } = useTranslation();\n\n    const rmgStyle = useSelector((store: RootState) => store.app.rmgStyle);\n    const { param, dispatch } = React.useContext(ParamContext);\n\n    const [isCDiagOpen, setIsCDiagOpen] = React.useState(false);\n\n    const nameDialogUpdate = (key: string, value: any) => {\n        if (key === 'name') {\n            dispatch({ type: 'SET_LINE_NAME', name: Object.values(value) as Name });\n        }\n        if (key === 'theme') {\n            dispatch({ type: 'SET_THEME', theme: value });\n        }\n    };\n\n    return (\n        <>\n            <ListItem button onClick={() => setIsCDiagOpen(true)}>\n                <ListItemIcon>\n                    <Icon>color_lens</Icon>\n                </ListItemIcon>\n                <ListItemText\n                    primary={t('design.theme')}\n                    secondary={\n                        <span\n                            style={{\n                                backgroundColor: param.theme[2],\n                                color: param.theme[3],\n                                padding: '.1rem .3rem',\n                            }}\n                        >\n                            {Object.values(param.line_name).join()}\n                        </span>\n                    }\n                />\n                <Icon color=\"action\">arrow_right</Icon>\n            </ListItem>\n            <ColourDialog\n                open={isCDiagOpen}\n                theme={param.theme}\n                lineName={param.line_name}\n                onUpdate={nameDialogUpdate}\n                onClose={() => setIsCDiagOpen(false)}\n            />\n            <Divider />\n            <DirectionLi />\n            <Divider />\n            {rmgStyle === RmgStyle.SHMetro ? <PlatformNumSHMetroLi /> : <PlatformNumLi />}\n        </>\n    );\n};\n\nexport default DesignList;\n\nconst DirectionLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const { param, dispatch } = React.useContext(ParamContext);\n\n    return React.useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>directions</Icon>\n                </ListItemIcon>\n                <ListItemText\n                    primary={t('design.direction.button')}\n                    secondary={t('design.direction.' + param.direction)}\n                />\n                <Divider orientation=\"vertical\" flexItem className={classes.dividerVertical} />\n                <Button variant=\"outlined\" color=\"primary\" onClick={() => dispatch({ type: 'SET_DIRECTION' })}>\n                    {t('design.direction.switch')}\n                </Button>\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [classes.dividerVertical, param.direction]\n    );\n};\n\nconst PlatformNumLi = () => {\n    const { t } = useTranslation();\n    const { param, dispatch } = React.useContext(ParamContext);\n\n    return React.useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>looks_one</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('design.platform')} />\n                <TextField\n                    value={param.platform_num}\n                    onChange={e => dispatch({ type: 'SET_PLATFORM', platform: e.target.value })}\n                />\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.platform_num]\n    );\n};\n\nconst PlatformNumSHMetroLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const { param, dispatch } = useContext(ParamContext);\n\n    const handleSwitch = (_: React.ChangeEvent<HTMLInputElement>, checked: boolean) => {\n        if (checked) {\n            dispatch({ type: 'SET_PLATFORM', platform: '' });\n        } else {\n            dispatch({ type: 'SET_PLATFORM', platform: false });\n        }\n    };\n\n    return useMemo(\n        () => (\n            <>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>looks_one</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('design.platform')} />\n                    <ListItemSecondaryAction>\n                        <Switch color=\"primary\" checked={param.platform_num !== false} onChange={handleSwitch} />\n                    </ListItemSecondaryAction>\n                </ListItem>\n                <Collapse in={param.platform_num !== false} unmountOnExit>\n                    <List component=\"div\" disablePadding className={classes.nestedList}>\n                        <ListItem>\n                            <TextField\n                                placeholder={t('design.platform')}\n                                value={param.platform_num}\n                                onChange={e => dispatch({ type: 'SET_PLATFORM', platform: e.target.value })}\n                            />\n                        </ListItem>\n                    </List>\n                </Collapse>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.platform_num, classes.nestedList]\n    );\n};\n","import React from 'react';\n\nimport { Divider, Grid, LinearProgress, List, Paper } from '@material-ui/core';\n\nimport DesignCommon from './list-common';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../redux';\nimport { RmgStyle } from '../../constants/constants';\n\nconst DesignMTR = React.lazy(() => import(/* webpackChunkName: \"panelDesignMTR\" */ './list-mtr'));\nconst DesignGZMTR = React.lazy(() => import(/* webpackChunkName: \"panelDesignGZMTR\" */ './list-gzmtr'));\nconst DesignShmetro = React.lazy(() => import(/* webpackChunkName: \"panelDesignShmetro\" */ './list-shmetro'));\n\nconst DesignPanel = () => {\n    const rmgStyle = useSelector((store: RootState) => store.app.rmgStyle);\n    return (\n        <Grid container spacing={3} justify=\"center\" alignItems=\"flex-start\">\n            <Grid item xs={12} sm={10} md={7} lg={5}>\n                <Paper>\n                    <List component=\"div\" disablePadding>\n                        <DesignCommon />\n                        {rmgStyle === RmgStyle.MTR && (\n                            <React.Suspense fallback={<LinearProgress />}>\n                                <Divider />\n                                <DesignMTR />\n                            </React.Suspense>\n                        )}\n                        {rmgStyle === RmgStyle.GZMTR && (\n                            <React.Suspense fallback={<LinearProgress />}>\n                                <Divider />\n                                <DesignGZMTR />\n                            </React.Suspense>\n                        )}\n                        {rmgStyle === RmgStyle.SHMetro && (\n                            <React.Suspense fallback={<LinearProgress />}>\n                                <Divider />\n                                <DesignShmetro />\n                            </React.Suspense>\n                        )}\n                    </List>\n                </Paper>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default DesignPanel;\n","import Panel from './panel';\n\nexport default Panel;\n","var map = {\n\t\"./README.md\": [\n\t\t80,\n\t\t68\n\t],\n\t\"./barcelona\": [\n\t\t37,\n\t\t1\n\t],\n\t\"./barcelona.ts\": [\n\t\t37,\n\t\t1\n\t],\n\t\"./beijing\": [\n\t\t38,\n\t\t12\n\t],\n\t\"./beijing.ts\": [\n\t\t38,\n\t\t12\n\t],\n\t\"./changsha\": [\n\t\t39,\n\t\t23\n\t],\n\t\"./changsha.ts\": [\n\t\t39,\n\t\t23\n\t],\n\t\"./chengdu\": [\n\t\t40,\n\t\t34\n\t],\n\t\"./chengdu.ts\": [\n\t\t40,\n\t\t34\n\t],\n\t\"./chongqing\": [\n\t\t41,\n\t\t36\n\t],\n\t\"./chongqing.ts\": [\n\t\t41,\n\t\t36\n\t],\n\t\"./dongguan\": [\n\t\t42,\n\t\t2\n\t],\n\t\"./dongguan.ts\": [\n\t\t42,\n\t\t2\n\t],\n\t\"./edinburgh\": [\n\t\t43,\n\t\t3\n\t],\n\t\"./edinburgh.ts\": [\n\t\t43,\n\t\t3\n\t],\n\t\"./foshan\": [\n\t\t44,\n\t\t4\n\t],\n\t\"./foshan.ts\": [\n\t\t44,\n\t\t4\n\t],\n\t\"./glasgow\": [\n\t\t45,\n\t\t5\n\t],\n\t\"./glasgow.ts\": [\n\t\t45,\n\t\t5\n\t],\n\t\"./guangzhou\": [\n\t\t46,\n\t\t6\n\t],\n\t\"./guangzhou.ts\": [\n\t\t46,\n\t\t6\n\t],\n\t\"./hangzhou\": [\n\t\t47,\n\t\t7\n\t],\n\t\"./hangzhou.ts\": [\n\t\t47,\n\t\t7\n\t],\n\t\"./hongkong\": [\n\t\t48,\n\t\t8\n\t],\n\t\"./hongkong.ts\": [\n\t\t48,\n\t\t8\n\t],\n\t\"./kansai\": [\n\t\t49,\n\t\t9\n\t],\n\t\"./kansai.ts\": [\n\t\t49,\n\t\t9\n\t],\n\t\"./kaohsiung\": [\n\t\t50,\n\t\t10\n\t],\n\t\"./kaohsiung.ts\": [\n\t\t50,\n\t\t10\n\t],\n\t\"./london\": [\n\t\t51,\n\t\t11\n\t],\n\t\"./london.ts\": [\n\t\t51,\n\t\t11\n\t],\n\t\"./macao\": [\n\t\t52,\n\t\t13\n\t],\n\t\"./macao.ts\": [\n\t\t52,\n\t\t13\n\t],\n\t\"./madrid\": [\n\t\t53,\n\t\t14\n\t],\n\t\"./madrid.ts\": [\n\t\t53,\n\t\t14\n\t],\n\t\"./nanjing\": [\n\t\t54,\n\t\t15\n\t],\n\t\"./nanjing.ts\": [\n\t\t54,\n\t\t15\n\t],\n\t\"./newtaipei\": [\n\t\t55,\n\t\t16\n\t],\n\t\"./newtaipei.ts\": [\n\t\t55,\n\t\t16\n\t],\n\t\"./osaka\": [\n\t\t56,\n\t\t17\n\t],\n\t\"./osaka.ts\": [\n\t\t56,\n\t\t17\n\t],\n\t\"./oslo\": [\n\t\t57,\n\t\t18\n\t],\n\t\"./oslo.ts\": [\n\t\t57,\n\t\t18\n\t],\n\t\"./other\": [\n\t\t58,\n\t\t19\n\t],\n\t\"./other.ts\": [\n\t\t58,\n\t\t19\n\t],\n\t\"./paris\": [\n\t\t59,\n\t\t20\n\t],\n\t\"./paris.ts\": [\n\t\t59,\n\t\t20\n\t],\n\t\"./qingdao\": [\n\t\t60,\n\t\t21\n\t],\n\t\"./qingdao.ts\": [\n\t\t60,\n\t\t21\n\t],\n\t\"./sanfrancisco\": [\n\t\t61,\n\t\t22\n\t],\n\t\"./sanfrancisco.ts\": [\n\t\t61,\n\t\t22\n\t],\n\t\"./seoul\": [\n\t\t62,\n\t\t24\n\t],\n\t\"./seoul.ts\": [\n\t\t62,\n\t\t24\n\t],\n\t\"./shanghai\": [\n\t\t63,\n\t\t25\n\t],\n\t\"./shanghai.ts\": [\n\t\t63,\n\t\t25\n\t],\n\t\"./shenzhen\": [\n\t\t64,\n\t\t26\n\t],\n\t\"./shenzhen.ts\": [\n\t\t64,\n\t\t26\n\t],\n\t\"./singapore\": [\n\t\t65,\n\t\t27\n\t],\n\t\"./singapore.ts\": [\n\t\t65,\n\t\t27\n\t],\n\t\"./stockholm\": [\n\t\t66,\n\t\t28\n\t],\n\t\"./stockholm.ts\": [\n\t\t66,\n\t\t28\n\t],\n\t\"./taipei\": [\n\t\t67,\n\t\t29\n\t],\n\t\"./taipei.ts\": [\n\t\t67,\n\t\t29\n\t],\n\t\"./tianjin\": [\n\t\t68,\n\t\t30\n\t],\n\t\"./tianjin.ts\": [\n\t\t68,\n\t\t30\n\t],\n\t\"./tokyo\": [\n\t\t69,\n\t\t31\n\t],\n\t\"./tokyo.ts\": [\n\t\t69,\n\t\t31\n\t],\n\t\"./toronto\": [\n\t\t70,\n\t\t32\n\t],\n\t\"./toronto.ts\": [\n\t\t70,\n\t\t32\n\t],\n\t\"./tyneandwear\": [\n\t\t71,\n\t\t33\n\t],\n\t\"./tyneandwear.ts\": [\n\t\t71,\n\t\t33\n\t],\n\t\"./xian\": [\n\t\t72,\n\t\t35\n\t],\n\t\"./xian.ts\": [\n\t\t72,\n\t\t35\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 76;\nmodule.exports = webpackAsyncContext;","import React, { useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    createStyles,\n    Divider,\n    List,\n    ListItem,\n    ListItemText,\n    makeStyles,\n    MenuItem,\n    Select,\n    TextField,\n    Tooltip,\n} from '@material-ui/core';\nimport { getTransText2 } from '../../utils';\nimport { CityCode, cityList } from '../../constants/city-config';\nimport { ColourHex, LanguageCode, MonoColour, PaletteEntry, Theme } from '../../constants/constants';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        cityItem: {\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n        },\n        menuItemSpan: {\n            padding: '0 .3rem',\n        },\n        button: {\n            borderRadius: '50%',\n            height: 24,\n            width: 24,\n            minWidth: 0,\n            marginRight: 8,\n            // border: 'solid',\n            padding: 0,\n        },\n        inputColour: {\n            position: 'absolute',\n            width: 0,\n            height: 0,\n            left: 27,\n            top: 32,\n        },\n        buttonContainer: {\n            display: 'flex',\n            flexShrink: 1,\n        },\n    })\n);\n\nconst useLineList = (theme: Theme) => {\n    const [list, setList] = React.useState([] as PaletteEntry[]);\n\n    const listPromise = theme[0]\n        ? import(/* webpackChunkName: \"colours\" */ `../../constants/colours/${theme[0]}`).then(\n              module => module.default as PaletteEntry[]\n          )\n        : Promise.resolve([] as PaletteEntry[]);\n\n    useEffect(\n        () => {\n            if (typeof theme[0] === 'undefined') {\n                return;\n            }\n            (async () => {\n                const data = await listPromise;\n                setList(theme[0] === CityCode.Other ? [{ ...data[0], colour: theme[2], fg: theme[3] || MonoColour.white }] : data);\n            })();\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [theme.toString()]\n    );\n\n    return list;\n};\n\ninterface ColourDialogProps {\n    theme: Theme;\n    onUpdate: (key: string, value: any) => void;\n}\n\nexport const PalettePanel = (props: ColourDialogProps) => {\n    const { t, i18n } = useTranslation();\n    const classes = useStyles();\n\n    const cityChange = (event: React.ChangeEvent<HTMLInputElement>) =>\n        props.onUpdate('theme', [event.target.value, ...props.theme.slice(1)]);\n\n    // Hook for fetching line list of current city\n    const lineList = useLineList(props.theme);\n\n    // Hook for updating props.theme when lineList changed\n    useEffect(\n        () => {\n            if (lineList.length === 0) return; // initialising, ignore\n            if (lineList.filter(l => l.id === props.theme[1]).length) return; // current city, ignore\n            let { id, colour, fg } = lineList[0];\n            let newTheme = [props.theme[0], id, colour, fg || MonoColour.white];\n            props.onUpdate('theme', newTheme);\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [lineList]\n    );\n\n    const lineChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let line = event.target.value;\n        let { colour, fg } = lineList.filter(l => l.id === line)[0];\n        let newTheme = [props.theme[0], line, colour, fg || MonoColour.white];\n        props.onUpdate('theme', newTheme);\n    };\n\n    return (\n        <List component=\"div\" disablePadding>\n            <CitySelectItem value={props.theme[0]} onChange={cityChange} />\n            <Divider variant=\"middle\" />\n            <ListItem>\n                <ListItemText primary={t('colour.line')} />\n                <TextField\n                    select\n                    style={{ width: 166 }}\n                    onChange={lineChange}\n                    value={props.theme[1]}\n                    disabled={props.theme[0] === 'other'}\n                >\n                    {lineList.map(l => (\n                        <MenuItem key={l.id} value={l.id}>\n                            <span\n                                className={classes.menuItemSpan}\n                                style={{\n                                    backgroundColor: l.colour,\n                                    color: l.fg || MonoColour.white,\n                                }}\n                            >\n                                {getTransText2(l.name, i18n.languages as LanguageCode[])}\n                            </span>\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </ListItem>\n        </List>\n    );\n};\n\nexport const CustomPanel = (props: ColourDialogProps) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const [hexTemp, setHexTemp] = useState(props.theme[2]);\n\n    useEffect(\n        () => setHexTemp(props.theme[2]),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.theme[2]]\n    );\n\n    const colourChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let rgb = event.target.value;\n        // setHexTemp(rgb);\n        props.onUpdate('theme', [CityCode.Other, 'other', rgb, props.theme[3]]);\n    };\n\n    const hexChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let hex = event.target.value;\n        if (hex.match(/^#[0-9a-fA-F]{0,6}$/) === null) return;\n        setHexTemp(hex as ColourHex);\n\n        if (props.theme[0] !== 'other') {\n            if (hex.match(/^#[0-9a-fA-f]{6}$/) !== null) {\n                // if hex valid, modify theme city and props.hex\n                let newTheme = [CityCode.Other, 'other', hex, props.theme[3]];\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (along with selection)\n                // then line will be updated by hook\n            } else {\n                // if hex not valid, modify theme city only\n                let newTheme = [CityCode.Other, 'other', ...props.theme.slice(2)];\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (along with selection)\n                // then line will be updated by hook\n            }\n        } else {\n            if (hex.match(/^#[0-9a-fA-F]{6}$/) !== null) {\n                // if hex valid, modify props.hex\n                let newTheme = props.theme.map((val, idx) => (idx === 2 ? hex : val));\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (actually only hex is changed)\n            } else {\n                // if hex not valid, do nothing\n            }\n        }\n    };\n\n    const fgChange = (event: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n        let newTheme = [CityCode.Other, 'other', props.theme[2], event.target.value];\n        props.onUpdate('theme', newTheme);\n    };\n\n    return (\n        <List component=\"div\" disablePadding>\n            <ListItem>\n                <ListItemText primary={t('colour.colour')} />\n                <div className={classes.buttonContainer}>\n                    <input\n                        type=\"color\"\n                        id=\"input-color\"\n                        value={props.theme[2]}\n                        onChange={colourChange}\n                        className={classes.inputColour}\n                        style={{ opacity: 0 }}\n                    />\n                    <label htmlFor=\"input-color\">\n                        <Tooltip title={t('colour.tooltip')} aria-label=\"colour picker\">\n                            <Button\n                                className={classes.button}\n                                style={{\n                                    backgroundColor: props.theme[2],\n                                    borderColor: props.theme[3] || MonoColour.white,\n                                }}\n                                variant=\"contained\"\n                                component=\"span\"\n                            >\n                                {' '}\n                            </Button>\n                        </Tooltip>\n                    </label>\n                </div>\n                <TextField\n                    error={!hexTemp?.match(/^#[0-9a-fA-F]{6}$/g)}\n                    style={{ width: 85 }}\n                    onChange={hexChange}\n                    value={hexTemp?.toUpperCase()}\n                />\n            </ListItem>\n            <Divider variant=\"middle\" />\n            <ListItem>\n                <ListItemText primary={t('colour.fg')} />\n                <Select\n                    native\n                    style={{ width: 85 }}\n                    label={t('colour.fg')}\n                    onChange={fgChange}\n                    value={props.theme[3] || MonoColour.white}\n                >\n                    <option value=\"#fff\">{t('colour.fgWhite')}</option>\n                    <option value=\"#000\">{t('colour.fgBlack')}</option>\n                </Select>\n            </ListItem>\n        </List>\n    );\n};\n\nconst CitySelectItem = (props: { value: string; onChange: (event: React.ChangeEvent<HTMLInputElement>) => void }) => {\n    const { t, i18n } = useTranslation();\n    const classes = useStyles();\n\n    const items = useMemo(\n        () =>\n            cityList.map(c => (\n                <MenuItem key={c.id} value={c.id}>\n                    <span className={classes.cityItem}>\n                        <CountryFlag code={c.country} />\n                        <span>{getTransText2(c.name, i18n.languages as LanguageCode[])}</span>\n                    </span>\n                </MenuItem>\n            )),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n    return (\n        <ListItem>\n            <ListItemText primary={t('colour.city')} />\n            <TextField select style={{ width: 166 }} value={props.value} onChange={props.onChange}>\n                {items}\n            </TextField>\n        </ListItem>\n    );\n};\n\nconst useEmojiStyles = makeStyles(() =>\n    createStyles({\n        img: {\n            height: 20,\n            marginRight: '0.2rem',\n        },\n    })\n);\n\n/**\n * Convert ISO 3166 alpha-2 country code (followed by BS 6879 UK subdivision code, if applicable) to flag Emoji. For Windows platform, an `img` element with image source from OpenMoji is returned.\n */\nfunction CountryFlag(props: { code: string }) {\n    const { i18n } = useTranslation();\n    const classes = useEmojiStyles();\n\n    let codePoints = [] as string[];\n\n    if (props.code.length === 2) {\n        codePoints = props.code\n            .toUpperCase()\n            .split('')\n            .map(char => ((char.codePointAt(0) || 0) + 127397).toString(16).toUpperCase());\n    } else {\n        codePoints = ['1F3F4'].concat(\n            props.code\n                .toUpperCase()\n                .split('')\n                .map(char => ((char.codePointAt(0) || 0) + 917536).toString(16).toUpperCase()),\n            'E007F'\n        );\n    }\n\n    // special case for simplified Chinese\n    if ([LanguageCode.ChineseCN, LanguageCode.ChineseSimp].includes(i18n.language as LanguageCode) && props.code === 'TW') codePoints = ['1F3F4'];\n\n    return navigator.platform.indexOf('Win32') !== -1 || navigator.platform.indexOf('Win64') !== -1 ? (\n        <img\n            src={process.env.PUBLIC_URL + `/images/flags/${codePoints.join('-')}.svg`}\n            className={classes.img}\n            alt={`Flag of ${props.code}`}\n        />\n    ) : (\n        // <img src={process.env.PUBLIC_URL + `/images/flags/${codePoints.join('-')}.svg`} className={classes.img} />\n        <span>{String.fromCodePoint(...codePoints.map(cp => parseInt(cp, 16)))}</span>\n    );\n}\n","import React, { useContext, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n    Button,\n    Chip,\n    createStyles,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Divider,\n    Icon,\n    InputBase,\n    List,\n    ListItem,\n    ListItemText,\n    makeStyles,\n    Paper,\n    Tab,\n    Tabs,\n} from '@material-ui/core';\nimport { CustomPanel, PalettePanel } from './theme-items';\nimport { ParamContext } from '../../context';\nimport { InterchangeInfo, MonoColour, Name, Theme } from '../../constants/constants';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        contentWrapper: {\n            display: 'flex',\n            overflow: 'hidden',\n            paddingTop: theme.spacing(1),\n            paddingBottom: theme.spacing(1),\n            paddingLeft: theme.spacing(3),\n            paddingRight: theme.spacing(3),\n            [theme.breakpoints.down('xs')]: {\n                flexDirection: 'column',\n            },\n        },\n        contentLeft: {\n            maxWidth: 280,\n        },\n        contentControl: {\n            flexGrow: 0,\n            flexShrink: 0,\n            display: 'flex',\n            flexDirection: 'column',\n            width: 270,\n        },\n\n        paperRoot: {\n            maxWidth: 250,\n        },\n        listItemPaper: {\n            justifyContent: 'center',\n        },\n        iconRoot: {\n            position: 'absolute',\n            color: theme.palette.action.active,\n        },\n        inputBaseRoot: {\n            display: 'block',\n        },\n        inputBaseInputZH: {\n            textAlign: 'center',\n            fontSize: 36,\n            padding: 0,\n            paddingTop: 6,\n            height: 45,\n        },\n        inputBaseInputEN: {\n            textAlign: 'center',\n            fontSize: 18,\n            padding: 0,\n            paddingBottom: 6,\n            height: 'auto',\n        },\n\n        chipWrapper: {\n            overflowX: 'auto',\n            display: 'flex',\n        },\n        chipRoot: {\n            borderRadius: 4.5,\n            height: 32,\n            lineHeight: '1rem',\n            margin: 2,\n        },\n        chipLabel: {\n            padding: '0 6px',\n            '& > span': {\n                display: 'block',\n                textAlign: 'center',\n            },\n            '& > span:first-child': {\n                fontSize: '1rem',\n            },\n            '& > span:last-child': {\n                lineHeight: '0.8rem',\n            },\n        },\n    })\n);\n\ninterface Props {\n    open: boolean;\n    theme: Theme;\n    lineName: Name;\n    onUpdate: (key: string, value: any) => void;\n    onClose: () => void;\n}\n\nconst Dialog2 = (props: Props) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    return (\n        <Dialog open={props.open} onClose={props.onClose}>\n            <DialogTitle>{t('colour.title')}</DialogTitle>\n            <DialogContent className={classes.contentWrapper}>\n                <List component=\"div\" disablePadding className={classes.contentLeft}>\n                    <LineNameInput theme={props.theme} lineName={props.lineName} onUpdate={props.onUpdate} />\n                    <Divider />\n                    <RecentChipSet onUpdate={props.onUpdate} />\n                </List>\n                <div className={classes.contentControl}>\n                    <ColourControl theme={props.theme} onUpdate={props.onUpdate} />\n                </div>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose} color=\"primary\">\n                    {t('dialog.done')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default Dialog2;\n\nconst LineNameInput = (props: { lineName: Name; theme: Theme; onUpdate: Props['onUpdate'] }) => {\n    const classes = useStyles();\n\n    const nameChange = (value: string, index: number) => {\n        let newName = props.lineName.map((val, idx) => (idx === index ? value : val));\n        props.onUpdate('name', newName);\n    };\n\n    return (\n        <ListItem style={{ justifyContent: 'center' }}>\n            <Paper className={classes.paperRoot} style={{ backgroundColor: props.theme[2] }}>\n                <Icon className={classes.iconRoot}>edit</Icon>\n                <InputBase\n                    value={props.lineName[0]}\n                    classes={{\n                        root: classes.inputBaseRoot,\n                        input: classes.inputBaseInputZH,\n                    }}\n                    style={{ color: props.theme[3] || MonoColour.white }}\n                    onChange={e => nameChange(e.target.value, 0)}\n                    autoFocus\n                />\n                <InputBase\n                    value={props.lineName[1]}\n                    classes={{\n                        root: classes.inputBaseRoot,\n                        input: classes.inputBaseInputEN,\n                    }}\n                    style={{ color: props.theme[3] || MonoColour.white }}\n                    onChange={e => nameChange(e.target.value, 1)}\n                />\n            </Paper>\n        </ListItem>\n    );\n};\n\nconst RecentChipSet = (props: { onUpdate: Props['onUpdate'] }) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const { param } = useContext(ParamContext);\n\n    const allInfos = useMemo(\n        () =>\n            new Set(\n                Object.values(param.stn_list)\n                    .reduce(\n                        (acc, { transfer }) => {\n                            const { info } = transfer;\n                            return acc.concat(...info);\n                        },\n                        [[...param.theme, ...param.line_name] as InterchangeInfo]\n                    )\n                    .map(val => JSON.stringify(val))\n                    .reverse()\n            ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n\n    const chips = useMemo(\n        () =>\n            [...allInfos].map((x, i) => {\n                const info: InterchangeInfo = JSON.parse(x);\n                const label = info.slice(4).map((txt, i) => (\n                    <span key={i} style={{ color: info[3] }}>\n                        {txt}\n                    </span>\n                ));\n\n                return (\n                    <Chip\n                        key={i}\n                        onClick={() => {\n                            props.onUpdate('theme', info.slice(0, 4));\n                            props.onUpdate('name', info.slice(4));\n                        }}\n                        style={{ backgroundColor: info[2] }}\n                        className={classes.chipRoot}\n                        classes={{ label: classes.chipLabel }}\n                        {...{ label }}\n                    />\n                );\n            }),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n\n    return (\n        <ListItem>\n            <ListItemText\n                primary={t('colour.recent')}\n                secondary={chips}\n                secondaryTypographyProps={{ component: 'div' }}\n                classes={{ secondary: classes.chipWrapper }}\n            />\n        </ListItem>\n    );\n};\n\nconst ColourControl = (props: { theme: Theme; onUpdate: Props['onUpdate'] }) => {\n    const { t } = useTranslation();\n    const [tabIndex, setTabIndex] = useState(props.theme[0] === 'other' ? 1 : 0);\n\n    const tabNav = (\n        <Tabs\n            value={tabIndex}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            onChange={(_, val) => setTabIndex(val)}\n            variant=\"fullWidth\"\n            scrollButtons=\"off\"\n        >\n            <Tab label={t('colour.palette')} style={{ minWidth: 'unset' }} />\n            <Tab label={t('colour.custom')} style={{ minWidth: 'unset' }} />\n        </Tabs>\n    );\n\n    const panel = (idx => {\n        switch (idx) {\n            case 0:\n                return <PalettePanel {...props} />;\n            case 1:\n                return <CustomPanel {...props} />;\n            default:\n                return <></>;\n        }\n    })(tabIndex);\n\n    return (\n        <>\n            {tabNav}\n            {panel}\n        </>\n    );\n};\n","import ColourDialog from './dialog';\n\nexport default ColourDialog;"],"sourceRoot":""}