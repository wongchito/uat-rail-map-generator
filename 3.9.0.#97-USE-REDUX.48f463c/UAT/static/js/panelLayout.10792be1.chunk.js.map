{"version":3,"sources":["panels/layout/common.tsx","panels/layout/panel.tsx","panels/layout/index.ts"],"names":["useStyles","makeStyles","theme","createStyles","nestedList","paddingLeft","spacing","textField","maxWidth","slider","width","marginLeft","marginRight","memo","rmgStyle","useSelector","store","app","SizeLi","t","useTranslation","classes","useContext","ParamContext","param","dispatch","useState","isOpen","setIsOpen","useMemo","button","onClick","prevOpen","primary","color","in","unmountOnExit","component","disablePadding","className","canvasConfig","map","canvas","Fragment","value","svgWidth","toString","onChange","e","isNaN","Number","target","type","targetId","InputProps","endAdornment","position","variant","svg_height","JSON","stringify","YLi","y_pc","_","step","marks","label","valueLabelDisplay","BranchSpacingLi","branch_spacing","PaddingLi","padding","max","LayoutGZMTR","React","lazy","container","justify","alignItems","item","xs","sm","md","lg","RmgStyle","GZMTR","Suspense","fallback","Panel"],"mappings":"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","file":"static/js/panelLayout.10792be1.chunk.js","sourcesContent":["import React, { useState, useContext, useMemo, memo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    TextField,\n    Slider,\n    List,\n    ListItem,\n    ListItemIcon,\n    Icon,\n    ListItemText,\n    makeStyles,\n    createStyles,\n    Collapse,\n    Divider,\n    InputAdornment,\n} from '@material-ui/core';\nimport { ParamContext } from '../../context';\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../redux\";\nimport { canvasConfig } from \"../../constants/constants\";\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        nestedList: {\n            paddingLeft: theme.spacing(5),\n        },\n        textField: {\n            maxWidth: 168,\n        },\n        slider: {\n            width: 168,\n            marginLeft: 8,\n            marginRight: 8,\n        },\n    })\n);\n\nexport default memo(function LayoutCommon() {\n    const rmgStyle = useSelector((store: RootState) => store.app.rmgStyle);\n    return (\n        <>\n            <SizeLi />\n            <Divider />\n            {rmgStyle !== 'shmetro' && (\n                <>\n                    <YLi />\n                    <Divider />\n                </>\n            )}\n            <BranchSpacingLi />\n            <Divider />\n            <PaddingLi />\n        </>\n    );\n});\n\nconst SizeLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const { param, dispatch } = useContext(ParamContext);\n\n    const rmgStyle = useSelector((store: RootState) => store.app.rmgStyle);\n\n    const [isOpen, setIsOpen] = useState(false);\n\n    return useMemo(\n        () => (\n            <>\n                <ListItem button onClick={() => setIsOpen(prevOpen => !prevOpen)}>\n                    <ListItemIcon>\n                        <Icon>panorama_horizontal</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('layout.size.title')} />\n                    {isOpen ? <Icon color=\"action\">expand_less</Icon> : <Icon color=\"action\">expand_more</Icon>}\n                </ListItem>\n                <Collapse in={isOpen} unmountOnExit>\n                    <List component=\"div\" disablePadding className={classes.nestedList}>\n                        {canvasConfig[rmgStyle].map(canvas => (\n                            <React.Fragment key={canvas}>\n                                <ListItem>\n                                    <ListItemText primary={t('layout.size.width.' + canvas)} />\n                                    <TextField\n                                        value={param.svgWidth[canvas].toString()}\n                                        onChange={e =>\n                                            !isNaN(Number(e.target.value)) &&\n                                            dispatch({\n                                                type: 'SET_WIDTH',\n                                                targetId: canvas,\n                                                value: Number(e.target.value),\n                                            })\n                                        }\n                                        className={classes.textField}\n                                        InputProps={{\n                                            endAdornment: <InputAdornment position=\"end\">px</InputAdornment>,\n                                        }}\n                                    />\n                                </ListItem>\n                                <Divider variant=\"middle\" />\n                            </React.Fragment>\n                        ))}\n                        <ListItem>\n                            <ListItemText primary={t('layout.size.height')} />\n                            <TextField\n                                value={param.svg_height.toString()}\n                                onChange={e =>\n                                    !isNaN(Number(e.target.value)) &&\n                                    dispatch({ type: 'SET_HEIGHT', value: Number(e.target.value) })\n                                }\n                                className={classes.textField}\n                                InputProps={{\n                                    endAdornment: <InputAdornment position=\"end\">px</InputAdornment>,\n                                }}\n                            />\n                        </ListItem>\n                    </List>\n                </Collapse>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [JSON.stringify(param.svgWidth), param.svg_height, isOpen, classes.nestedList]\n    );\n};\n\nconst YLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const { param, dispatch } = useContext(ParamContext);\n\n    return useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>vertical_align_center</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('layout.y')} />\n                <Slider\n                    className={classes.slider}\n                    value={param.y_pc}\n                    onChange={(_, value) => dispatch({ type: 'SET_Y', value: value as number })}\n                    step={0.01}\n                    marks={[\n                        { value: 0, label: '0%' },\n                        { value: 100, label: '100%' },\n                    ]}\n                    valueLabelDisplay=\"auto\"\n                />\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.y_pc, classes.slider]\n    );\n};\n\nconst BranchSpacingLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const { param, dispatch } = useContext(ParamContext);\n\n    return useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>format_line_spacing</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('layout.branchSpacing')} />\n                <Slider\n                    className={classes.slider}\n                    value={param.branch_spacing}\n                    onChange={(_, value) => dispatch({ type: 'SET_BRANCH_SPACING', value: value as number })}\n                    step={0.01}\n                    marks={[\n                        { value: 0, label: '0px' },\n                        { value: 100, label: '100px' },\n                    ]}\n                    valueLabelDisplay=\"auto\"\n                />\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.branch_spacing, classes.slider]\n    );\n};\n\nconst PaddingLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const { param, dispatch } = useContext(ParamContext);\n\n    return useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>stay_current_landscape</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('layout.padding')} />\n                <Slider\n                    className={classes.slider}\n                    value={param.padding}\n                    onChange={(_, value) => dispatch({ type: 'SET_PADDING', value: value as number })}\n                    step={0.01}\n                    max={50}\n                    marks={[\n                        { value: 0, label: '0%' },\n                        { value: 50, label: '50%' },\n                    ]}\n                    valueLabelDisplay=\"auto\"\n                />\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.padding, classes.slider]\n    );\n};\n","import React from 'react';\n\nimport { Grid, LinearProgress, List, Paper } from '@material-ui/core';\n\nimport LayoutCommon from './common';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../redux';\nimport { RmgStyle } from '../../constants/constants';\n\nconst LayoutGZMTR = React.lazy(() => import(/* webpackChunkName: \"panelLayoutGZMTR\" */ './gzmtr'));\n\nexport default React.memo(function LayoutPanel() {\n    const rmgStyle = useSelector((store: RootState) => store.app.rmgStyle);\n    return (\n        <Grid container spacing={3} justify=\"center\" alignItems=\"flex-start\">\n            <Grid item xs={12} sm={10} md={7} lg={5}>\n                <Paper>\n                    <List component=\"div\" disablePadding>\n                        <LayoutCommon />\n                        {rmgStyle === RmgStyle.GZMTR && (\n                            <React.Suspense fallback={<LinearProgress />}>\n                                <LayoutGZMTR />\n                            </React.Suspense>\n                        )}\n                    </List>\n                </Paper>\n            </Grid>\n        </Grid>\n    );\n});\n\n// export default LayoutPanel;\n","import Panel from './panel';\n\nexport default Panel;"],"sourceRoot":""}