{"version":3,"sources":["constants/constants.ts","../external \"React\"","../external \"MaterialUI\"","redux/param/action.ts","redux/app/action.ts","../external \"ReactRedux\"","../external \"ReactI18next\"","../external \"ReactRouterDOM\"","methods.ts","../external \"Redux\"","utils.ts","../external \"i18next\"","context.ts","constants/city-config.ts","../external \"ReactDOM\"","../external \"i18nextXHRBackend\"","../external \"i18nextBrowserLanguageDetector\"","../external \"ReduxThunk\"","i18n.ts","app-appbar.tsx","error-boundary.tsx","svgs/svg.tsx","svgs/index.ts","panels/panels.tsx","panels/index.tsx","App.tsx","serviceWorker.ts","util/storage/storageService.ts","util/storage/storageLocalStorage.ts","util/storage/index.ts","redux/app/reducer.ts","redux/param/reducer.ts","redux/index.ts","index.tsx","util/auto-save-scheduler.ts"],"names":["LoadingStatus","RmgStyle","CanvasType","Direction","ShortDirection","BranchStyle","MonoColour","Services","Facilities","PanelTypeGZMTR","PanelTypeShmetro","LanguageCode","AllCanvas","canvasConfig","MTR","Destination","RailMap","GZMTR","RunIn","SHMetro","Indoor","module","exports","React","MaterialUI","SET_FULL_PARAM","SET_SVG_HEIGHT","SET_SVG_WIDTH","SET_Y_PERCENTAGE","SET_BRANCH_SPACING","SET_PADDING_PERCENTAGE","SET_DIRECTION_INDICATOR_X","SET_DIRECTION_INDICATOR_Y","SET_THEME","SET_LINE_NAME","SET_DIRECTION","SET_PLATFORM","SET_LINE_NUM","SET_PSD_NUM","SET_PANEL_TYPE","SET_NOTES","SET_NAME_POSITION","SET_CUSTOMISED_MTR_DESTINATION","SET_CURRENT_STATION","SET_STATION","SET_STATIONS_BULK","setFullParam","fullParam","type","setSvgHeight","svgHeight","setSvgWidth","svgWidth","canvas","setYPercentage","yPercentage","setBranchSpacing","branchSpacing","setPaddingPercentage","paddingPercentage","setDirectionIndicatorX","directionIndicatorX","setDirectionIndicatorY","directionIndicatorY","setTheme","theme","setLineName","lineName","setDirection","direction","setPlatform","platform","setLineNum","lineNum","setPsdNum","psdNum","setPanelType","panelType","setNotes","notes","addNote","dispatch","getState","param","notesGZMTR","concat","updateNote","index","updatedNote","map","originalNote","idx","removeNote","filter","_","setNamePosition","namePosition","staggerStationNames","isStagger","namePosMTR","flipStationNames","isFlip","setCustomisedMtrDestination","customisedMtrDestination","toggleLineNameBeforeDestination","isShow","customiseMTRDest","isLegacy","customiseDestinationName","customisedName","terminal","setCurrentStation","currentStation","setStation","stationId","station","setStationsBulk","stations","reverseStations","stn_list","newStationList","Object","keys","reduce","acc","stnId","id","lineend","parents","children","slice","reverse","branch","left","right","linestart","updateStationName","name","stationInfo","updateStationSecondaryName","secondaryName","updateStationNum","num","addInterchange","setIndex","interchangeInfo","newTransferInfo","transfer","info","i","length","push","removeInterchange","interchangeIndex","set","setIdx","intIdx","updateInterchange","int","undefined","updateStationOsiName","osiName","newOsiNames","osi_names","updateStationTickDirection","tickDirection","tick_direc","updateStationPaidArea","isPaidArea","paid_area","updateStationBranchType","branchStyle","updateStationBranchFirstStation","branches","first","flipStationBranchPosition","updateStationFacility","facility","addStationService","service","services","includes","removeStationService","s","SET_RMG_STYLE","SET_CANVAS_SCALE","SET_CANVAS_SCALE_STATUS","SET_CANVAS_TO_SHOW","SET_CANVAS_TO_SHOW_STATUS","setRmgStyle","rmgStyle","setCanvasScale","canvasScale","setCanvasScaleStatus","canvasScaleStatus","zoomIn","a","loading","newScale","Number","app","toFixed","window","rmgStorage","writeFile","toString","loaded","failed","zoomOut","setCanvasToShow","canvasToShow","setCanvasToShowStatus","canvasToShowStatus","selectCanvas","ReactRedux","ReactI18next","ReactRouterDOM","getYShareMTR","stnList","stnPred","indexOf","getBranches","console","log","stack","branchCount","curId","shift","prevId","branchNextId","getRoutes","useTpo","useState","tpo","setTpo","useEffect","res","cur","Redux","updateParam","line_name","dest_legacy","fontZH","fontEN","weightZH","weightEN","entries","stnInfo","psd_num","line_num","style","interchange","arr","forEach","intInfo","splice","change_type","info_panel_type","direction_gz_x","direction_gz_y","split","usage","destination","svg_dest_width","runin","railmap","svg_width","indoor","note","char_form","show_outer","strip_pc","txt_bg_gap","txt_flip","join","getTransText2","obj","langs","l","English","formatStnName","replace","i18next","ParamContext","createContext","CityCode","cityList","Barcelona","country","en","Beijing","zh","Changsha","Chengdu","Chongqing","Dongguan","Edinburgh","ga","Foshan","Glasgow","Guangzhou","Hangzhou","HongKong","Kansai","ja","Kaohsiung","London","Macao","pt","Madrid","Nanjing","NewTaipei","Osaka","Oslo","Paris","Qingdao","SanFrancisco","Seoul","ko","Shanghai","Shenzhen","Singapore","Stockholm","Taipei","Tianjin","Tokyo","Toronto","TyneAndWear","Xian","Other","ReactDOM","i18nextXHRBackend","i18nextBrowserLanguageDetector","ReduxThunk","i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","default","backend","loadPath","process","interpolation","escapeValue","then","t","document","title","documentElement","setAttribute","language","useStyles","makeStyles","createStyles","rootLight","backgroundColor","palette","primary","main","rootDark","background","paper","flexGrow","color","menuButton","AppAppBar","useTranslation","classes","prefersDarkMode","useMediaQuery","position","className","variant","CanvasToggle","useDispatch","useSelector","store","canvasButtonEl","setCanvasButtonEl","handleClick","action","onClick","e","currentTarget","anchorEl","open","Boolean","onClose","c","margin","ZoomToggles","ErrorBoundary","props","state","hasError","error","errorInfo","this","Component","root","display","flexDirection","overflowX","content","flex","border","SVGs","svg_height","svgWidths","sharedProps","useCallback","xmlns","xmlnsXlink","height","viewBox","colorInterpolationFilters","JSON","stringify","values","path","StyleSpecificSVGs","canvasAvailable","canvasList","svgProps","to","memo","getElementById","href","Suspense","fallback","fill","width","strokeWidth","stroke","RunInGZMTR","lazy","RailMapGZMTR","DestinationMTR","RailMapMTR","DestinationSHMetro","RunInSHMetro","RailMapSHMetro","IndoorSHMetro","PanelSave","PanelLayout","PanelDesign","PanelStations","PanelInfo","breakpoints","down","typography","tab","padding","up","justifyContent","minWidth","minHeight","marginBottom","paddingLeft","tabs","overflow","scrollbarWidth","WebkitOverflowScrolling","tabpanel","spacing","paddingBottom","alignItems","PanelTab","useTheme","isMobile","value","setValue","tabNav","component","orientation","indicatorColor","textColor","onChange","val","scrollButtons","label","icon","role","panel","Panel","darkTheme","createMuiTheme","secondary","overrides","MuiDialog","lightTheme","light","App","basename","AppBody","paramString","deps","k","o","useMemo","routes","Provider","overflowY","location","hostname","match","StorageLocalStorage","currentBusyFilename","warn","localStorage","alert","Error","setItem","removeItem","filename","contents","getItem","indexedDB","Promise","resolve","request","onerror","err","onsuccess","initialState","y_pc","branch_spacing","platform_num","white","current_stn_idx","gz1","rootReducer","combineReducers","createStore","applyMiddleware","thunk","navigator","serviceWorker","ready","registration","unregister","catch","message","head","append","tag","link","createElement","rel","getRmgStorage","readFile","updatedParam","parse","canvasScaleString","rmgStore","setInterval"],"mappings":"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","file":"static/js/main.1db2bc60.chunk.js","sourcesContent":["import { CityCode } from './city-config';\n\nexport enum LoadingStatus {\n    init = 'init',\n    loading = 'loading',\n    loaded = 'loaded',\n    failed = 'failed',\n}\n\nexport enum RmgStyle {\n    MTR = 'mtr',\n    GZMTR = 'gzmtr',\n    SHMetro = 'shmetro',\n}\n\nexport enum CanvasType {\n    Destination = 'destination',\n    RunIn = 'runin',\n    RailMap = 'railmap',\n    Indoor = 'indoor',\n}\n\nexport const AllCanvas = 'all';\n\nexport const canvasConfig: { [s in RmgStyle]: CanvasType[] } = {\n    [RmgStyle.MTR]: [CanvasType.Destination, CanvasType.RailMap],\n    [RmgStyle.GZMTR]: [CanvasType.RunIn, CanvasType.RailMap],\n    [RmgStyle.SHMetro]: [CanvasType.Destination, CanvasType.RunIn, CanvasType.RailMap, CanvasType.Indoor],\n};\n\n/**\n * @property {string} 0 - Chinese characters\n * @property {string} 1 - Latin characters\n */\nexport type Name = [string, string];\n\nexport enum Direction {\n    left = 'left',\n    right = 'right',\n}\n\nexport enum ShortDirection {\n    left = 'l',\n    right = 'r',\n}\n\nexport enum BranchStyle {\n    through = 'through',\n    nonThrough = 'nonthrough',\n}\n\n/**\n * Information of branch on both side.\n * @property 0 - branch type\n * @property 1 - ID of the first station of the branch (should also be one of the station's parents/children) or empty\n */\nexport type BranchInfo = Record<Direction, [BranchStyle, string] | []>;\n\nexport enum MonoColour {\n    black = '#000',\n    white = '#fff',\n}\n\nexport type ColourHex = `#${string}`;\n\n/**\n * Colour theme of line, derived from `LineEntry`.\n * @property 0 - city id\n * @property 1 - line id\n * @property 2 - background colour\n * @property 3 - foreground colour\n */\nexport type Theme = [CityCode, string, ColourHex, MonoColour];\n\nexport type InterchangeInfo = [...Theme, ...Name];\n\nexport interface StationTransfer {\n    /**\n     * Direction of text/tick of interchanges.\n     */\n    tick_direc: ShortDirection;\n    /**\n     * Flag of paid area within out-of-station interchange.\n     */\n    paid_area: boolean;\n    /**\n     * Array of name (in two languages) of all out-of-station interchange stations.\n     */\n    osi_names: Name[];\n    /**\n     * Array of arrays of interchange info.\n     * @property 0 - array of within-station interchange info\n     * @property remaining - arrays of out-of-station interchange info (from the nearest to the furthest station)\n     */\n    info: InterchangeInfo[][];\n}\n\nexport enum Services {\n    local = 'local',\n    express = 'express',\n    direct = 'direct',\n}\n\nexport enum Facilities {\n    airport = 'airport',\n    disney = 'disney',\n    hsr = 'hsr',\n    none = '',\n}\n\nexport interface StationInfo {\n    /**\n     * Station name in two languages.\n     */\n    name: Name;\n    secondaryName: false | Name;\n    /**\n     * Station number. (GZMTR specific)\n     */\n    num: string;\n    /**\n     * Dictionary of the information of branch on the station's both side.\n     */\n    branch: BranchInfo;\n    /**\n     * Array of parents' IDs.\n     */\n    parents: string[];\n    /**\n     * Array of children's IDs.\n     */\n    children: string[];\n    /**\n     * Detail of interchanges.\n     */\n    transfer: StationTransfer;\n    /**\n     * Array of services at this station.\n     */\n    services: Services[];\n    /**\n     * Facility near the station\n     */\n    facility: Facilities;\n}\n\nexport type StationDict = Record<string, StationInfo>;\n\nexport enum PanelTypeGZMTR {\n    gz1 = 'gz1',\n    gz28 = 'gz28',\n    gz2otis = 'gz2otis',\n    gz3 = 'gz3',\n    gz4 = 'gz4',\n    gz5 = 'gz5',\n    gz1421 = 'gz1421',\n    gz6 = 'gz6',\n    gzgf = 'gzgf',\n}\n\nexport enum PanelTypeShmetro {\n    sh = 'sh',\n    sh2020 = 'sh2020',\n}\n\n/**\n * Dictionary of configuration parameters for RMG, stored in `localStorage` as string.\n */\nexport interface RMGParam {\n    svgWidth: Record<CanvasType, number>;\n    svg_height: number;\n    /**\n     * Vertical position (in percentage) of line.\n     */\n    y_pc: number;\n    /**\n     * Left and right margin of line (in percentage).\n     */\n    padding: number;\n    /**\n     * Branch spacing (in pixels) of line.\n     */\n    branch_spacing: number;\n    direction: ShortDirection;\n    platform_num: string | false;\n    theme: Theme;\n    line_name: Name;\n    current_stn_idx: keyof StationDict;\n    /**\n     * Key-value pairs of the information of each station.\n     */\n    stn_list: StationDict;\n    namePosMTR: {\n        /**\n         * Flag of whether station names staggered. If false, place name above line.\n         */\n        isStagger: boolean;\n        /**\n         * Flag of flipping station names.\n         * When `isStagger === false`, names are above line if `isFlip === false`.\n         */\n        isFlip: boolean;\n    };\n    /**\n     * Customise destination sign of MTR style.\n     */\n    customiseMTRDest: {\n        /**\n         * Flag of legacy style. (Show line name before 'to').\n         */\n        isLegacy: boolean;\n        /**\n         * Customise terminal stations.\n         */\n        terminal: false | Name;\n    };\n    line_num: string;\n    psd_num: string;\n    info_panel_type: PanelTypeGZMTR | PanelTypeShmetro;\n    notesGZMTR: Note[];\n    direction_gz_x: number;\n    direction_gz_y: number;\n}\n\n/**\n * Array of a single note entry for Guangzhou Metro style.\n * @property 0 - text in Chinese characters\n * @property 1 - text in Latin characters\n * @property 2 - percentage of horizontal position\n * @property 3 - percentage of vertical position\n * @property 4 - flag of showing border\n */\nexport type Note = [...Name, number, number, boolean];\n\nexport enum LanguageCode {\n    Catalan = 'ca',\n    English = 'en',\n    Spanish = 'es',\n    French = 'fr',\n    Gaelic = 'ga',\n    Japanese = 'ja',\n    Korean = 'ko',\n    Norwegian = 'no',\n    Portuguese = 'pt',\n    Swedish = 'sv',\n    Chinese = 'zh',\n    ChineseCN = 'zh-CN',\n    ChineseSimp = 'zh-Hans',\n    ChineseTrad = 'zh-Hant',\n    ChineseHK = 'zh-HK',\n    ChineseTW = 'zh-TW',\n}\n\nexport type Translation = { [l in LanguageCode]?: string };\n\nexport interface PaletteEntry {\n    /**\n     * ID of line.\n     */\n    id: string;\n    /**\n     * Key-value pairs of multi-lingual names of the line.\n     */\n    name: Translation;\n    /**\n     * Background colour (in #HEX).\n     */\n    colour: ColourHex;\n    /**\n     * Foreground colour. Mandatory field if foreground colour is black.\n     */\n    fg?: MonoColour;\n    /**\n     * Pantone colour. If defined, colour is converted with Pantone Color Finder (https://www.pantone.com/color-finder).\n     */\n    pantone?: string;\n}\n","module.exports = React;","module.exports = MaterialUI;","import {\n    BranchStyle,\n    CanvasType,\n    Direction,\n    Facilities,\n    InterchangeInfo,\n    Name,\n    Note,\n    PanelTypeGZMTR,\n    PanelTypeShmetro,\n    RMGParam,\n    Services,\n    ShortDirection,\n    StationDict,\n    StationInfo,\n    Theme,\n} from '../../constants/constants';\nimport { Dispatch } from 'redux';\nimport { RootState } from '../index';\n\nexport const SET_FULL_PARAM = 'SET_FULL_PARAM';\n\n// layout\nexport const SET_SVG_HEIGHT = 'SET_SVG_HEIGHT';\nexport const SET_SVG_WIDTH = 'SET_SVG_WIDTH';\nexport const SET_Y_PERCENTAGE = 'SET_Y_PERCENTAGE';\nexport const SET_BRANCH_SPACING = 'SET_BRANCH_SPACING';\nexport const SET_PADDING_PERCENTAGE = 'SET_PADDING_PERCENTAGE';\nexport const SET_DIRECTION_INDICATOR_X = 'SET_DIRECTION_INDICATOR_X';\nexport const SET_DIRECTION_INDICATOR_Y = 'SET_DIRECTION_INDICATOR_Y';\n\n// design\nexport const SET_THEME = 'SET_THEME';\nexport const SET_LINE_NAME = 'SET_LINE_NAME';\nexport const SET_DIRECTION = 'SET_DIRECTION';\nexport const SET_PLATFORM = 'SET_PLATFORM';\nexport const SET_LINE_NUM = 'SET_LINE_NUM';\nexport const SET_PSD_NUM = 'SET_PSD_NUM';\nexport const SET_PANEL_TYPE = 'SET_PANEL_TYPE';\nexport const SET_NOTES = 'SET_NOTES';\nexport const SET_NAME_POSITION = 'SET_NAME_POSITION';\nexport const SET_CUSTOMISED_MTR_DESTINATION = 'SET_CUSTOMISED_MTR_DESTINATION';\n\n// stations\nexport const SET_CURRENT_STATION = 'SET_CURRENT_STATION';\nexport const SET_STATION = 'SET_STATION';\nexport const SET_STATIONS_BULK = 'SET_STATIONS_BULK';\n\nexport interface setFullParamAction {\n    type: typeof SET_FULL_PARAM;\n    fullParam: RMGParam;\n}\n\nexport interface setSvgHeightAction {\n    type: typeof SET_SVG_HEIGHT;\n    svgHeight: number;\n}\n\nexport interface setSvgWidthAction {\n    type: typeof SET_SVG_WIDTH;\n    svgWidth: number;\n    canvas: CanvasType;\n}\n\nexport interface setYPercentageAction {\n    type: typeof SET_Y_PERCENTAGE;\n    yPercentage: number;\n}\n\nexport interface setBranchSpacingAction {\n    type: typeof SET_BRANCH_SPACING;\n    branchSpacing: number;\n}\n\nexport interface setPaddingPercentageAction {\n    type: typeof SET_PADDING_PERCENTAGE;\n    paddingPercentage: number;\n}\n\nexport interface setDirectionIndicatorXAction {\n    type: typeof SET_DIRECTION_INDICATOR_X;\n    directionIndicatorX: number;\n}\n\nexport interface setDirectionIndicatorYAction {\n    type: typeof SET_DIRECTION_INDICATOR_Y;\n    directionIndicatorY: number;\n}\n\nexport interface setThemeAction {\n    type: typeof SET_THEME;\n    theme: Theme;\n}\n\nexport interface setLineNameAction {\n    type: typeof SET_LINE_NAME;\n    lineName: Name;\n}\n\nexport interface setDirectionAction {\n    type: typeof SET_DIRECTION;\n    direction: ShortDirection;\n}\n\nexport interface setPlatformAction {\n    type: typeof SET_PLATFORM;\n    platform: string | false;\n}\n\nexport interface setLineNumAction {\n    type: typeof SET_LINE_NUM;\n    lineNum: string;\n}\n\nexport interface setPsdNumAction {\n    type: typeof SET_PSD_NUM;\n    psdNum: string;\n}\n\nexport interface setPanelTypeAction {\n    type: typeof SET_PANEL_TYPE;\n    panelType: PanelTypeGZMTR | PanelTypeShmetro;\n}\n\nexport interface setNotesAction {\n    type: typeof SET_NOTES;\n    notes: Note[];\n}\n\nexport interface setNamePositionAction {\n    type: typeof SET_NAME_POSITION;\n    namePosition: RMGParam['namePosMTR'];\n}\n\nexport interface setCustomisedMtrDestinationAction {\n    type: typeof SET_CUSTOMISED_MTR_DESTINATION;\n    customisedMtrDestination: RMGParam['customiseMTRDest'];\n}\n\nexport interface setCurrentStationAction {\n    type: typeof SET_CURRENT_STATION;\n    currentStation: string;\n}\n\nexport interface setStationAction {\n    type: typeof SET_STATION;\n    stationId: string;\n    station: StationInfo;\n}\n\nexport interface setStationsBulkAction {\n    type: typeof SET_STATIONS_BULK;\n    stations: StationDict;\n}\n\nexport const setFullParam = (fullParam: RMGParam): setFullParamAction => {\n    return { type: SET_FULL_PARAM, fullParam };\n};\n\nexport const setSvgHeight = (svgHeight: number): setSvgHeightAction => {\n    return { type: SET_SVG_HEIGHT, svgHeight };\n};\n\nexport const setSvgWidth = (svgWidth: number, canvas: CanvasType): setSvgWidthAction => {\n    return { type: SET_SVG_WIDTH, svgWidth, canvas };\n};\n\nexport const setYPercentage = (yPercentage: number): setYPercentageAction => {\n    return { type: SET_Y_PERCENTAGE, yPercentage };\n};\n\nexport const setBranchSpacing = (branchSpacing: number): setBranchSpacingAction => {\n    return { type: SET_BRANCH_SPACING, branchSpacing };\n};\n\nexport const setPaddingPercentage = (paddingPercentage: number): setPaddingPercentageAction => {\n    return { type: SET_PADDING_PERCENTAGE, paddingPercentage };\n};\n\nexport const setDirectionIndicatorX = (directionIndicatorX: number): setDirectionIndicatorXAction => {\n    return { type: SET_DIRECTION_INDICATOR_X, directionIndicatorX };\n};\n\nexport const setDirectionIndicatorY = (directionIndicatorY: number): setDirectionIndicatorYAction => {\n    return { type: SET_DIRECTION_INDICATOR_Y, directionIndicatorY };\n};\n\nexport const setTheme = (theme: Theme): setThemeAction => {\n    return { type: SET_THEME, theme };\n};\n\nexport const setLineName = (lineName: Name): setLineNameAction => {\n    return { type: SET_LINE_NAME, lineName };\n};\n\nexport const setDirection = (direction: ShortDirection): setDirectionAction => {\n    return { type: SET_DIRECTION, direction };\n};\n\nexport const setPlatform = (platform: string | false): setPlatformAction => {\n    return { type: SET_PLATFORM, platform };\n};\n\nexport const setLineNum = (lineNum: string): setLineNumAction => {\n    return { type: SET_LINE_NUM, lineNum };\n};\n\nexport const setPsdNum = (psdNum: string): setPsdNumAction => {\n    return { type: SET_PSD_NUM, psdNum };\n};\n\nexport const setPanelType = (panelType: PanelTypeShmetro | PanelTypeGZMTR): setPanelTypeAction => {\n    return { type: SET_PANEL_TYPE, panelType };\n};\n\nconst setNotes = (notes: Note[]): setNotesAction => {\n    return { type: SET_NOTES, notes };\n};\n\nexport const addNote = () => {\n    return (dispatch: Dispatch, getState: () => RootState) => {\n        const notes = getState().param.notesGZMTR;\n        dispatch(setNotes(notes.concat([['', '', 0, 0, false]])));\n    };\n};\n\nexport const updateNote = (index: number, updatedNote: Note) => {\n    return (dispatch: Dispatch, getState: () => RootState) => {\n        const notes = getState().param.notesGZMTR;\n        dispatch(setNotes(notes.map((originalNote, idx) => (idx === index ? updatedNote : originalNote))));\n    };\n};\n\nexport const removeNote = (index: number) => {\n    return (dispatch: Dispatch, getState: () => RootState) => {\n        const notes = getState().param.notesGZMTR;\n        dispatch(setNotes(notes.filter((_, idx) => idx !== index)));\n    };\n};\n\nconst setNamePosition = (namePosition: RMGParam['namePosMTR']): setNamePositionAction => {\n    return { type: SET_NAME_POSITION, namePosition };\n};\n\nexport const staggerStationNames = (isStagger: boolean) => {\n    return (dispatch: Dispatch, getState: () => RootState) => {\n        const namePosition = getState().param.namePosMTR;\n        dispatch(setNamePosition({ ...namePosition, isStagger }));\n    };\n};\n\nexport const flipStationNames = () => {\n    return (dispatch: Dispatch, getState: () => RootState) => {\n        const namePosition = getState().param.namePosMTR;\n        dispatch(setNamePosition({ ...namePosition, isFlip: !namePosition.isFlip }));\n    };\n};\n\nconst setCustomisedMtrDestination = (\n    customisedMtrDestination: RMGParam['customiseMTRDest']\n): setCustomisedMtrDestinationAction => {\n    return { type: SET_CUSTOMISED_MTR_DESTINATION, customisedMtrDestination };\n};\n\nexport const toggleLineNameBeforeDestination = (isShow: boolean) => {\n    return (dispatch: Dispatch, getState: () => RootState) => {\n        const customisedMtrDestination = getState().param.customiseMTRDest;\n        dispatch(setCustomisedMtrDestination({ ...customisedMtrDestination, isLegacy: isShow }));\n    };\n};\n\nexport const customiseDestinationName = (customisedName: Name | false) => {\n    return (dispatch: Dispatch, getState: () => RootState) => {\n        const customisedMtrDestination = getState().param.customiseMTRDest;\n        dispatch(setCustomisedMtrDestination({ ...customisedMtrDestination, terminal: customisedName }));\n    };\n};\n\nexport const setCurrentStation = (currentStation: string): setCurrentStationAction => {\n    return { type: SET_CURRENT_STATION, currentStation };\n};\n\nconst setStation = (stationId: string, station: StationInfo): setStationAction => {\n    return { type: SET_STATION, stationId, station };\n};\n\nexport const setStationsBulk = (stations: StationDict): setStationsBulkAction => {\n    return { type: SET_STATIONS_BULK, stations };\n};\n\nexport const reverseStations = () => {\n    return (dispatch: Dispatch, getState: () => RootState) => {\n        const { stn_list } = getState().param;\n        const newStationList = Object.keys(stn_list).reduce(\n            (acc, stnId) => ({\n                ...acc,\n                [stnId]: (id => {\n                    switch (id) {\n                        case 'linestart':\n                            return {\n                                ...stn_list.lineend,\n                                parents: [],\n                                children: stn_list.lineend.parents.slice().reverse(),\n                                branch: { left: [] as [], right: stn_list.lineend.branch.left },\n                            };\n                        case 'lineend':\n                            return {\n                                ...stn_list.linestart,\n                                parents: stn_list.linestart.children.slice().reverse(),\n                                children: [],\n                                branch: { left: stn_list.linestart.branch.right, right: [] as [] },\n                            };\n                        default:\n                            return {\n                                ...stn_list[id],\n                                parents: stn_list[id].children\n                                    .map(id => (id === 'linestart' ? 'lineend' : id === 'lineend' ? 'linestart' : id))\n                                    .reverse(),\n                                children: stn_list[id].parents\n                                    .map(id => (id === 'linestart' ? 'lineend' : id === 'lineend' ? 'linestart' : id))\n                                    .reverse(),\n                                branch: {\n                                    left: stn_list[id].branch.right,\n                                    right: stn_list[id].branch.left,\n                                },\n                            };\n                    }\n                })(stnId),\n            }),\n            {} as StationDict\n        );\n        dispatch(setStationsBulk(newStationList));\n    };\n};\n\nexport const updateStationName = (stationId: string, name: Name) => {\n    return (dispatch: Dispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(setStation(stationId, { ...stationInfo, name }));\n    };\n};\n\nexport const updateStationSecondaryName = (stationId: string, secondaryName: Name | false) => {\n    return (dispatch: Dispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(setStation(stationId, { ...stationInfo, secondaryName }));\n    };\n};\n\nexport const updateStationNum = (stationId: string, num: string) => {\n    return (dispatch: Dispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(setStation(stationId, { ...stationInfo, num }));\n    };\n};\n\n/**\n *\n * @param stationId\n * @param setIndex - set 0: within-station interchange. set 1: Out of station(OSI) transfer. set 2: Out of system(OSysI) transfer\n * @param interchangeInfo\n */\nexport const addInterchange = (stationId: string, setIndex: number, interchangeInfo: InterchangeInfo) => {\n    return (dispatch: Dispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n\n        const newTransferInfo = stationInfo.transfer.info.map(i => i.slice());\n        if (newTransferInfo.length > setIndex) {\n            newTransferInfo[setIndex].push(interchangeInfo);\n        } else {\n            for (let i = newTransferInfo.length; i < setIndex; i++) {\n                newTransferInfo[i] = [];\n            }\n            newTransferInfo[setIndex] = [interchangeInfo];\n        }\n\n        dispatch(\n            setStation(stationId, { ...stationInfo, transfer: { ...stationInfo.transfer, info: newTransferInfo } })\n        );\n    };\n};\n\nexport const removeInterchange = (stationId: string, setIndex: number, interchangeIndex: number) => {\n    return (dispatch: Dispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n\n        if (\n            stationInfo.transfer.info.length > setIndex &&\n            stationInfo.transfer.info[setIndex].length > interchangeIndex\n        ) {\n            const newTransferInfo = stationInfo.transfer.info.map((set, setIdx) =>\n                setIdx === setIndex ? set.filter((_, intIdx) => intIdx !== interchangeIndex) : set\n            );\n            dispatch(\n                setStation(stationId, { ...stationInfo, transfer: { ...stationInfo.transfer, info: newTransferInfo } })\n            );\n        }\n    };\n};\n\nexport const updateInterchange = (\n    stationId: string,\n    setIndex: number,\n    interchangeIndex: number,\n    interchangeInfo: InterchangeInfo\n) => {\n    return (dispatch: Dispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n\n        if (\n            stationInfo.transfer.info.length > setIndex &&\n            stationInfo.transfer.info[setIndex].length > interchangeIndex\n        ) {\n            const newTransferInfo = stationInfo.transfer.info.map((set, setIdx) =>\n                setIdx === setIndex\n                    ? set.map((int, intIdx) =>\n                          intIdx === interchangeIndex\n                              ? ([0, 1, 2, 3, 4, 5].map(i =>\n                                    interchangeInfo[i] === undefined ? int[i] : interchangeInfo[i]\n                                ) as InterchangeInfo)\n                              : int\n                      )\n                    : set\n            );\n            dispatch(\n                setStation(stationId, { ...stationInfo, transfer: { ...stationInfo.transfer, info: newTransferInfo } })\n            );\n        }\n    };\n};\n\nexport const updateStationOsiName = (stationId: string, setIndex: number, osiName: Name) => {\n    return (dispatch: Dispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n\n        const newOsiNames = stationInfo.transfer.osi_names.map(i => i.slice()) as Name[];\n        if (newOsiNames.length > setIndex) {\n            newOsiNames[setIndex] = osiName;\n        } else {\n            for (let i = newOsiNames.length; i < setIndex; i++) {\n                newOsiNames[i] = ['車站名', 'Stn Name'];\n            }\n            newOsiNames[setIndex] = osiName;\n        }\n        dispatch(\n            setStation(stationId, {\n                ...stationInfo,\n                transfer: { ...stationInfo.transfer, osi_names: newOsiNames },\n            })\n        );\n    };\n};\n\nexport const updateStationTickDirection = (stationId: string, tickDirection: ShortDirection) => {\n    return (dispatch: Dispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(\n            setStation(stationId, {\n                ...stationInfo,\n                transfer: { ...stationInfo.transfer, tick_direc: tickDirection },\n            })\n        );\n    };\n};\n\nexport const updateStationPaidArea = (stationId: string, isPaidArea: boolean) => {\n    return (dispatch: Dispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(\n            setStation(stationId, {\n                ...stationInfo,\n                transfer: { ...stationInfo.transfer, paid_area: isPaidArea },\n            })\n        );\n    };\n};\n\nexport const updateStationBranchType = (stationId: string, direction: Direction, branchStyle: BranchStyle) => {\n    return (dispatch: Dispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(\n            setStation(stationId, {\n                ...stationInfo,\n                branch: { ...stationInfo.branch, [direction]: [branchStyle, stationInfo.branch[direction][1]] },\n            })\n        );\n    };\n};\n\nexport type UpdateStationBranchFirstStationArgType = { stnId: string; direction: Direction; first: string };\n\n// FIXME\nexport const updateStationBranchFirstStation = (\n    branches: [UpdateStationBranchFirstStationArgType, UpdateStationBranchFirstStationArgType]\n) => {\n    return (dispatch: Dispatch, getState: () => RootState) => {\n        const { stn_list } = getState().param;\n        dispatch(\n            setStationsBulk({\n                ...stn_list,\n                [branches[0].stnId]: {\n                    ...stn_list[branches[0].stnId],\n                    branch: {\n                        ...stn_list[branches[0].stnId].branch,\n                        [branches[0].direction]: [\n                            stn_list[branches[0].stnId].branch[branches[0].direction][0],\n                            branches[0].first,\n                        ],\n                    },\n                },\n                [branches[1].stnId]: {\n                    ...stn_list[branches[1].stnId],\n                    branch: {\n                        ...stn_list[branches[1].stnId].branch,\n                        [branches[1].direction]: [\n                            stn_list[branches[1].stnId].branch[branches[1].direction][0],\n                            branches[1].first,\n                        ],\n                    },\n                },\n            })\n        );\n    };\n};\n\nexport const flipStationBranchPosition = (left: string, right: string) => {\n    return (dispatch: Dispatch, getState: () => RootState) => {\n        const { stn_list } = getState().param;\n        dispatch(\n            setStationsBulk({\n                ...stn_list,\n                [left]: { ...stn_list[left], parents: stn_list[left].parents.slice().reverse() },\n                [right]: { ...stn_list[right], children: stn_list[right].children.slice().reverse() },\n            })\n        );\n    };\n};\n\nexport const updateStationFacility = (stationId: string, facility: Facilities) => {\n    return (dispatch: Dispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(setStation(stationId, { ...stationInfo, facility }));\n    };\n};\n\nexport const addStationService = (stationId: string, service: Services) => {\n    return (dispatch: Dispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n\n        if (!stationInfo.services.includes(service)) {\n            dispatch(setStation(stationId, { ...stationInfo, services: stationInfo.services.concat(service) }));\n        }\n    };\n};\n\nexport const removeStationService = (stationId: string, service: Services) => {\n    return (dispatch: Dispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n\n        if (stationInfo.services.includes(service)) {\n            dispatch(\n                setStation(stationId, {\n                    ...stationInfo,\n                    services: stationInfo.services.filter(s => s !== service),\n                })\n            );\n        }\n    };\n};\n","import { AllCanvas, CanvasType, LoadingStatus, RmgStyle } from '../../constants/constants';\nimport { Dispatch } from 'redux';\nimport { RootState } from '../index';\n\nexport const SET_RMG_STYLE = 'SET_RMG_STYLE';\nexport const SET_CANVAS_SCALE = 'SET_CANVAS_SCALE';\nexport const SET_CANVAS_SCALE_STATUS = 'SET_CANVAS_SCALE_STATUS';\nexport const SET_CANVAS_TO_SHOW = 'SET_CANVAS_TO_SHOW';\nexport const SET_CANVAS_TO_SHOW_STATUS = 'SET_CANVAS_TO_SHOW_STATUS';\n\nexport interface setRmgStyleAction {\n    type: typeof SET_RMG_STYLE;\n    rmgStyle: RmgStyle;\n}\n\nexport interface setCanvasScaleAction {\n    type: typeof SET_CANVAS_SCALE;\n    canvasScale: number;\n}\n\nexport interface setCanvasScaleStatusAction {\n    type: typeof SET_CANVAS_SCALE_STATUS;\n    canvasScaleStatus: LoadingStatus;\n}\n\nexport interface setCanvasToShowAction {\n    type: typeof SET_CANVAS_TO_SHOW;\n    canvasToShow: CanvasType | typeof AllCanvas;\n}\n\nexport interface setCanvasToShowStatusAction {\n    type: typeof SET_CANVAS_TO_SHOW_STATUS;\n    canvasToShowStatus: LoadingStatus;\n}\n\nexport const setRmgStyle = (rmgStyle: RmgStyle) => {\n    return { type: SET_RMG_STYLE, rmgStyle } as setRmgStyleAction;\n};\n\nexport const setCanvasScale = (canvasScale: number) => {\n    return { type: SET_CANVAS_SCALE, canvasScale } as setCanvasScaleAction;\n};\n\nconst setCanvasScaleStatus = (canvasScaleStatus: LoadingStatus) => {\n    return { type: SET_CANVAS_SCALE_STATUS, canvasScaleStatus } as setCanvasScaleStatusAction;\n};\n\nexport const zoomIn = () => {\n    return async (dispatch: Dispatch, getState: () => RootState) => {\n        dispatch(setCanvasScaleStatus(LoadingStatus.loading));\n        try {\n            const newScale = Number((getState().app.canvasScale + 0.1).toFixed(1));\n            dispatch(setCanvasScale(newScale));\n            await window.rmgStorage.writeFile('rmgScale', newScale.toString());\n            dispatch(setCanvasScaleStatus(LoadingStatus.loaded));\n        } catch (err) {\n            dispatch(setCanvasScaleStatus(LoadingStatus.failed));\n        }\n    };\n};\n\nexport const zoomOut = () => {\n    return async (dispatch: Dispatch, getState: () => RootState) => {\n        dispatch(setCanvasScaleStatus(LoadingStatus.loading));\n        try {\n            const { canvasScale } = getState().app;\n            const newScale =\n                Number(canvasScale.toFixed(1)) <= 0.1\n                    ? Number(canvasScale.toFixed(1))\n                    : Number((canvasScale - 0.1).toFixed(1));\n            dispatch(setCanvasScale(newScale));\n            await window.rmgStorage.writeFile('rmgScale', newScale.toString());\n            dispatch(setCanvasScaleStatus(LoadingStatus.loaded));\n        } catch (err) {\n            dispatch(setCanvasScaleStatus(LoadingStatus.failed));\n        }\n    };\n};\n\nexport const setCanvasToShow = (canvasToShow: CanvasType | typeof AllCanvas) => {\n    return { type: SET_CANVAS_TO_SHOW, canvasToShow } as setCanvasToShowAction;\n};\n\nconst setCanvasToShowStatus = (canvasToShowStatus: LoadingStatus) => {\n    return { type: SET_CANVAS_TO_SHOW_STATUS, canvasToShowStatus } as setCanvasToShowStatusAction;\n};\n\nexport const selectCanvas = (canvas: CanvasType | typeof AllCanvas) => {\n    return async (dispatch: Dispatch) => {\n        dispatch(setCanvasToShowStatus(LoadingStatus.loading));\n        try {\n            dispatch(setCanvasToShow(canvas));\n            await window.rmgStorage.writeFile('rmgCanvas', canvas);\n            dispatch(setCanvasToShowStatus(LoadingStatus.loaded));\n        } catch (err) {\n            dispatch(setCanvasToShowStatus(LoadingStatus.failed));\n        }\n    };\n};\n","module.exports = ReactRedux;","module.exports = ReactI18next;","module.exports = ReactRouterDOM;","import React from 'react';\nimport { StationDict } from './constants/constants';\n\n/**\n * Vertical position (in shares) of station icon if using MTR style (for consistency of method `RMGLine.newStnPossibleLoc()`).\n */\nexport const getYShareMTR = (stnId: string, stnList: StationDict): -1 | 0 | 1 => {\n    if (\n        ['linestart', 'lineend'].includes(stnId) ||\n        stnList[stnId].parents.length > 1 ||\n        stnList[stnId].children.length > 1\n    ) {\n        return 0;\n    }\n    var stnPred = stnList[stnId].parents[0];\n    if (stnPred) {\n        // parent exist\n        if (stnList[stnPred].children.length === 1) {\n            // no sibling, then y same as parent\n            return getYShareMTR(stnPred, stnList);\n        } else {\n            // sibling exists, then y depends on its idx of being children\n            return stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n        }\n    } else {\n        // no parent, must be linestart\n        return 0;\n    }\n};\n\n/**\n * Getter of all branches (支線段) of the line (both ends included). The first branch must be the main line.\n * @example MTREastRailLine.branches\n * /*\n * [0]: [LineStart, Lo Wu, ..., Hung Hom, LineEnd]\n * [1]: [LineStart, Lok Ma Chau, Sheung Shui]\n * [2]: [University, Racecourse, Sha Tin]\n * /\n */\nexport const getBranches = (stnList: StationDict) => {\n    console.log('computing branches');\n\n    var stack = ['linestart'];\n    var branches = [['linestart']];\n    var branchCount = 0;\n\n    while (stack.length) {\n        var curId = stack.shift() as string;\n        var prevId = branches[branchCount].slice().reverse()[0] || null;\n        if (prevId && curId !== 'linestart') {\n            branches[branchCount].push(curId);\n        } else {\n            branches[branchCount] = [curId];\n        }\n        while (curId !== 'lineend') {\n            prevId = curId;\n            var children = stnList[prevId].children;\n            switch (children.length) {\n                case 1:\n                    curId = children[0];\n                    break;\n                case 2:\n                    let branchNextId = stnList[prevId].branch.right[1] as string;\n                    // if (branchCount === 0) {\n                    if (stnList[prevId].branch.right[0] === 'through') {\n                        branches.push([curId]);\n                        stack.push(branchNextId);\n                    } else {\n                        if (branchCount === 0) {\n                            branches.push([prevId]);\n                            stack.push(branchNextId);\n                            // all branching out nodes are added to stack in the first loop\n                        }\n                    }\n                    curId = children.filter(stnId => stnId !== branchNextId)[0];\n                    break;\n            }\n            branches[branchCount].push(curId);\n\n            if (prevId === stnList[curId].branch.left[1]) {\n                break;\n            }\n        }\n        // branches[branchCount] = curBranch;\n        branchCount++;\n    }\n\n    return branches;\n};\n\n/**\n * Getter of all routes (行車交路) of the line (both ends included). The first branch must be the main line.\n * @example MTREastRailLine.branches\n * /*\n * [0]: [LineStart, Lo Wu, Sheung Shui, ..., Hung Hom, LineEnd]\n * [1]: [LineStart, Lok Ma Chau, Sheung Shui, ..., Hung Hom, LineEnd]\n * [2]: [LineStart, Lo Wu, Sheung Shui, ..., University, Racecourse, Sha Tin, ..., Hung Hom, LineEnd]\n * [3]: [LineStart, Lok Ma Chau, Sheung Shui, ..., University, Racecourse, Sha Tin, ..., Hung Hom, LineEnd]\n * /\n */\nexport const getRoutes = (stnList: StationDict) => {\n    console.log('computing routes');\n\n    var stack = ['linestart'];\n    var branches = [['linestart']];\n    var branchCount = 0;\n\n    while (stack.length) {\n        var curId = stack.shift() as string;\n        var prevId = branches[branchCount].slice().reverse()[0] || null;\n        if (prevId && curId !== 'linestart') {\n            branches[branchCount].push(curId);\n        } else {\n            branches[branchCount] = [curId];\n        }\n        while (curId !== 'lineend') {\n            prevId = curId;\n            var children = stnList[prevId].children;\n            switch (children.length) {\n                case 1:\n                    curId = children[0];\n                    break;\n                case 2:\n                    let branchNextId = stnList[prevId].branch.right[1] as string;\n                    // if (branchCount === 0) {\n                    if (stnList[prevId].branch.right[0] === 'through') {\n                        branches.push(branches[branchCount].slice());\n                        stack.push(branchNextId);\n                    } else {\n                        if (branchCount === 0) {\n                            branches.push([prevId]);\n                            stack.push(branchNextId);\n                        }\n                        // branches.push([prevId]);\n                    }\n                    // stack.push(branchNextId);\n                    // }\n                    curId = children.filter(stnId => stnId !== branchNextId)[0];\n                    break;\n            }\n            branches[branchCount].push(curId);\n\n            if (prevId === stnList[curId].branch.left[1] && stnList[curId].branch.left[0] === 'nonthrough') {\n                break;\n            }\n        }\n        // branches[branchCount] = curBranch;\n        branchCount++;\n    }\n\n    return branches;\n};\n\n/**\n * Memo of topological ordering for all stations by stacking all branches into an one-dimensional array.\n * @param branches Branches from `useBranches` memo\n */\nexport const useTpo = (branches: string[][]) => {\n    const [tpo, setTpo] = React.useState([] as string[]);\n\n    React.useEffect(\n        () => {\n            console.log('computing tpo');\n            if (branches.length === 1) {\n                setTpo(branches[0].slice(1, -1));\n                return;\n            } else {\n                let res = branches\n                    .reduce(\n                        (acc, cur) => {\n                            let idx = acc.indexOf(cur.slice(-1)[0]);\n                            return acc.slice(0, idx).concat(cur.slice(1), acc.slice(idx + 1));\n                        },\n                        ['lineend']\n                    )\n                    .slice(0, -1);\n                setTpo(res);\n                return;\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString()]\n    );\n\n    return tpo;\n};\n","module.exports = Redux;","import { LanguageCode, Note, RmgStyle, StationInfo, Translation } from './constants/constants';\n\nexport const updateParam = (param: { [x: string]: any }) => {\n    // Version 0.10\n    if (!('line_name' in param)) {\n        param.line_name = ['路線名', 'Name of Line'];\n    }\n    if (!('dest_legacy' in param)) {\n        param.dest_legacy = false;\n    }\n\n    // Version 0.11\n    delete param.fontZH;\n    delete param.fontEN;\n    delete param.weightZH;\n    delete param.weightEN;\n\n    // Version 0.12\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (!('branch' in stnInfo)) {\n            param.stn_list[stnId].branch = { left: [], right: [] };\n            if (stnInfo.children.length === 2) {\n                param.stn_list[stnId].branch.right = ['through', stnInfo.children[1]];\n            } else {\n                param.stn_list[stnId].branch.right = [];\n            }\n            if (stnInfo.parents.length === 2) {\n                param.stn_list[stnId].branch.left = ['through', stnInfo.parents[1]];\n            } else {\n                param.stn_list[stnId].branch.left = [];\n            }\n        }\n    }\n\n    // Version 1.2\n    if (!('psd_num' in param)) {\n        param.psd_num = '1';\n    } else {\n        param.psd_num = param.psd_num.toString();\n    }\n\n    if (!('line_num' in param)) {\n        param.line_num = '1';\n    }\n    delete param.style;\n    if (param.theme.length === 3) {\n        param.theme.push('#fff');\n    }\n\n    // Version 1.3\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (!('num' in stnInfo)) {\n            param.stn_list[stnId].num = '00';\n        }\n        if ('interchange' in stnInfo) {\n            stnInfo.interchange.map((arr: any) => {\n                return arr.forEach((intInfo: any) => {\n                    if (intInfo.length === 5) {\n                        intInfo.splice(3, 0, '#fff');\n                    }\n                });\n            });\n        }\n    }\n\n    // Version 1.5\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (stnInfo.change_type === 'osi22_end_p') {\n            param.stn_list[stnId].change_type = 'osi22_pr';\n        }\n        if (stnInfo.change_type === 'osi22_end_u') {\n            param.stn_list[stnId].change_type = 'osi22_ur';\n        }\n    }\n\n    // Version 2.1\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (!('interchange' in stnInfo)) {\n            param.stn_list[stnId].interchange = [[]];\n        }\n    }\n\n    // Version 1.4\n    // Version 2.2\n    // Version 2.3\n    if (!('info_panel_type' in param)) {\n        param.info_panel_type = 'gz28';\n    } else {\n        param.info_panel_type = (type => {\n            switch (type) {\n                case 'gz_1':\n                case 'panasonic':\n                    return 'gz28';\n                case 'gz_2':\n                    return 'gz6';\n                case 'gz_3':\n                    return 'gz3';\n                default:\n                    return type;\n            }\n        })(param.info_panel_type);\n    }\n\n    if (!('direction_gz_x' in param)) {\n        param.direction_gz_x = 50;\n    }\n    if (!('direction_gz_y' in param)) {\n        param.direction_gz_y = 70;\n    }\n\n    // Version 2.6\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (!('transfer' in stnInfo)) {\n            param.stn_list[stnId].transfer = {\n                // type: stnInfo.change_type?.split('_')[0] as 'none' | 'int2' | 'int3' | 'osi11' | 'osi12' | 'osi22',\n                tick_direc:\n                    stnInfo.change_type === 'none' || stnInfo.change_type === 'int2'\n                        ? 'r'\n                        : (stnInfo.change_type?.split('_')[1].split('').slice().reverse()[0] as 'l' | 'r'),\n                paid_area:\n                    stnInfo.change_type?.indexOf('osi') !== -1 ? stnInfo.change_type?.split('_')[1][0] === 'p' : true,\n                osi_names: stnInfo.change_type?.indexOf('osi') !== -1 ? [stnInfo.interchange[1][0]] : [],\n                info:\n                    stnInfo.interchange.length === 2\n                        ? [stnInfo.interchange[0], stnInfo.interchange[1].slice(1)]\n                        : stnInfo.interchange,\n            };\n        }\n        delete param.stn_list[stnId].change_type;\n        delete param.stn_list[stnId].interchange;\n    }\n\n    // Version 2.8\n    // Version 3.0\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (!('services' in stnInfo)) {\n            param.stn_list[stnId].services = ['local'];\n        }\n        if (!('facility' in stnInfo)) {\n            if ('usage' in stnInfo) {\n                param.stn_list[stnId].facility = stnInfo.usage;\n            } else {\n                param.stn_list[stnId].facility = '';\n            }\n        }\n        delete param.stn_list[stnId].usage;\n    }\n\n    // Version 3.4\n    if (!('customiseMTRDest' in param)) {\n        param.customiseMTRDest = { isLegacy: param.dest_legacy || false, terminal: false };\n    }\n    delete param.dest_legacy;\n\n    // Version 3.4\n    if (!('svgWidth' in param)) {\n        param.svgWidth = {\n            destination: param.svg_dest_width,\n            runin: param.svg_dest_width,\n            railmap: param.svg_width,\n            indoor: param.svg_width,\n        };\n    }\n    // Version 3.8\n    if (!('indoor' in param.svgWidth)) {\n        param.svgWidth.indoor = param.svgWidth.railmap;\n    }\n    delete param.svg_width;\n    delete param.svg_dest_width;\n\n    if (!('notesGZMTR' in param)) {\n        param.notesGZMTR = [];\n    }\n\n    param.notesGZMTR = param.notesGZMTR?.map((note: any[]) =>\n        note.length === 4 ? note.concat([false]) : note\n    ) as Note[];\n\n    // Version 3.5.3\n    delete param.char_form;\n    delete param.show_outer;\n    delete param.strip_pc;\n    delete param.txt_bg_gap;\n\n    // Version 3.5.4\n    if (!('namePosMTR' in param)) {\n        param.namePosMTR = {\n            isStagger: true,\n            isFlip: param.txt_flip,\n        };\n    }\n    delete param.txt_flip;\n\n    // Version 3.5.6\n    // Version 3.6.2\n    Object.keys(param.stn_list).forEach(stnId => {\n        if (!('secondaryName' in param.stn_list[stnId])) {\n            param.stn_list[stnId].secondaryName = false;\n        } else {\n            if (param.stn_list[stnId].secondaryName !== false && param.stn_list[stnId].secondaryName.join() === ',') {\n                param.stn_list[stnId].secondaryName = false;\n            }\n        }\n\n        if ('type' in param.stn_list[stnId].transfer) {\n            delete param.stn_list[stnId].transfer.type;\n        }\n    });\n\n    return param;\n};\n\nexport const getTransText2 = (obj: Translation, langs: LanguageCode[]) => {\n    for (let l of langs) {\n        if (obj[l]) return obj[l];\n    }\n    return obj[LanguageCode.English];\n};\n\n/**\n * Format display style of station name as `[num: ]nameZH,nameEN`.\n */\nexport const formatStnName = (stnInfo: StationInfo, style: RmgStyle) =>\n    (style === RmgStyle.GZMTR ? (stnInfo?.num || '-') + ': ' : '') + stnInfo?.name.join().replace('\\\\', ' ');\n","module.exports = i18next;","import { createContext } from 'react';\n\ninterface IParamContext {\n    branches: string[][];\n    routes: string[][];\n    deps: string;\n    tpo: string[];\n}\n\nexport const ParamContext = createContext<IParamContext>({} as IParamContext);\n","import { Translation } from './constants';\n\nexport enum CityCode {\n    Barcelona = 'barcelona',\n    Beijing = 'beijing',\n    Changsha = 'changsha',\n    Chengdu = 'chengdu',\n    Chongqing = 'chongqing',\n    Dongguan = 'dongguan',\n    Edinburgh = 'edinburgh',\n    Foshan = 'foshan',\n    Glasgow = 'glasgow',\n    Guangzhou = 'guangzhou',\n    Hangzhou = 'hangzhou',\n    HongKong = 'hongkong',\n    Kansai = 'kansai',\n    Kaohsiung = 'kaohsiung',\n    London = 'london',\n    Macao = 'macao',\n    Madrid = 'madrid',\n    Nanjing = 'nanjing',\n    NewTaipei = 'newtaipei',\n    Osaka = 'osaka',\n    Oslo = 'oslo',\n    Paris = 'paris',\n    Qingdao = 'qingdao',\n    SanFrancisco = 'sanfrancisco',\n    Seoul = 'seoul',\n    Shanghai = 'shanghai',\n    Shenzhen = 'shenzhen',\n    Singapore = 'singapore',\n    Stockholm = 'stockholm',\n    Taipei = 'taipei',\n    Tianjin = 'tianjin',\n    Tokyo = 'tokyo',\n    Toronto = 'toronto',\n    TyneAndWear = 'tyneandwear',\n    Xian = 'xian',\n    Other = 'other',\n}\n\ninterface CityEntry {\n    id: CityCode;\n    /**\n     * ISO 3166-1 alpha-2 country code. (For cities in Britain, append BS 6879 subdivision code. )\n     */\n    country: string;\n    /**\n     * Key-value pairs of multi-lingual names of the city.\n     */\n    name: Translation;\n}\n\nexport const cityList: CityEntry[] = [\n    {\n        id: CityCode.Barcelona,\n        country: 'ES',\n        name: {\n            en: 'Barcelona',\n            'zh-Hans': '巴塞罗那',\n            'zh-HK': '巴塞隆拿',\n            'zh-TW': '巴塞隆納',\n        },\n    },\n    {\n        id: CityCode.Beijing,\n        country: 'CN',\n        name: {\n            en: 'Beijing',\n            zh: '北京',\n        },\n    },\n    {\n        id: CityCode.Changsha,\n        country: 'CN',\n        name: {\n            en: 'Changsha',\n            'zh-Hans': '长沙',\n            'zh-Hant': '長沙',\n        },\n    },\n    {\n        id: CityCode.Chengdu,\n        country: 'CN',\n        name: {\n            en: 'Chengdu',\n            zh: '成都',\n        },\n    },\n    {\n        id: CityCode.Chongqing,\n        country: 'CN',\n        name: {\n            en: 'Chongqing',\n            'zh-Hans': '重庆',\n            'zh-Hant': '重慶',\n        },\n    },\n    {\n        id: CityCode.Dongguan,\n        country: 'CN',\n        name: {\n            en: 'Dongguan',\n            'zh-Hans': '东莞',\n            'zh-Hant': '東莞',\n        },\n    },\n    {\n        id: CityCode.Edinburgh,\n        country: 'GBSCT',\n        name: {\n            en: 'Edinburgh',\n            ga: 'Dùn Èideann',\n            'zh-Hans': '爱丁堡',\n            'zh-Hant': '愛丁堡',\n        },\n    },\n    {\n        id: CityCode.Foshan,\n        country: 'CN',\n        name: {\n            en: 'Foshan',\n            zh: '佛山',\n        },\n    },\n    {\n        id: CityCode.Glasgow,\n        country: 'GBSCT',\n        name: {\n            en: 'Glasgow',\n            ga: 'Glaschu',\n            zh: '格拉斯哥',\n        },\n    },\n    {\n        id: CityCode.Guangzhou,\n        country: 'CN',\n        name: {\n            en: 'Guangzhou',\n            'zh-Hans': '广州',\n            'zh-Hant': '廣州',\n        },\n    },\n    {\n        id: CityCode.Hangzhou,\n        country: 'CN',\n        name: {\n            en: 'Hangzhou',\n            zh: '杭州',\n        },\n    },\n    {\n        id: CityCode.HongKong,\n        country: 'HK',\n        name: {\n            en: 'Hong Kong',\n            zh: '香港',\n        },\n    },\n    {\n        id: CityCode.Kansai,\n        country: 'JP',\n        name: {\n            en: 'Kansai Area',\n            ja: '近畿地方',\n            'zh-Hans': '近畿地方（关西地方）',\n            'zh-Hant': '近畿地方（關西地方）',\n        },\n    },\n    {\n        id: CityCode.Kaohsiung,\n        country: 'TW',\n        name: {\n            en: 'Kaohsiung',\n            zh: '高雄',\n        },\n    },\n    {\n        id: CityCode.London,\n        country: 'GBENG',\n        name: {\n            en: 'London',\n            'zh-Hans': '伦敦',\n            'zh-Hant': '倫敦',\n        },\n    },\n    {\n        id: CityCode.Macao,\n        country: 'MO',\n        name: {\n            en: 'Macao',\n            pt: 'Macau',\n            'zh-Hans': '澳门',\n            'zh-Hant': '澳門',\n        },\n    },\n    {\n        id: CityCode.Madrid,\n        country: 'ES',\n        name: {\n            en: 'Madrid',\n            'zh-Hans': '马德里',\n            'zh-Hant': '馬德里',\n        },\n    },\n    {\n        id: CityCode.Nanjing,\n        country: 'CN',\n        name: {\n            en: 'Nanjing',\n            zh: '南京',\n        },\n    },\n    {\n        id: CityCode.NewTaipei,\n        country: 'TW',\n        name: {\n            en: 'New Taipei',\n            zh: '新北',\n        },\n    },\n    {\n        id: CityCode.Osaka,\n        country: 'JP',\n        name: {\n            en: 'Osaka',\n            ja: '大阪',\n            zh: '大阪',\n        },\n    },\n    {\n        id: CityCode.Oslo,\n        country: 'NO',\n        name: {\n            en: 'Oslo',\n            'zh-Hans': '奥斯陆',\n            'zh-Hant': '奧斯陸',\n        },\n    },\n    {\n        id: CityCode.Paris,\n        country: 'FR',\n        name: {\n            en: 'Paris',\n            zh: '巴黎',\n        },\n    },\n    {\n        id: CityCode.Qingdao,\n        country: 'CN',\n        name: {\n            en: 'Qingdao',\n            'zh-Hans': '青岛',\n            'zh-Hant': '青島',\n        },\n    },\n    {\n        id: CityCode.SanFrancisco,\n        country: 'US',\n        name: {\n            en: 'San Francisco',\n            'zh-Hans': '旧金山',\n            'zh-HK': '三藩市',\n            'zh-TW': '舊金山',\n        },\n    },\n    {\n        id: CityCode.Seoul,\n        country: 'KR',\n        name: {\n            en: 'Seoul (Metropolitan Area)',\n            ko: '서울(수도권)',\n            'zh-Hans': '首尔（首都圈）',\n            'zh-Hant': '首爾（首都圈）',\n        },\n    },\n    {\n        id: CityCode.Shanghai,\n        country: 'CN',\n        name: {\n            en: 'Shanghai',\n            zh: '上海',\n        },\n    },\n    {\n        id: CityCode.Shenzhen,\n        country: 'CN',\n        name: {\n            en: 'Shenzhen',\n            zh: '深圳',\n        },\n    },\n    {\n        id: CityCode.Singapore,\n        country: 'SG',\n        name: {\n            en: 'Singapore',\n            zh: '新加坡',\n        },\n    },\n    {\n        id: CityCode.Stockholm,\n        country: 'SE',\n        name: {\n            en: 'Stockholm',\n            'zh-Hans': '斯德哥尔摩',\n            'zh-Hant': '斯德哥爾摩',\n        },\n    },\n    {\n        id: CityCode.Taipei,\n        country: 'TW',\n        name: {\n            en: 'Taipei',\n            zh: '台北',\n        },\n    },\n    {\n        id: CityCode.Tianjin,\n        country: 'CN',\n        name: {\n            en: 'Tianjin',\n            zh: '天津',\n        },\n    },\n    {\n        id: CityCode.Tokyo,\n        country: 'JP',\n        name: {\n            en: 'Tokyo (Greater Tokyo Area)',\n            ja: '東京（首都圏）',\n            'zh-Hans': '东京（首都圈）',\n            'zh-Hant': '東京（首都圈）',\n        },\n    },\n    {\n        id: CityCode.Toronto,\n        country: 'CA',\n        name: {\n            en: 'Toronto',\n            'zh-Hans': '多伦多',\n            'zh-Hant': '多倫多',\n        },\n    },\n    {\n        id: CityCode.TyneAndWear,\n        country: 'GBENG',\n        name: {\n            en: 'Tyne and Wear',\n            'zh-Hans': '泰恩-威尔',\n            'zh-HK': '泰威',\n            'zh-TW': '泰恩-威爾',\n        },\n    },\n    {\n        id: CityCode.Xian,\n        country: 'CN',\n        name: {\n            en: \"Xi'an\",\n            zh: '西安',\n        },\n    },\n    {\n        id: CityCode.Other,\n        country: 'UN',\n        name: {\n            en: 'Customise',\n            'zh-Hans': '自定义',\n            'zh-Hant': '自訂',\n        },\n    },\n];\n","module.exports = ReactDOM;","module.exports = i18nextXHRBackend;","module.exports = i18nextBrowserLanguageDetector;","module.exports = ReduxThunk;","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport Backend from 'i18next-xhr-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\ni18n.use(Backend)\n    .use(LanguageDetector)\n    .use(initReactI18next)\n    .init({\n        fallbackLng: {\n            'zh-CN': ['zh-Hans', 'en'],\n            'zh-Hant': ['zh-HK', 'en'],\n            'zh-HK': ['zh-Hant', 'en'],\n            'zh-TW': ['zh-HK', 'zh-Hant'],\n            default: ['en'],\n        },\n        // debug: true,\n        backend: {\n            // for all available options read the backend's repository readme file\n            loadPath: process.env.PUBLIC_URL + '/locale/{{lng}}.json',\n        },\n\n        interpolation: {\n            escapeValue: false, // not needed for react as it escapes by default\n        },\n    })\n    .then(t => {\n        document.title = t('title');\n        document.documentElement.setAttribute('lang', i18n.language);\n    });\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    AppBar,\n    Toolbar,\n    Tooltip,\n    IconButton,\n    Typography,\n    Icon,\n    makeStyles,\n    createStyles,\n    Menu,\n    MenuItem,\n    Divider,\n    useMediaQuery,\n} from '@material-ui/core';\nimport { AllCanvas, canvasConfig, CanvasType } from './constants/constants';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from './redux';\nimport { selectCanvas, zoomIn, zoomOut } from './redux/app/action';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        rootLight: {\n            backgroundColor: theme.palette.primary.main,\n        },\n        rootDark: {\n            backgroundColor: theme.palette.background.paper,\n        },\n        title: {\n            flexGrow: 1,\n            color: '#fff',\n        },\n        menuButton: {\n            color: '#fff',\n        },\n    })\n);\n\nconst AppAppBar = () => {\n    const { t, i18n } = useTranslation();\n    const classes = useStyles();\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n    return React.useMemo(\n        () => (\n            <AppBar position=\"sticky\" className={prefersDarkMode ? classes.rootDark : classes.rootLight}>\n                <Toolbar variant=\"dense\">\n                    <Typography variant=\"h6\" className={classes.title} color=\"textPrimary\">\n                        {process.env.PUBLIC_URL.includes('uat') ? t('titleUAT') : t('title')}\n                    </Typography>\n\n                    <CanvasToggle />\n                    <ZoomToggles />\n                </Toolbar>\n            </AppBar>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [prefersDarkMode, i18n.language]\n    );\n};\n\nexport default AppAppBar;\n\nconst CanvasToggle = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    const rmgStyle = useSelector((store: RootState) => store.app.rmgStyle);\n\n    const [canvasButtonEl, setCanvasButtonEl] = React.useState<null | HTMLElement>(null);\n    const handleClick = (action: CanvasType | typeof AllCanvas) => () => {\n        dispatch(selectCanvas(action));\n        setCanvasButtonEl(null);\n    };\n\n    return React.useMemo(\n        () => (\n            <>\n                <Tooltip title={t('toggle.tooltip')}>\n                    <IconButton onClick={e => setCanvasButtonEl(e.currentTarget)} className={classes.menuButton}>\n                        <Icon>photo_library</Icon>\n                    </IconButton>\n                </Tooltip>\n                <Menu anchorEl={canvasButtonEl} open={Boolean(canvasButtonEl)} onClose={() => setCanvasButtonEl(null)}>\n                    {canvasConfig[rmgStyle].map(c => (\n                        <MenuItem key={c} onClick={handleClick(c)}>\n                            {t('toggle.' + c)}\n                        </MenuItem>\n                    ))}\n                    <Divider style={{ margin: '6px 0' }} />\n                    <MenuItem onClick={handleClick(AllCanvas)}>{t('toggle.all')}</MenuItem>\n                </Menu>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [rmgStyle, canvasButtonEl, classes.menuButton]\n    );\n};\n\nconst ZoomToggles = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    return React.useMemo(\n        () => (\n            <>\n                <Tooltip title={t('zoom.out')}>\n                    <IconButton onClick={() => dispatch(zoomOut())} className={classes.menuButton}>\n                        <Icon>zoom_out</Icon>\n                    </IconButton>\n                </Tooltip>\n                <Tooltip title={t('zoom.in')}>\n                    <IconButton onClick={() => dispatch(zoomIn())} className={classes.menuButton}>\n                        <Icon>zoom_in</Icon>\n                    </IconButton>\n                </Tooltip>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [classes.menuButton]\n    );\n};\n","import React from 'react';\n\nexport default class ErrorBoundary extends React.Component<{ children: React.ReactNode }, { hasError: boolean }> {\n    constructor(props: { children: React.ReactNode }) {\n        super(props);\n        this.state = { hasError: false };\n    }\n\n    static getDerivedStateFromError(error: any) {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true };\n    }\n\n    componentDidCatch(error: any, errorInfo: any) {\n        // You can also log the error to an error reporting service\n        // logErrorToMyService(error, errorInfo);\n    }\n\n    render() {\n        if (this.state.hasError) {\n            // You can render any custom fallback UI\n            return <h1>Something went wrong.</h1>;\n        }\n\n        return this.props.children;\n    }\n}\n","import React, { lazy, memo, useEffect } from 'react';\nimport { CircularProgress, createStyles, makeStyles } from '@material-ui/core';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport ErrorBoundary from '../error-boundary';\n\nimport { AllCanvas, canvasConfig, CanvasType, RmgStyle } from '../constants/constants';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectCanvas, setRmgStyle } from '../redux/app/action';\nimport { RootState } from '../redux';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            display: 'flex',\n            flexDirection: 'row',\n            overflowX: 'scroll',\n            '&::before, &::after': {\n                content: '\"\"',\n                margin: 'auto',\n            },\n            '& > svg': {\n                flex: '0 0 auto',\n                border: '1px solid black',\n            },\n        },\n    })\n);\n\nconst SVGs = () => {\n    const classes = useStyles();\n\n    const canvasScale = useSelector((store: RootState) => store.app.canvasScale);\n    const svgHeight = useSelector((store: RootState) => store.param.svg_height);\n    const svgWidths = useSelector((store: RootState) => store.param.svgWidth);\n    const theme = useSelector((store: RootState) => store.param.theme);\n\n    const sharedProps = React.useCallback(\n        (canvas: CanvasType): React.SVGProps<SVGSVGElement> => ({\n            id: canvas,\n            xmlns: 'http://www.w3.org/2000/svg',\n            xmlnsXlink: 'http://www.w3.org/1999/xlink',\n            height: svgHeight * canvasScale,\n            viewBox: `0 0 ${svgWidths[canvas]} ${svgHeight}`,\n            colorInterpolationFilters: 'sRGB',\n            style: {\n                ['--rmg-svg-width' as any]: svgWidths[canvas] + 'px',\n                ['--rmg-svg-height' as any]: svgHeight + 'px',\n                ['--rmg-theme-colour' as any]: theme[2],\n                ['--rmg-theme-fg' as any]: theme[3],\n            },\n        }),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [svgHeight, JSON.stringify(svgWidths), theme, canvasScale]\n    );\n\n    return (\n        <div className={classes.root}>\n            <Switch>\n                {Object.values(RmgStyle).map(s => (\n                    <Route path={`/${s}`} key={s}>\n                        <StyleSpecificSVGs style={s} canvasAvailable={canvasList[s]} svgProps={sharedProps} />\n                    </Route>\n                ))}\n                <Redirect to={'/' + RmgStyle.MTR} />\n            </Switch>\n        </div>\n    );\n};\n\nexport default SVGs;\n\nconst StyleSpecificSVGs = memo(\n    (props: {\n        style: RmgStyle;\n        canvasAvailable: { [canvas in CanvasType]?: JSX.Element };\n        svgProps: (canvas: CanvasType) => React.SVGProps<SVGSVGElement>;\n    }) => {\n        const dispatch = useDispatch();\n\n        const canvasToShow = useSelector((store: RootState) => store.app.canvasToShow);\n\n        dispatch(setRmgStyle(props.style));\n\n        useEffect(\n            () => {\n                ['share', ...Object.values(CanvasType)].forEach(canvas => {\n                    if (canvas in props.canvasAvailable || canvas === 'share') {\n                        (document.getElementById('css_' + canvas) as HTMLLinkElement).href =\n                            process.env.PUBLIC_URL + `/styles/${canvas}_${props.style}.css`;\n                    } else {\n                        (document.getElementById('css_' + canvas) as HTMLLinkElement).href = '';\n                    }\n                });\n\n                ![...canvasConfig[props.style], AllCanvas].includes(canvasToShow) && dispatch(selectCanvas(AllCanvas));\n            },\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            []\n        );\n\n        return (\n            <>\n                {(Object.keys(props.canvasAvailable) as (keyof typeof props.canvasAvailable)[]).map(\n                    canvas =>\n                        [AllCanvas, canvas].includes(canvasToShow) && (\n                            <React.Suspense key={canvas} fallback={<CircularProgress />}>\n                                <ErrorBoundary>\n                                    <svg {...props.svgProps(canvas)}>\n                                        <rect\n                                            id=\"canvas-bg\"\n                                            fill=\"white\"\n                                            style={{ height: 'var(--rmg-svg-height)', width: 'var(--rmg-svg-width)' }}\n                                        />\n                                        {props.canvasAvailable[canvas]}\n                                        <rect\n                                            id=\"canvas-border\"\n                                            fill=\"none\"\n                                            strokeWidth={3}\n                                            stroke=\"none\"\n                                            style={{ height: 'var(--rmg-svg-height)', width: 'var(--rmg-svg-width)' }}\n                                        />\n                                    </svg>\n                                </ErrorBoundary>\n                            </React.Suspense>\n                        )\n                )}\n            </>\n        );\n    }\n);\n\n// Canvas available\n\nconst RunInGZMTR = lazy(() => import(/* webpackChunkName: \"runinGZMTR\" */ './runin/runin-gzmtr'));\nconst RailMapGZMTR = lazy(() => import(/* webpackChunkName: \"railmapGZMTR\" */ './railmap/railmap-gzmtr'));\n\nconst DestinationMTR = lazy(() => import(/* webpackChunkName: \"destinationMTR\" */ './destination/destination-mtr'));\nconst RailMapMTR = lazy(() => import(/* webpackChunkName: \"railmapMTR\" */ './railmap/railmap-mtr'));\n\nconst DestinationSHMetro = lazy(\n    () => import(/* webpackChunkName: \"destinationSHMetro\" */ './destination/destination-shmetro')\n);\nconst RunInSHMetro = lazy(() => import(/* webpackChunkName: \"runinSHMetro\" */ './runin/runin-shmetro'));\nconst RailMapSHMetro = lazy(() => import(/* webpackChunkName: \"railmapSHMetro\" */ './railmap/railmap-shmetro'));\nconst IndoorSHMetro = lazy(() => import(/* webpackChunkName: \"indoorSHMetro\" */ './indoor/indoor-shmetro'));\n\n/**\n * Each value of this object is an object of ORDERED key-value pairs\n */\nconst canvasList: { [s in RmgStyle]: { [c in CanvasType]?: JSX.Element } } = {\n    [RmgStyle.GZMTR]: {\n        [CanvasType.RunIn]: <RunInGZMTR />,\n        [CanvasType.RailMap]: <RailMapGZMTR />,\n    },\n    [RmgStyle.MTR]: {\n        [CanvasType.Destination]: <DestinationMTR />,\n        [CanvasType.RailMap]: <RailMapMTR />,\n    },\n    [RmgStyle.SHMetro]: {\n        [CanvasType.Destination]: <DestinationSHMetro />,\n        [CanvasType.RunIn]: <RunInSHMetro />,\n        [CanvasType.RailMap]: <RailMapSHMetro />,\n        [CanvasType.Indoor]: <IndoorSHMetro />,\n    },\n};\n","import SVGs from './svg';\n\nexport default SVGs;\n","import * as React from 'react';\n\nimport {\n    Typography,\n    CircularProgress,\n    Tabs,\n    Tab,\n    Icon,\n    makeStyles,\n    createStyles,\n    useTheme,\n    useMediaQuery,\n} from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nconst PanelSave = React.lazy(() => import(/* webpackChunkName: \"panelSave\" */ './save'));\nconst PanelLayout = React.lazy(() => import(/* webpackChunkName: \"panelLayout\" */ './layout'));\nconst PanelDesign = React.lazy(() => import(/* webpackChunkName: \"panelDesign\" */ './design'));\nconst PanelStations = React.lazy(() => import(/* webpackChunkName: \"panelStations\" */ './stations'));\nconst PanelInfo = React.lazy(() => import(/* webpackChunkName: \"panelInfo\" */ './panel-info'));\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        root: {\n            display: 'flex',\n            flexDirection: 'row',\n            height: '100%',\n            [theme.breakpoints.down('xs')]: {\n                flexDirection: 'column',\n            },\n        },\n        typography: {\n            background: theme.palette.background.default,\n        },\n        tab: {\n            padding: '6px 24px',\n            height: 48,\n            '& .MuiTab-wrapper': {\n                flexDirection: 'row',\n            },\n            [theme.breakpoints.up('sm')]: {\n                '& .MuiTab-wrapper': {\n                    justifyContent: 'flex-start',\n                },\n            },\n            [theme.breakpoints.down('xs')]: {\n                minWidth: 'calc(100% / 5)',\n            },\n            '&.MuiTab-labelIcon': {\n                minHeight: 'unset',\n                '& .MuiTab-wrapper': {\n                    '& > *:first-child': {\n                        marginBottom: 0,\n                    },\n                    '& > *:not(first-child)': {\n                        paddingLeft: 8,\n                    },\n                },\n            },\n        },\n        tabs: {\n            overflow: 'auto',\n            '&::-webkit-scrollbar': {\n                width: 0,\n            },\n            scrollbarWidth: 'none',\n            WebkitOverflowScrolling: 'touch',\n        },\n        tabpanel: {\n            overflow: 'auto',\n            flex: 1,\n            padding: theme.spacing(3),\n            paddingBottom: 0,\n            height: `calc(100% - ${theme.spacing(3)}px)`,\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'flex-start',\n        },\n    })\n);\n\nexport default function PanelTab() {\n    const { t, i18n } = useTranslation();\n\n    const classes = useStyles();\n    const theme = useTheme();\n    const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\n\n    const [value, setValue] = React.useState(0);\n\n    const panel = (index: number) => {\n        switch (index) {\n            case 0:\n                return <PanelSave />;\n            case 1:\n                return <PanelLayout />;\n            case 2:\n                return <PanelDesign />;\n            case 3:\n                return <PanelStations />;\n            case 4:\n                return <PanelInfo />;\n            default:\n                return <PanelSave />;\n        }\n    };\n\n    const tabNav = React.useMemo(\n        () => (\n            <Typography className={`${classes.typography} ${classes.tabs}`} component=\"div\">\n                <Tabs\n                    value={value}\n                    orientation={isMobile ? 'horizontal' : 'vertical'}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    onChange={(_, val) => setValue(val)}\n                    variant=\"scrollable\"\n                    scrollButtons=\"off\"\n                >\n                    {[\n                        ['file', 'insert_drive_file'],\n                        ['layout', 'panorama'],\n                        ['design', 'brush'],\n                        ['stations', 'directions_transit'],\n                        ['info', 'info'],\n                    ].map((val, i) => (\n                        <Tab\n                            label={<span>{t('tab.' + val[0])}</span>}\n                            icon={<Icon>{val[1]}</Icon>}\n                            key={i}\n                            className={classes.tab}\n                        />\n                    ))}\n                </Tabs>\n            </Typography>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [value, i18n.language, classes.tab, isMobile]\n    );\n\n    return (\n        <div className={classes.root}>\n            {tabNav}\n            <Typography className={`${classes.typography} ${classes.tabpanel}`} component=\"div\" role=\"tabpanel\">\n                <React.Suspense fallback={<CircularProgress />}>{panel(value)}</React.Suspense>\n            </Typography>\n        </div>\n    );\n}\n","import * as React from 'react';\nimport { CircularProgress } from '@material-ui/core';\n\nimport PanelTabs from './panels';\n\nexport default function Panel() {\n    return (\n        <React.Suspense fallback={<CircularProgress />}>\n            <PanelTabs />\n        </React.Suspense>\n    );\n}\n","import React, { useMemo, useEffect } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport AppAppBar from './app-appbar';\nimport SVGs from './svgs';\nimport Panels from './panels';\nimport { getBranches, useTpo, getRoutes } from './methods';\nimport { ParamContext } from './context';\nimport { createMuiTheme, ThemeProvider, useMediaQuery, LinearProgress } from '@material-ui/core';\nimport { StationInfo } from './constants/constants';\nimport { useSelector } from 'react-redux';\nimport { RootState } from './redux';\n\nconst darkTheme = createMuiTheme({\n    palette: {\n        type: 'dark',\n        primary: {\n            main: '#bb86fc',\n        },\n        secondary: {\n            main: '#018786',\n        },\n        error: {\n            main: '#cf6679',\n        },\n    },\n    // palette: {\n    //     type: 'dark',\n    //     primary: {\n    //         main: '#8ab4f8',\n    //     },\n    // },\n    overrides: {\n        MuiDialog: {\n            paper: {\n                minWidth: 280,\n            },\n        },\n    },\n});\n\nconst lightTheme = createMuiTheme({\n    palette: {\n        primary: {\n            light: '#bb86fc',\n            main: '#6200ee',\n        },\n        secondary: {\n            main: '#018786',\n        },\n        error: {\n            main: '#b00020',\n        },\n    },\n    // palette: {\n    //     primary: {\n    //         main: '#1a73e8',\n    //     },\n    //     text: {\n    //         primary: '#202124',\n    //         secondary: '#5f6368',\n    //     },\n    // },\n    overrides: {\n        MuiDialog: {\n            paper: {\n                minWidth: 280,\n            },\n        },\n    },\n});\n\nexport default function App() {\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n    const theme = prefersDarkMode ? darkTheme : lightTheme;\n\n    return (\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <ThemeProvider theme={theme}>\n                <React.Suspense fallback={<LinearProgress />}>\n                    <AppAppBar />\n                </React.Suspense>\n                <AppBody />\n            </ThemeProvider>\n        </BrowserRouter>\n    );\n}\n\nconst AppBody = () => {\n    const param = useSelector((store: RootState) => store.param);\n    const paramString = JSON.stringify(param);\n    useEffect(() => {\n        window.rmgStorage.writeFile('rmgParam', paramString).then();\n    }, [paramString]);\n\n    const deps = Object.keys(param.stn_list).reduce(\n        (acc, cur) =>\n            acc +\n            cur +\n            (\n                (...k: (keyof StationInfo)[]) =>\n                (o: StationInfo) =>\n                    k.reduce((a, c) => a + JSON.stringify(o[c]), '')\n            )(\n                'parents',\n                'children',\n                'branch'\n            )(param.stn_list[cur]),\n        ''\n    );\n\n    const branches = useMemo(\n        () => getBranches(param.stn_list),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const routes = useMemo(\n        () => getRoutes(param.stn_list),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const tpo = useTpo(branches);\n\n    return (\n        <>\n            <ParamContext.Provider value={{ branches, routes, deps, tpo }}>\n                <div style={{ overflowY: 'auto' }}>\n                    <SVGs />\n                </div>\n                <div style={{ flex: 1, overflow: 'hidden' }}>\n                    <Panels />\n                </div>\n            </ParamContext.Provider>\n            <canvas style={{ display: 'none' }} />\n        </>\n    );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","export const FILE_NOT_FOUND = 'FILE_NOT_FOUND';\n\nexport default interface StorageService {\n    init: () => Promise<void>;\n\n    writeFile: (filename: string, contents: string) => Promise<void>;\n\n    readFile: (filename: string) => Promise<string>;\n\n    deleteFile: (filename: string) => Promise<void>;\n}\n","import { FILE_NOT_FOUND } from './storageService';\n\nexport default class StorageLocalStorage<StorageService> {\n    private currentBusyFilename: false | string;\n\n    constructor() {\n        this.currentBusyFilename = false;\n    }\n\n    async init() {\n        console.warn('Using localStorage, please update your browser');\n\n        if (!window.localStorage) {\n            alert('Local storage is not available! Please upgrade to a newer browser!');\n            throw new Error('LocalStorage unavailable');\n        }\n\n        try {\n            window.localStorage.setItem('storage_test', '1');\n            window.localStorage.removeItem('storage_test');\n        } catch (e) {\n            alert(\n                \"Local storage is not accessible! Please modify your browser's settings or try with another browser!\"\n            );\n            throw new Error('LocalStorage no write permission');\n        }\n    }\n\n    async writeFile(filename: string, contents: string) {\n        if (this.currentBusyFilename === filename) {\n            console.warn('Attempt to write', filename, 'while write process is not finished!');\n        }\n\n        this.currentBusyFilename = filename;\n        window.localStorage.setItem(filename, contents);\n        this.currentBusyFilename = false;\n    }\n\n    async readFile(filename: string) {\n        if (this.currentBusyFilename === filename) {\n            console.warn('Attempt to read', filename, 'while write process is not finished!');\n        }\n\n        const contents = window.localStorage.getItem(filename);\n        if (!contents) {\n            throw new Error(FILE_NOT_FOUND);\n        }\n        return contents;\n    }\n\n    async deleteFile(filename: string) {\n        if (this.currentBusyFilename === filename) {\n            console.warn('Attempt to delete', filename, 'while write process is not finished!');\n        }\n\n        this.currentBusyFilename = filename;\n        window.localStorage.removeItem(filename);\n        this.currentBusyFilename = false;\n    }\n}\n","import StorageLocalStorage from './storageLocalStorage';\nimport StorageService from './storageService';\nimport StorageIndexedDB from './storageIndexedDB';\n\nexport default async function getRmgStorage(): Promise<StorageService> {\n    if (!window.indexedDB) {\n        console.log('IndexedDB not supported');\n        return new StorageLocalStorage();\n    }\n\n    return await new Promise<StorageService>(resolve => {\n        try {\n            const request = window.indexedDB.open('indexeddb_feature_detection', 1);\n\n            request.onerror = err => {\n                console.log('IndexedDB can NOT be accessed:', err);\n                console.log('Fallback to LocalStorage');\n                resolve(new StorageLocalStorage());\n            };\n\n            request.onsuccess = () => {\n                console.log('IndexedDB can be accessed');\n                // TODO: toggle on indexedDB\n                // resolve(new StorageIndexedDB());\n                resolve(new StorageLocalStorage());\n            };\n        } catch (error) {\n            console.warn('Error while opening IndexedDB:', error);\n            resolve(new StorageLocalStorage());\n        }\n    });\n}\n","import { AllCanvas, CanvasType, LoadingStatus, RmgStyle } from '../../constants/constants';\nimport {\n    SET_CANVAS_SCALE,\n    SET_CANVAS_SCALE_STATUS,\n    SET_CANVAS_TO_SHOW,\n    SET_CANVAS_TO_SHOW_STATUS,\n    SET_RMG_STYLE,\n    setCanvasScaleAction,\n    setCanvasScaleStatusAction,\n    setCanvasToShowAction,\n    setCanvasToShowStatusAction,\n    setRmgStyleAction,\n} from './action';\n\ninterface AppState {\n    rmgStyle: RmgStyle;\n    canvasScale: number;\n    canvasScaleStatus: LoadingStatus;\n    canvasToShow: CanvasType | typeof AllCanvas;\n    canvasToShowStatus: LoadingStatus;\n}\n\nconst initialState: AppState = {\n    rmgStyle: RmgStyle.MTR,\n    canvasScale: 1,\n    canvasScaleStatus: LoadingStatus.init,\n    canvasToShow: AllCanvas,\n    canvasToShowStatus: LoadingStatus.init,\n};\n\nexport default function AppReducer(\n    state = initialState,\n    action:\n        | setRmgStyleAction\n        | setCanvasScaleAction\n        | setCanvasScaleStatusAction\n        | setCanvasToShowAction\n        | setCanvasToShowStatusAction\n): AppState {\n    switch (action.type) {\n        case SET_RMG_STYLE:\n            state.rmgStyle = action.rmgStyle;\n            break;\n        case SET_CANVAS_SCALE:\n            state.canvasScale = action.canvasScale;\n            break;\n        case SET_CANVAS_SCALE_STATUS:\n            state.canvasScaleStatus = action.canvasScaleStatus;\n            break;\n        case SET_CANVAS_TO_SHOW:\n            state.canvasToShow = action.canvasToShow;\n            break;\n        case SET_CANVAS_TO_SHOW_STATUS:\n            state.canvasToShowStatus = action.canvasToShowStatus;\n            break;\n        default:\n            break;\n    }\n\n    return { ...state };\n}\n","import { CityCode } from '../../constants/city-config';\nimport { MonoColour, PanelTypeGZMTR, RMGParam, ShortDirection } from '../../constants/constants';\nimport {\n    SET_BRANCH_SPACING,\n    SET_CURRENT_STATION,\n    SET_CUSTOMISED_MTR_DESTINATION,\n    SET_DIRECTION,\n    SET_DIRECTION_INDICATOR_X,\n    SET_DIRECTION_INDICATOR_Y,\n    SET_FULL_PARAM,\n    SET_LINE_NAME,\n    SET_LINE_NUM,\n    SET_NAME_POSITION,\n    SET_NOTES,\n    SET_PADDING_PERCENTAGE,\n    SET_PANEL_TYPE,\n    SET_PLATFORM,\n    SET_PSD_NUM,\n    SET_STATION,\n    SET_STATIONS_BULK,\n    SET_SVG_HEIGHT,\n    SET_SVG_WIDTH,\n    SET_THEME,\n    SET_Y_PERCENTAGE,\n    setBranchSpacingAction,\n    setCurrentStationAction,\n    setCustomisedMtrDestinationAction,\n    setDirectionAction,\n    setDirectionIndicatorXAction,\n    setDirectionIndicatorYAction,\n    setFullParamAction,\n    setLineNameAction,\n    setLineNumAction,\n    setNamePositionAction,\n    setNotesAction,\n    setPaddingPercentageAction,\n    setPanelTypeAction,\n    setPlatformAction,\n    setPsdNumAction,\n    setStationAction,\n    setStationsBulkAction,\n    setSvgHeightAction,\n    setSvgWidthAction,\n    setThemeAction,\n    setYPercentageAction,\n} from './action';\n\nconst initialState: RMGParam = {\n    svgWidth: {\n        destination: 100,\n        runin: 100,\n        railmap: 100,\n        indoor: 100,\n    },\n    svg_height: 100,\n    y_pc: 50,\n    padding: 10,\n    branch_spacing: 10,\n    direction: ShortDirection.left,\n    platform_num: '1',\n    theme: [CityCode.HongKong, 'twl', '#E2231A', MonoColour.white],\n    line_name: ['線', 'line'],\n    current_stn_idx: '',\n    stn_list: {},\n    namePosMTR: {\n        isStagger: true,\n        isFlip: true,\n    },\n    customiseMTRDest: {\n        isLegacy: false,\n        terminal: false,\n    },\n    line_num: '1',\n    psd_num: '1',\n    info_panel_type: PanelTypeGZMTR.gz1,\n    notesGZMTR: [],\n    direction_gz_x: 0,\n    direction_gz_y: 0,\n};\n\nexport default function ParamReducer(\n    state = initialState,\n    action:\n        | setFullParamAction\n        | setSvgHeightAction\n        | setSvgWidthAction\n        | setYPercentageAction\n        | setBranchSpacingAction\n        | setPaddingPercentageAction\n        | setDirectionIndicatorXAction\n        | setDirectionIndicatorYAction\n        | setThemeAction\n        | setLineNameAction\n        | setDirectionAction\n        | setPlatformAction\n        | setLineNumAction\n        | setPsdNumAction\n        | setPanelTypeAction\n        | setNotesAction\n        | setNamePositionAction\n        | setCustomisedMtrDestinationAction\n        | setCurrentStationAction\n        | setStationAction\n        | setStationsBulkAction\n) {\n    switch (action.type) {\n        case SET_FULL_PARAM:\n            return action.fullParam;\n        case SET_SVG_HEIGHT:\n            state.svg_height = action.svgHeight;\n            break;\n        case SET_SVG_WIDTH:\n            state.svgWidth[action.canvas] = action.svgWidth;\n            break;\n        case SET_Y_PERCENTAGE:\n            state.y_pc = action.yPercentage;\n            break;\n        case SET_BRANCH_SPACING:\n            state.branch_spacing = action.branchSpacing;\n            break;\n        case SET_PADDING_PERCENTAGE:\n            state.padding = action.paddingPercentage;\n            break;\n        case SET_DIRECTION_INDICATOR_X:\n            state.direction_gz_x = action.directionIndicatorX;\n            break;\n        case SET_DIRECTION_INDICATOR_Y:\n            state.direction_gz_y = action.directionIndicatorY;\n            break;\n        case SET_THEME:\n            state.theme = action.theme;\n            break;\n        case SET_LINE_NAME:\n            state.line_name = action.lineName;\n            break;\n        case SET_DIRECTION:\n            state.direction = action.direction;\n            break;\n        case SET_PLATFORM:\n            state.platform_num = action.platform;\n            break;\n        case SET_LINE_NUM:\n            state.line_num = action.lineNum;\n            break;\n        case SET_PSD_NUM:\n            state.psd_num = action.psdNum;\n            break;\n        case SET_PANEL_TYPE:\n            state.info_panel_type = action.panelType;\n            break;\n        case SET_NOTES:\n            state.notesGZMTR = action.notes;\n            break;\n        case SET_NAME_POSITION:\n            state.namePosMTR = action.namePosition;\n            break;\n        case SET_CUSTOMISED_MTR_DESTINATION:\n            state.customiseMTRDest = action.customisedMtrDestination;\n            break;\n        case SET_CURRENT_STATION:\n            state.current_stn_idx = action.currentStation;\n            break;\n        case SET_STATION:\n            state.stn_list[action.stationId] = action.station;\n            break;\n        case SET_STATIONS_BULK:\n            state.stn_list = action.stations;\n            break;\n        default:\n            break;\n    }\n    return { ...state };\n}\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunk, { ThunkMiddleware } from 'redux-thunk';\nimport AppReducer from './app/reducer';\nimport ParamReducer from './param/reducer';\n\nconst rootReducer = combineReducers({\n    app: AppReducer,\n    param: ParamReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport default createStore(rootReducer, applyMiddleware(thunk as ThunkMiddleware<RootState>));\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport './i18n';\nimport App from './App';\nimport { updateParam } from './utils';\nimport * as serviceWorker from './serviceWorker';\n\nimport { AllCanvas, CanvasType } from './constants/constants';\nimport StorageService from './util/storage/storageService';\nimport getRmgStorage from './util/storage';\nimport store from './redux';\nimport { Provider } from 'react-redux';\nimport { setCanvasScale, setCanvasToShow } from './redux/app/action';\nimport { setFullParam } from './redux/param/action';\nimport autoSaveScheduler from './util/auto-save-scheduler';\n\ndeclare global {\n    interface Window {\n        gtag: any;\n        rmgStorage: StorageService;\n        rmgStore: any;\n    }\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// load empty stylesheet elements\ndocument.head.append(\n    ...['share', ...Object.values(CanvasType)].map(tag => {\n        let link = document.createElement('link');\n        link.rel = 'stylesheet';\n        link.id = 'css_' + tag;\n        return link;\n    })\n);\n\nconst renderApp = () => {\n    ReactDOM.render(\n        // <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>,\n        // </React.StrictMode>,\n        document.getElementById('root')\n    );\n};\n\ngetRmgStorage()\n    .then(async rmgStorage => {\n        // setup storage and param\n        await rmgStorage.init();\n        try {\n            const contents = await rmgStorage.readFile('rmgParam');\n\n            const updatedParam = updateParam(JSON.parse(contents));\n            await rmgStorage.writeFile('rmgParam', JSON.stringify(updatedParam));\n        } catch (err) {\n            console.warn('Error in reading rmgParam', err);\n            const module = await import('./constants/templates/basic/blank');\n            const updatedParam = updateParam(module.default);\n            await rmgStorage.writeFile('rmgParam', JSON.stringify(updatedParam));\n        } finally {\n            window.rmgStorage = rmgStorage;\n        }\n    })\n    .then(async () => {\n        // init param store with localStorage\n        const contents = await window.rmgStorage.readFile('rmgParam');\n        store.dispatch(setFullParam(JSON.parse(contents)));\n    })\n    .then(async () => {\n        // style being setup in SVG's router\n\n        // setup canvas scale\n        try {\n            const canvasScaleString = await window.rmgStorage.readFile('rmgScale');\n            const canvasScale = Number(canvasScaleString);\n            canvasScale >= 0.1 && store.dispatch(setCanvasScale(canvasScale));\n        } catch (err) {\n            console.warn('Error in reading rmgScale file', err);\n            console.log('Initiating rmgScale as 1');\n            await window.rmgStorage.writeFile('rmgScale', '1');\n            store.dispatch(setCanvasScale(1));\n        }\n\n        // setup canvas to show\n        try {\n            const canvasToShow = (await window.rmgStorage.readFile('rmgCanvas')) as CanvasType | typeof AllCanvas;\n            store.dispatch(setCanvasToShow(canvasToShow));\n        } catch (err) {\n            console.warn('Error in reading rmgCanvas file', err);\n            console.log('Initiating rmgCanvas as \"all\"');\n            await window.rmgStorage.writeFile('rmgCanvas', AllCanvas);\n            store.dispatch(setCanvasToShow(AllCanvas));\n        }\n\n        window.rmgStore = store;\n    })\n    .then(() => {\n        renderApp();\n    })\n    .then(() => {\n        autoSaveScheduler();\n    });\n","export default function autoSaveScheduler() {\n    setInterval(async () => {\n        await window.rmgStorage.writeFile('rmgParamRedux', JSON.stringify(window.rmgStore.getState().param));\n        console.log('Parameter auto saved!');\n    }, 60 * 1000);\n}\n"],"sourceRoot":""}