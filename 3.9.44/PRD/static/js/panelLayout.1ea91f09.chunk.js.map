{"version":3,"sources":["panels/layout/common.tsx","panels/layout/panel.tsx","panels/layout/index.ts"],"names":["useStyles","makeStyles","theme","createStyles","nestedList","paddingLeft","spacing","textField","maxWidth","slider","width","marginLeft","marginRight","memo","rmgStyle","useAppSelector","store","param","style","RmgStyle","SHMetro","SizeLi","t","useTranslation","classes","dispatch","useAppDispatch","svgHeight","svg_height","svgWidths","svgWidth","useState","isOpen","setIsOpen","handleSvgWidthChange","canvas","value","target","isNaN","Number","setSvgWidth","button","onClick","prevOpen","primary","color","in","unmountOnExit","component","disablePadding","className","canvasConfig","map","defaultValue","toString","onChange","InputProps","endAdornment","position","variant","setSvgHeight","YLi","yPercentage","y_pc","useMemo","_","setYPercentage","step","marks","label","valueLabelDisplay","BranchSpacingLi","branchSpacing","branch_spacing","setBranchSpacing","PaddingLi","paddingPercentage","padding","setPaddingPercentage","max","LayoutGZMTR","React","lazy","container","justify","alignItems","item","xs","sm","md","lg","GZMTR","Suspense","fallback","Panel"],"mappings":"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","file":"static/js/panelLayout.1ea91f09.chunk.js","sourcesContent":["import React, { ChangeEvent, memo, useMemo, useState, Fragment } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    TextField,\n    Slider,\n    List,\n    ListItem,\n    ListItemIcon,\n    Icon,\n    ListItemText,\n    makeStyles,\n    createStyles,\n    Collapse,\n    Divider,\n    InputAdornment,\n} from '@material-ui/core';\nimport { useAppDispatch, useAppSelector } from '../../redux';\nimport { canvasConfig, CanvasType, RmgStyle } from '../../constants/constants';\nimport {\n    setBranchSpacing,\n    setPaddingPercentage,\n    setSvgHeight,\n    setSvgWidth,\n    setYPercentage,\n} from '../../redux/param/action';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        nestedList: {\n            paddingLeft: theme.spacing(5),\n        },\n        textField: {\n            maxWidth: 168,\n        },\n        slider: {\n            width: 168,\n            marginLeft: 8,\n            marginRight: 8,\n        },\n    })\n);\n\nexport default memo(function LayoutCommon() {\n    const rmgStyle = useAppSelector(store => store.param.style);\n    return (\n        <>\n            <SizeLi />\n            <Divider />\n            {rmgStyle !== RmgStyle.SHMetro && (\n                <>\n                    <YLi />\n                    <Divider />\n                </>\n            )}\n            <BranchSpacingLi />\n            <Divider />\n            <PaddingLi />\n        </>\n    );\n});\n\nconst SizeLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const rmgStyle = useAppSelector(store => store.param.style);\n    const svgHeight = useAppSelector(store => store.param.svg_height);\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n\n    const [isOpen, setIsOpen] = useState(false);\n\n    const handleSvgWidthChange =\n        (canvas: CanvasType) =>\n        ({ target: { value } }: ChangeEvent<HTMLInputElement>) => {\n            if (!isNaN(Number(value))) {\n                dispatch(setSvgWidth(Number(value), canvas));\n            }\n        };\n\n    const handleSvgHeightChange = ({ target: { value } }: ChangeEvent<HTMLInputElement>) => {\n        if (!isNaN(Number(value))) {\n            dispatch(setSvgHeight(Number(value)));\n        }\n    };\n\n    return (\n        <>\n            <ListItem button onClick={() => setIsOpen(prevOpen => !prevOpen)}>\n                <ListItemIcon>\n                    <Icon>panorama_horizontal</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('layout.size.title')} />\n                {isOpen ? <Icon color=\"action\">expand_less</Icon> : <Icon color=\"action\">expand_more</Icon>}\n            </ListItem>\n            <Collapse in={isOpen} unmountOnExit>\n                <List component=\"div\" disablePadding className={classes.nestedList}>\n                    {canvasConfig[rmgStyle].map(canvas => (\n                        <Fragment key={canvas + '.width'}>\n                            <ListItem>\n                                <ListItemText primary={t('layout.size.width.' + canvas)} />\n                                <TextField\n                                    defaultValue={svgWidths[canvas].toString()}\n                                    onChange={handleSvgWidthChange(canvas)}\n                                    className={classes.textField}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">px</InputAdornment>,\n                                    }}\n                                />\n                            </ListItem>\n                            <Divider variant=\"middle\" />\n                        </Fragment>\n                    ))}\n                    <ListItem>\n                        <ListItemText primary={t('layout.size.height')} />\n                        <TextField\n                            value={svgHeight.toString()}\n                            onChange={handleSvgHeightChange}\n                            className={classes.textField}\n                            InputProps={{\n                                endAdornment: <InputAdornment position=\"end\">px</InputAdornment>,\n                            }}\n                        />\n                    </ListItem>\n                </List>\n            </Collapse>\n        </>\n    );\n};\n\nconst YLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const yPercentage = useAppSelector(store => store.param.y_pc);\n\n    return useMemo(() => {\n        const handleSliderChange = (_: ChangeEvent<{}>, value: number | number[]) => {\n            dispatch(setYPercentage(value as number));\n        };\n\n        return (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>vertical_align_center</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('layout.y')} />\n                <Slider\n                    className={classes.slider}\n                    value={yPercentage}\n                    onChange={handleSliderChange}\n                    step={0.01}\n                    marks={[\n                        { value: 0, label: '0%' },\n                        { value: 100, label: '100%' },\n                    ]}\n                    valueLabelDisplay=\"auto\"\n                />\n            </ListItem>\n        );\n    }, [yPercentage, classes.slider, t, dispatch]);\n};\n\nconst BranchSpacingLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const branchSpacing = useAppSelector(store => store.param.branch_spacing);\n\n    return useMemo(() => {\n        const handleSliderChange = (_: ChangeEvent<{}>, value: number | number[]) => {\n            dispatch(setBranchSpacing(value as number));\n        };\n\n        return (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>format_line_spacing</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('layout.branchSpacing')} />\n                <Slider\n                    className={classes.slider}\n                    value={branchSpacing}\n                    onChange={handleSliderChange}\n                    step={0.01}\n                    marks={[\n                        { value: 0, label: '0px' },\n                        { value: 100, label: '100px' },\n                    ]}\n                    valueLabelDisplay=\"auto\"\n                />\n            </ListItem>\n        );\n    }, [branchSpacing, classes.slider, t, dispatch]);\n};\n\nconst PaddingLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const paddingPercentage = useAppSelector(store => store.param.padding);\n\n    return useMemo(() => {\n        const handleSliderChange = (_: ChangeEvent<{}>, value: number | number[]) => {\n            dispatch(setPaddingPercentage(value as number));\n        };\n\n        return (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>stay_current_landscape</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('layout.padding')} />\n                <Slider\n                    className={classes.slider}\n                    value={paddingPercentage}\n                    onChange={handleSliderChange}\n                    step={0.01}\n                    max={50}\n                    marks={[\n                        { value: 0, label: '0%' },\n                        { value: 50, label: '50%' },\n                    ]}\n                    valueLabelDisplay=\"auto\"\n                />\n            </ListItem>\n        );\n    }, [paddingPercentage, classes.slider, t, dispatch]);\n};\n","import React from 'react';\nimport { Grid, LinearProgress, List, Paper } from '@material-ui/core';\nimport LayoutCommon from './common';\nimport { useAppSelector } from '../../redux';\nimport { RmgStyle } from '../../constants/constants';\n\nconst LayoutGZMTR = React.lazy(() => import(/* webpackChunkName: \"panelLayoutGZMTR\" */ './gzmtr'));\n\nexport default React.memo(function LayoutPanel() {\n    const rmgStyle = useAppSelector(store => store.param.style);\n    return (\n        <Grid container spacing={3} justify=\"center\" alignItems=\"flex-start\">\n            <Grid item xs={12} sm={10} md={7} lg={5}>\n                <Paper>\n                    <List component=\"div\" disablePadding>\n                        <LayoutCommon />\n                        {rmgStyle === RmgStyle.GZMTR && (\n                            <React.Suspense fallback={<LinearProgress />}>\n                                <LayoutGZMTR />\n                            </React.Suspense>\n                        )}\n                    </List>\n                </Paper>\n            </Grid>\n        </Grid>\n    );\n});\n\n// export default LayoutPanel;\n","import Panel from './panel';\n\nexport default Panel;\n"],"sourceRoot":""}