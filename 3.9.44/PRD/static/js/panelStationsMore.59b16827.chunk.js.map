{"version":3,"sources":["panels/stations/edit-diag/more-tab.tsx"],"names":["memo","props","rmgStyle","useAppSelector","store","param","style","rmgStyleServices","RmgStyle","GZMTR","Services","local","express","SHMetro","direct","rmgStyleFacility","MTR","Facilities","airport","disney","hsr","none","railway","ServiceLi","stnId","providedServices","FacilityLi","providedFacilities","t","useTranslation","dispatch","useAppDispatch","facility","stn_list","primary","native","value","onChange","target","updateStationFacility","map","f","services","secondary","row","s","control","checked","includes","service","addStationService","removeStationService","disabled","label","secondaryTypographyProps"],"mappings":"sMAkBeA,0BAAK,SAAiBC,GAA2B,IAAD,IACrDC,EAAWC,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,SAC/CC,GAAkD,mBACnDC,IAASC,MAAQ,CAACC,IAASC,MAAOD,IAASE,UADQ,cAEnDJ,IAASK,QAAU,CAACH,IAASC,MAAOD,IAASE,QAASF,IAASI,SAFZ,GAIlDC,GAAoD,mBACrDP,IAASQ,IAAM,CAACC,IAAWC,QAASD,IAAWE,OAAQF,IAAWG,IAAKH,IAAWI,OAD7B,cAErDb,IAASK,QAAU,CAACI,IAAWK,QAASL,IAAWC,QAASD,IAAWE,OAAQF,IAAWI,OAFrC,GAK1D,OACI,8BACI,eAAC,OAAD,WACKnB,KAAYK,GACT,cAACgB,EAAD,CAAWC,MAAOvB,EAAMuB,MAAOC,iBAAkBlB,EAAiBL,KAErEA,KAAYa,GACT,cAACW,EAAD,CAAYF,MAAOvB,EAAMuB,MAAOG,mBAAoBZ,EAAiBb,aAOzF,IAAMwB,EAAa,SAACzB,GAChB,IAAQuB,EAA8BvB,EAA9BuB,MAAOG,EAAuB1B,EAAvB0B,mBACPC,EAAMC,2BAAND,EACFE,EAAWC,cAETC,EAAa7B,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAM4B,SAAST,MAA1DQ,SACR,OACI,eAAC,WAAD,WACI,cAAC,eAAD,UACI,cAAC,OAAD,sBAEJ,cAAC,eAAD,CAAcE,QAASN,EAAE,wCACzB,cAAC,0BAAD,UACI,cAAC,SAAD,CACIO,QAAM,EACNC,MAAOJ,EACPK,SAAU,YAA4B,IAAfD,EAAc,EAAxBE,OAAUF,MACnBN,EAASS,aAAsBf,EAAOY,KAJ9C,SAOKT,EAAmBa,KAAI,SAAAC,GAAC,OACrB,wBAAgBL,MAAOK,EAAvB,SACKb,EAAE,gCAAwC,KAANa,EAAW,OAASA,KADhDA,cAU/BlB,EAAY,SAACtB,GACf,IAAQuB,EAA4BvB,EAA5BuB,MAAOC,EAAqBxB,EAArBwB,iBACPG,EAAMC,2BAAND,EACFE,EAAWC,cAETW,EAAavC,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAM4B,SAAST,MAA1DkB,SAYR,OACI,eAAC,WAAD,WACI,cAAC,eAAD,UACI,cAAC,OAAD,sBAEJ,cAAC,eAAD,CACIR,QAASN,EAAE,sCACXe,UACI,cAAC,YAAD,CAAWC,KAAG,EAAd,SACKnB,EAAiBe,KAAI,SAAAK,GAAC,OACnB,cAAC,mBAAD,CACIC,QACI,cAAC,WAAD,CACIC,QAASL,EAASM,SAASH,GAC3BT,MAAOS,EACPR,UAxB/BY,EAwBsDJ,EAvBvD,YAAmE,IAAtDE,EAAqD,EAA/DT,OAAUS,QACLE,IAAYvC,IAASC,OAErBmB,EADAiB,EACSG,YAAkBjD,EAAMuB,MAAOyB,GAE/BE,YAAqBlD,EAAMuB,MAAOyB,MAmBnBG,SAAUP,IAAMnC,IAASC,QAGjC0C,MAAOzB,EAAE,+BAAiCiB,IACrCA,GA7B7B,IAACI,OAkCOK,yBAAwB,eAAK,YAAqB","file":"static/js/panelStationsMore.59b16827.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Checkbox,\n    FormControlLabel,\n    FormGroup,\n    Icon,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    Select,\n} from '@material-ui/core';\nimport { useAppDispatch, useAppSelector } from '../../../redux';\nimport { Facilities, RmgStyle, Services } from '../../../constants/constants';\nimport { addStationService, removeStationService, updateStationFacility } from '../../../redux/param/action';\n\nexport default memo(function MoreTab(props: { stnId: string }) {\n    const rmgStyle = useAppSelector(store => store.param.style);\n    const rmgStyleServices: { [s in RmgStyle]?: Services[] } = {\n        [RmgStyle.GZMTR]: [Services.local, Services.express],\n        [RmgStyle.SHMetro]: [Services.local, Services.express, Services.direct],\n    };\n    const rmgStyleFacility: { [s in RmgStyle]?: Facilities[] } = {\n        [RmgStyle.MTR]: [Facilities.airport, Facilities.disney, Facilities.hsr, Facilities.none],\n        [RmgStyle.SHMetro]: [Facilities.railway, Facilities.airport, Facilities.disney, Facilities.none],\n    }\n\n    return (\n        <div>\n            <List>\n                {rmgStyle in rmgStyleServices && (\n                    <ServiceLi stnId={props.stnId} providedServices={rmgStyleServices[rmgStyle] as Services[]} />\n                )}\n                {rmgStyle in rmgStyleFacility && (\n                    <FacilityLi stnId={props.stnId} providedFacilities={rmgStyleFacility[rmgStyle] as Facilities[]} />\n                )}\n            </List>\n        </div>\n    );\n});\n\nconst FacilityLi = (props: { stnId: string, providedFacilities: Facilities[] }) => {\n    const { stnId, providedFacilities } = props;\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const { facility } = useAppSelector(store => store.param.stn_list[stnId]);\n    return (\n        <ListItem>\n            <ListItemIcon>\n                <Icon>place</Icon>\n            </ListItemIcon>\n            <ListItemText primary={t('stations.edit.more.facility.button')} />\n            <ListItemSecondaryAction>\n                <Select\n                    native\n                    value={facility}\n                    onChange={({ target: { value } }) => {\n                        dispatch(updateStationFacility(stnId, value as Facilities));\n                    }}\n                >\n                    {providedFacilities.map(f => (\n                        <option key={f} value={f}>\n                            {t('stations.edit.more.facility.' + (f === '' ? 'none' : f))}\n                        </option>\n                    ))}\n                </Select>\n            </ListItemSecondaryAction>\n        </ListItem>\n    );\n};\n\nconst ServiceLi = (props: { stnId: string; providedServices: Services[] }) => {\n    const { stnId, providedServices } = props;\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const { services } = useAppSelector(store => store.param.stn_list[stnId]);\n\n    const handleChange =\n        (service: Services) =>\n        ({ target: { checked } }: React.ChangeEvent<HTMLInputElement>) => {\n            if (service === Services.local) return; // cannot remove local service\n            if (checked) {\n                dispatch(addStationService(props.stnId, service));\n            } else {\n                dispatch(removeStationService(props.stnId, service));\n            }\n        };\n    return (\n        <ListItem>\n            <ListItemIcon>\n                <Icon>train</Icon>\n            </ListItemIcon>\n            <ListItemText\n                primary={t('stations.edit.more.services.button')}\n                secondary={\n                    <FormGroup row>\n                        {providedServices.map(s => (\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        checked={services.includes(s)}\n                                        value={s}\n                                        onChange={handleChange(s)}\n                                        disabled={s === Services.local}\n                                    />\n                                }\n                                label={t('stations.edit.more.services.' + s)}\n                                key={s}\n                            />\n                        ))}\n                    </FormGroup>\n                }\n                secondaryTypographyProps={{ ['component' as any]: 'div' }}\n            />\n        </ListItem>\n    );\n};\n"],"sourceRoot":""}