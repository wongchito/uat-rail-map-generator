{"version":3,"sources":["svgs/railmap/main/station/station-mtr.tsx","svgs/railmap/main/main-mtr.tsx","svgs/railmap/railmap-mtr.tsx","methods.ts","svgs/railmap/methods/share.ts","svgs/strip/strip-mtr.tsx","svgs/railmap/methods/mtr.ts"],"names":["StationMTR","props","stnId","stnState","namePos","stnInfo","useAppSelector","store","param","stn_list","branchPos","useMemo","pos","branch","right","length","push","children","indexOf","left","parents","toString","JSON","stringify","branchAffix","includes","branchDy","branchElDy","stnIcon","l","fallback","n","transfer","info","map","val","transform","variant","stnTrans","end","Direction","undefined","name","osi_names","tickDirec","tick_direc","xlinkHref","stroke","className","paid_area","facility","nameDX","StationNameGElement","NAME_FULL_HEIGHT","stnNameEl","useRef","useState","width","x","bBox","setBBox","useEffect","document","fonts","ready","then","current","getBBox","dy","STN_NAME_LINE_GAP","split","textAnchor","osi22DY","facilityX","facilityNameDX","Facilities","none","y","NAME_ZH_TOP","height","fill","ref","StationName","nameGap","React","memo","txt","i","prevProps","nextProps","IntTickGroup","intInfo","rotation","ShortDirection","style","IntTick","nameZHLns","nameENLns","OSIName","leftWideFactor","stnList","res","ls","rightWideFactor","MainMTR","helper","branches","routes","deps","depsStr","svgWidths","svgWidth","yPercentage","y_pc","paddingPercentage","padding","branchSpacing","branch_spacing","direction","namePosition","namePosMTR","currentStationIndex","current_stn_idx","stationList","adjMat","adjacencyList","criticalPath","criticalPathMethod","realCP","nodes","slice","xShares","console","log","Object","keys","reduce","acc","cur","getXShareMTR","lineXs","CanvasType","RailMap","xs","len","yShares","StationsMTR","getYShares","ys","stnStates","getStnState","namePoss","id","isStagger","isFlip","branchOfStn","filter","getNamePos","linePaths","drawLine","Lines","paths","strokeWidth","pass","path","d","main","StationGroup","DefsMTR","stripPc","clipPath","points","r","h","Fragment","strokeLinecap","getYShareMTR","stnPred","leftW","rightW","a","c","from","to","allLengths","criticalPaths","forEach","child","cp","unshift","maxLength","Math","max","partSource","partSink","leftOpenJaw","lens","currentId","Set","concat","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","pathWeight","Infinity","pathTurnParams","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","getYShare","stnIds","realXs","realYs","e","prevId","prevY","prevX","stnDX","stnExtraH","stnSpareH","warn","join","replace","stations","lineMainStns","linePassStns","_linePath"],"mappings":"gOAiMeA,EA/KI,SAACC,GAChB,IAAQC,EAA6BD,EAA7BC,MAAOC,EAAsBF,EAAtBE,SAAUC,EAAYH,EAAZG,QACnBC,EAAUC,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,SAASP,MAKvDQ,EAAYC,mBACd,WACI,IAAIC,EAAqC,GAOzC,OANIP,EAAQQ,OAAOC,MAAMC,QACrBH,EAAII,KAA2D,IAAtDX,EAAQY,SAASC,QAAQb,EAAQQ,OAAOC,MAAM,IAAY,KAAO,MAE1ET,EAAQQ,OAAOM,KAAKJ,QACpBH,EAAII,KAAyD,IAApDX,EAAQe,QAAQF,QAAQb,EAAQQ,OAAOM,KAAK,IAAY,KAAO,MAErEP,IAGX,CAACP,EAAQe,QAAQC,WAAYhB,EAAQY,SAASI,WAAYC,KAAKC,UAAUlB,EAAQQ,UAM/EW,EAAcb,mBAChB,WACI,IAAIC,EAAMF,EACV,OAAmB,IAAfE,EAAIG,OACG,GAEPH,EAAIa,SAAS,OAASb,EAAIa,SAAS,OAGnCb,EAAIa,SAAS,OAASb,EAAIa,SAAS,MAF5B,MAKJ,OAGX,CAACf,EAAUW,aAMTK,EAAWf,mBACb,WAEI,GAAc,KADFa,EAER,OAAO,EACJ,GAAc,QAHTA,EAIR,OAAOpB,EAAU,MAAQ,KAEzB,IAAIQ,EAAMF,EACV,OAAIE,EAAIa,SAAS,OAASb,EAAIa,SAAS,MAC5BrB,EAAU,KAAO,EAExBQ,EAAIa,SAAS,OAASb,EAAIa,SAAS,MAC5BrB,EAAU,GAAK,UAD1B,IAMR,CAACM,EAAUW,WAAYG,EAAapB,IAMlCuB,EAAahB,mBAAQ,WAEvB,GAAc,KADFa,EAER,OAAO,EACJ,GAAc,QAHTA,EAIR,OAAOpB,GAAW,KAAO,KAEzB,IAAIQ,EAAMF,EACV,OAAIE,EAAIa,SAAS,OAASb,EAAIa,SAAS,MAC5BrB,EAAU,EAAI,KAErBQ,EAAIa,SAAS,OAASb,EAAIa,SAAS,MAC5BrB,GAAW,KAAO,OAD7B,IAIL,CAACoB,EAAapB,EAASM,IAEpBkB,EAAW,SAACC,GACd,IAAMC,EAAW,SAACC,GAAD,OAAgBA,EAAI,GAAK,OAASA,EAAI,GAAK,SAC5D,OAAKF,EAAE,GAQa,IAATA,EAAE,GACFA,EAAE,IAAM,EAAI,QAAUC,EAASD,EAAE,IACxB,IAATA,EAAE,GACI,IAATA,EAAE,GACK,QACS,IAATA,EAAE,GACkB,cAAvBxB,EAAQe,QAAQ,IAA8C,YAAxBf,EAAQY,SAAS,GAChD,WAEA,QAGJa,EAASD,EAAE,IAGjBA,EAAE,IAAe,IAATA,EAAE,GAGJC,EAASD,EAAE,IAFX,QAvBNA,EAAE,GAEa,IAATA,EAAE,GACF,MAEAC,EAASD,EAAE,IAJX,MAJF,CA+BdxB,EAAQ2B,SAASC,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIpB,WAExC,OACI,qCACI,oBAAGqB,UAAS,sBAAiBT,EAAjB,KAAZ,UACI,cAAC,EAAD,CACIU,QAAST,EACTU,SAAUjC,EAAQ2B,SAClB7B,SAAUA,EACVC,QAASA,EACTmC,IACgB,aAAZX,EAC6B,cAAvBvB,EAAQe,QAAQ,GACZoB,IAAUrB,KACVqB,IAAU1B,WACd2B,IAGbb,EAAQH,SAAS,QACd,cAAC,EAAD,CACIiB,KAAMrC,EAAQ2B,SAASW,UAAU,GACjCxC,SAAUA,EACVkC,QAAST,EACTgB,UAAWvC,EAAQ2B,SAASa,WAC5BzC,QAASA,EACTmC,IACgB,aAAZX,EAC6B,cAAvBvB,EAAQe,QAAQ,GACZoB,IAAUrB,KACVqB,IAAU1B,WACd2B,OAKtB,qBACIK,UAAW,IAAMlB,EAAUJ,EAC3BuB,QAAsB,IAAd5C,EAAkB,kBAAoB,mBAC9C6C,UAAW3C,EAAQ2B,SAASiB,UAAY,yBAA2B,2BACnEb,UACI,sBAAeV,EAAf,qBACiC,YAAxBrB,EAAQY,SAAS,GAAmB,GAAK,EADlD,YACuDb,GAAW,EAAI,EADtE,OAIR,mBAAGgC,UAAS,sBAAiBV,EAAjB,KAAZ,SACI,cAAC,EAAD,CACIgB,KAAMrC,EAAQqC,KACdtC,QAASA,EACTD,SAAUA,EACV+C,SAAU7C,EAAQ6C,SAClBC,OAAoB,UAAZvB,EAAuD,MAAhCvB,EAAQ2B,SAASa,WAAqB,GAAK,OAAKJ,UAiB7FW,EAAsB,SAACnD,GACzB,IAAQyC,EAA8CzC,EAA9CyC,KAAMtC,EAAwCH,EAAxCG,QAASD,EAA+BF,EAA/BE,SAAUgD,EAAqBlD,EAArBkD,OAAQD,EAAajD,EAAbiD,SAwBnCG,EAAmB,SAMnBC,EAAYC,iBAA2B,MAC7C,EAAwBC,mBAAS,CAAEC,MAAO,EAAGC,EAAG,IAAhD,mBAAOC,EAAP,KAAaC,EAAb,KACAC,qBACI,WACIC,SAASC,MAAMC,MAAMC,MAAK,kBAAML,EAAQN,EAAUY,QAASC,gBAG/D,CAAChE,EAAUuC,EAAKrB,aAGpB,IAAM+C,EAAKhE,EACLiE,SACA,SAAyF,IAAlC3B,EAAK,GAAG4B,MAAM,MAAMvD,OAAS,GAEpFwD,EAAcpB,EAAoBA,EAAS,EAAI,QAAU,MAAlC,SACvBqB,EAAWrB,EAAa/C,EAAU,IAAM,GAApB,EAEpBqE,EAAatB,EAEbA,EAAS,EACTA,EAAS,WACT,UAA8BQ,EAAKF,MAAQN,IAHzCQ,EAAKF,MAAQ,GAAK,EAIpBiB,EACFxB,IAAayB,IAAWC,KAClB,EACCzB,EAEDA,EAAS,EACT,EACAE,SAA2BF,EAH3B,UAKV,OACI,oBACIoB,WAAYA,EACZnC,UAAS,sBAAiBgC,EAAKI,EAAtB,KACTxB,UAAS,gBAAwB,IAAd7C,EAAkB,OAAsB,IAAbA,EAAiB,UAAY,UAH/E,UAKkB,IAAbA,GACG,sBACIuD,EAAGC,EAAKD,EAAI,GAAwB,IAAnBgB,EAAuB,EAAIA,EAAiB,EAAIrB,GACjEwB,GAAGC,QACHrB,MAAOE,EAAKF,MAAQ,GAAwB,IAAnBiB,EAAuB,EAAI,UACpDK,OAAQ1B,EAAsD,IAAlCX,EAAK,GAAG4B,MAAM,MAAMvD,OAAS,GAAU,EACnEiE,KAAK,qBAGZ9B,IAAayB,IAAWC,MACrB,qBACI9B,UAAW,IAAMI,EACjB8B,MAAoB,IAAd7E,EAAkB,kBAAoB,mBAC5CuD,EAAGe,EACHI,EAAwD,KAAlCnC,EAAK,GAAG4B,MAAM,MAAMvD,OAAS,GAAhD+D,UAGX,mBAAGG,IAAK3B,EAAWlB,UAAS,oBAAesC,EAAf,OAA5B,SACI,cAACQ,EAAD,CAAaxC,KAAMA,EAAMyC,QAjEd,WA4ErBD,EAAcE,IAAMC,MACtB,SAACpF,GACG,OACI,qCACI,sBAAM+C,UAAU,sCAAhB,SAAuD/C,EAAMyC,KAAK,KACjEzC,EAAMyC,KAAK,GAAG4B,MAAM,MAAMpC,KAAI,SAACoD,EAAKC,GAAN,OAC3B,sBAAcvC,UAAU,sCAAsCoB,GAAInE,EAAMkF,QAAc,GAAJI,EAAlF,SACKD,GADMC,YAO3B,SAACC,EAAWC,GAAZ,OACID,EAAU9C,KAAKrB,aAAeoE,EAAU/C,KAAKrB,YAAcmE,EAAUL,UAAYM,EAAUN,WAW7FO,EAAe,SAACzF,GAClB,IAAQoC,EAA8CpC,EAA9CoC,QAASC,EAAqCrC,EAArCqC,SAAUnC,EAA2BF,EAA3BE,SAAUC,EAAiBH,EAAjBG,QAASmC,EAAQtC,EAARsC,IAC9C,OAAQF,GACJ,IAAK,MACD,OACI,4BACI,cAAC,EAAD,CAASsD,QAASrD,EAASL,KAAK,GAAG,GAAI9B,SAAUA,EAAUyF,SAAUxF,EAAU,IAAM,MAIjG,IAAK,QACD,OACI,mBAAGgC,UAAS,sBAAiBhC,GAAW,GAAK,GAAjC,KAAZ,SACI,cAAC,EAAD,CAASuF,QAASrD,EAASL,KAAK,GAAG,GAAI9B,SAAUA,EAAUyF,SAAUxF,EAAU,IAAM,MAGjG,IAAK,QACD,OACI,mCACKkC,EAASL,KAAK,GAAGC,KAAI,SAACyD,EAASJ,GAAV,OAClB,mBAEInD,UAAS,sBACJhC,GAA8B,EAAI,IAAMkC,EAASL,KAAK,GAAGlB,OAASwE,GAAxD,EAAI,IAAMA,EAAI,GADpB,KAFb,SAMI,cAAC,EAAD,CACII,QAASA,EACTxF,SAAUA,EACVyF,SAAUtD,EAASO,aAAegD,IAAe/E,OAAS,GAAK,MAR9DyE,QAczB,IAAK,QACD,OACI,qCACI,4BACI,cAAC,EAAD,CACII,QAASrD,EAASL,KAAK,GAAG,GAC1B9B,SAAUA,EACVyF,SAAUxF,EAAU,EAAI,IACxB+C,OAAQb,EAASO,aAAegD,IAAe/E,MAAQ,GAAK,MAGnEwB,EAASL,KAAK,GAAGC,KAAI,SAACyD,EAASJ,GAAV,OAClB,mBAEInD,UAAS,sBACJhC,GAA8B,EAAI,IAAMkC,EAASL,KAAK,GAAGlB,OAASwE,GAAxD,EAAI,IAAMA,EAAI,GADpB,KAFb,SAMI,cAAC,EAAD,CACII,QAASA,EACTxF,SAAUA,EACVyF,SAAUtD,EAASO,aAAegD,IAAe/E,OAAS,GAAK,MAR9DyE,SAczB,IAAK,WACD,OACI,qCACI,4BACI,cAAC,EAAD,CAASI,QAASrD,EAASL,KAAK,GAAG,GAAI9B,SAAUA,EAAUyF,SAAUxF,EAAU,IAAM,MAExFkC,EAASL,KAAK,GAAGC,KAAI,SAACyD,EAASJ,GAAV,OAClB,mBAEInD,UAAS,oBAAeG,IAAQC,IAAUrB,MAAQ,GAAK,GAA9C,YACLf,EAAU,GAAKmF,GAAK,IAAMjD,EAASL,KAAK,GAAGlB,OAAS,EAAIwE,GADnD,KAFb,SAMI,cAAC,EAAD,CACII,QAASA,EACTxF,SAAUA,EACVyF,SAAUrD,IAAQC,IAAUrB,KAAO,IAAM,MARxCoE,SAczB,QACI,OAAIlD,EAAQZ,SAAS,OAEb,mCACKa,EAASL,KAAK,GAAGC,KAAI,SAACyD,EAASJ,GAAV,OAClB,mBAEIO,MAAO,CACH1D,UAAU,cAAD,OACJhC,GAA0B,IAAMkC,EAASL,KAAK,GAAGlB,OAASwE,GAAhD,IAAMA,EAAI,GADhB,QAHjB,SAQI,cAAC,EAAD,CACII,QAASA,EACTxF,SAAUA,EACVyF,SAAUtD,EAASO,aAAegD,IAAe/E,OAAS,GAAK,MAV9DyE,QAiBd,+BAYjBQ,EAAU,SAAC9F,GACb,IAAQ0F,EAAwC1F,EAAxC0F,QAASxF,EAA+BF,EAA/BE,SAAUyF,EAAqB3F,EAArB2F,SAAUzC,EAAWlD,EAAXkD,OAE/B6C,EAAYL,EAAQ,GAAGrB,MAAM,MAAMvD,OACnCkF,EAAYN,EAAQ,GAAGrB,MAAM,MAAMvD,OAEnC2C,EAAK,SAAAkC,GACP,OAAQA,GACJ,KAAK,GACD,OAAQ,GACZ,KAAM,GACF,OAAO,GACX,QACI,OAAO,GAPR,CASRA,GAEGf,EAAK,SAAAe,GACP,OAAQA,GACJ,KAAK,EACD,OAAO,UACX,KAAK,IACD,OAAO,UAA4B,IAAMI,EAAY,GAAK,GAAKC,EAAY,GAC/E,QACI,OAAO,UAAY,SAAW,IAAMD,EAAY,GAAK,GAAKC,EAAY,GAAK,GAAK,GAPjF,CASRL,GAEGrB,EAAc,SAAAqB,GAChB,OAAQA,GACJ,KAAK,GACD,MAAO,MACX,KAAM,GACF,MAAO,QACX,QACI,OAAKzC,EAEMA,EAAS,EACT,QAEA,MAJA,UARH,CAejByC,GAEH,OAAOjF,mBACH,kBACI,qCACI,qBACImC,UAAU,WACVC,OAAQ4C,EAAQ,GAChBvD,UAAS,iBAAYwD,EAAZ,KACT5C,UAAW,4CAA2D,IAAd7C,EAAkB,kBAAoB,MAElG,oBACIoE,WAAYA,EACZnC,UAAS,oBAAesB,GAAKP,GAAU,GAA9B,YAAoC0B,EAApC,KACT7B,UAAS,gBAAwB,IAAd7C,EAAkB,OAAS,UAHlD,UAKKwF,EAAQ,GAAGrB,MAAM,MAAMpC,KAAI,SAACoD,EAAKC,GAAN,OACxB,sBAAcvC,UAAU,uBAAuBoB,GAAI,GAAKmB,EAAxD,SACKD,GADMC,MAIdI,EAAQ,GAAGrB,MAAM,MAAMpC,KAAI,SAACoD,EAAKC,GAAN,OACxB,sBAA0BvC,UAAU,uBAAuBoB,GAAgB,GAAZ4B,EAAiB,EAAI,EAAIT,EAAxF,SACKD,GADMU,EAAYT,cAQvC,CAACI,EAAQtE,WAAYuE,EAAUzF,KAajC+F,EAAU,SAACjG,GAAyB,IAAD,EAC7ByC,EAAqDzC,EAArDyC,KAAMvC,EAA+CF,EAA/CE,SAAUkC,EAAqCpC,EAArCoC,QAASO,EAA4B3C,EAA5B2C,UAAWxC,EAAiBH,EAAjBG,QAASmC,EAAQtC,EAARsC,IAE/CgC,EAAc,SAAAlC,GAChB,OAAQA,GACJ,IAAK,QACD,OAAOO,IAAciD,IAAe1E,KAAO,MAAQ,QACvD,IAAK,QACD,OAAOyB,IAAciD,IAAe1E,KAAO,QAAU,MACzD,QACI,MAAO,UAPC,CASjBkB,GAEGqB,EAAK,SAAArB,GACP,OAAQA,GACJ,IAAK,QACD,OAAOO,IAAciD,IAAe1E,MAAQ,GAAK,GACrD,IAAK,QACD,OAAOyB,IAAciD,IAAe1E,KAAO,IAAM,GACrD,IAAK,WACD,OAAOoB,IAAQC,IAAUrB,MAAQ,GAAK,GAC1C,QACI,OAAO,GATR,CAWRkB,GAEGwC,EAAK,SAAAxC,GAAY,IAAD,QAClB,OAAQA,GACJ,IAAK,QACD,OAEI,SADEjC,GAAgB,GAAN,IAEZ,WACEA,EAAc,KAAU,OAAJsC,QAAI,IAAJA,GAAA,UAAAA,EAAO,UAAP,eAAW4B,MAAM,MAAMvD,QAAS,GAA1C,GAEpB,IAAK,QACD,OAAQX,GAEF,QAAuC,KAAU,OAAJsC,QAAI,IAAJA,GAAA,UAAAA,EAAO,UAAP,eAAW4B,MAAM,MAAMvD,QAAS,GAD7E,SAEV,IAAK,QACD,OACMX,GAAqB,EAAX,IACXA,EAAU,IAAU,IACrB,QACA,UACA,IAAS,OAAJsC,QAAI,IAAJA,GAAA,UAAAA,EAAO,UAAP,eAAW4B,MAAM,MAAMvD,QAAS,GAE7C,IAAK,WACD,OAAQX,GAAyB,QAA2B,KAAU,OAAJsC,QAAI,IAAJA,GAAA,UAAAA,EAAO,UAAP,eAAW4B,MAAM,MAAMvD,QAAS,GAAhF,SACtB,QACI,OAAO,GAxBR,CA0BRsB,GAEH,OACI,oBACIkC,WAAYA,EACZnC,UAAS,oBAAesB,EAAf,YAAoBmB,EAApB,KACT7B,UAAS,gBAAwB,IAAd7C,EAAkB,OAAS,UAHlD,UAKI,sBAAM6C,UAAU,kCAAhB,gBAAmDN,QAAnD,IAAmDA,OAAnD,EAAmDA,EAAO,KAL9D,OAMKA,QANL,IAMKA,GANL,UAMKA,EAAO,UANZ,aAMK,EAAW4B,MAAM,MAAMpC,KAAI,SAACoD,EAAKC,GAAN,OACxB,sBAAcvC,UAAU,kCAAkCoB,GAAI,GAAK,GAAKmB,EAAxE,SACKD,GADMC,UC1kBrBY,EAAiB,SAACC,EAAsBlG,GAC1C,IAAImG,EAAM,EACJrE,EAAaoE,EAAQlG,GAArB8B,SACFsE,EAAKtE,EAASC,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIpB,UAgBtC,MAf4B,MAAxBiB,EAASa,cAEJyD,EAAG,IAAMA,EAAG,GAAK,IAAGD,GAAO,KAE5BC,EAAG,IAAiB,IAAVA,EAAG,IAAsB,IAAVA,EAAG,KAAWD,GAAO,KAExC,IAAVC,EAAG,IAAsB,IAAVA,EAAG,IAEgB,cAA9BF,EAAQlG,GAAOkB,QAAQ,IAAqD,YAA/BgF,EAAQlG,GAAOe,SAAS,KAAkBoF,GAAO,IAKhE,IAAlCD,EAAQlG,GAAOkB,QAAQL,SAAcsF,GAAO,IACW,IAAvDD,EAAQA,EAAQlG,GAAOkB,QAAQ,IAAIH,SAASF,SAAcsF,GAAO,IACxD,EAANA,GAGLE,EAAkB,SAACH,EAAsBlG,GAC3C,IAAImG,EAAM,EACJrE,EAAaoE,EAAQlG,GAArB8B,SACFsE,EAAKtE,EAASC,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIpB,UAetC,MAd4B,MAAxBiB,EAASa,cAEJyD,EAAG,IAAMA,EAAG,GAAK,IAAGD,GAAO,KAE5BC,EAAG,IAAiB,IAAVA,EAAG,IAAsB,IAAVA,EAAG,KAAWD,GAAO,KAExC,IAAVC,EAAG,IAAsB,IAAVA,EAAG,IACgB,cAA9BF,EAAQlG,GAAOkB,QAAQ,IAAqD,YAA/BgF,EAAQlG,GAAOe,SAAS,KAAkBoF,GAAO,IAK/D,IAAnCD,EAAQlG,GAAOe,SAASF,SAAcsF,GAAO,IACU,IAAvDD,EAAQA,EAAQlG,GAAOe,SAAS,IAAIG,QAAQL,SAAcsF,GAAO,IAC9DA,GA8GIG,EA/FC,WAAO,IAAD,EAClB,EAA4ClG,aAAe,SAAAC,GAAK,OAAIA,EAAMkG,UAAlEC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,OAAiBC,EAAnC,EAA0BC,QAEpBC,EAAYxG,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMuG,YAChDC,EAAc1G,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMyG,QAClDC,EAAoB5G,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAM2G,WACxDC,EAAgB9G,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAM6G,kBACpDC,EAAYhH,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAM8G,aAChDC,EAAejH,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMgH,cAEnDC,EAAsBnH,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMkH,mBAC1DC,EAAcrH,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,YAElDmH,EAASC,YAAcF,EAAaxB,EAAgBI,GAEpDuB,EAAenH,mBACjB,kBAAMoH,YAAmB,YAAa,UAAWH,KAEjD,CAACtG,KAAKC,UAAUqG,KAEdI,EAASrH,mBACX,kBAAMoH,YAAmBD,EAAaG,MAAM,GAAIH,EAAaG,MAAMC,OAAO,GAAG,GAAIN,KAEjF,CAACtG,KAAKC,UAAUqG,KAGdO,EAAUxH,mBACZ,WAEI,OADAyH,QAAQC,IAAI,sBACLC,OAAOC,KAAKZ,GAAaa,QAC5B,SAACC,EAAKC,GAAN,mBAAC,eAAmBD,GAApB,kBAA0BC,EAAMC,YAAaD,EAAKd,EAAQlB,OAC1D,MAIR,CAACA,EAASrF,WAAYC,KAAKC,UAAUqG,KAEnCgB,EAA2B,CAC5B9B,EAAU+B,IAAWC,SAAW5B,EAAqB,IACtDJ,EAAU+B,IAAWC,UAAY,EAAI5B,EAAoB,MAEvD6B,EAAKT,OAAOC,KAAKJ,GAASK,QAC5B,SAACC,EAAKC,GAAN,mBAAC,eAAmBD,GAApB,kBAA0BC,EAAME,EAAO,GAAMT,EAAQO,GAAOV,EAAOgB,KAAQJ,EAAO,GAAKA,EAAO,QAC9F,IAGEK,EAAUtI,mBACZ,kBAAMuI,IAAYC,WAAWxB,EAAajB,KAE1C,CAACE,IAECwC,EAAKd,OAAOC,KAAKU,GAAST,QAC5B,SAACC,EAAKC,GAAN,mBAAC,eACMD,GADP,kBAEKC,GAAOO,EAAQP,GAAOtB,GAAiBV,EAAS,GAAGjF,SAASiH,GAAO,EAAIO,EAAQP,GAAO,GAAK,KAAO,UAEvG,IAGEW,EAAY1I,mBACd,kBAAM2I,YAAY7B,EAAqBd,EAAQW,KAE/C,CAACG,EAAqBH,EAAWX,EAAOtF,aAGtCkI,EAAWjB,OAAOC,KAAKZ,GAAaa,QACtC,SAACC,EAAKe,GAAN,mBAAC,eAAkBf,GAAnB,kBAAyBe,EA9Ed,SAACtJ,EAAewG,EAAhB,GAAyF,IAEpGL,EAFmDoD,EAAgD,EAAhDA,UAAWC,EAAqC,EAArCA,OAClE,IAAKD,EAAW,OAAOC,EAEvB,GAAIhD,EAAS,GAAGjF,SAASvB,GACrBmG,EAAMK,EAAS,GAAGxF,QAAQhB,GAAS,MAChC,CACH,IAAIyJ,EAAcjD,EAASkD,QAAO,SAAA/I,GAAM,OAAIA,EAAOY,SAASvB,MAAQ,GACpEmG,GAAOK,EAAS,GAAGxF,QAAQyI,EAAY,IAAMA,EAAYzI,QAAQhB,GAAS,GAAK,EAEnF,OAAe,IAARmG,EAAYqD,GAAUA,EAqEKG,CAAWL,EAAI9C,EAAUa,OACvD,IAGEuC,EAAYZ,IAAYa,SAC1BrD,EACA2C,EACA1B,EACAiB,EACAG,EACAK,EACAhC,EACAU,GAGJ,OACI,oBACI0B,GAAG,OACH1D,OAAK,mBACA,iBAA0BkB,GAD1B,0BAEU,uEAFV,GAFT,UAOI,cAACgD,EAAD,CAAOC,MAAOH,IACd,cAAC,EAAD,CAAcf,GAAIA,EAAIK,GAAIA,EAAIC,UAAWA,EAAWE,SAAUA,QAOpES,EAAQ5E,IAAMC,MAChB,SAACpF,GACG,OACI,oBAAG+E,KAAK,OAAOkF,YAAa,KAA5B,UACI,mBAAGnH,OAAO,kBAAV,SACK9C,EAAMgK,MAAME,KAAKjI,KAAI,SAACkI,EAAM7E,GAAP,OAClB,sBAAc8E,EAAGD,GAAN7E,QAGnB,mBAAGxC,OAAO,0BAAV,SACK9C,EAAMgK,MAAMK,KAAKpI,KAAI,SAACkI,EAAM7E,GAAP,OAClB,sBAAc8E,EAAGD,GAAN7E,cAM/B,SAACC,EAAWC,GAAZ,OAA0BnE,KAAKC,UAAUiE,EAAUyE,SAAW3I,KAAKC,UAAUkE,EAAUwE,UAUrFM,EAAe,SAACtK,GAClB,IAAQ8I,EAAgC9I,EAAhC8I,GAAIK,EAA4BnJ,EAA5BmJ,GAAIC,EAAwBpJ,EAAxBoJ,UAAWE,EAAatJ,EAAbsJ,SAErB5B,EAAcrH,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,YAExD,OACI,mBAAG+I,GAAG,YAAN,SACKlB,OAAOC,KAAKZ,GACRiC,QAAO,SAAA1J,GAAK,OAAK,CAAC,YAAa,WAAWuB,SAASvB,MACnDgC,KAAI,SAAAhC,GAAK,OACN,mBAEI4F,MAAO,CACH1D,UAAU,aAAD,OAAe2G,EAAG7I,GAAlB,cAA8BkJ,EAAGlJ,GAAjC,QAHjB,SAMI,cAAC,EAAD,CAAYA,MAAOA,EAAOC,SAAUkJ,EAAUnJ,GAAQE,QAASmJ,EAASrJ,MALnEA,SCrLvBsK,GAXSnF,0BAAK,WAChB,OACI,qCACI,cAACmF,EAAD,IAEA,cAAC,IAAD,CAAUC,QAAS,KACnB,cAAC,EAAD,UAKIrF,IAAMC,MAAK,WACvB,OACI,iCACI,oBAAGmE,GAAG,UAAUpH,UAAU,sBAA1B,UACI,sBAAMsB,GAAI,SAAUqB,OAAQ,SAAUtB,MAAO,WAC7C,sBACI+F,GAAG,UACHa,EAAE,0tBACFjI,UAAU,8BACV4C,KAAK,aAGb,oBAAGwE,GAAG,SAASpH,UAAU,sBAAzB,UACI,sBAAMsB,GAAI,SAAUD,MAAO,SAAUsB,OAAQ,WAC7C,sBACIC,KAAK,QACLqF,EAAE,8mBACFjI,UAAU,mCAGlB,0BAAUoH,GAAG,gBAAgBpH,UAAU,8BAAvC,SACI,sBACI4C,KAAK,OACLqF,EAAE,kLAGV,oBAAGb,GAAG,MAAMpH,UAAU,sBAAtB,UACI,sBAAMsB,GAAI,SAAUD,MAAO,SAAUsB,OAAQ,WAC7C,oBAAG2F,SAAS,sBAAsBtI,UAAU,yBAA5C,UACI,sBACIsB,GAAI,QACJmB,EAAG,SACHpB,MAAO,SACPsB,OAAQ,OACR3C,UAAU,iDACV4C,KAAK,UAET,sBACIqF,EAAE,0UACFjI,UAAU,8BACV4C,KAAK,UAET,yBACI2F,OAAO,uEACP3F,KAAK,UAET,sBACIqF,EAAE,4RACFjI,UAAU,gCAEd,sBACIiI,EAAE,iLACFjI,UAAU,8BACV4C,KAAK,UAET,sBACIqF,EAAE,yKACFjI,UAAU,gCAEd,sBACIiI,EAAE,uIACFjI,UAAU,8BACV4C,KAAK,UAET,sBACIqF,EAAE,4IACFjI,UAAU,8BACV4C,KAAK,UAET,yBACI2F,OAAO,wEACP3F,KAAK,UAET,sBACIqF,EAAE,2KACFjI,UAAU,8BACV4C,KAAK,UAET,sBACIqF,EAAE,6KACFjI,UAAU,gCAEd,sBACIiI,EAAE,uPACFjI,UAAU,sCAKtB,wBAAQoH,GAAG,MAAMoB,EAAG,EAAG5H,UAAU,iBACjC,sBACIwG,GAAG,QACHxG,UAAU,eACVqH,EAAE,wEAEN,sBACIb,GAAG,SACHa,EAAE,yGACFrH,UAAU,iBAEd,qBAAKwG,GAAG,MAAM1G,UAAU,SACxB,qBAAK0G,GAAG,QAAQ1G,UAAU,WAC1B,qBAAK0G,GAAG,SAAS1G,UAAU,YAC3B,sBAAM0G,GAAG,OAAOa,EAAE,yDAAyDrH,UAAU,iBAEpF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,IAAId,KAAI,SAAAH,GACnC,IAAI8I,EAAI,IAAM9I,EAAI,GAClB,OACI,eAAC,IAAM+I,SAAP,WACI,sBACItB,GAAE,aAAQzH,GACVsI,EAAC,gBAAWQ,EAAX,4BAAgCA,EAAhC,oBACD7H,UAAU,iBAEd,sBACIwG,GAAE,aAAQzH,EAAR,MACFiB,UAAU,eACVqH,EAAC,mBAAcQ,EAAd,4BAAmCA,EAAnC,qFAEL,sBACIrB,GAAE,aAAQzH,EAAR,OACFiB,UAAU,eACVqH,EAAC,oBAAeQ,EAAf,4BAAoCA,EAApC,yHAdY9I,MAoB7B,oBAAGyH,GAAG,QAAN,UACI,sBAAMa,EAAE,YACR,qBAAKvH,UAAU,SACf,qBAAKA,UAAU,OAAO+B,EAAG,QAE7B,oBAAG2E,GAAG,UAAN,UACI,sBAAMa,EAAE,eACR,qBAAKvH,UAAU,WACf,qBAAKA,UAAU,OAAO+B,EAAG,WAE7B,oBAAG2E,GAAG,WAAN,UACI,sBAAMa,EAAE,eACR,qBAAKvH,UAAU,YACf,qBAAKA,UAAU,OAAO+B,EAAG,WAG7B,oBAAG2E,GAAG,QAAN,UACI,sBAAMa,EAAE,YACR,qBAAKvH,UAAU,SACf,qBAAKA,UAAU,QAAQ+B,EAAG,QAE9B,oBAAG2E,GAAG,UAAN,UACI,sBAAMa,EAAE,gBACR,qBAAKvH,UAAU,WACf,qBAAKA,UAAU,QAAQ+B,EAAG,WAE9B,oBAAG2E,GAAG,WAAN,UACI,sBAAMa,EAAE,gBACR,qBAAKvH,UAAU,YACf,qBAAKA,UAAU,QAAQ+B,EAAG,WAE9B,qBAAK2E,GAAG,QAAQ1G,UAAU,WAC1B,qBAAK0G,GAAG,UAAU1G,UAAU,aAC5B,qBAAK0G,GAAG,WAAW1G,UAAU,cAE7B,oBAAG0G,GAAG,WAAN,UACI,sBAAMa,EAAE,YACR,qBAAKvH,UAAU,SACf,qBAAKA,UAAU,QAAQY,EAAG,GAAImB,GAAI,QAEtC,oBAAG2E,GAAG,aAAN,UACI,sBAAMa,EAAE,eACR,qBAAKvH,UAAU,WACf,qBAAKA,UAAU,QAAQY,EAAG,GAAImB,GAAI,UAGtC,sBAAM2E,GAAG,UAAUa,EAAE,UAAUU,cAAc,kB,gCC5LzD,kCAGO,IAAMC,EAAe,SAAfA,EAAgB9K,EAAekG,GACxC,GACI,CAAC,YAAa,WAAW3E,SAASvB,IAClCkG,EAAQlG,GAAOkB,QAAQL,OAAS,GAChCqF,EAAQlG,GAAOe,SAASF,OAAS,EAEjC,OAAO,EAEX,IAAIkK,EAAU7E,EAAQlG,GAAOkB,QAAQ,GACrC,OAAI6J,EAEyC,IAArC7E,EAAQ6E,GAAShK,SAASF,OAEnBiK,EAAaC,EAAS7E,GAGuB,IAA7CA,EAAQ6E,GAAShK,SAASC,QAAQhB,GAAe,GAAK,EAI1D,I,qTChBF2H,EAAgB,SACzBzB,EACA8E,EACAC,GAEA,OAAO7C,OAAOC,KAAKnC,GAASoC,QACxB,SAACC,EAAKC,GAAN,mBAAC,eACMD,GADP,kBAEKC,EAAMtC,EAAQsC,GAAKzH,SAASuH,QACzB,SAAC4C,EAAGC,GAAJ,mBAAC,eAAeD,GAAhB,kBAAoBC,EAAI,EAAIH,EAAM9E,EAASiF,GAAKF,EAAO/E,EAASsC,OAChE,QAGR,KAUKX,EAAqB,SAArBA,EAAsBuD,EAAcC,EAAY3D,GACzD,GAAI0D,IAASC,EACT,MAAO,CAAEvC,IAAK,EAAGf,MAAO,CAACqD,IAE7B,IAAIE,EAAuB,GACvBC,EAA4B,GAChCnD,OAAOC,KAAKX,EAAO0D,IAAOI,SAAQ,SAAAC,GAC9B,IAAIC,EAAK7D,EAAmB4D,EAAOJ,EAAI3D,GACnCgE,EAAG5C,IAAM,IACbwC,EAAWxK,KAAK4G,EAAO0D,GAAMK,GAASC,EAAG5C,KACzC4C,EAAG3D,MAAM4D,QAAQP,GACjBG,EAAczK,KAAK4K,EAAG3D,WAE1B,IAAI6D,EAAYC,KAAKC,IAAL,MAAAD,KAAYP,GAC5B,MAAO,CACHxC,IAAK8C,EACL7D,MAAOwD,EAAcD,EAAWtK,QAAQ4K,MAInCnD,EAAe,SAACzI,EAAe0H,EAA0ClB,GAClF,IAAIoB,EAAeC,EAAmB,YAAa,UAAWH,GAC9D,GAAIE,EAAaG,MAAMxG,SAASvB,GAC5B,OAAO6H,EAAmBD,EAAaG,MAAM,GAAI/H,EAAO0H,GAAQoB,IAMhE,IAHA,IAAIW,EAAcjD,EAASkD,QAAO,SAAA/I,GAAM,OAAIA,EAAOY,SAASvB,MAAQ,GAEhE+L,EAAa/L,GACT4H,EAAaG,MAAMxG,SAASwK,IAChCA,EAAatC,EAAYA,EAAYzI,QAAQ+K,GAAc,GAG/D,IADA,IAAIC,EAAWhM,GACP4H,EAAaG,MAAMxG,SAASyK,IAChCA,EAAWvC,EAAYA,EAAYzI,QAAQgL,GAAY,GAG3D,IAAIC,EAA6B,cAAfF,EAIdG,EAAO,GAkBX,OAjBKD,GAJ2B,YAAbD,EASRC,GACPC,EAAK,GAAK,EACVA,EAAK,GAAKrE,EAAmBD,EAAaG,MAAM,GAAIiE,EAAUtE,GAAQoB,IACtEoD,EAAK,GAAKrE,EAAmB4B,EAAY,GAAIzJ,EAAO0H,GAAQoB,IAC5DoD,EAAK,GAAKrE,EAAmB7H,EAAOgM,EAAUtE,GAAQoB,MAGtDoD,EAAK,GAAKrE,EAAmBD,EAAaG,MAAM,GAAIgE,EAAYrE,GAAQoB,IACxEoD,EAAK,GAAKrE,EAAmBkE,EAAYnE,EAAaG,MAAMC,OAAO,GAAG,GAAIN,GAAQoB,IAClFoD,EAAK,GAAKrE,EAAmBkE,EAAY/L,EAAO0H,GAAQoB,IACxDoD,EAAK,GAAKrE,EAAmB7H,EAAOyJ,EAAYzB,OAAO,GAAG,GAAIN,GAAQoB,MAdtEoD,EAAK,GAAKrE,EAAmBD,EAAaG,MAAM,GAAIgE,EAAYrE,GAAQoB,IACxEoD,EAAK,GAAKrE,EAAmBkE,EAAYC,EAAUtE,GAAQoB,IAC3DoD,EAAK,GAAKrE,EAAmBkE,EAAY/L,EAAO0H,GAAQoB,IACxDoD,EAAK,GAAKrE,EAAmB7H,EAAOgM,EAAUtE,GAAQoB,KAanDoD,EAAK,GAAMA,EAAK,GAAKA,EAAK,IAAOA,EAAK,GAAKA,EAAK,KAiClD9C,EAAc,SACvB+C,EACA1F,EACAW,GACmC,IAAD,EAElC,OADAc,QAAQC,IAAI,8BACL,YAAI,IAAIiE,KAAK,MAAgBC,OAAjB,oBAA2B5F,MAAU6B,QACpD,SAACC,EAAKC,GAAN,mBAAC,eACMD,GADP,kBAEKC,EACGA,IAAQ2D,EACF,GAEI/E,IAAczB,IAAe/E,MAtBlC,SAAC0L,EAAgBC,EAAgB9F,GAAwB,IAAD,gBACvDA,GADuD,IACzE,2BAA0B,CAAC,IAAlB+F,EAAiB,QAClBC,EAAOD,EAAMxL,QAAQsL,GACrBI,EAAOF,EAAMxL,QAAQuL,GACzB,IAAc,IAAVE,GAAeA,EAAOC,EAAM,OAAO,GAJ8B,8BAMzE,OAAO,EAiBqBC,CAAaR,EAAW3D,EAAK/B,GAhCtC,SAAC6F,EAAgBC,EAAgB9F,GAAwB,IAAD,gBACzDA,GADyD,IAC3E,2BAA0B,CAAC,IAAlB+F,EAAiB,QAClBC,EAAOD,EAAMxL,QAAQsL,GACrBI,EAAOF,EAAMxL,QAAQuL,GACzB,IAAc,IAAVG,GAAeA,EAAOD,EAAM,OAAO,GAJgC,8BAM3E,OAAO,EA2BqBG,CAAeT,EAAW3D,EAAK/B,IAEzC,GACC,MAEf,KAIKoG,EAAb,WAOI,WAAYC,GAA8C,IAAD,gCANzD/D,QAAU,GAM+C,KALzDd,QAAU,GAK+C,KAJzDoB,SAAW,GAI8C,KAHzDnD,QAAU,GAG+C,KAFzD0B,aAAe,GAE0C,KAQ/C3B,eAAiB,SAACjG,GACxB,OAAO,GAT8C,KAe/CqG,gBAAkB,SAACrG,GACzB,OAAO,GAhB8C,KAsBlD+M,WAAa,SAACT,EAAgBC,GACjC,OAAK,EAAKrG,QAAQoG,GAAQvL,SAASQ,SAASgL,GAGrC,EAAI,EAAKlG,gBAAgBiG,GAAU,EAAKrG,eAAesG,IAFlDS,KAxByC,KA6EjDC,eAAiB,SAAC/F,GACtB,IAEIgG,EAFK,GACEC,KACYtB,KAAKuB,KAAK,GAC7BC,EAAOnG,EAAgB,EAAIgG,EAE/B,MAAO,CAAEC,GALA,GAKIG,KAJFH,KAIQD,OAAMK,KADdF,EAAOxB,KAAKuB,KAAK,GACGC,SAnFsB,KAyFjDG,WAAa,SAACtG,GAClB,MAAqC,EAAK+F,eAAe/F,GAAnDiG,EAAN,EAAMA,GAAIG,EAAV,EAAUA,KAAMJ,EAAhB,EAAgBA,KAAMK,EAAtB,EAAsBA,KAAMF,EAA5B,EAA4BA,KAC5B,MAAM,KAAN,OAAYF,EAAZ,YAAkBA,EAAlB,kBAA8BG,EAA9B,YAAsCJ,EAAtC,cAAgDK,EAAhD,YAAwDF,EAAxD,cAAkEF,EAAlE,YAAwEA,EAAxE,kBAAoFG,EAApF,YAA4FJ,IA3FvC,KAiGjDO,WAAa,SAACvG,GAClB,MAAqC,EAAK+F,eAAe/F,GAAnDiG,EAAN,EAAMA,GAAIG,EAAV,EAAUA,KAAMJ,EAAhB,EAAgBA,KAAMK,EAAtB,EAAsBA,KAAMF,EAA5B,EAA4BA,KAC5B,MAAM,KAAN,OAAYF,EAAZ,YAAkBA,EAAlB,kBAA8BG,EAA9B,aAAuCJ,EAAvC,cAAiDK,EAAjD,aAA0DF,EAA1D,cAAoEF,EAApE,YAA0EA,EAA1E,kBAAsFG,EAAtF,aAA+FJ,IAlG/FQ,KAAKxH,QAAU4G,EAAK5G,QACpBwH,KAAK9F,aAAekF,EAAKlF,aATjC,6CAoCI,SAAoB5H,EAAewG,GAC/B,GAAIxG,KAAS0N,KAAK3E,QAAS,OAAO2E,KAAK3E,QAAQ/I,GAE/C,GACI,CAAC,YAAa,WAAWuB,SAASvB,IAClC0N,KAAKxH,QAAQlG,GAAOkB,QAAQL,OAAS,GACrC6M,KAAKxH,QAAQlG,GAAOe,SAASF,OAAS,EAGtC,OADA6M,KAAK3E,QAAQ/I,GAAS,EACf,EAEX,IAAI+K,EAAU2C,KAAKxH,QAAQlG,GAAOkB,QAAQ,GAC1C,GAAI6J,EAAS,CAET,GAA8C,IAA1C2C,KAAKxH,QAAQ6E,GAAShK,SAASF,OAAc,CAE7C,IAAIsF,EAAMuH,KAAKC,UAAU5C,GAEzB,OADA2C,KAAK3E,QAAQ/I,GAASmG,EACfA,EAGP,IAAIA,EAAgE,IAAlDuH,KAAKxH,QAAQ6E,GAAShK,SAASC,QAAQhB,GAAe,GAAK,EAE7E,OADA0N,KAAK3E,QAAQ/I,GAASmG,EACfA,EAKX,OADAuH,KAAK3E,QAAQ/I,GAAS,EACf,IAhEnB,uBAgHI,SACI4N,EACAlF,EACAlC,EACAqH,EACAC,EACA5G,EACAwE,EACAqC,GACD,IAAD,OACE,cAA6B,GAA7B,GAAKC,EAAL,KAAaC,EAAb,KAAoBC,EAApB,KACIhE,EAAO,GAEX,EAAqBwD,KAAKT,eAAe/F,GACrCiH,EADJ,EAAMb,KAAN,EAAYC,KACc,EACtBa,GAAc1F,EAAO,GAAKA,EAAO,IAAMgD,EAAG5C,IAAO,EACjDuF,IAAc3F,EAAO,GAAKA,EAAO,IAAMgD,EAAG5C,IAAM,EAAIqF,GAAS,EAiDjE,OAhDIE,EAAYD,EAAY,GACxBlG,QAAQoG,KAAR,+BAAqCD,EAAYD,IAGrDR,EAAOpC,SAAQ,SAAAxL,GACX,IAAIwD,EAAIqK,EAAO7N,GACX2E,EAAImJ,EAAO9N,GACf,IAAKiO,GAAmB,IAAVA,EAmBV,OAlBCD,EAAyBhO,EAAjBkO,EAAwB1K,EAAjByK,EAAoBtJ,OACd,IAAlBiJ,EAAO/M,OACPqJ,EAAKpJ,KAAL,YAAe0C,EAAf,YAAoBmB,IACZ6B,EAAS,GAAGjF,SAASvB,GAGtBwG,EAAS,GAAGjF,SAASqM,EAAO,IAEnC1D,EAAKpJ,KAAL,YAAe0C,EAAf,YAAoBmB,KAGhBkJ,EAAOD,EAAO,IAAM,GACpB1D,EAAKpJ,KAAL,YAAe0C,EAAf,YAAoBmB,EAAIoJ,IAExBD,EAAOF,EAAO,IAAM,GACpB1D,EAAKpJ,KAAL,YAAe0C,EAAf,YAAoBmB,EAAIoJ,KAV5B7D,EAAKpJ,KAAL,YAAe0C,EAAf,YAAoBmB,KAexBA,EAAIsJ,GACJ/D,EAAKpJ,KACD,YAAM,IAAN6D,EACWnB,EAAI0K,EAAQE,EAAY,EAAKnI,eAAejG,GAASqO,EAAoB,EAARF,EACjEC,EAAY,EAAK/H,gBAAgB2H,GAAUK,IAE1DnE,EAAKpJ,KAAK,EAAK0M,WAAWtG,KACnBvC,EAAIsJ,IACX/D,EAAKpJ,KACD,YAAM,IAAN6D,EACWnB,EAAI0K,EAAQE,EAAY,EAAKnI,eAAejG,GAASqO,EAAoB,EAARF,EACjEC,EAAY,EAAK/H,gBAAgB2H,GAAUK,IAE1DnE,EAAKpJ,KAAK,EAAK2M,WAAWvG,KAE9BgD,EAAKpJ,KAAL,YAAe0C,IACdwK,EAAyBhO,EAAjBkO,EAAwB1K,EAAjByK,EAAoBtJ,KAIjCuF,EAAKqE,KAAK,KAAKC,QAAQ,kBAAmB,YAjLzD,yBAoEI,SAAkBtI,EAAsBM,GACpC0B,QAAQC,IAAI,sBACZ,IAAIsG,EAAW,IAAIf,KAAK,CAAExH,YAQ1B,OANAkC,OAAOC,KAAKnC,GAASsF,SAAQ,SAAAxL,GACrB,CAAC,YAAa,WAAWuB,SAASvB,IAClCA,KAASyO,EAAS1F,SACtB0F,EAASd,UAAU3N,EAAOwG,MAGvBiI,EAAS1F,UA9ExB,sBAoLI,SACIvC,EACA2C,EACAjD,EACAwC,EACAG,EACAK,EACAhC,EACAwE,GAED,IAAD,OADEqC,EACF,uDADc,KAERnE,EAAY,CAAEQ,KAAM,GAAgBH,KAAM,IAsD9C,OArDAzD,EAASgF,SAAQ,SAAC7K,EAAQ0E,GAEtB,IAAIqJ,GADJ/N,EAASA,EAAO+I,QAAO,SAAA1J,GAAK,OAAK,CAAC,YAAa,WAAWuB,SAASvB,OACzC0J,QAAO,SAAA1J,GAAK,OAAImJ,EAAUnJ,IAAU,KAC1D2O,EAAehO,EAAO+I,QAAO,SAAA1J,GAAK,OAAImJ,EAAUnJ,IAAU,KAElC,IAAxB0O,EAAa7N,SACb8N,EAAehO,GAG6D,IAA5E+N,EAAahF,QAAO,SAAA1J,GAAK,OAAqC,IAAjC2O,EAAa3N,QAAQhB,MAAea,QAAgB6N,EAAa7N,SAE1F8N,EAAa,KAAOhO,EAAO,GAE3BgO,EAAa7N,KAAK4N,EAAa,IAE/BA,EAAa,KAAO/N,EAAO,IAC3B+N,EAAaA,EAAa7N,OAAS,KAAOF,EAAOA,EAAOE,OAAS,IACjE8N,EAAa9N,QAEb8N,EAAehO,EACf+N,EAAe,IAGfC,EAAahD,QAAQ+C,EAAaA,EAAa7N,OAAS,KAIhE+I,EAAUQ,KAAKtJ,KACX,IAAI,EAAK,CAAEoF,UAAS0B,aAAc8D,IAAMkD,UACpCF,EACAhG,EACAlC,EACAqC,EACAK,EACAhC,EACAwE,EACAqC,IAGRnE,EAAUK,KAAKnJ,KACX,IAAI,EAAK,CAAEoF,UAAS0B,aAAc8D,IAAMkD,UACpCD,EACAjG,EACAlC,EACAqC,EACAK,EACAhC,EACAwE,EACAqC,OAKLnE,MArPf,KAyPaC,EAAW,SAACrD,EAAsB2C,GAC3C,IAAIS,EAAY,CAAEQ,KAAM,GAAkBH,KAAM,IAgChD,OA/BAzD,EAASgF,SAAQ,SAAA7K,GAEb,IAAI+N,GADJ/N,EAASA,EAAO+I,QAAO,SAAA1J,GAAK,OAAK,CAAC,YAAa,WAAWuB,SAASvB,OACzC0J,QAAO,SAAA1J,GAAK,OAAImJ,EAAUnJ,IAAU,KAC1D2O,EAAehO,EAAO+I,QAAO,SAAA1J,GAAK,OAAImJ,EAAUnJ,IAAU,KAElC,IAAxB0O,EAAa7N,SACb8N,EAAehO,GAG6D,IAA5E+N,EAAahF,QAAO,SAAA1J,GAAK,OAAqC,IAAjC2O,EAAa3N,QAAQhB,MAAea,QAAgB6N,EAAa7N,SAE1F8N,EAAa,KAAOhO,EAAO,GAE3BgO,EAAa7N,KAAK4N,EAAa,IAE/BA,EAAa,KAAO/N,EAAO,IAC3B+N,EAAaA,EAAa7N,OAAS,KAAOF,EAAOA,EAAOE,OAAS,IACjE8N,EAAa9N,QAEb8N,EAAehO,EACf+N,EAAe,IAGfC,EAAahD,QAAQ+C,EAAaA,EAAa7N,OAAS,KAIhE+I,EAAUQ,KAAKtJ,KAAK4N,GACpB9E,EAAUK,KAAKnJ,KAAK6N,MAGjB/E,I,yDC5aIzE,oBAAK,SAAkBpF,GAA6B,IAAD,EAC9D,OACI,sBACI+E,KAAK,0BACLD,OAAQ,GACRe,OAAK,GACDrC,MAAO,wBADN,cAEA,qBAA8BxD,EAAMwK,SAFpC,yH,8FCLJvB,EAAb,4MACc/C,eAAiB,SAACjG,GACxB,IAAImG,EAAM,EACJrE,EAAa,EAAKoE,QAAQlG,GAA1B8B,SACFsE,EAAKtE,EAASC,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIpB,UActC,MAb4B,MAAxBiB,EAASa,cAEJyD,EAAG,IAAMA,EAAG,GAAK,IAAGD,GAAO,KAE5BC,EAAG,IAAiB,IAAVA,EAAG,IAAsB,IAAVA,EAAG,KAAWD,GAAO,KAExC,IAAVC,EAAG,IAAsB,IAAVA,EAAG,IAEqB,cAAnC,EAAKF,QAAQlG,GAAOkB,QAAQ,IAA0D,YAApC,EAAKgF,QAAQlG,GAAOe,SAAS,KAC/EoF,GAAO,IAE4B,IAAvC,EAAKD,QAAQlG,GAAOkB,QAAQL,SAAcsF,GAAO,IACgB,IAAjE,EAAKD,QAAQ,EAAKA,QAAQlG,GAAOkB,QAAQ,IAAIH,SAASF,SAAcsF,GAAO,IACxEA,GAlBf,EAqBcE,gBAAkB,SAACrG,GACzB,IAAImG,EAAM,EACJrE,EAAa,EAAKoE,QAAQlG,GAA1B8B,SACFsE,EAAKtE,EAASC,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIpB,UActC,MAb4B,MAAxBiB,EAASa,cAEJyD,EAAG,IAAMA,EAAG,GAAK,IAAGD,GAAO,KAE5BC,EAAG,IAAiB,IAAVA,EAAG,IAAsB,IAAVA,EAAG,KAAWD,GAAO,KAExC,IAAVC,EAAG,IAAsB,IAAVA,EAAG,IAEqB,cAAnC,EAAKF,QAAQlG,GAAOkB,QAAQ,IAA0D,YAApC,EAAKgF,QAAQlG,GAAOe,SAAS,KAC/EoF,GAAO,IAE6B,IAAxC,EAAKD,QAAQlG,GAAOe,SAASF,SAAcsF,GAAO,IACe,IAAjE,EAAKD,QAAQ,EAAKA,QAAQlG,GAAOe,SAAS,IAAIG,QAAQL,SAAcsF,GAAO,IACxEA,GAtCf,Y,MAAiC0G","file":"static/js/railmapMTR.f9e2e652.chunk.js","sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport {\n    Direction,\n    Facilities,\n    InterchangeInfo,\n    Name,\n    ShortDirection,\n    StationTransfer,\n} from '../../../../constants/constants';\nimport { useAppSelector } from '../../../../redux';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n    namePos: boolean;\n    stnY?: number;\n}\n\nconst StationMTR = (props: Props) => {\n    const { stnId, stnState, namePos } = props;\n    const stnInfo = useAppSelector(store => store.param.stn_list[stnId]);\n\n    /**\n     * Arrays of directions of the branches a station has.\n     */\n    const branchPos = useMemo(\n        () => {\n            let pos: ('SE' | 'NE' | 'SW' | 'NW')[] = [];\n            if (stnInfo.branch.right.length) {\n                pos.push(stnInfo.children.indexOf(stnInfo.branch.right[1]) === 1 ? 'SE' : 'NE');\n            }\n            if (stnInfo.branch.left.length) {\n                pos.push(stnInfo.parents.indexOf(stnInfo.branch.left[1]) === 1 ? 'SW' : 'NW');\n            }\n            return pos;\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [stnInfo.parents.toString(), stnInfo.children.toString(), JSON.stringify(stnInfo.branch)]\n    );\n\n    /**\n     * Affix added to station icon's `href`.\n     */\n    const branchAffix = useMemo(\n        () => {\n            let pos = branchPos;\n            if (pos.length === 0) {\n                return '';\n            }\n            if (pos.includes('NW') && pos.includes('SE')) {\n                return '_bb';\n            }\n            if (pos.includes('NE') && pos.includes('SW')) {\n                return '_bb';\n            }\n            return '_b';\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branchPos.toString()]\n    );\n\n    /**\n     * Changes of vertical position of station icon due to branching shift (11px/line width). Icon rotation should also be applied when using this property.\n     */\n    const branchDy = useMemo(\n        () => {\n            let affix = branchAffix;\n            if (affix === '') {\n                return 0;\n            } else if (affix === '_bb') {\n                return namePos ? 9.68 : -9.68;\n            } else {\n                let pos = branchPos;\n                if (pos.includes('SE') || pos.includes('SW')) {\n                    return namePos ? 9.68 : 0;\n                }\n                if (pos.includes('NE') || pos.includes('NW')) {\n                    return namePos ? 0 : -9.68;\n                }\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branchPos.toString(), branchAffix, namePos]\n    );\n\n    /**\n     * Changes of vertical position of other elements such as intTick or intName. The result of the ternary operator is the opposite of `this._branchDy`\n     */\n    const branchElDy = useMemo(() => {\n        let affix = branchAffix;\n        if (affix === '') {\n            return 0;\n        } else if (affix === '_bb') {\n            return namePos ? -9.68 : 9.68;\n        } else {\n            let pos = branchPos;\n            if (pos.includes('SE') || pos.includes('SW')) {\n                return namePos ? 0 : 9.68;\n            }\n            if (pos.includes('NE') || pos.includes('NW')) {\n                return namePos ? -9.68 : 0;\n            }\n        }\n    }, [branchAffix, namePos, branchPos]);\n\n    const stnIcon = ((l: number[]) => {\n        const fallback = (n: number) => (n < 11 ? 'int' + (n + 1) : 'int12');\n        if (!l[1]) {\n            if (!l[0]) {\n                return 'stn';\n            } else if (l[0] === 1) {\n                return 'int';\n            } else {\n                return fallback(l[0]);\n            }\n        } else if (l[1] === 1) {\n            return l[0] <= 1 ? 'osi11' : fallback(l[0]);\n        } else if (l[1] === 2) {\n            if (l[0] === 0) {\n                return 'osi12';\n            } else if (l[0] === 1) {\n                if (stnInfo.parents[0] === 'linestart' || stnInfo.children[0] === 'lineend') {\n                    return 'osi22end';\n                } else {\n                    return 'osi22';\n                }\n            } else {\n                return fallback(l[0]);\n            }\n        } else {\n            if (!l[0] || l[0] === 1) {\n                return 'osi12';\n            } else {\n                return fallback(l[0]);\n            }\n        }\n    })(stnInfo.transfer.info.map(val => val.length));\n\n    return (\n        <>\n            <g transform={`translate(0,${branchElDy})`}>\n                <IntTickGroup\n                    variant={stnIcon}\n                    stnTrans={stnInfo.transfer}\n                    stnState={stnState}\n                    namePos={namePos}\n                    end={\n                        stnIcon === 'osi22end'\n                            ? stnInfo.parents[0] === 'linestart'\n                                ? Direction.left\n                                : Direction.right\n                            : undefined\n                    }\n                />\n                {stnIcon.includes('osi') && (\n                    <OSIName\n                        name={stnInfo.transfer.osi_names[0]}\n                        stnState={stnState}\n                        variant={stnIcon}\n                        tickDirec={stnInfo.transfer.tick_direc}\n                        namePos={namePos}\n                        end={\n                            stnIcon === 'osi22end'\n                                ? stnInfo.parents[0] === 'linestart'\n                                    ? Direction.left\n                                    : Direction.right\n                                : undefined\n                        }\n                    />\n                )}\n            </g>\n            <use\n                xlinkHref={'#' + stnIcon + branchAffix}\n                stroke={stnState === -1 ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n                className={stnInfo.transfer.paid_area ? 'rmg-stn__mtr--paid-osi' : 'rmg-stn__mtr--unpaid-osi'}\n                transform={\n                    `translate(0,${branchDy})` +\n                    `scale(${stnInfo.children[0] === 'lineend' ? 1 : -1},${namePos ? -1 : 1})`\n                }\n            />\n            <g transform={`translate(0,${branchDy})`}>\n                <StationNameGElement\n                    name={stnInfo.name}\n                    namePos={namePos}\n                    stnState={stnState}\n                    facility={stnInfo.facility}\n                    nameDX={stnIcon === 'osi22' ? (stnInfo.transfer.tick_direc === 'l' ? 3 : -3) : undefined}\n                />\n            </g>\n        </>\n    );\n};\n\nexport default StationMTR;\n\ninterface StationNameGElementProps {\n    name: Name;\n    namePos: boolean;\n    stnState: -1 | 0 | 1;\n    nameDX?: number;\n    facility: Facilities;\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const { name, namePos, stnState, nameDX, facility } = props;\n    /**\n     * Top (in pixels) of station's Chinese name.\n     */\n    const NAME_ZH_TOP = -10.8125;\n    /**\n     * Height (in pixels) of station's Chinese name.\n     */\n    // const NAME_ZH_HEIGHT = 21.625;\n    /**\n     * Top (in pixels) of station's English name (1 line).\n     */\n    const NAME_EN_TOP = -8;\n    /**\n     * Height (in pixels) of station's English name (1 line).\n     */\n    const NAME_EN_HEIGHT = 13.21875;\n    /**\n     * Difference of `y`s of station's Chinese name and English name (1 line). (This number should used as the `dy` of the English `text` element after Chinese `text` elements. )\n     */\n    const NAME_ZH_EN_GAP = 17;\n    /**\n     * Height (in pixels) from the top of station's Chinese name to the bottom of English name (1 line).\n     */\n    const NAME_FULL_HEIGHT = -NAME_ZH_TOP + NAME_ZH_EN_GAP + NAME_EN_HEIGHT + NAME_EN_TOP;\n    /**\n     * Height (in pixels) of the gap between the centre of the line and the top of station's Chinese name.\n     */\n    const STN_NAME_LINE_GAP = 14;\n\n    const stnNameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ width: 0, x: 0 } as DOMRect);\n    useEffect(\n        () => {\n            document.fonts.ready.then(() => setBBox(stnNameEl.current!.getBBox()));\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [stnState, name.toString()]\n    );\n\n    const dy = namePos\n        ? STN_NAME_LINE_GAP - NAME_ZH_TOP\n        : -STN_NAME_LINE_GAP - NAME_ZH_TOP - NAME_FULL_HEIGHT - (name[1].split('\\\\').length - 1) * 11;\n\n    const textAnchor = !nameDX ? 'middle' : nameDX > 0 ? 'start' : 'end';\n    const osi22DY = !nameDX ? 0 : namePos ? 10 : -10;\n\n    const facilityX = !nameDX\n        ? -(bBox.width + 3) / 2\n        : nameDX > 0\n        ? nameDX + (NAME_FULL_HEIGHT + 2) / 2\n        : -(NAME_FULL_HEIGHT + 2) / 2 - bBox.width + nameDX;\n    const facilityNameDX =\n        facility === Facilities.none\n            ? 0\n            : !nameDX\n            ? (NAME_FULL_HEIGHT + 2 + 3) / 2\n            : nameDX < 0\n            ? 0\n            : NAME_FULL_HEIGHT + 2 + 3 + nameDX;\n\n    return (\n        <g\n            textAnchor={textAnchor}\n            transform={`translate(0,${dy + osi22DY})`}\n            className={`Name ${stnState === -1 ? 'Pass' : stnState === 0 ? 'Current' : 'Future'}`}\n        >\n            {stnState === 0 && (\n                <rect\n                    x={bBox.x - 3 + (facilityNameDX === 0 ? 0 : facilityNameDX - 3 - NAME_FULL_HEIGHT)}\n                    y={NAME_ZH_TOP - 1}\n                    width={bBox.width + 6 + (facilityNameDX === 0 ? 0 : 3 + NAME_FULL_HEIGHT)}\n                    height={NAME_FULL_HEIGHT + (name[1].split('\\\\').length - 1) * 11 + 2}\n                    fill=\"var(--rmg-black)\"\n                />\n            )}\n            {facility !== Facilities.none && (\n                <use\n                    xlinkHref={'#' + facility}\n                    fill={stnState === -1 ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n                    x={facilityX}\n                    y={NAME_ZH_TOP - 1 + (name[1].split('\\\\').length - 1) * 5.5}\n                />\n            )}\n            <g ref={stnNameEl} transform={`translate(${facilityNameDX},0)`}>\n                <StationName name={name} nameGap={NAME_ZH_EN_GAP} />\n            </g>\n        </g>\n    );\n};\n\ninterface StationNameProps {\n    name: Name;\n    nameGap: number;\n}\n\nconst StationName = React.memo(\n    (props: StationNameProps) => {\n        return (\n            <>\n                <text className=\"rmg-name__zh rmg-name__mtr--station\">{props.name[0]}</text>\n                {props.name[1].split('\\\\').map((txt, i) => (\n                    <text key={i} className=\"rmg-name__en rmg-name__mtr--station\" dy={props.nameGap + i * 11}>\n                        {txt}\n                    </text>\n                ))}\n            </>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.name.toString() === nextProps.name.toString() && prevProps.nameGap === nextProps.nameGap\n);\n\ninterface IntTickGroupProps {\n    variant: string;\n    stnTrans: StationTransfer;\n    stnState: -1 | 0 | 1;\n    namePos: boolean;\n    end?: Direction;\n}\n\nconst IntTickGroup = (props: IntTickGroupProps) => {\n    const { variant, stnTrans, stnState, namePos, end } = props;\n    switch (variant) {\n        case 'int':\n            return (\n                <g>\n                    <IntTick intInfo={stnTrans.info[0][0]} stnState={stnState} rotation={namePos ? 180 : 0} />\n                </g>\n            );\n\n        case 'osi11':\n            return (\n                <g transform={`translate(0,${namePos ? -26 : 26})`}>\n                    <IntTick intInfo={stnTrans.info[1][0]} stnState={stnState} rotation={namePos ? 180 : 0} />\n                </g>\n            );\n        case 'osi12':\n            return (\n                <>\n                    {stnTrans.info[1].map((intInfo, i) => (\n                        <g\n                            key={i}\n                            transform={`translate(0,${\n                                !namePos ? 8 + 18 * (i + 1) : -8 - 18 * (stnTrans.info[1].length - i)\n                            })`}\n                        >\n                            <IntTick\n                                intInfo={intInfo}\n                                stnState={stnState}\n                                rotation={stnTrans.tick_direc === ShortDirection.right ? -90 : 90}\n                            />\n                        </g>\n                    ))}\n                </>\n            );\n        case 'osi22':\n            return (\n                <>\n                    <g>\n                        <IntTick\n                            intInfo={stnTrans.info[0][0]}\n                            stnState={stnState}\n                            rotation={namePos ? 0 : 180}\n                            nameDX={stnTrans.tick_direc === ShortDirection.right ? 3 : -3}\n                        />\n                    </g>\n                    {stnTrans.info[1].map((intInfo, i) => (\n                        <g\n                            key={i}\n                            transform={`translate(0,${\n                                !namePos ? 8 + 18 * (i + 1) : -8 - 18 * (stnTrans.info[1].length - i)\n                            })`}\n                        >\n                            <IntTick\n                                intInfo={intInfo}\n                                stnState={stnState}\n                                rotation={stnTrans.tick_direc === ShortDirection.right ? -90 : 90}\n                            />\n                        </g>\n                    ))}\n                </>\n            );\n        case 'osi22end':\n            return (\n                <>\n                    <g>\n                        <IntTick intInfo={stnTrans.info[0][0]} stnState={stnState} rotation={namePos ? 180 : 0} />\n                    </g>\n                    {stnTrans.info[1].map((intInfo, i) => (\n                        <g\n                            key={i}\n                            transform={`translate(${end === Direction.left ? -41 : 41},${\n                                namePos ? 18 * i : -18 * (stnTrans.info[1].length - 1 - i)\n                            })`}\n                        >\n                            <IntTick\n                                intInfo={intInfo}\n                                stnState={stnState}\n                                rotation={end === Direction.left ? 90 : -90}\n                            />\n                        </g>\n                    ))}\n                </>\n            );\n        default:\n            if (variant.includes('int')) {\n                return (\n                    <>\n                        {stnTrans.info[0].map((intInfo, i) => (\n                            <g\n                                key={i}\n                                style={{\n                                    transform: `translateY(${\n                                        !namePos ? 18 * (i + 1) : -18 * (stnTrans.info[0].length - i)\n                                    }px)`,\n                                }}\n                            >\n                                <IntTick\n                                    intInfo={intInfo}\n                                    stnState={stnState}\n                                    rotation={stnTrans.tick_direc === ShortDirection.right ? -90 : 90}\n                                />\n                            </g>\n                        ))}\n                    </>\n                );\n            } else {\n                return <></>;\n            }\n    }\n};\n\ninterface IntTickProps {\n    intInfo: InterchangeInfo;\n    stnState: -1 | 0 | 1;\n    rotation: 0 | 90 | 180 | -90;\n    nameDX?: number;\n}\n\nconst IntTick = (props: IntTickProps) => {\n    const { intInfo, stnState, rotation, nameDX } = props;\n\n    const nameZHLns = intInfo[4].split('\\\\').length;\n    const nameENLns = intInfo[5].split('\\\\').length;\n\n    const x = (rotation => {\n        switch (rotation) {\n            case 90:\n                return -24;\n            case -90:\n                return 24;\n            default:\n                return 0;\n        }\n    })(rotation);\n\n    const y = (rotation => {\n        switch (rotation) {\n            case 0:\n                return 25 + 5.953125;\n            case 180:\n                return -25 + 5.953125 - 18.65625 - 10 * (nameZHLns - 1) - 7 * (nameENLns - 1);\n            default:\n                return 5.953125 - (19.65625 + 10 * (nameZHLns - 1) + 7 * (nameENLns - 1) - 1) / 2;\n        }\n    })(rotation);\n\n    const textAnchor = (rotation => {\n        switch (rotation) {\n            case 90:\n                return 'end';\n            case -90:\n                return 'start';\n            default:\n                if (!nameDX) {\n                    return 'middle';\n                } else if (nameDX > 0) {\n                    return 'start';\n                } else {\n                    return 'end';\n                }\n        }\n    })(rotation);\n\n    return useMemo(\n        () => (\n            <>\n                <use\n                    xlinkHref=\"#inttick\"\n                    stroke={intInfo[2]}\n                    transform={`rotate(${rotation})`}\n                    className={'rmg-line rmg-line__mtr rmg-line__change' + (stnState === -1 ? ' rmg-line__pass' : '')}\n                />\n                <g\n                    textAnchor={textAnchor}\n                    transform={`translate(${x + (nameDX || 0)},${y})`}\n                    className={`Name ${stnState === -1 ? 'Pass' : 'Future'}`}\n                >\n                    {intInfo[4].split('\\\\').map((txt, i) => (\n                        <text key={i} className=\"rmg-name__zh IntName\" dy={10 * i}>\n                            {txt}\n                        </text>\n                    ))}\n                    {intInfo[5].split('\\\\').map((txt, i) => (\n                        <text key={nameZHLns + i} className=\"rmg-name__en IntName\" dy={nameZHLns * 10 - 1 + 7 * i}>\n                            {txt}\n                        </text>\n                    ))}\n                </g>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [intInfo.toString(), rotation, stnState]\n    );\n};\n\ninterface OSINameProps {\n    name: Name;\n    stnState: -1 | 0 | 1;\n    variant: string;\n    tickDirec: ShortDirection;\n    namePos: boolean;\n    end?: Direction;\n}\n\nconst OSIName = (props: OSINameProps) => {\n    const { name, stnState, variant, tickDirec, namePos, end } = props;\n\n    const textAnchor = (variant => {\n        switch (variant) {\n            case 'osi11':\n                return tickDirec === ShortDirection.left ? 'end' : 'start';\n            case 'osi22':\n                return tickDirec === ShortDirection.left ? 'start' : 'end';\n            default:\n                return 'middle';\n        }\n    })(variant);\n\n    const x = (variant => {\n        switch (variant) {\n            case 'osi11':\n                return tickDirec === ShortDirection.left ? -13 : 13;\n            case 'osi22':\n                return tickDirec === ShortDirection.left ? 13 : -13;\n            case 'osi22end':\n                return end === Direction.left ? -41 : 41;\n            default:\n                return 0;\n        }\n    })(variant);\n\n    const y = (variant => {\n        switch (variant) {\n            case 'osi11':\n                return (\n                    (!namePos ? 26 : -26) +\n                    8.34375 -\n                    25.03125 / 2 -\n                    (!namePos ? 0 : 10 * (name?.[1]?.split('\\\\').length - 1))\n                );\n            case 'osi12':\n                return !namePos\n                    ? 26 + 18 + 10 + 8.34375\n                    : -(26 + 18 + 10) + 8.34375 - 25.03125 - 10 * (name?.[1]?.split('\\\\').length - 1);\n            case 'osi22':\n                return (\n                    (!namePos ? 26 - 18 : -8) -\n                    (namePos ? 18 + 9 : -27) +\n                    8.34375 -\n                    25.03125 / 2 -\n                    5 * (name?.[1]?.split('\\\\').length - 1)\n                );\n            case 'osi22end':\n                return !namePos ? 10 + 8.34375 : -10 + 8.34375 - 25.03125 - 10 * (name?.[1]?.split('\\\\').length - 1);\n            default:\n                return 0;\n        }\n    })(variant);\n\n    return (\n        <g\n            textAnchor={textAnchor}\n            transform={`translate(${x},${y})`}\n            className={`Name ${stnState === -1 ? 'Pass' : 'Future'}`}\n        >\n            <text className=\"rmg-name__zh rmg-name__mtr--osi\">{name?.[0]}</text>\n            {name?.[1]?.split('\\\\').map((txt, i) => (\n                <text key={i} className=\"rmg-name__en rmg-name__mtr--osi\" dy={12 + 10 * i}>\n                    {txt}\n                </text>\n            ))}\n        </g>\n    );\n};\n","import React, { useMemo } from 'react';\nimport { adjacencyList, criticalPathMethod, getXShareMTR, getStnState } from '../methods/share';\nimport { StationsMTR } from '../methods/mtr';\nimport StationMTR from './station/station-mtr';\nimport { CanvasType, RMGParam, StationDict } from '../../../constants/constants';\nimport { useAppSelector } from '../../../redux';\n\nconst leftWideFactor = (stnList: StationDict, stnId: string) => {\n    var res = 0;\n    let { transfer } = stnList[stnId];\n    let ls = transfer.info.map(val => val.length);\n    if (transfer.tick_direc === 'l') {\n        // int3 or above\n        if (!ls[1] && ls[0] > 1) res += 0.8;\n        // osi except osi22\n        if (ls[1] && (ls[0] !== 1 || ls[1] !== 2)) res += 0.8;\n    }\n    if (ls[0] === 1 && ls[1] === 2) {\n        // osi22 not end\n        if (stnList[stnId].parents[0] !== 'linestart' && stnList[stnId].children[0] !== 'lineend') res += 0.8;\n    }\n    // let { type, tick_direc } = stnList[stnId].transfer;\n    // if (tick_direc === 'l' && ['int3', 'osi11', 'osi12', 'osi21', 'osi31'].includes(type)) res += 0.8;\n    // if (type === 'osi22') res += 0.8;\n    if (stnList[stnId].parents.length === 2) res += 0.4;\n    if (stnList[stnList[stnId].parents[0]].children.length === 2) res += 0.4;\n    return res * 2;\n};\n\nconst rightWideFactor = (stnList: StationDict, stnId: string) => {\n    var res = 0;\n    let { transfer } = stnList[stnId];\n    let ls = transfer.info.map(val => val.length);\n    if (transfer.tick_direc === 'r') {\n        // int3 or above\n        if (!ls[1] && ls[0] > 1) res += 0.8;\n        // osi except osi22\n        if (ls[1] && (ls[0] !== 1 || ls[1] !== 2)) res += 0.8;\n    }\n    if (ls[0] === 1 && ls[1] === 2) {\n        if (stnList[stnId].parents[0] !== 'linestart' && stnList[stnId].children[0] !== 'lineend') res += 0.8;\n    }\n    // let { type, tick_direc } = stnList[stnId].transfer;\n    // if (tick_direc === 'r' && ['int3', 'osi11', 'osi12', 'osi21', 'osi31'].includes(type)) res += 0.8;\n    // if (type === 'osi22') res += 0.8;\n    if (stnList[stnId].children.length === 2) res += 0.4;\n    if (stnList[stnList[stnId].children[0]].parents.length === 2) res += 0.4;\n    return res;\n};\n\nconst getNamePos = (stnId: string, branches: string[][], { isStagger, isFlip }: RMGParam['namePosMTR']) => {\n    if (!isStagger) return isFlip;\n    let res: number;\n    if (branches[0].includes(stnId)) {\n        res = branches[0].indexOf(stnId) % 2;\n    } else {\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n        res = (branches[0].indexOf(branchOfStn[0]) + branchOfStn.indexOf(stnId) + 1) % 2;\n    }\n    return res === 0 ? isFlip : !isFlip;\n};\n\nconst MainMTR = () => {\n    const { branches, routes, depsStr: deps } = useAppSelector(store => store.helper);\n\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const yPercentage = useAppSelector(store => store.param.y_pc);\n    const paddingPercentage = useAppSelector(store => store.param.padding);\n    const branchSpacing = useAppSelector(store => store.param.branch_spacing);\n    const direction = useAppSelector(store => store.param.direction);\n    const namePosition = useAppSelector(store => store.param.namePosMTR);\n\n    const currentStationIndex = useAppSelector(store => store.param.current_stn_idx);\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    const adjMat = adjacencyList(stationList, leftWideFactor, rightWideFactor);\n\n    const criticalPath = useMemo(\n        () => criticalPathMethod('linestart', 'lineend', adjMat),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [JSON.stringify(adjMat)]\n    );\n    const realCP = useMemo(\n        () => criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [JSON.stringify(adjMat)]\n    );\n\n    const xShares = useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(stationList).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShareMTR(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n    const lineXs: [number, number] = [\n        (svgWidths[CanvasType.RailMap] * paddingPercentage) / 100,\n        svgWidths[CanvasType.RailMap] * (1 - paddingPercentage / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = useMemo(\n        () => StationsMTR.getYShares(stationList, branches),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: -yShares[cur] * branchSpacing + (branches[0].includes(cur) ? 0 : yShares[cur] > 0 ? -9.68 : 9.68),\n        }),\n        {} as typeof yShares\n    );\n\n    const stnStates = useMemo(\n        () => getStnState(currentStationIndex, routes, direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [currentStationIndex, direction, routes.toString()]\n    );\n\n    const namePoss = Object.keys(stationList).reduce<{ [stnId: string]: boolean }>(\n        (acc, id) => ({ ...acc, [id]: getNamePos(id, branches, namePosition) }),\n        {}\n    );\n\n    const linePaths = StationsMTR.drawLine(\n        branches,\n        stnStates,\n        stationList,\n        lineXs,\n        xs,\n        ys,\n        branchSpacing,\n        criticalPath\n    );\n\n    return (\n        <g\n            id=\"main\"\n            style={{\n                ['--y-percentage' as any]: yPercentage,\n                transform: 'translateY(calc(var(--y-percentage) * var(--rmg-svg-height) / 100))',\n            }}\n        >\n            <Lines paths={linePaths} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} namePoss={namePoss} />\n        </g>\n    );\n};\n\nexport default MainMTR;\n\nconst Lines = React.memo(\n    (props: { paths: { main: string[]; pass: string[] } }) => {\n        return (\n            <g fill=\"none\" strokeWidth={9.68}>\n                <g stroke=\"var(--rmg-grey)\">\n                    {props.paths.pass.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                </g>\n                <g stroke=\"var(--rmg-theme-colour)\">\n                    {props.paths.main.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => JSON.stringify(prevProps.paths) === JSON.stringify(nextProps.paths)\n);\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n    namePoss: { [stnId: string]: boolean };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { xs, ys, stnStates, namePoss } = props;\n\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    return (\n        <g id=\"stn_icons\">\n            {Object.keys(stationList)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (\n                    <g\n                        key={stnId}\n                        style={{\n                            transform: `translate(${xs[stnId]}px,${ys[stnId]}px)`,\n                        }}\n                    >\n                        <StationMTR stnId={stnId} stnState={stnStates[stnId]} namePos={namePoss[stnId]} />\n                    </g>\n                ))}\n        </g>\n    );\n};\n","import React, { memo } from 'react';\n\nimport StripMTR from '../strip/strip-mtr';\nimport MainMTR from './main/main-mtr';\n\nexport default memo(function RailMapMTR() {\n    return (\n        <>\n            <DefsMTR />\n\n            <StripMTR stripPc={90} />\n            <MainMTR />\n        </>\n    );\n});\n\nconst DefsMTR = React.memo(() => {\n    return (\n        <defs>\n            <g id=\"airport\" transform=\"scale(0.5970084519)\">\n                <rect x={-29.33899} height={58.67798} width={58.67798} />\n                <path\n                    id=\"airport\"\n                    d=\"M28.9769,6.60134c1.711.013,3.111,2.53205,3.111,4.241v10.337s17.106,15.435,17.358,15.666a1.145,1.145,0,0,1,.488,1.152v2.833c0,.651-.451.61-.695.467-.334-.119-17.151-8.863-17.151-8.863-.004,1.458-.797,9.006-1.326,13.304,0,0,4.61,2.457,4.699,2.521.334.268.352.359.352.852v2.001c0,.477-.352.428-.51.324-.183-.062-5.693-1.921-5.693-1.921a2.56018,2.56018,0,0,0-.633-.127,2.31654,2.31654,0,0,0-.666.127s-5.477,1.859-5.672,1.921c-.185.104-.523.153-.523-.324v-2.001c0-.493.029-.584.367-.852.086-.064,4.678-2.521,4.678-2.521-.524-4.298-1.307-11.846-1.325-13.304,0,0-16.822,8.744-17.148,8.863-.217.143-.69.184-.69-.467v-2.833a1.16206,1.16206,0,0,1,.473-1.152c.276-.231,17.365-15.666,17.365-15.666v-10.337c0-1.709,1.403-4.228,3.14105-4.241\"\n                    transform=\"translate(-28.9697,0.14347)\"\n                    fill=\"white\"\n                />\n            </g>\n            <g id=\"disney\" transform=\"scale(0.5970084519)\">\n                <rect x={-29.33899} width={58.67798} height={58.67798} />\n                <path\n                    fill=\"white\"\n                    d=\"M45.6152,7.85015a9.80248,9.80248,0,0,0-9.79907,9.801,9.70059,9.70059,0,0,0,.342,2.582c.002.026.002.055.002.093a.31815.31815,0,0,1-.31494.318.67741.67741,0,0,1-.12806-.02,15.71521,15.71521,0,0,0-13.498,0,.61.61,0,0,1-.122.02.31841.31841,0,0,1-.322-.318v-.067a9.62553,9.62553,0,0,0,.35608-2.608,9.803,9.803,0,1,0-9.797,9.8,10.10364,10.10364,0,0,0,2.308-.271h.05493a.31113.31113,0,0,1,.31409.318.32433.32433,0,0,1-.019.12,15.72588,15.72588,0,1,0,29.703,7.216,15.83676,15.83676,0,0,0-1.746-7.23.18417.18417,0,0,1-.0271-.106.31612.31612,0,0,1,.32007-.318h.057a10.15953,10.15953,0,0,0,2.316.271,9.80051,9.80051,0,0,0,0-19.601\"\n                    transform=\"translate(-28.9697 0.13398)\"\n                />\n            </g>\n            <clipPath id=\"hsr-clip-path\" transform=\"translate(-0.00057 0.01643)\">\n                <path\n                    fill=\"none\"\n                    d=\"M5.1606.89861a3.67176,3.67176,0,0,0-3.676,3.667v48.966a3.67842,3.67842,0,0,0,3.676,3.692h48.443a3.67892,3.67892,0,0,0,3.678-3.692V4.5656a3.67227,3.67227,0,0,0-3.678-3.667Z\"\n                />\n            </clipPath>\n            <g id=\"hsr\" transform=\"scale(0.5970084519)\">\n                <rect x={-29.33899} width={58.67798} height={58.67798} />\n                <g clipPath=\"url(#hsr-clip-path)\" transform=\"translate(-29.33899,0)\">\n                    <rect\n                        x={-3.25242}\n                        y={24.74141}\n                        width={61.75879}\n                        height={0.98008}\n                        transform=\"translate(-8.93747 17.31321) rotate(-30.16134)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M5.77169,48.97289c-2.17407-3.89294,2.56994-10.525,4.85-13.724l.173-.248a83.00826,83.00826,0,0,1,7.39294-9.285,97.384,97.384,0,0,1,11.082-9.958c7.051-6.045,15.832-5.876,16.447-5.894l11.785-.957.276,17.42-11.5271,10.586c-.36.39405-5.553,5.863-18.10193,11.035-6.752,2.783-11.877,4.146-15.66,4.146-3.301,0-5.561-1.049-6.71692-3.121\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <polygon\n                        points=\"57.453 29.614 32.426 58.31 35.582 58.509 57.584 30.433 57.453 29.614\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M49.04708,11.61364a.94277.94277,0,0,0-.17407-.227c-.752-.93695-2.988-1.259-5.933-.793a25.98382,25.98382,0,0,0-9.99695,3.032A98.52916,98.52916,0,0,0,20.723,23.69768c-3.1759,3.487-4.645,6.388-3.62292,7.584,1.84,2.166,13.7539.716,22.00793-6.066,9.035-7.42,10.718-11.577,9.93909-13.602\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                    <path\n                        d=\"M34.65255,13.81182c5.65991-2.842,11.28088-2.856,12.1499-1.213.88306,1.652-2.99792,5.303-8.656,8.128-5.648,2.837-10.9469,3.805-11.81994,2.15-.873-1.641,2.668-6.237,8.326-9.065\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M58.10958,25.03454c-16.832,20.708-40.7301,26.038-40.7301,26.038,11-6.73,12.769-8.111,18.968-18.01,8.364-13.351,21.77808-21.549,21.912-21.63,0,0-.068,13.5-.1499,13.602\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                    <path\n                        d=\"M27.1877,26.69561l9.705-2.814a6.22768,6.22768,0,0,1-1.994,2.759,25.57277,25.57277,0,0,1-6.697,3.405,11.78221,11.78221,0,0,1-5.5.783Z\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M19.59005,25.97692a18.37656,18.37656,0,0,1,3.891-3.976,6.66452,6.66452,0,0,0-.30908,2.213l-4.391,4.829a6.18212,6.18212,0,0,1,.80908-3.066\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <polygon\n                        points=\"23.156 58.311 57.463 26.746 57.396 25.857 21.582 58.607 23.156 58.311\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M60.15645,12.35973a68.6782,68.6782,0,0,0-12.602,9.542c-8.15,7.745-12.109,15.259-9.855,16.091,2.24793.816,10.678-4.782,18.83594-12.543,1.828-1.74,3.48-3.424,4.926-5.024Z\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M63.07638,11.82653a40.86955,40.86955,0,0,0-10,7.096c-5.90406,5.437-9.48609,11.105-7.848,11.742,1.657.631,8.28894-3.955,14.188-9.401a61.76591,61.76591,0,0,0,4.61694-4.705Z\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                    <path\n                        d=\"M12.67989,42.93969a9.87,9.87,0,0,0-5.754-1.895c-.113.22-.223.439-.33008.662a9.45046,9.45046,0,0,1,5.69507,1.749,6.27885,6.27885,0,0,1,2.61,6.305,10.16524,10.16524,0,0,1-.598,2.228c.238-.023.481-.053.725-.087.78308-2.249,1.394-6.184-2.3479-8.962\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                </g>\n            </g>\n\n            <circle id=\"stn\" r={8} className=\"rmg-stn__mtr\" />\n            <path\n                id=\"stn_b\"\n                className=\"rmg-stn__mtr\"\n                d=\"M-6.369803765,4.84a8,8,0,1,1,12.73960753,0a8,8,0,1,1-12.73960758,0Z\"\n            />\n            <path\n                id=\"stn_bb\"\n                d=\"M-6.369803765,4.84a8,8,0,1,1,12.73960753,0a8,8,0,0,1,0,9.68a8,8,0,1,1-12.73960753,0a8,8,0,0,1,0,-9.68Z\"\n                className=\"rmg-stn__mtr\"\n            />\n            <use id=\"int\" xlinkHref=\"#stn\" />\n            <use id=\"int_b\" xlinkHref=\"#stn_b\" />\n            <use id=\"int_bb\" xlinkHref=\"#stn_bb\" />\n            <path id=\"int2\" d=\"M -8,0 v 18 a 8,8 0 0,0 16,0 v -18 a 8,8 0 0,0 -16,0 Z\" className=\"rmg-stn__mtr\" />\n\n            {[3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map(n => {\n                let h = 18 * (n - 1);\n                return (\n                    <React.Fragment key={n}>\n                        <path\n                            id={`int${n}`}\n                            d={`M-8,0v${h}a8,8,0,0,0,16,0v-${h}a8,8,0,0,0-16,0Z`}\n                            className=\"rmg-stn__mtr\"\n                        />\n                        <path\n                            id={`int${n}_b`}\n                            className=\"rmg-stn__mtr\"\n                            d={`M-8,9.68v${h}a8,8,0,0,0,16,0v-${h}a8,8,0,0,0-1.630196235-4.84a8,8,0,1,0-12.73960758,0a8,8,0,0,0-1.630196235,4.84Z`}\n                        />\n                        <path\n                            id={`int${n}_bb`}\n                            className=\"rmg-stn__mtr\"\n                            d={`M-8,19.36v${h}a8,8,0,0,0,16,0v-${h}a8,8,0,0,0-1.630196235-4.84a8,8,0,0,0,0-9.68a8,8,0,1,0-12.73960758,0a8,8,0,0,0,0,9.68a8,8,0,0,0-1.630196235,4.84Z`}\n                        />\n                    </React.Fragment>\n                );\n            })}\n\n            <g id=\"osi11\">\n                <path d=\"M0,0V26\" />\n                <use xlinkHref=\"#stn\" />\n                <use xlinkHref=\"#stn\" y={26} />\n            </g>\n            <g id=\"osi11_b\">\n                <path d=\"M0,0V35.68\" />\n                <use xlinkHref=\"#stn_b\" />\n                <use xlinkHref=\"#stn\" y={35.68} />\n            </g>\n            <g id=\"osi11_bb\">\n                <path d=\"M0,0V45.36\" />\n                <use xlinkHref=\"#stn_bb\" />\n                <use xlinkHref=\"#stn\" y={45.36} />\n            </g>\n\n            <g id=\"osi12\">\n                <path d=\"M0,0V26\" />\n                <use xlinkHref=\"#stn\" />\n                <use xlinkHref=\"#int2\" y={26} />\n            </g>\n            <g id=\"osi12_b\">\n                <path d=\"M0,11V35.68\" />\n                <use xlinkHref=\"#stn_b\" />\n                <use xlinkHref=\"#int2\" y={35.68} />\n            </g>\n            <g id=\"osi12_bb\">\n                <path d=\"M0,11V45.36\" />\n                <use xlinkHref=\"#stn_bb\" />\n                <use xlinkHref=\"#int2\" y={45.36} />\n            </g>\n            <use id=\"osi22\" xlinkHref=\"#osi12\" />\n            <use id=\"osi22_b\" xlinkHref=\"#osi12_b\" />\n            <use id=\"osi22_bb\" xlinkHref=\"#osi12_bb\" />\n\n            <g id=\"osi22end\">\n                <path d=\"M0,0H41\" />\n                <use xlinkHref=\"#stn\" />\n                <use xlinkHref=\"#int2\" x={41} y={-18} />\n            </g>\n            <g id=\"osi22end_b\">\n                <path d=\"M0,9.68H41\" />\n                <use xlinkHref=\"#stn_b\" />\n                <use xlinkHref=\"#int2\" x={41} y={-8.32} />\n            </g>\n\n            <path id=\"inttick\" d=\"M0,0v17\" strokeLinecap=\"round\" />\n        </defs>\n    );\n});\n","import { StationDict } from './constants/constants';\n\n/**\n * Vertical position (in shares) of station icon if using MTR style (for consistency of method `RMGLine.newStnPossibleLoc()`).\n */\nexport const getYShareMTR = (stnId: string, stnList: StationDict): -1 | 0 | 1 => {\n    if (\n        ['linestart', 'lineend'].includes(stnId) ||\n        stnList[stnId].parents.length > 1 ||\n        stnList[stnId].children.length > 1\n    ) {\n        return 0;\n    }\n    var stnPred = stnList[stnId].parents[0];\n    if (stnPred) {\n        // parent exist\n        if (stnList[stnPred].children.length === 1) {\n            // no sibling, then y same as parent\n            return getYShareMTR(stnPred, stnList);\n        } else {\n            // sibling exists, then y depends on its idx of being children\n            return stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n        }\n    } else {\n        // no parent, must be linestart\n        return 0;\n    }\n};\n","import * as Global from '../../../methods';\nimport { RMGParam, ShortDirection, StationDict, StationInfo } from '../../../constants/constants';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (\n                          direction === ShortDirection.right\n                              ? _isSuccessor(currentId, cur, routes)\n                              : _isPredecessor(currentId, cur, routes)\n                      )\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as StationDict;\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number\n    ) {\n        var [prevId, prevY, prevX] = [] as unknown as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 2;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + e}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - e}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number = 9.68\n    ) {\n        let linePaths = { main: [] as string[], pass: [] as string[] };\n        branches.forEach((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branches: string[][], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    let linePaths = { main: [] as string[][], pass: [] as string[][] };\n    branches.forEach(branch => {\n        branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n        var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n        var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n        if (lineMainStns.length === 1) {\n            linePassStns = branch;\n        }\n\n        if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n            // if two set disjoint\n            if (linePassStns[0] === branch[0]) {\n                // -1 -1 1 1\n                linePassStns.push(lineMainStns[0]);\n            } else if (\n                lineMainStns[0] === branch[0] &&\n                lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                linePassStns.length\n            ) {\n                linePassStns = branch;\n                lineMainStns = [];\n            } else {\n                // 1 1 -1 -1\n                linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n            }\n        }\n\n        linePaths.main.push(lineMainStns);\n        linePaths.pass.push(linePassStns);\n    });\n\n    return linePaths;\n};\n","import React, { memo } from 'react';\n\nexport default memo(function StripMTR(props: { stripPc: number }) {\n    return (\n        <rect\n            fill=\"var(--rmg-theme-colour)\"\n            height={20}\n            style={{\n                width: 'var(--rmg-svg-width)',\n                ['--strip-percentage' as any]: props.stripPc,\n                transform: `translateY(calc(var(--strip-percentage, 95) * var(--rmg-svg-height) / 100 - 10px))`,\n            }}\n        />\n    );\n});\n","import { Stations } from './share';\n\nexport class StationsMTR extends Stations {\n    protected leftWideFactor = (stnId: string) => {\n        var res = 0;\n        let { transfer } = this.stnList[stnId];\n        let ls = transfer.info.map(val => val.length);\n        if (transfer.tick_direc === 'l') {\n            // int3 or above\n            if (!ls[1] && ls[0] > 1) res += 0.8;\n            // osi except osi22\n            if (ls[1] && (ls[0] !== 1 || ls[1] !== 2)) res += 0.8;\n        }\n        if (ls[0] === 1 && ls[1] === 2) {\n            // osi22 not end\n            if (this.stnList[stnId].parents[0] !== 'linestart' && this.stnList[stnId].children[0] !== 'lineend')\n                res += 0.8;\n        }\n        if (this.stnList[stnId].parents.length === 2) res += 0.4;\n        if (this.stnList[this.stnList[stnId].parents[0]].children.length === 2) res += 0.4;\n        return res;\n    };\n\n    protected rightWideFactor = (stnId: string) => {\n        var res = 0;\n        let { transfer } = this.stnList[stnId];\n        let ls = transfer.info.map(val => val.length);\n        if (transfer.tick_direc === 'r') {\n            // int3 or above\n            if (!ls[1] && ls[0] > 1) res += 0.8;\n            // osi except osi22\n            if (ls[1] && (ls[0] !== 1 || ls[1] !== 2)) res += 0.8;\n        }\n        if (ls[0] === 1 && ls[1] === 2) {\n            // osi22 not end\n            if (this.stnList[stnId].parents[0] !== 'linestart' && this.stnList[stnId].children[0] !== 'lineend')\n                res += 0.8;\n        }\n        if (this.stnList[stnId].children.length === 2) res += 0.4;\n        if (this.stnList[this.stnList[stnId].children[0]].parents.length === 2) res += 0.4;\n        return res;\n    };\n}\n"],"sourceRoot":""}