{"version":3,"sources":["constants/constants.ts","../external \"MaterialUI\"","../external \"React\"","redux/param/action.ts","redux/app/reducer.ts","redux/param/reducer.ts","redux/helper/reducer.ts","redux/index.ts","redux/app/action.ts","redux/helper/action.ts","redux/helper/graph-theory-util.ts","../external \"ReactI18next\"","../external \"ReactRedux\"","../external \"ReactRouterDOM\"","../external \"Redux\"","utils.ts","../external \"i18next\"","constants/city-config.ts","../external \"ReactDOM\"","../external \"i18nextXHRBackend\"","../external \"i18nextBrowserLanguageDetector\"","../external \"ReduxThunk\"","i18n.ts","app-appbar.tsx","panels/panels.tsx","panels/index.tsx","error-boundary.tsx","svgs/svg-wrapper.tsx","svgs/svg-router.tsx","App.tsx","serviceWorker.ts","util/storage/storageService.ts","util/storage/storageLocalStorage.ts","util/storage/index.ts","index.tsx","util/auto-save-scheduler.ts"],"names":["LoadingStatus","RmgStyle","CanvasType","Direction","ShortDirection","BranchStyle","MonoColour","Services","Facilities","PanelTypeGZMTR","PanelTypeShmetro","LanguageCode","AllCanvas","canvasConfig","MTR","Destination","RailMap","GZMTR","RunIn","SHMetro","Indoor","module","exports","MaterialUI","React","SET_FULL_PARAM","SET_STYLE","SET_SVG_HEIGHT","SET_SVG_WIDTH","SET_Y_PERCENTAGE","SET_BRANCH_SPACING","SET_PADDING_PERCENTAGE","SET_DIRECTION_INDICATOR_X","SET_DIRECTION_INDICATOR_Y","SET_THEME","SET_LINE_NAME","SET_DIRECTION","SET_PLATFORM","SET_LINE_NUM","SET_PSD_NUM","SET_PANEL_TYPE","SET_NOTES","SET_NAME_POSITION","SET_CUSTOMISED_MTR_DESTINATION","SET_CURRENT_STATION","SET_STATION","SET_STATIONS_BULK","setFullParam","fullParam","dispatch","type","triggerHelpersUpdate","setSvgHeight","svgHeight","setSvgWidth","svgWidth","canvas","setStyle","style","setYPercentage","yPercentage","setBranchSpacing","branchSpacing","setPaddingPercentage","paddingPercentage","setDirectionIndicatorX","directionIndicatorX","setDirectionIndicatorY","directionIndicatorY","setTheme","theme","setLineName","lineName","setDirection","direction","setPlatform","platform","setLineNum","lineNum","setPsdNum","psdNum","setPanelType","panelType","setNotes","notes","addNote","getState","param","notesGZMTR","concat","updateNote","index","updatedNote","map","originalNote","idx","removeNote","filter","_","setNamePosition","namePosition","staggerStationNames","isStagger","namePosMTR","flipStationNames","isFlip","setCustomisedMtrDestination","customisedMtrDestination","toggleLineNameBeforeDestination","isShow","customiseMTRDest","isLegacy","customiseDestinationName","customisedName","terminal","setCurrentStation","currentStation","setStation","stationId","station","setStationsBulk","stations","reverseStations","stn_list","newStationList","Object","keys","reduce","acc","stnId","id","lineend","parents","children","slice","reverse","branch","left","right","linestart","updateStationName","name","stationInfo","updateStationSecondaryName","secondaryName","updateStationNum","num","addInterchange","setIndex","interchangeInfo","newTransferInfo","transfer","info","i","length","push","removeInterchange","interchangeIndex","set","setIdx","intIdx","updateInterchange","int","undefined","updateStationOsiName","osiName","newOsiNames","osi_names","updateStationTickDirection","tickDirection","tick_direc","updateStationPaidArea","isPaidArea","paid_area","updateStationBranchType","branchStyle","updateStationBranchFirstStation","branches","first","flipStationBranchPosition","updateStationFacility","facility","addStationService","service","services","includes","removeStationService","s","initialState","rmgStyle","canvasScale","canvasScaleStatus","init","canvasToShow","canvasToShowStatus","destination","runin","railmap","indoor","svg_height","y_pc","padding","branch_spacing","platform_num","CityCode","HongKong","white","line_name","current_stn_idx","line_num","psd_num","info_panel_type","gz1","direction_gz_x","direction_gz_y","depsStr","routes","tpo","rootReducer","combineReducers","app","state","action","SET_CANVAS_SCALE","SET_CANVAS_SCALE_STATUS","SET_CANVAS_TO_SHOW","SET_CANVAS_TO_SHOW_STATUS","helper","SET_DEPS_STR","SET_BRANCHES","SET_ROUTES","SET_TPO","store","createStore","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","setCanvasScale","setCanvasScaleStatus","zoomIn","a","loading","newScale","Number","toFixed","window","rmgStorage","writeFile","toString","loaded","failed","zoomOut","setCanvasToShow","setCanvasToShowStatus","selectCanvas","calcAndGetDepsStr","stnList","nextDepsStr","entries","JSON","stringify","join","calcBranches","console","log","nextBranches","stack","branchCount","curId","shift","prevId","branchNextId","getBranches","calcRoutes","getRoutes","prevBranches","cur","indexOf","ReactI18next","ReactRedux","ReactRouterDOM","Redux","updateParam","dest_legacy","fontZH","fontEN","weightZH","weightEN","stnInfo","interchange","arr","forEach","intInfo","splice","change_type","split","usage","svg_dest_width","svg_width","note","char_form","show_outer","strip_pc","txt_bg_gap","txt_flip","getTransText2","obj","langs","l","English","formatStnName","replace","i18next","cityList","Baku","country","en","az","Barcelona","es","Beijing","zh","Changsha","Chengdu","Chongqing","Delhi","hi","Dongguan","Dortmund","de","Edinburgh","ga","Foshan","Glasgow","Guangzhou","Hangzhou","Kansai","ja","Kaohsiung","Istanbul","tr","London","Macao","pt","Madrid","Nanjing","NewTaipei","Osaka","Oslo","Paris","Qingdao","SanFrancisco","SanktPeterburg","ru","SaoPaulo","Seoul","ko","Shanghai","Shenzhen","Xiamen","Singapore","Stockholm","Taipei","Tehran","fa","Tianjin","Tokyo","Toronto","TyneAndWear","Xian","Other","ReactDOM","i18nextXHRBackend","i18nextBrowserLanguageDetector","ReduxThunk","i18n","use","Backend","LanguageDetector","initReactI18next","fallbackLng","default","backend","loadPath","process","interpolation","escapeValue","then","t","document","title","documentElement","setAttribute","language","useStyles","makeStyles","createStyles","rootLight","backgroundColor","palette","primary","main","rootDark","background","paper","flexGrow","color","menuButton","AppAppBar","useTranslation","classes","prefersDarkMode","useMediaQuery","useMemo","position","className","variant","CanvasToggle","useState","canvasButtonEl","setCanvasButtonEl","handleClick","onClick","e","currentTarget","anchorEl","open","Boolean","onClose","c","margin","ZoomToggles","PanelSave","PanelLayout","PanelDesign","PanelStations","PanelInfo","root","display","flexDirection","height","breakpoints","down","typography","tab","up","justifyContent","minWidth","minHeight","marginBottom","paddingLeft","tabs","overflow","width","scrollbarWidth","WebkitOverflowScrolling","tabpanel","flex","spacing","paddingBottom","alignItems","PanelTab","useTheme","isMobile","value","setValue","tabNav","component","orientation","indicatorColor","textColor","onChange","val","scrollButtons","label","icon","role","fallback","panel","Panel","ErrorBoundary","props","hasError","error","errorInfo","this","Component","SvgWrapper","useEffect","getElementById","href","xmlns","xmlnsXlink","viewBox","colorInterpolationFilters","fill","Suspense","strokeWidth","stroke","overflowX","content","border","SvgRouter","location","useLocation","history","useHistory","svgWidths","pathname","nextStyle","values","filteredCanvas","canvasList","RunInGZMTR","lazy","RailMapGZMTR","DestinationMTR","RailMapMTR","DestinationSHMetro","RunInSHMetro","RailMapSHMetro","IndoorSHMetro","darkTheme","createMuiTheme","secondary","overrides","MuiDialog","lightTheme","light","App","basename","AppBody","paramString","overflowY","hostname","match","StorageLocalStorage","currentBusyFilename","warn","localStorage","alert","Error","setItem","removeItem","filename","contents","getItem","indexedDB","Promise","resolve","request","onerror","err","onsuccess","navigator","serviceWorker","ready","registration","unregister","catch","message","head","append","tag","link","createElement","rel","getRmgStorage","readFile","updatedParam","parse","canvasScaleString","rmgStore","setInterval"],"mappings":"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","file":"static/js/main.e3209614.chunk.js","sourcesContent":["import { CityCode } from './city-config';\n\nexport enum LoadingStatus {\n    init = 'init',\n    loading = 'loading',\n    loaded = 'loaded',\n    failed = 'failed',\n}\n\nexport enum RmgStyle {\n    MTR = 'mtr',\n    GZMTR = 'gzmtr',\n    SHMetro = 'shmetro',\n}\n\nexport enum CanvasType {\n    Destination = 'destination',\n    RunIn = 'runin',\n    RailMap = 'railmap',\n    Indoor = 'indoor',\n}\n\nexport const AllCanvas = 'all';\n\nexport const canvasConfig: { [s in RmgStyle]: CanvasType[] } = {\n    [RmgStyle.MTR]: [CanvasType.Destination, CanvasType.RailMap],\n    [RmgStyle.GZMTR]: [CanvasType.RunIn, CanvasType.RailMap],\n    [RmgStyle.SHMetro]: [CanvasType.Destination, CanvasType.RunIn, CanvasType.RailMap, CanvasType.Indoor],\n};\n\n/**\n * @property {string} 0 - Chinese characters\n * @property {string} 1 - Latin characters\n */\nexport type Name = [string, string];\n\nexport enum Direction {\n    left = 'left',\n    right = 'right',\n}\n\nexport enum ShortDirection {\n    left = 'l',\n    right = 'r',\n}\n\nexport enum BranchStyle {\n    through = 'through',\n    nonThrough = 'nonthrough',\n}\n\n/**\n * Information of branch on both side.\n * @property 0 - branch type\n * @property 1 - ID of the first station of the branch (should also be one of the station's parents/children) or empty\n */\nexport type BranchInfo = Record<Direction, [BranchStyle, string] | []>;\n\nexport enum MonoColour {\n    black = '#000',\n    white = '#fff',\n}\n\nexport type ColourHex = `#${string}`;\n\n/**\n * Colour theme of line, derived from `LineEntry`.\n * @property 0 - city id\n * @property 1 - line id\n * @property 2 - background colour\n * @property 3 - foreground colour\n */\nexport type Theme = [CityCode, string, ColourHex, MonoColour];\n\nexport type InterchangeInfo = [...Theme, ...Name];\n\nexport interface StationTransfer {\n    /**\n     * Direction of text/tick of interchanges.\n     */\n    tick_direc: ShortDirection;\n    /**\n     * Flag of paid area within out-of-station interchange.\n     */\n    paid_area: boolean;\n    /**\n     * Array of name (in two languages) of all out-of-station interchange stations.\n     */\n    osi_names: Name[];\n    /**\n     * Array of arrays of interchange info.\n     * @property 0 - array of within-station interchange info\n     * @property remaining - arrays of out-of-station interchange info (from the nearest to the furthest station)\n     */\n    info: InterchangeInfo[][];\n}\n\nexport enum Services {\n    local = 'local',\n    express = 'express',\n    direct = 'direct',\n}\n\nexport enum Facilities {\n    airport = 'airport',\n    disney = 'disney',\n    hsr = 'hsr',\n    railway = 'railway',\n    none = '',\n}\n\nexport interface StationInfo {\n    /**\n     * Station name in two languages.\n     */\n    name: Name;\n    secondaryName: false | Name;\n    /**\n     * Station number. (GZMTR specific)\n     */\n    num: string;\n    /**\n     * Dictionary of the information of branch on the station's both side.\n     */\n    branch: BranchInfo;\n    /**\n     * Array of parents' IDs.\n     */\n    parents: string[];\n    /**\n     * Array of children's IDs.\n     */\n    children: string[];\n    /**\n     * Detail of interchanges.\n     */\n    transfer: StationTransfer;\n    /**\n     * Array of services at this station.\n     */\n    services: Services[];\n    /**\n     * Facility near the station\n     */\n    facility: Facilities;\n}\n\nexport type StationDict = Record<string, StationInfo>;\n\nexport enum PanelTypeGZMTR {\n    gz1 = 'gz1',\n    gz28 = 'gz28',\n    gz2otis = 'gz2otis',\n    gz3 = 'gz3',\n    gz4 = 'gz4',\n    gz5 = 'gz5',\n    gz1421 = 'gz1421',\n    gz6 = 'gz6',\n    gzgf = 'gzgf',\n}\n\nexport enum PanelTypeShmetro {\n    sh = 'sh',\n    sh2020 = 'sh2020',\n}\n\n/**\n * Dictionary of configuration parameters for RMG, stored in `localStorage` as string.\n */\nexport interface RMGParam {\n    svgWidth: Record<CanvasType, number>;\n    svg_height: number;\n    style: RmgStyle;\n    /**\n     * Vertical position (in percentage) of line.\n     */\n    y_pc: number;\n    /**\n     * Left and right margin of line (in percentage).\n     */\n    padding: number;\n    /**\n     * Branch spacing (in pixels) of line.\n     */\n    branch_spacing: number;\n    direction: ShortDirection;\n    platform_num: string | false;\n    theme: Theme;\n    line_name: Name;\n    current_stn_idx: keyof StationDict;\n    /**\n     * Key-value pairs of the information of each station.\n     */\n    stn_list: StationDict;\n    namePosMTR: {\n        /**\n         * Flag of whether station names staggered. If false, place name above line.\n         */\n        isStagger: boolean;\n        /**\n         * Flag of flipping station names.\n         * When `isStagger === false`, names are above line if `isFlip === false`.\n         */\n        isFlip: boolean;\n    };\n    /**\n     * Customise destination sign of MTR style.\n     */\n    customiseMTRDest: {\n        /**\n         * Flag of legacy style. (Show line name before 'to').\n         */\n        isLegacy: boolean;\n        /**\n         * Customise terminal stations.\n         */\n        terminal: false | Name;\n    };\n    line_num: string;\n    psd_num: string;\n    info_panel_type: PanelTypeGZMTR | PanelTypeShmetro;\n    notesGZMTR: Note[];\n    direction_gz_x: number;\n    direction_gz_y: number;\n}\n\n/**\n * Array of a single note entry for Guangzhou Metro style.\n * @property 0 - text in Chinese characters\n * @property 1 - text in Latin characters\n * @property 2 - percentage of horizontal position\n * @property 3 - percentage of vertical position\n * @property 4 - flag of showing border\n */\nexport type Note = [...Name, number, number, boolean];\n\nexport enum LanguageCode {\n    Azerbaijani = 'az',\n    Catalan = 'ca',\n    Chinese = 'zh',\n    ChineseCN = 'zh-CN',\n    ChineseSimp = 'zh-Hans',\n    ChineseTrad = 'zh-Hant',\n    ChineseHK = 'zh-HK',\n    ChineseTW = 'zh-TW',\n    English = 'en',\n    French = 'fr',\n    Gaelic = 'ga',\n    German = 'de',\n    Hindi = 'hi',\n    Japanese = 'ja',\n    Korean = 'ko',\n    Norwegian = 'no',\n    Spanish = 'es',\n    Persian = 'fa',\n    Portuguese = 'pt',\n    Russian = 'ru',\n    Swedish = 'sv',\n    Turkish = 'tr',\n}\n\nexport type Translation = { [l in LanguageCode]?: string };\n\nexport interface PaletteEntry {\n    /**\n     * ID of line.\n     */\n    id: string;\n    /**\n     * Key-value pairs of multi-lingual names of the line.\n     */\n    name: Translation;\n    /**\n     * Background colour (in #HEX).\n     */\n    colour: ColourHex;\n    /**\n     * Foreground colour. Mandatory field if foreground colour is black.\n     */\n    fg?: MonoColour;\n    /**\n     * Pantone colour. If defined, colour is converted with Pantone Color Finder (https://www.pantone.com/color-finder).\n     */\n    pantone?: string;\n}\n","module.exports = MaterialUI;","module.exports = React;","import {\n    BranchStyle,\n    CanvasType,\n    Direction,\n    Facilities,\n    InterchangeInfo,\n    Name,\n    Note,\n    PanelTypeGZMTR,\n    PanelTypeShmetro,\n    RMGParam,\n    RmgStyle,\n    Services,\n    ShortDirection,\n    StationDict,\n    StationInfo,\n    Theme,\n} from '../../constants/constants';\nimport { AppDispatch, RootState } from '../index';\nimport { triggerHelpersUpdate } from '../helper/action';\n\nexport const SET_FULL_PARAM = 'SET_FULL_PARAM';\n\n// file\nexport const SET_STYLE = 'SET_STYLE';\n\n// layout\nexport const SET_SVG_HEIGHT = 'SET_SVG_HEIGHT';\nexport const SET_SVG_WIDTH = 'SET_SVG_WIDTH';\nexport const SET_Y_PERCENTAGE = 'SET_Y_PERCENTAGE';\nexport const SET_BRANCH_SPACING = 'SET_BRANCH_SPACING';\nexport const SET_PADDING_PERCENTAGE = 'SET_PADDING_PERCENTAGE';\nexport const SET_DIRECTION_INDICATOR_X = 'SET_DIRECTION_INDICATOR_X';\nexport const SET_DIRECTION_INDICATOR_Y = 'SET_DIRECTION_INDICATOR_Y';\n\n// design\nexport const SET_THEME = 'SET_THEME';\nexport const SET_LINE_NAME = 'SET_LINE_NAME';\nexport const SET_DIRECTION = 'SET_DIRECTION';\nexport const SET_PLATFORM = 'SET_PLATFORM';\nexport const SET_LINE_NUM = 'SET_LINE_NUM';\nexport const SET_PSD_NUM = 'SET_PSD_NUM';\nexport const SET_PANEL_TYPE = 'SET_PANEL_TYPE';\nexport const SET_NOTES = 'SET_NOTES';\nexport const SET_NAME_POSITION = 'SET_NAME_POSITION';\nexport const SET_CUSTOMISED_MTR_DESTINATION = 'SET_CUSTOMISED_MTR_DESTINATION';\n\n// stations\nexport const SET_CURRENT_STATION = 'SET_CURRENT_STATION';\nexport const SET_STATION = 'SET_STATION';\nexport const SET_STATIONS_BULK = 'SET_STATIONS_BULK';\n\nexport interface setFullParamAction {\n    type: typeof SET_FULL_PARAM;\n    fullParam: RMGParam;\n}\n\nexport interface setStyleAction {\n    type: typeof SET_STYLE;\n    style: RmgStyle;\n}\n\nexport interface setSvgHeightAction {\n    type: typeof SET_SVG_HEIGHT;\n    svgHeight: number;\n}\n\nexport interface setSvgWidthAction {\n    type: typeof SET_SVG_WIDTH;\n    svgWidth: number;\n    canvas: CanvasType;\n}\n\nexport interface setYPercentageAction {\n    type: typeof SET_Y_PERCENTAGE;\n    yPercentage: number;\n}\n\nexport interface setBranchSpacingAction {\n    type: typeof SET_BRANCH_SPACING;\n    branchSpacing: number;\n}\n\nexport interface setPaddingPercentageAction {\n    type: typeof SET_PADDING_PERCENTAGE;\n    paddingPercentage: number;\n}\n\nexport interface setDirectionIndicatorXAction {\n    type: typeof SET_DIRECTION_INDICATOR_X;\n    directionIndicatorX: number;\n}\n\nexport interface setDirectionIndicatorYAction {\n    type: typeof SET_DIRECTION_INDICATOR_Y;\n    directionIndicatorY: number;\n}\n\nexport interface setThemeAction {\n    type: typeof SET_THEME;\n    theme: Theme;\n}\n\nexport interface setLineNameAction {\n    type: typeof SET_LINE_NAME;\n    lineName: Name;\n}\n\nexport interface setDirectionAction {\n    type: typeof SET_DIRECTION;\n    direction: ShortDirection;\n}\n\nexport interface setPlatformAction {\n    type: typeof SET_PLATFORM;\n    platform: string | false;\n}\n\nexport interface setLineNumAction {\n    type: typeof SET_LINE_NUM;\n    lineNum: string;\n}\n\nexport interface setPsdNumAction {\n    type: typeof SET_PSD_NUM;\n    psdNum: string;\n}\n\nexport interface setPanelTypeAction {\n    type: typeof SET_PANEL_TYPE;\n    panelType: PanelTypeGZMTR | PanelTypeShmetro;\n}\n\nexport interface setNotesAction {\n    type: typeof SET_NOTES;\n    notes: Note[];\n}\n\nexport interface setNamePositionAction {\n    type: typeof SET_NAME_POSITION;\n    namePosition: RMGParam['namePosMTR'];\n}\n\nexport interface setCustomisedMtrDestinationAction {\n    type: typeof SET_CUSTOMISED_MTR_DESTINATION;\n    customisedMtrDestination: RMGParam['customiseMTRDest'];\n}\n\nexport interface setCurrentStationAction {\n    type: typeof SET_CURRENT_STATION;\n    currentStation: string;\n}\n\nexport interface setStationAction {\n    type: typeof SET_STATION;\n    stationId: string;\n    station: StationInfo;\n}\n\nexport interface setStationsBulkAction {\n    type: typeof SET_STATIONS_BULK;\n    stations: StationDict;\n}\n\n// export const setFullParam = (fullParam: RMGParam): setFullParamAction => {\n//     return { type: SET_FULL_PARAM, fullParam };\n// };\n\nexport const setFullParam = (fullParam: RMGParam) => {\n    return (dispatch: AppDispatch) => {\n        dispatch({ type: SET_FULL_PARAM, fullParam });\n        dispatch(triggerHelpersUpdate());\n    };\n};\n\nexport const setSvgHeight = (svgHeight: number): setSvgHeightAction => {\n    return { type: SET_SVG_HEIGHT, svgHeight };\n};\n\nexport const setSvgWidth = (svgWidth: number, canvas: CanvasType): setSvgWidthAction => {\n    return { type: SET_SVG_WIDTH, svgWidth, canvas };\n};\n\nexport const setStyle = (style: RmgStyle): setStyleAction => {\n    return { type: SET_STYLE, style };\n};\n\nexport const setYPercentage = (yPercentage: number): setYPercentageAction => {\n    return { type: SET_Y_PERCENTAGE, yPercentage };\n};\n\nexport const setBranchSpacing = (branchSpacing: number): setBranchSpacingAction => {\n    return { type: SET_BRANCH_SPACING, branchSpacing };\n};\n\nexport const setPaddingPercentage = (paddingPercentage: number): setPaddingPercentageAction => {\n    return { type: SET_PADDING_PERCENTAGE, paddingPercentage };\n};\n\nexport const setDirectionIndicatorX = (directionIndicatorX: number): setDirectionIndicatorXAction => {\n    return { type: SET_DIRECTION_INDICATOR_X, directionIndicatorX };\n};\n\nexport const setDirectionIndicatorY = (directionIndicatorY: number): setDirectionIndicatorYAction => {\n    return { type: SET_DIRECTION_INDICATOR_Y, directionIndicatorY };\n};\n\nexport const setTheme = (theme: Theme): setThemeAction => {\n    return { type: SET_THEME, theme };\n};\n\nexport const setLineName = (lineName: Name): setLineNameAction => {\n    return { type: SET_LINE_NAME, lineName };\n};\n\nexport const setDirection = (direction: ShortDirection): setDirectionAction => {\n    return { type: SET_DIRECTION, direction };\n};\n\nexport const setPlatform = (platform: string | false): setPlatformAction => {\n    return { type: SET_PLATFORM, platform };\n};\n\nexport const setLineNum = (lineNum: string): setLineNumAction => {\n    return { type: SET_LINE_NUM, lineNum };\n};\n\nexport const setPsdNum = (psdNum: string): setPsdNumAction => {\n    return { type: SET_PSD_NUM, psdNum };\n};\n\nexport const setPanelType = (panelType: PanelTypeShmetro | PanelTypeGZMTR): setPanelTypeAction => {\n    return { type: SET_PANEL_TYPE, panelType };\n};\n\nconst setNotes = (notes: Note[]): setNotesAction => {\n    return { type: SET_NOTES, notes };\n};\n\nexport const addNote = () => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const notes = getState().param.notesGZMTR;\n        dispatch(setNotes(notes.concat([['', '', 0, 0, false]])));\n    };\n};\n\nexport const updateNote = (index: number, updatedNote: Note) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const notes = getState().param.notesGZMTR;\n        dispatch(setNotes(notes.map((originalNote, idx) => (idx === index ? updatedNote : originalNote))));\n    };\n};\n\nexport const removeNote = (index: number) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const notes = getState().param.notesGZMTR;\n        dispatch(setNotes(notes.filter((_, idx) => idx !== index)));\n    };\n};\n\nconst setNamePosition = (namePosition: RMGParam['namePosMTR']): setNamePositionAction => {\n    return { type: SET_NAME_POSITION, namePosition };\n};\n\nexport const staggerStationNames = (isStagger: boolean) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const namePosition = getState().param.namePosMTR;\n        dispatch(setNamePosition({ ...namePosition, isStagger }));\n    };\n};\n\nexport const flipStationNames = () => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const namePosition = getState().param.namePosMTR;\n        dispatch(setNamePosition({ ...namePosition, isFlip: !namePosition.isFlip }));\n    };\n};\n\nconst setCustomisedMtrDestination = (\n    customisedMtrDestination: RMGParam['customiseMTRDest']\n): setCustomisedMtrDestinationAction => {\n    return { type: SET_CUSTOMISED_MTR_DESTINATION, customisedMtrDestination };\n};\n\nexport const toggleLineNameBeforeDestination = (isShow: boolean) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const customisedMtrDestination = getState().param.customiseMTRDest;\n        dispatch(setCustomisedMtrDestination({ ...customisedMtrDestination, isLegacy: isShow }));\n    };\n};\n\nexport const customiseDestinationName = (customisedName: Name | false) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const customisedMtrDestination = getState().param.customiseMTRDest;\n        dispatch(setCustomisedMtrDestination({ ...customisedMtrDestination, terminal: customisedName }));\n    };\n};\n\nexport const setCurrentStation = (currentStation: string): setCurrentStationAction => {\n    return { type: SET_CURRENT_STATION, currentStation };\n};\n\n// const setStation = (stationId: string, station: StationInfo): setStationAction => {\n//     return { type: SET_STATION, stationId, station };\n// };\n\nexport const setStation = (stationId: string, station: StationInfo) => {\n    return (dispatch: AppDispatch) => {\n        dispatch({ type: SET_STATION, stationId, station });\n        dispatch(triggerHelpersUpdate());\n    };\n};\n\n// export const setStationsBulk = (stations: StationDict): setStationsBulkAction => {\n//     return { type: SET_STATIONS_BULK, stations };\n// };\n\nexport const setStationsBulk = (stations: StationDict) => {\n    return (dispatch: AppDispatch) => {\n        dispatch({ type: SET_STATIONS_BULK, stations });\n        dispatch(triggerHelpersUpdate());\n    };\n};\n\nexport const reverseStations = () => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const { stn_list } = getState().param;\n        const newStationList = Object.keys(stn_list).reduce(\n            (acc, stnId) => ({\n                ...acc,\n                [stnId]: (id => {\n                    switch (id) {\n                        case 'linestart':\n                            return {\n                                ...stn_list.lineend,\n                                parents: [],\n                                children: stn_list.lineend.parents.slice().reverse(),\n                                branch: { left: [] as [], right: stn_list.lineend.branch.left },\n                            };\n                        case 'lineend':\n                            return {\n                                ...stn_list.linestart,\n                                parents: stn_list.linestart.children.slice().reverse(),\n                                children: [],\n                                branch: { left: stn_list.linestart.branch.right, right: [] as [] },\n                            };\n                        default:\n                            return {\n                                ...stn_list[id],\n                                parents: stn_list[id].children\n                                    .map(id => (id === 'linestart' ? 'lineend' : id === 'lineend' ? 'linestart' : id))\n                                    .reverse(),\n                                children: stn_list[id].parents\n                                    .map(id => (id === 'linestart' ? 'lineend' : id === 'lineend' ? 'linestart' : id))\n                                    .reverse(),\n                                branch: {\n                                    left: stn_list[id].branch.right,\n                                    right: stn_list[id].branch.left,\n                                },\n                            };\n                    }\n                })(stnId),\n            }),\n            {} as StationDict\n        );\n        dispatch(setStationsBulk(newStationList));\n    };\n};\n\nexport const updateStationName = (stationId: string, name: Name) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(setStation(stationId, { ...stationInfo, name }));\n    };\n};\n\nexport const updateStationSecondaryName = (stationId: string, secondaryName: Name | false) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(setStation(stationId, { ...stationInfo, secondaryName }));\n    };\n};\n\nexport const updateStationNum = (stationId: string, num: string) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(setStation(stationId, { ...stationInfo, num }));\n    };\n};\n\n/**\n *\n * @param stationId\n * @param setIndex - set 0: within-station interchange. set 1: Out of station(OSI) transfer. set 2: Out of system(OSysI) transfer\n * @param interchangeInfo\n */\nexport const addInterchange = (stationId: string, setIndex: number, interchangeInfo: InterchangeInfo) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n\n        const newTransferInfo = stationInfo.transfer.info.map(i => i.slice());\n        if (newTransferInfo.length > setIndex) {\n            newTransferInfo[setIndex].push(interchangeInfo);\n        } else {\n            for (let i = newTransferInfo.length; i < setIndex; i++) {\n                newTransferInfo[i] = [];\n            }\n            newTransferInfo[setIndex] = [interchangeInfo];\n        }\n\n        dispatch(\n            setStation(stationId, { ...stationInfo, transfer: { ...stationInfo.transfer, info: newTransferInfo } })\n        );\n    };\n};\n\nexport const removeInterchange = (stationId: string, setIndex: number, interchangeIndex: number) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n\n        if (\n            stationInfo.transfer.info.length > setIndex &&\n            stationInfo.transfer.info[setIndex].length > interchangeIndex\n        ) {\n            const newTransferInfo = stationInfo.transfer.info.map((set, setIdx) =>\n                setIdx === setIndex ? set.filter((_, intIdx) => intIdx !== interchangeIndex) : set\n            );\n            dispatch(\n                setStation(stationId, { ...stationInfo, transfer: { ...stationInfo.transfer, info: newTransferInfo } })\n            );\n        }\n    };\n};\n\nexport const updateInterchange = (\n    stationId: string,\n    setIndex: number,\n    interchangeIndex: number,\n    interchangeInfo: InterchangeInfo\n) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n\n        if (\n            stationInfo.transfer.info.length > setIndex &&\n            stationInfo.transfer.info[setIndex].length > interchangeIndex\n        ) {\n            const newTransferInfo = stationInfo.transfer.info.map((set, setIdx) =>\n                setIdx === setIndex\n                    ? set.map((int, intIdx) =>\n                          intIdx === interchangeIndex\n                              ? ([0, 1, 2, 3, 4, 5].map(i =>\n                                    interchangeInfo[i] === undefined ? int[i] : interchangeInfo[i]\n                                ) as InterchangeInfo)\n                              : int\n                      )\n                    : set\n            );\n            dispatch(\n                setStation(stationId, { ...stationInfo, transfer: { ...stationInfo.transfer, info: newTransferInfo } })\n            );\n        }\n    };\n};\n\nexport const updateStationOsiName = (stationId: string, setIndex: number, osiName: Name) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n\n        const newOsiNames = stationInfo.transfer.osi_names.map(i => i.slice()) as Name[];\n        if (newOsiNames.length > setIndex) {\n            newOsiNames[setIndex] = osiName;\n        } else {\n            for (let i = newOsiNames.length; i < setIndex; i++) {\n                newOsiNames[i] = ['車站名', 'Stn Name'];\n            }\n            newOsiNames[setIndex] = osiName;\n        }\n        dispatch(\n            setStation(stationId, {\n                ...stationInfo,\n                transfer: { ...stationInfo.transfer, osi_names: newOsiNames },\n            })\n        );\n    };\n};\n\nexport const updateStationTickDirection = (stationId: string, tickDirection: ShortDirection) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(\n            setStation(stationId, {\n                ...stationInfo,\n                transfer: { ...stationInfo.transfer, tick_direc: tickDirection },\n            })\n        );\n    };\n};\n\nexport const updateStationPaidArea = (stationId: string, isPaidArea: boolean) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(\n            setStation(stationId, {\n                ...stationInfo,\n                transfer: { ...stationInfo.transfer, paid_area: isPaidArea },\n            })\n        );\n    };\n};\n\nexport const updateStationBranchType = (stationId: string, direction: Direction, branchStyle: BranchStyle) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(\n            setStation(stationId, {\n                ...stationInfo,\n                branch: { ...stationInfo.branch, [direction]: [branchStyle, stationInfo.branch[direction][1]] },\n            })\n        );\n    };\n};\n\nexport type UpdateStationBranchFirstStationArgType = { stnId: string; direction: Direction; first: string };\n\n// FIXME\nexport const updateStationBranchFirstStation = (\n    branches: [UpdateStationBranchFirstStationArgType, UpdateStationBranchFirstStationArgType]\n) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const { stn_list } = getState().param;\n        dispatch(\n            setStationsBulk({\n                ...stn_list,\n                [branches[0].stnId]: {\n                    ...stn_list[branches[0].stnId],\n                    branch: {\n                        ...stn_list[branches[0].stnId].branch,\n                        [branches[0].direction]: [\n                            stn_list[branches[0].stnId].branch[branches[0].direction][0],\n                            branches[0].first,\n                        ],\n                    },\n                },\n                [branches[1].stnId]: {\n                    ...stn_list[branches[1].stnId],\n                    branch: {\n                        ...stn_list[branches[1].stnId].branch,\n                        [branches[1].direction]: [\n                            stn_list[branches[1].stnId].branch[branches[1].direction][0],\n                            branches[1].first,\n                        ],\n                    },\n                },\n            })\n        );\n    };\n};\n\nexport const flipStationBranchPosition = (left: string, right: string) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const { stn_list } = getState().param;\n        dispatch(\n            setStationsBulk({\n                ...stn_list,\n                [left]: { ...stn_list[left], parents: stn_list[left].parents.slice().reverse() },\n                [right]: { ...stn_list[right], children: stn_list[right].children.slice().reverse() },\n            })\n        );\n    };\n};\n\nexport const updateStationFacility = (stationId: string, facility: Facilities) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(setStation(stationId, { ...stationInfo, facility }));\n    };\n};\n\nexport const addStationService = (stationId: string, service: Services) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n\n        if (!stationInfo.services.includes(service)) {\n            dispatch(setStation(stationId, { ...stationInfo, services: stationInfo.services.concat(service) }));\n        }\n    };\n};\n\nexport const removeStationService = (stationId: string, service: Services) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n\n        if (stationInfo.services.includes(service)) {\n            dispatch(\n                setStation(stationId, {\n                    ...stationInfo,\n                    services: stationInfo.services.filter(s => s !== service),\n                })\n            );\n        }\n    };\n};\n","import { AllCanvas, CanvasType, LoadingStatus, RmgStyle } from '../../constants/constants';\nimport {\n    SET_CANVAS_SCALE,\n    SET_CANVAS_SCALE_STATUS,\n    SET_CANVAS_TO_SHOW,\n    SET_CANVAS_TO_SHOW_STATUS,\n    setCanvasScaleAction,\n    setCanvasScaleStatusAction,\n    setCanvasToShowAction,\n    setCanvasToShowStatusAction,\n} from './action';\n\ninterface AppState {\n    rmgStyle: RmgStyle;\n    canvasScale: number;\n    canvasScaleStatus: LoadingStatus;\n    canvasToShow: CanvasType | typeof AllCanvas;\n    canvasToShowStatus: LoadingStatus;\n}\n\nconst initialState: AppState = {\n    rmgStyle: RmgStyle.MTR,\n    canvasScale: 1,\n    canvasScaleStatus: LoadingStatus.init,\n    canvasToShow: AllCanvas,\n    canvasToShowStatus: LoadingStatus.init,\n};\n\nexport default function AppReducer(\n    state = initialState,\n    action:\n        | setCanvasScaleAction\n        | setCanvasScaleStatusAction\n        | setCanvasToShowAction\n        | setCanvasToShowStatusAction\n): AppState {\n    switch (action.type) {\n        case SET_CANVAS_SCALE:\n            state.canvasScale = action.canvasScale;\n            break;\n        case SET_CANVAS_SCALE_STATUS:\n            state.canvasScaleStatus = action.canvasScaleStatus;\n            break;\n        case SET_CANVAS_TO_SHOW:\n            state.canvasToShow = action.canvasToShow;\n            break;\n        case SET_CANVAS_TO_SHOW_STATUS:\n            state.canvasToShowStatus = action.canvasToShowStatus;\n            break;\n        default:\n            break;\n    }\n\n    return { ...state };\n}\n","import { CityCode } from '../../constants/city-config';\nimport { MonoColour, PanelTypeGZMTR, RMGParam, ShortDirection, RmgStyle } from '../../constants/constants';\nimport {\n    SET_BRANCH_SPACING,\n    SET_CURRENT_STATION,\n    SET_CUSTOMISED_MTR_DESTINATION,\n    SET_DIRECTION,\n    SET_DIRECTION_INDICATOR_X,\n    SET_DIRECTION_INDICATOR_Y,\n    SET_FULL_PARAM,\n    SET_LINE_NAME,\n    SET_LINE_NUM,\n    SET_NAME_POSITION,\n    SET_NOTES,\n    SET_PADDING_PERCENTAGE,\n    SET_PANEL_TYPE,\n    SET_PLATFORM,\n    SET_PSD_NUM,\n    SET_STATION,\n    SET_STATIONS_BULK,\n    SET_SVG_HEIGHT,\n    SET_SVG_WIDTH,\n    SET_THEME,\n    SET_Y_PERCENTAGE,\n    SET_STYLE,\n    setBranchSpacingAction,\n    setCurrentStationAction,\n    setCustomisedMtrDestinationAction,\n    setDirectionAction,\n    setDirectionIndicatorXAction,\n    setDirectionIndicatorYAction,\n    setFullParamAction,\n    setLineNameAction,\n    setLineNumAction,\n    setNamePositionAction,\n    setNotesAction,\n    setPaddingPercentageAction,\n    setPanelTypeAction,\n    setPlatformAction,\n    setPsdNumAction,\n    setStationAction,\n    setStationsBulkAction,\n    setSvgHeightAction,\n    setSvgWidthAction,\n    setThemeAction,\n    setYPercentageAction,\n    setStyleAction,\n} from './action';\n\nconst initialState: RMGParam = {\n    svgWidth: {\n        destination: 100,\n        runin: 100,\n        railmap: 100,\n        indoor: 100,\n    },\n    svg_height: 100,\n    style: RmgStyle.MTR,\n    y_pc: 50,\n    padding: 10,\n    branch_spacing: 10,\n    direction: ShortDirection.left,\n    platform_num: '1',\n    theme: [CityCode.HongKong, 'twl', '#E2231A', MonoColour.white],\n    line_name: ['線', 'line'],\n    current_stn_idx: '',\n    stn_list: {},\n    namePosMTR: {\n        isStagger: true,\n        isFlip: true,\n    },\n    customiseMTRDest: {\n        isLegacy: false,\n        terminal: false,\n    },\n    line_num: '1',\n    psd_num: '1',\n    info_panel_type: PanelTypeGZMTR.gz1,\n    notesGZMTR: [],\n    direction_gz_x: 0,\n    direction_gz_y: 0,\n};\n\nexport default function ParamReducer(\n    state = initialState,\n    action:\n        | setFullParamAction\n        | setStyleAction\n        | setSvgHeightAction\n        | setSvgWidthAction\n        | setYPercentageAction\n        | setBranchSpacingAction\n        | setPaddingPercentageAction\n        | setDirectionIndicatorXAction\n        | setDirectionIndicatorYAction\n        | setThemeAction\n        | setLineNameAction\n        | setDirectionAction\n        | setPlatformAction\n        | setLineNumAction\n        | setPsdNumAction\n        | setPanelTypeAction\n        | setNotesAction\n        | setNamePositionAction\n        | setCustomisedMtrDestinationAction\n        | setCurrentStationAction\n        | setStationAction\n        | setStationsBulkAction\n) {\n    switch (action.type) {\n        case SET_FULL_PARAM:\n            return action.fullParam;\n        case SET_STYLE:\n            state.style = action.style;\n            break;\n        case SET_SVG_HEIGHT:\n            state.svg_height = action.svgHeight;\n            break;\n        case SET_SVG_WIDTH:\n            state.svgWidth[action.canvas] = action.svgWidth;\n            break;\n        case SET_Y_PERCENTAGE:\n            state.y_pc = action.yPercentage;\n            break;\n        case SET_BRANCH_SPACING:\n            state.branch_spacing = action.branchSpacing;\n            break;\n        case SET_PADDING_PERCENTAGE:\n            state.padding = action.paddingPercentage;\n            break;\n        case SET_DIRECTION_INDICATOR_X:\n            state.direction_gz_x = action.directionIndicatorX;\n            break;\n        case SET_DIRECTION_INDICATOR_Y:\n            state.direction_gz_y = action.directionIndicatorY;\n            break;\n        case SET_THEME:\n            state.theme = action.theme;\n            break;\n        case SET_LINE_NAME:\n            state.line_name = action.lineName;\n            break;\n        case SET_DIRECTION:\n            state.direction = action.direction;\n            break;\n        case SET_PLATFORM:\n            state.platform_num = action.platform;\n            break;\n        case SET_LINE_NUM:\n            state.line_num = action.lineNum;\n            break;\n        case SET_PSD_NUM:\n            state.psd_num = action.psdNum;\n            break;\n        case SET_PANEL_TYPE:\n            state.info_panel_type = action.panelType;\n            break;\n        case SET_NOTES:\n            state.notesGZMTR = action.notes;\n            break;\n        case SET_NAME_POSITION:\n            state.namePosMTR = action.namePosition;\n            break;\n        case SET_CUSTOMISED_MTR_DESTINATION:\n            state.customiseMTRDest = action.customisedMtrDestination;\n            break;\n        case SET_CURRENT_STATION:\n            state.current_stn_idx = action.currentStation;\n            break;\n        case SET_STATION:\n            state.stn_list[action.stationId] = action.station;\n            break;\n        case SET_STATIONS_BULK:\n            state.stn_list = action.stations;\n            break;\n        default:\n            break;\n    }\n    return { ...state };\n}\n","import {\n    SET_BRANCHES,\n    SET_DEPS_STR,\n    SET_ROUTES,\n    SET_TPO,\n    setBranchesAction,\n    setDepsStrAction,\n    setRoutesAction,\n    setTpoAction,\n} from './action';\n\ninterface HelperState {\n    depsStr: string;\n    branches: string[][];\n    routes: string[][];\n    tpo: string[];\n}\n\nconst initialState: HelperState = { depsStr: '', branches: [], routes: [], tpo: [] };\n\nexport default function HelperReducer(\n    state = initialState,\n    action: setDepsStrAction | setBranchesAction | setRoutesAction | setTpoAction\n) {\n    switch (action.type) {\n        case SET_DEPS_STR:\n            state.depsStr = action.depsStr;\n            break;\n        case SET_BRANCHES:\n            state.branches = action.branches;\n            break;\n        case SET_ROUTES:\n            state.routes = action.routes;\n            break;\n        case SET_TPO:\n            state.tpo = action.tpo;\n            break;\n        default:\n            break;\n    }\n\n    return { ...state };\n}\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunk, { ThunkMiddleware } from 'redux-thunk';\nimport AppReducer from './app/reducer';\nimport ParamReducer from './param/reducer';\nimport HelperReducer from './helper/reducer';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\n\nconst rootReducer = combineReducers({\n    app: AppReducer,\n    param: ParamReducer,\n    helper: HelperReducer,\n});\nexport type RootState = ReturnType<typeof rootReducer>;\n\nconst store = createStore(rootReducer, applyMiddleware(thunk as ThunkMiddleware<RootState>));\nexport default store;\n\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { AllCanvas, CanvasType, LoadingStatus } from '../../constants/constants';\nimport { Dispatch } from 'redux';\nimport { RootState } from '../index';\n\nexport const SET_CANVAS_SCALE = 'SET_CANVAS_SCALE';\nexport const SET_CANVAS_SCALE_STATUS = 'SET_CANVAS_SCALE_STATUS';\nexport const SET_CANVAS_TO_SHOW = 'SET_CANVAS_TO_SHOW';\nexport const SET_CANVAS_TO_SHOW_STATUS = 'SET_CANVAS_TO_SHOW_STATUS';\n\nexport interface setCanvasScaleAction {\n    type: typeof SET_CANVAS_SCALE;\n    canvasScale: number;\n}\n\nexport interface setCanvasScaleStatusAction {\n    type: typeof SET_CANVAS_SCALE_STATUS;\n    canvasScaleStatus: LoadingStatus;\n}\n\nexport interface setCanvasToShowAction {\n    type: typeof SET_CANVAS_TO_SHOW;\n    canvasToShow: CanvasType | typeof AllCanvas;\n}\n\nexport interface setCanvasToShowStatusAction {\n    type: typeof SET_CANVAS_TO_SHOW_STATUS;\n    canvasToShowStatus: LoadingStatus;\n}\n\nexport const setCanvasScale = (canvasScale: number) => {\n    return { type: SET_CANVAS_SCALE, canvasScale } as setCanvasScaleAction;\n};\n\nconst setCanvasScaleStatus = (canvasScaleStatus: LoadingStatus) => {\n    return { type: SET_CANVAS_SCALE_STATUS, canvasScaleStatus } as setCanvasScaleStatusAction;\n};\n\nexport const zoomIn = () => {\n    return async (dispatch: Dispatch, getState: () => RootState) => {\n        dispatch(setCanvasScaleStatus(LoadingStatus.loading));\n        try {\n            const newScale = Number((getState().app.canvasScale + 0.1).toFixed(1));\n            dispatch(setCanvasScale(newScale));\n            await window.rmgStorage.writeFile('rmgScale', newScale.toString());\n            dispatch(setCanvasScaleStatus(LoadingStatus.loaded));\n        } catch (err) {\n            dispatch(setCanvasScaleStatus(LoadingStatus.failed));\n        }\n    };\n};\n\nexport const zoomOut = () => {\n    return async (dispatch: Dispatch, getState: () => RootState) => {\n        dispatch(setCanvasScaleStatus(LoadingStatus.loading));\n        try {\n            const { canvasScale } = getState().app;\n            const newScale =\n                Number(canvasScale.toFixed(1)) <= 0.1\n                    ? Number(canvasScale.toFixed(1))\n                    : Number((canvasScale - 0.1).toFixed(1));\n            dispatch(setCanvasScale(newScale));\n            await window.rmgStorage.writeFile('rmgScale', newScale.toString());\n            dispatch(setCanvasScaleStatus(LoadingStatus.loaded));\n        } catch (err) {\n            dispatch(setCanvasScaleStatus(LoadingStatus.failed));\n        }\n    };\n};\n\nexport const setCanvasToShow = (canvasToShow: CanvasType | typeof AllCanvas) => {\n    return { type: SET_CANVAS_TO_SHOW, canvasToShow } as setCanvasToShowAction;\n};\n\nconst setCanvasToShowStatus = (canvasToShowStatus: LoadingStatus) => {\n    return { type: SET_CANVAS_TO_SHOW_STATUS, canvasToShowStatus } as setCanvasToShowStatusAction;\n};\n\nexport const selectCanvas = (canvas: CanvasType | typeof AllCanvas) => {\n    return async (dispatch: Dispatch) => {\n        dispatch(setCanvasToShowStatus(LoadingStatus.loading));\n        try {\n            dispatch(setCanvasToShow(canvas));\n            await window.rmgStorage.writeFile('rmgCanvas', canvas);\n            dispatch(setCanvasToShowStatus(LoadingStatus.loaded));\n        } catch (err) {\n            dispatch(setCanvasToShowStatus(LoadingStatus.failed));\n        }\n    };\n};\n","import { AppDispatch, RootState } from '../index';\nimport { getBranches, getRoutes, getTpo } from './graph-theory-util';\n\nexport const SET_DEPS_STR = 'SET_DEPS_STR';\nexport const SET_BRANCHES = 'SET_BRANCHES';\nexport const SET_ROUTES = 'SET_ROUTES';\nexport const SET_TPO = 'SET_TPO';\n\nexport type setDepsStrAction = {\n    type: typeof SET_DEPS_STR;\n    depsStr: string;\n};\nexport type setBranchesAction = {\n    type: typeof SET_BRANCHES;\n    branches: string[][];\n};\nexport type setRoutesAction = {\n    type: typeof SET_ROUTES;\n    routes: string[][];\n};\nexport type setTpoAction = {\n    type: typeof SET_TPO;\n    tpo: string[];\n};\n\nconst setDepsStr = (depsStr: string): setDepsStrAction => {\n    return { type: SET_DEPS_STR, depsStr };\n};\n\nconst setBranches = (branches: string[][]): setBranchesAction => {\n    return { type: SET_BRANCHES, branches };\n};\n\nconst setRoutes = (routes: string[][]): setRoutesAction => {\n    return { type: SET_ROUTES, routes };\n};\n\nconst setTpo = (tpo: string[]): setTpoAction => {\n    return { type: SET_TPO, tpo };\n};\n\nconst calcAndGetDepsStr = () => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stnList = getState().param.stn_list;\n        const nextDepsStr = Object.entries(stnList)\n            .map(\n                ([stationId, stationInfo]) =>\n                    stationId +\n                    stationInfo.parents.toString() +\n                    stationInfo.children.toString() +\n                    JSON.stringify(stationInfo.branch)\n            )\n            .join('');\n        dispatch(setDepsStr(nextDepsStr));\n        return nextDepsStr;\n    };\n};\n\nconst calcBranches = () => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        console.log('Re-calculating branches...');\n        const stnList = getState().param.stn_list;\n        const nextBranches = getBranches(stnList);\n        dispatch(setBranches(nextBranches));\n        return nextBranches;\n    };\n};\n\nconst calcRoutes = () => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        console.log('Re-calculating routes...');\n        const stnList = getState().param.stn_list;\n        dispatch(setRoutes(getRoutes(stnList)));\n    };\n};\n\nexport const triggerHelpersUpdate = () => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const prevDepsStr = getState().helper.depsStr;\n        const nextDepsStr = dispatch(calcAndGetDepsStr());\n        if (prevDepsStr !== nextDepsStr) {\n            dispatch(calcRoutes());\n\n            const prevBranches = getState().helper.branches;\n            const nextBranches = dispatch(calcBranches());\n            if (prevBranches.toString() !== nextBranches.toString()) {\n                console.log('Re-calculating topology ordering...');\n                dispatch(setTpo(getTpo(nextBranches)));\n            }\n        }\n    };\n};\n","import { StationDict } from '../../constants/constants';\n\n/**\n * Getter of all branches (支線段) of the line (both ends included). The first branch must be the main line.\n * @example MTREastRailLine.branches\n * /*\n * [0]: [LineStart, Lo Wu, ..., Hung Hom, LineEnd]\n * [1]: [LineStart, Lok Ma Chau, Sheung Shui]\n * [2]: [University, Racecourse, Sha Tin]\n * /\n */\nexport const getBranches = (stnList: StationDict) => {\n    const stack = ['linestart'];\n    const branches = [['linestart']];\n    let branchCount = 0;\n\n    while (stack.length) {\n        let curId = stack.shift() as string;\n        let prevId = branches[branchCount].slice(-1)[0] || null;\n        if (prevId && curId !== 'linestart') {\n            branches[branchCount].push(curId);\n        } else {\n            branches[branchCount] = [curId];\n        }\n        while (curId !== 'lineend') {\n            prevId = curId;\n            const children = stnList[prevId].children;\n            switch (children.length) {\n                case 1:\n                    curId = children[0];\n                    break;\n                case 2:\n                    let branchNextId = stnList[prevId].branch.right[1] as string;\n                    // if (branchCount === 0) {\n                    if (stnList[prevId].branch.right[0] === 'through') {\n                        branches.push([curId]);\n                        stack.push(branchNextId);\n                    } else {\n                        if (branchCount === 0) {\n                            branches.push([prevId]);\n                            stack.push(branchNextId);\n                            // all branching out nodes are added to stack in the first loop\n                        }\n                    }\n                    curId = children.filter(stnId => stnId !== branchNextId)[0];\n                    break;\n            }\n            branches[branchCount].push(curId);\n\n            if (prevId === stnList[curId].branch.left[1]) {\n                break;\n            }\n        }\n        // branches[branchCount] = curBranch;\n        branchCount++;\n    }\n\n    return branches;\n};\n\n/**\n * Getter of all routes (行車交路) of the line (both ends included). The first branch must be the main line.\n * @example MTREastRailLine.branches\n * /*\n * [0]: [LineStart, Lo Wu, Sheung Shui, ..., Hung Hom, LineEnd]\n * [1]: [LineStart, Lok Ma Chau, Sheung Shui, ..., Hung Hom, LineEnd]\n * [2]: [LineStart, Lo Wu, Sheung Shui, ..., University, Racecourse, Sha Tin, ..., Hung Hom, LineEnd]\n * [3]: [LineStart, Lok Ma Chau, Sheung Shui, ..., University, Racecourse, Sha Tin, ..., Hung Hom, LineEnd]\n * /\n */\nexport const getRoutes = (stnList: StationDict) => {\n    const stack = ['linestart'];\n    const branches = [['linestart']];\n    let branchCount = 0;\n\n    while (stack.length) {\n        let curId = stack.shift() as string;\n        let prevId = branches[branchCount].slice(-1)[0] || null;\n        if (prevId && curId !== 'linestart') {\n            branches[branchCount].push(curId);\n        } else {\n            branches[branchCount] = [curId];\n        }\n        while (curId !== 'lineend') {\n            prevId = curId;\n            const children = stnList[prevId].children;\n            switch (children.length) {\n                case 1:\n                    curId = children[0];\n                    break;\n                case 2:\n                    let branchNextId = stnList[prevId].branch.right[1] as string;\n                    // if (branchCount === 0) {\n                    if (stnList[prevId].branch.right[0] === 'through') {\n                        branches.push(branches[branchCount].slice());\n                        stack.push(branchNextId);\n                    } else {\n                        if (branchCount === 0) {\n                            branches.push([prevId]);\n                            stack.push(branchNextId);\n                        }\n                        // branches.push([prevId]);\n                    }\n                    // stack.push(branchNextId);\n                    // }\n                    curId = children.filter(stnId => stnId !== branchNextId)[0];\n                    break;\n            }\n            branches[branchCount].push(curId);\n\n            if (prevId === stnList[curId].branch.left[1] && stnList[curId].branch.left[0] === 'nonthrough') {\n                break;\n            }\n        }\n        // branches[branchCount] = curBranch;\n        branchCount++;\n    }\n\n    return branches;\n};\n\n/**\n * Calculate topology ordering for all stations by stacking all branches into an 1-dimension array\n */\nexport const getTpo = (branches: string[][]) => {\n    if (branches.length === 1) {\n        return branches[0].slice(1, -1);\n    } else {\n        return branches\n            .reduce(\n                (acc, cur) => {\n                    // insert the other branch before the rest of the main branch\n                    const idx = acc.indexOf(cur[cur.length - 1]);\n                    return [...acc.slice(0, idx), ...cur.slice(1), ...acc.slice(idx + 1)];\n                },\n                ['lineend']\n            )\n            .slice(0, -1);\n    }\n};\n","module.exports = ReactI18next;","module.exports = ReactRedux;","module.exports = ReactRouterDOM;","module.exports = Redux;","import { LanguageCode, Note, RmgStyle, StationInfo, Translation } from './constants/constants';\n\nexport const updateParam = (param: { [x: string]: any }) => {\n    // Version 0.10\n    if (!('line_name' in param)) {\n        param.line_name = ['路線名', 'Name of Line'];\n    }\n    if (!('dest_legacy' in param)) {\n        param.dest_legacy = false;\n    }\n\n    // Version 0.11\n    delete param.fontZH;\n    delete param.fontEN;\n    delete param.weightZH;\n    delete param.weightEN;\n\n    // Version 0.12\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (!('branch' in stnInfo)) {\n            param.stn_list[stnId].branch = { left: [], right: [] };\n            if (stnInfo.children.length === 2) {\n                param.stn_list[stnId].branch.right = ['through', stnInfo.children[1]];\n            } else {\n                param.stn_list[stnId].branch.right = [];\n            }\n            if (stnInfo.parents.length === 2) {\n                param.stn_list[stnId].branch.left = ['through', stnInfo.parents[1]];\n            } else {\n                param.stn_list[stnId].branch.left = [];\n            }\n        }\n    }\n\n    // Version 1.2\n    if (!('psd_num' in param)) {\n        param.psd_num = '1';\n    } else {\n        param.psd_num = param.psd_num.toString();\n    }\n\n    if (!('line_num' in param)) {\n        param.line_num = '1';\n    }\n    if (param.theme.length === 3) {\n        param.theme.push('#fff');\n    }\n\n    // Version 1.3\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (!('num' in stnInfo)) {\n            param.stn_list[stnId].num = '00';\n        }\n        if ('interchange' in stnInfo) {\n            stnInfo.interchange.map((arr: any) => {\n                return arr.forEach((intInfo: any) => {\n                    if (intInfo.length === 5) {\n                        intInfo.splice(3, 0, '#fff');\n                    }\n                });\n            });\n        }\n    }\n\n    // Version 1.5\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (stnInfo.change_type === 'osi22_end_p') {\n            param.stn_list[stnId].change_type = 'osi22_pr';\n        }\n        if (stnInfo.change_type === 'osi22_end_u') {\n            param.stn_list[stnId].change_type = 'osi22_ur';\n        }\n    }\n\n    // Version 2.1\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (!('interchange' in stnInfo)) {\n            param.stn_list[stnId].interchange = [[]];\n        }\n    }\n\n    // Version 1.4\n    // Version 2.2\n    // Version 2.3\n    if (!('info_panel_type' in param)) {\n        param.info_panel_type = 'gz28';\n    } else {\n        param.info_panel_type = (type => {\n            switch (type) {\n                case 'gz_1':\n                case 'panasonic':\n                    return 'gz28';\n                case 'gz_2':\n                    return 'gz6';\n                case 'gz_3':\n                    return 'gz3';\n                default:\n                    return type;\n            }\n        })(param.info_panel_type);\n    }\n\n    if (!('direction_gz_x' in param)) {\n        param.direction_gz_x = 50;\n    }\n    if (!('direction_gz_y' in param)) {\n        param.direction_gz_y = 70;\n    }\n\n    // Version 2.6\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (!('transfer' in stnInfo)) {\n            param.stn_list[stnId].transfer = {\n                // type: stnInfo.change_type?.split('_')[0] as 'none' | 'int2' | 'int3' | 'osi11' | 'osi12' | 'osi22',\n                tick_direc:\n                    stnInfo.change_type === 'none' || stnInfo.change_type === 'int2'\n                        ? 'r'\n                        : (stnInfo.change_type?.split('_')[1].split('').slice().reverse()[0] as 'l' | 'r'),\n                paid_area:\n                    stnInfo.change_type?.indexOf('osi') !== -1 ? stnInfo.change_type?.split('_')[1][0] === 'p' : true,\n                osi_names: stnInfo.change_type?.indexOf('osi') !== -1 ? [stnInfo.interchange[1][0]] : [],\n                info:\n                    stnInfo.interchange.length === 2\n                        ? [stnInfo.interchange[0], stnInfo.interchange[1].slice(1)]\n                        : stnInfo.interchange,\n            };\n        }\n        delete param.stn_list[stnId].change_type;\n        delete param.stn_list[stnId].interchange;\n    }\n\n    // Version 2.8\n    // Version 3.0\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (!('services' in stnInfo)) {\n            param.stn_list[stnId].services = ['local'];\n        }\n        if (!('facility' in stnInfo)) {\n            if ('usage' in stnInfo) {\n                param.stn_list[stnId].facility = stnInfo.usage;\n            } else {\n                param.stn_list[stnId].facility = '';\n            }\n        }\n        delete param.stn_list[stnId].usage;\n    }\n\n    // Version 3.4\n    if (!('customiseMTRDest' in param)) {\n        param.customiseMTRDest = { isLegacy: param.dest_legacy || false, terminal: false };\n    }\n    delete param.dest_legacy;\n\n    // Version 3.4\n    if (!('svgWidth' in param)) {\n        param.svgWidth = {\n            destination: param.svg_dest_width,\n            runin: param.svg_dest_width,\n            railmap: param.svg_width,\n            indoor: param.svg_width,\n        };\n    }\n    // Version 3.8\n    if (!('indoor' in param.svgWidth)) {\n        param.svgWidth.indoor = param.svgWidth.railmap;\n    }\n    delete param.svg_width;\n    delete param.svg_dest_width;\n\n    if (!('notesGZMTR' in param)) {\n        param.notesGZMTR = [];\n    }\n\n    param.notesGZMTR = param.notesGZMTR?.map((note: any[]) =>\n        note.length === 4 ? note.concat([false]) : note\n    ) as Note[];\n\n    // Version 3.5.3\n    delete param.char_form;\n    delete param.show_outer;\n    delete param.strip_pc;\n    delete param.txt_bg_gap;\n\n    // Version 3.5.4\n    if (!('namePosMTR' in param)) {\n        param.namePosMTR = {\n            isStagger: true,\n            isFlip: param.txt_flip,\n        };\n    }\n    delete param.txt_flip;\n\n    // Version 3.5.6\n    // Version 3.6.2\n    Object.keys(param.stn_list).forEach(stnId => {\n        if (!('secondaryName' in param.stn_list[stnId])) {\n            param.stn_list[stnId].secondaryName = false;\n        } else {\n            if (param.stn_list[stnId].secondaryName !== false && param.stn_list[stnId].secondaryName.join() === ',') {\n                param.stn_list[stnId].secondaryName = false;\n            }\n        }\n\n        if ('type' in param.stn_list[stnId].transfer) {\n            delete param.stn_list[stnId].transfer.type;\n        }\n    });\n\n    // Version 3.9.36\n    param.style = param.style === undefined ? RmgStyle.MTR : param.style\n\n    return param;\n};\n\nexport const getTransText2 = (obj: Translation, langs: LanguageCode[]) => {\n    for (let l of langs) {\n        if (obj[l]) return obj[l];\n    }\n    return obj[LanguageCode.English];\n};\n\n/**\n * Format display style of station name as `[num: ]nameZH,nameEN`.\n */\nexport const formatStnName = (stnInfo: StationInfo, style: RmgStyle) =>\n    (style === RmgStyle.GZMTR ? (stnInfo?.num || '-') + ': ' : '') + stnInfo?.name.join().replace('\\\\', ' ');\n","module.exports = i18next;","import { Translation } from './constants';\n\nexport enum CityCode {\n    Baku = 'baku',\n    Barcelona = 'barcelona',\n    Beijing = 'beijing',\n    Changsha = 'changsha',\n    Chengdu = 'chengdu',\n    Chongqing = 'chongqing',\n    Delhi = 'delhi',\n    Dongguan = 'dongguan',\n    Dortmund = 'dortmund',\n    Edinburgh = 'edinburgh',\n    Foshan = 'foshan',\n    Glasgow = 'glasgow',\n    Guangzhou = 'guangzhou',\n    Hangzhou = 'hangzhou',\n    HongKong = 'hongkong',\n    Kansai = 'kansai',\n    Kaohsiung = 'kaohsiung',\n    Istanbul = 'istanbul',\n    London = 'london',\n    Macao = 'macao',\n    Madrid = 'madrid',\n    Nanjing = 'nanjing',\n    NewTaipei = 'newtaipei',\n    Osaka = 'osaka',\n    Oslo = 'oslo',\n    Paris = 'paris',\n    Qingdao = 'qingdao',\n    SanFrancisco = 'sanfrancisco',\n    SanktPeterburg = 'sanktpeterburg',\n    SaoPaulo = 'saopaulo',\n    Seoul = 'seoul',\n    Shanghai = 'shanghai',\n    Shenzhen = 'shenzhen',\n    Singapore = 'singapore',\n    Stockholm = 'stockholm',\n    Taipei = 'taipei',\n    Tehran = 'tehran',\n    Tianjin = 'tianjin',\n    Tokyo = 'tokyo',\n    Toronto = 'toronto',\n    TyneAndWear = 'tyneandwear',\n    Xiamen = 'xiamen',\n    Xian = 'xian',\n    Other = 'other',\n}\n\ninterface CityEntry {\n    id: CityCode;\n    /**\n     * ISO 3166-1 alpha-2 country code. (For cities in Britain, append BS 6879 subdivision code. )\n     */\n    country: string;\n    /**\n     * Key-value pairs of multi-lingual names of the city.\n     */\n    name: Translation;\n}\n\nexport const cityList: CityEntry[] = [\n    {\n        id: CityCode.Baku,\n        country: 'AZ',\n        name: {\n            en: 'Baku',\n            az: 'Bakı',\n            'zh-Hans': '巴库',\n            'zh-Hant': '巴庫',\n        },\n    },\n    {\n        id: CityCode.Barcelona,\n        country: 'ES',\n        name: {\n            en: 'Barcelona',\n            es: 'Barcelona',\n            'zh-Hans': '巴塞罗那',\n            'zh-HK': '巴塞隆拿',\n            'zh-TW': '巴塞隆納',\n        },\n    },\n    {\n        id: CityCode.Beijing,\n        country: 'CN',\n        name: {\n            en: 'Beijing',\n            zh: '北京',\n        },\n    },\n    {\n        id: CityCode.Changsha,\n        country: 'CN',\n        name: {\n            en: 'Changsha',\n            'zh-Hans': '长沙',\n            'zh-Hant': '長沙',\n        },\n    },\n    {\n        id: CityCode.Chengdu,\n        country: 'CN',\n        name: {\n            en: 'Chengdu',\n            zh: '成都',\n        },\n    },\n    {\n        id: CityCode.Chongqing,\n        country: 'CN',\n        name: {\n            en: 'Chongqing',\n            'zh-Hans': '重庆',\n            'zh-Hant': '重慶',\n        },\n    },\n    {\n        id: CityCode.Delhi,\n        country: 'IN',\n        name: {\n            en: 'Delhi',\n            hi: 'दिल्ली',\n            'zh-Hans': '德里',\n            'zh-Hant': '德里',\n        },\n    },\n    {\n        id: CityCode.Dongguan,\n        country: 'CN',\n        name: {\n            en: 'Dongguan',\n            'zh-Hans': '东莞',\n            'zh-Hant': '東莞',\n        },\n    },\n    {\n        id: CityCode.Dortmund,\n        country: 'DE',\n        name: {\n            en: 'Dortmund',\n            de: 'Dortmund',\n            'zh-Hans': '多特蒙德',\n            'zh-Hant': '多特蒙德',\n        },\n    },\n    {\n        id: CityCode.Edinburgh,\n        country: 'GBSCT',\n        name: {\n            en: 'Edinburgh',\n            ga: 'Dùn Èideann',\n            'zh-Hans': '爱丁堡',\n            'zh-Hant': '愛丁堡',\n        },\n    },\n    {\n        id: CityCode.Foshan,\n        country: 'CN',\n        name: {\n            en: 'Foshan',\n            zh: '佛山',\n        },\n    },\n    {\n        id: CityCode.Glasgow,\n        country: 'GBSCT',\n        name: {\n            en: 'Glasgow',\n            ga: 'Glaschu',\n            zh: '格拉斯哥',\n        },\n    },\n    {\n        id: CityCode.Guangzhou,\n        country: 'CN',\n        name: {\n            en: 'Guangzhou',\n            'zh-Hans': '广州',\n            'zh-Hant': '廣州',\n        },\n    },\n    {\n        id: CityCode.Hangzhou,\n        country: 'CN',\n        name: {\n            en: 'Hangzhou',\n            zh: '杭州',\n        },\n    },\n    {\n        id: CityCode.HongKong,\n        country: 'HK',\n        name: {\n            en: 'Hong Kong',\n            zh: '香港',\n        },\n    },\n    {\n        id: CityCode.Kansai,\n        country: 'JP',\n        name: {\n            en: 'Kansai Area',\n            ja: '近畿地方',\n            'zh-Hans': '近畿地方（关西地方）',\n            'zh-Hant': '近畿地方（關西地方）',\n        },\n    },\n    {\n        id: CityCode.Kaohsiung,\n        country: 'TW',\n        name: {\n            en: 'Kaohsiung',\n            zh: '高雄',\n        },\n    },\n    {\n        id: CityCode.Istanbul,\n        country: 'TR',\n        name: {\n            en: 'Istanbul',\n            tr: 'İstanbul',\n            'zh-Hans': '伊斯坦布尔',\n            'zh-Hant': '伊斯坦布爾',\n        },\n    },\n    {\n        id: CityCode.London,\n        country: 'GBENG',\n        name: {\n            en: 'London',\n            'zh-Hans': '伦敦',\n            'zh-Hant': '倫敦',\n        },\n    },\n    {\n        id: CityCode.Macao,\n        country: 'MO',\n        name: {\n            en: 'Macao',\n            pt: 'Macau',\n            'zh-Hans': '澳门',\n            'zh-Hant': '澳門',\n        },\n    },\n    {\n        id: CityCode.Madrid,\n        country: 'ES',\n        name: {\n            en: 'Madrid',\n            'zh-Hans': '马德里',\n            'zh-Hant': '馬德里',\n        },\n    },\n    {\n        id: CityCode.Nanjing,\n        country: 'CN',\n        name: {\n            en: 'Nanjing',\n            zh: '南京',\n        },\n    },\n    {\n        id: CityCode.NewTaipei,\n        country: 'TW',\n        name: {\n            en: 'New Taipei',\n            zh: '新北',\n        },\n    },\n    {\n        id: CityCode.Osaka,\n        country: 'JP',\n        name: {\n            en: 'Osaka',\n            ja: '大阪',\n            zh: '大阪',\n        },\n    },\n    {\n        id: CityCode.Oslo,\n        country: 'NO',\n        name: {\n            en: 'Oslo',\n            'zh-Hans': '奥斯陆',\n            'zh-Hant': '奧斯陸',\n        },\n    },\n    {\n        id: CityCode.Paris,\n        country: 'FR',\n        name: {\n            en: 'Paris',\n            zh: '巴黎',\n        },\n    },\n    {\n        id: CityCode.Qingdao,\n        country: 'CN',\n        name: {\n            en: 'Qingdao',\n            'zh-Hans': '青岛',\n            'zh-Hant': '青島',\n        },\n    },\n    {\n        id: CityCode.SanFrancisco,\n        country: 'US',\n        name: {\n            en: 'San Francisco',\n            'zh-Hans': '旧金山',\n            'zh-HK': '三藩市',\n            'zh-TW': '舊金山',\n        },\n    },\n    {\n        id: CityCode.SanktPeterburg,\n        country: 'RU',\n        name: {\n            en: 'Sankt-Peterburg',\n            ru: 'Санкт-Петербург',\n            'zh-Hans': '圣彼得堡',\n            'zh-Hant': '聖彼得堡',\n        },\n    },\n    {\n        id: CityCode.SaoPaulo,\n        country: 'BR',\n        name: {\n            en: 'Sao Paulo',\n            pt: 'São Paulo',\n            'zh-Hans': '圣保罗',\n            'zh-Hant': '聖保羅',\n        },\n    },\n    {\n        id: CityCode.Seoul,\n        country: 'KR',\n        name: {\n            en: 'Seoul (Metropolitan Area)',\n            ko: '서울(수도권)',\n            'zh-Hans': '首尔（首都圈）',\n            'zh-Hant': '首爾（首都圈）',\n        },\n    },\n    {\n        id: CityCode.Shanghai,\n        country: 'CN',\n        name: {\n            en: 'Shanghai',\n            zh: '上海',\n        },\n    },\n    {\n        id: CityCode.Shenzhen,\n        country: 'CN',\n        name: {\n            en: 'Shenzhen',\n            zh: '深圳',\n        },\n    },\n    {\n        id: CityCode.Xiamen,\n        country: 'CN',\n        name: {\n            en: 'Xiamen',\n            'zh-Hans': '厦门',\n            'zh-Hant': '廈門',\n        },\n    },\n    {\n        id: CityCode.Singapore,\n        country: 'SG',\n        name: {\n            en: 'Singapore',\n            zh: '新加坡',\n        },\n    },\n    {\n        id: CityCode.Stockholm,\n        country: 'SE',\n        name: {\n            en: 'Stockholm',\n            'zh-Hans': '斯德哥尔摩',\n            'zh-Hant': '斯德哥爾摩',\n        },\n    },\n    {\n        id: CityCode.Taipei,\n        country: 'TW',\n        name: {\n            en: 'Taipei',\n            zh: '台北',\n        },\n    },\n    {\n        id: CityCode.Tehran,\n        country: 'IR',\n        name: {\n            en: 'Tehran',\n            fa: 'تهران‎',\n            'zh-Hans': '德黑兰',\n            'zh-Hant': '德黑蘭',\n        },\n    },\n    {\n        id: CityCode.Tianjin,\n        country: 'CN',\n        name: {\n            en: 'Tianjin',\n            zh: '天津',\n        },\n    },\n    {\n        id: CityCode.Tokyo,\n        country: 'JP',\n        name: {\n            en: 'Tokyo (Greater Tokyo Area)',\n            ja: '東京（首都圏）',\n            'zh-Hans': '东京（首都圈）',\n            'zh-Hant': '東京（首都圈）',\n        },\n    },\n    {\n        id: CityCode.Toronto,\n        country: 'CA',\n        name: {\n            en: 'Toronto',\n            'zh-Hans': '多伦多',\n            'zh-Hant': '多倫多',\n        },\n    },\n    {\n        id: CityCode.TyneAndWear,\n        country: 'GBENG',\n        name: {\n            en: 'Tyne and Wear',\n            'zh-Hans': '泰恩-威尔',\n            'zh-HK': '泰威',\n            'zh-TW': '泰恩-威爾',\n        },\n    },\n    {\n        id: CityCode.Xian,\n        country: 'CN',\n        name: {\n            en: \"Xi'an\",\n            zh: '西安',\n        },\n    },\n    {\n        id: CityCode.Other,\n        country: 'UN',\n        name: {\n            en: 'Customise',\n            'zh-Hans': '自定义',\n            'zh-Hant': '自訂',\n        },\n    },\n];\n","module.exports = ReactDOM;","module.exports = i18nextXHRBackend;","module.exports = i18nextBrowserLanguageDetector;","module.exports = ReduxThunk;","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport Backend from 'i18next-xhr-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\ni18n.use(Backend)\n    .use(LanguageDetector)\n    .use(initReactI18next)\n    .init({\n        fallbackLng: {\n            'zh-CN': ['zh-Hans', 'en'],\n            'zh-Hant': ['zh-HK', 'en'],\n            'zh-HK': ['zh-Hant', 'en'],\n            'zh-TW': ['zh-HK', 'zh-Hant'],\n            default: ['en'],\n        },\n        // debug: true,\n        backend: {\n            // for all available options read the backend's repository readme file\n            loadPath: process.env.PUBLIC_URL + '/locale/{{lng}}.json',\n        },\n\n        interpolation: {\n            escapeValue: false, // not needed for react as it escapes by default\n        },\n    })\n    .then(t => {\n        document.title = t('title');\n        document.documentElement.setAttribute('lang', i18n.language);\n    });\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    AppBar,\n    Toolbar,\n    Tooltip,\n    IconButton,\n    Typography,\n    Icon,\n    makeStyles,\n    createStyles,\n    Menu,\n    MenuItem,\n    Divider,\n    useMediaQuery,\n} from '@material-ui/core';\nimport { AllCanvas, canvasConfig, CanvasType } from './constants/constants';\nimport { useAppDispatch, useAppSelector } from './redux';\nimport { selectCanvas, zoomIn, zoomOut } from './redux/app/action';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        rootLight: {\n            backgroundColor: theme.palette.primary.main,\n        },\n        rootDark: {\n            backgroundColor: theme.palette.background.paper,\n        },\n        title: {\n            flexGrow: 1,\n            color: '#fff',\n        },\n        menuButton: {\n            color: '#fff',\n        },\n    })\n);\n\nconst AppAppBar = () => {\n    const { t, i18n } = useTranslation();\n    const classes = useStyles();\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n    return React.useMemo(\n        () => (\n            <AppBar position=\"sticky\" className={prefersDarkMode ? classes.rootDark : classes.rootLight}>\n                <Toolbar variant=\"dense\">\n                    <Typography variant=\"h6\" className={classes.title} color=\"textPrimary\">\n                        {process.env.PUBLIC_URL.includes('uat') ? t('titleUAT') : t('title')}\n                    </Typography>\n\n                    <CanvasToggle />\n                    <ZoomToggles />\n                </Toolbar>\n            </AppBar>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [prefersDarkMode, i18n.language]\n    );\n};\n\nexport default AppAppBar;\n\nconst CanvasToggle = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const rmgStyle = useAppSelector(store => store.param.style);\n\n    const [canvasButtonEl, setCanvasButtonEl] = React.useState<null | HTMLElement>(null);\n    const handleClick = (action: CanvasType | typeof AllCanvas) => () => {\n        dispatch(selectCanvas(action));\n        setCanvasButtonEl(null);\n    };\n\n    return React.useMemo(\n        () => (\n            <>\n                <Tooltip title={t('toggle.tooltip')}>\n                    <IconButton onClick={e => setCanvasButtonEl(e.currentTarget)} className={classes.menuButton}>\n                        <Icon>photo_library</Icon>\n                    </IconButton>\n                </Tooltip>\n                <Menu anchorEl={canvasButtonEl} open={Boolean(canvasButtonEl)} onClose={() => setCanvasButtonEl(null)}>\n                    {canvasConfig[rmgStyle].map(c => (\n                        <MenuItem key={c} onClick={handleClick(c)}>\n                            {t('toggle.' + c)}\n                        </MenuItem>\n                    ))}\n                    <Divider style={{ margin: '6px 0' }} />\n                    <MenuItem onClick={handleClick(AllCanvas)}>{t('toggle.all')}</MenuItem>\n                </Menu>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [rmgStyle, canvasButtonEl, classes.menuButton]\n    );\n};\n\nconst ZoomToggles = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    return React.useMemo(\n        () => (\n            <>\n                <Tooltip title={t('zoom.out')}>\n                    <IconButton onClick={() => dispatch(zoomOut())} className={classes.menuButton}>\n                        <Icon>zoom_out</Icon>\n                    </IconButton>\n                </Tooltip>\n                <Tooltip title={t('zoom.in')}>\n                    <IconButton onClick={() => dispatch(zoomIn())} className={classes.menuButton}>\n                        <Icon>zoom_in</Icon>\n                    </IconButton>\n                </Tooltip>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [classes.menuButton]\n    );\n};\n","import * as React from 'react';\n\nimport {\n    Typography,\n    CircularProgress,\n    Tabs,\n    Tab,\n    Icon,\n    makeStyles,\n    createStyles,\n    useTheme,\n    useMediaQuery,\n} from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nconst PanelSave = React.lazy(() => import(/* webpackChunkName: \"panelSave\" */ './save'));\nconst PanelLayout = React.lazy(() => import(/* webpackChunkName: \"panelLayout\" */ './layout'));\nconst PanelDesign = React.lazy(() => import(/* webpackChunkName: \"panelDesign\" */ './design'));\nconst PanelStations = React.lazy(() => import(/* webpackChunkName: \"panelStations\" */ './stations'));\nconst PanelInfo = React.lazy(() => import(/* webpackChunkName: \"panelInfo\" */ './panel-info'));\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        root: {\n            display: 'flex',\n            flexDirection: 'row',\n            height: '100%',\n            [theme.breakpoints.down('xs')]: {\n                flexDirection: 'column',\n            },\n        },\n        typography: {\n            background: theme.palette.background.default,\n        },\n        tab: {\n            padding: '6px 24px',\n            height: 48,\n            '& .MuiTab-wrapper': {\n                flexDirection: 'row',\n            },\n            [theme.breakpoints.up('sm')]: {\n                '& .MuiTab-wrapper': {\n                    justifyContent: 'flex-start',\n                },\n            },\n            [theme.breakpoints.down('xs')]: {\n                minWidth: 'calc(100% / 5)',\n            },\n            '&.MuiTab-labelIcon': {\n                minHeight: 'unset',\n                '& .MuiTab-wrapper': {\n                    '& > *:first-child': {\n                        marginBottom: 0,\n                    },\n                    '& > *:not(first-child)': {\n                        paddingLeft: 8,\n                    },\n                },\n            },\n        },\n        tabs: {\n            overflow: 'auto',\n            '&::-webkit-scrollbar': {\n                width: 0,\n            },\n            scrollbarWidth: 'none',\n            WebkitOverflowScrolling: 'touch',\n        },\n        tabpanel: {\n            overflow: 'auto',\n            flex: 1,\n            padding: theme.spacing(3),\n            paddingBottom: 0,\n            height: `calc(100% - ${theme.spacing(3)}px)`,\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'flex-start',\n        },\n    })\n);\n\nexport default function PanelTab() {\n    const { t, i18n } = useTranslation();\n\n    const classes = useStyles();\n    const theme = useTheme();\n    const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\n\n    const [value, setValue] = React.useState(0);\n\n    const panel = (index: number) => {\n        switch (index) {\n            case 0:\n                return <PanelSave />;\n            case 1:\n                return <PanelLayout />;\n            case 2:\n                return <PanelDesign />;\n            case 3:\n                return <PanelStations />;\n            case 4:\n                return <PanelInfo />;\n            default:\n                return <PanelSave />;\n        }\n    };\n\n    const tabNav = React.useMemo(\n        () => (\n            <Typography className={`${classes.typography} ${classes.tabs}`} component=\"div\">\n                <Tabs\n                    value={value}\n                    orientation={isMobile ? 'horizontal' : 'vertical'}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    onChange={(_, val) => setValue(val)}\n                    variant=\"scrollable\"\n                    scrollButtons=\"off\"\n                >\n                    {[\n                        ['file', 'insert_drive_file'],\n                        ['layout', 'panorama'],\n                        ['design', 'brush'],\n                        ['stations', 'directions_transit'],\n                        ['info', 'info'],\n                    ].map((val, i) => (\n                        <Tab\n                            label={<span>{t('tab.' + val[0])}</span>}\n                            icon={<Icon>{val[1]}</Icon>}\n                            key={i}\n                            className={classes.tab}\n                        />\n                    ))}\n                </Tabs>\n            </Typography>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [value, i18n.language, classes.tab, isMobile]\n    );\n\n    return (\n        <div className={classes.root}>\n            {tabNav}\n            <Typography className={`${classes.typography} ${classes.tabpanel}`} component=\"div\" role=\"tabpanel\">\n                <React.Suspense fallback={<CircularProgress />}>{panel(value)}</React.Suspense>\n            </Typography>\n        </div>\n    );\n}\n","import * as React from 'react';\nimport { CircularProgress } from '@material-ui/core';\n\nimport PanelTabs from './panels';\n\nexport default function Panel() {\n    return (\n        <React.Suspense fallback={<CircularProgress />}>\n            <PanelTabs />\n        </React.Suspense>\n    );\n}\n","import React from 'react';\n\nexport default class ErrorBoundary extends React.Component<{ children: React.ReactNode }, { hasError: boolean }> {\n    constructor(props: { children: React.ReactNode }) {\n        super(props);\n        this.state = { hasError: false };\n    }\n\n    static getDerivedStateFromError(error: any) {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true };\n    }\n\n    componentDidCatch(error: any, errorInfo: any) {\n        // You can also log the error to an error reporting service\n        // logErrorToMyService(error, errorInfo);\n    }\n\n    render() {\n        if (this.state.hasError) {\n            // You can render any custom fallback UI\n            return <h1>Something went wrong.</h1>;\n        }\n\n        return this.props.children;\n    }\n}\n","import { CanvasType, RmgStyle, Theme } from '../constants/constants';\nimport React, { ReactNode, useEffect } from 'react';\nimport { CircularProgress } from '@material-ui/core';\nimport ErrorBoundary from '../error-boundary';\n\ninterface SvgWrapperProps {\n    type: CanvasType;\n    style: RmgStyle;\n    svgWidth: number;\n    svgHeight: number;\n    canvasScale: number;\n    theme: Theme;\n    children: ReactNode;\n}\n\nexport default function SvgWrapper(props: SvgWrapperProps) {\n    const { type, style, svgWidth, svgHeight, canvasScale, theme, children } = props;\n\n    useEffect(() => {\n        (document.getElementById('css_' + type) as HTMLLinkElement).href =\n            process.env.PUBLIC_URL + `/styles/${type}_${style}.css`;\n        return () => {\n            (document.getElementById('css_' + type) as HTMLLinkElement).href = '';\n        };\n    });\n\n    return (\n        <svg\n            id={type}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            height={svgHeight * canvasScale}\n            viewBox={`0 0 ${svgWidth} ${svgHeight}`}\n            colorInterpolationFilters=\"sRGB\"\n            style={{\n                ['--rmg-svg-width' as any]: svgWidth + 'px',\n                ['--rmg-svg-height' as any]: svgHeight + 'px',\n                ['--rmg-theme-colour' as any]: theme[2],\n                ['--rmg-theme-fg' as any]: theme[3],\n            }}\n        >\n            <rect\n                id=\"canvas-bg\"\n                fill=\"white\"\n                style={{ height: 'var(--rmg-svg-height)', width: 'var(--rmg-svg-width)' }}\n            />\n            <React.Suspense fallback={<CircularProgress />}>\n                <ErrorBoundary>{children}</ErrorBoundary>\n            </React.Suspense>\n            <rect\n                id=\"canvas-border\"\n                fill=\"none\"\n                strokeWidth={3}\n                stroke=\"none\"\n                style={{ height: 'var(--rmg-svg-height)', width: 'var(--rmg-svg-width)' }}\n            />\n        </svg>\n    );\n}\n","import { createStyles, makeStyles } from '@material-ui/core';\nimport React, { lazy, ReactNode, useEffect } from 'react';\nimport { CanvasType, RmgStyle } from '../constants/constants';\nimport { useAppSelector } from '../redux';\nimport SvgWrapper from './svg-wrapper';\nimport { useDispatch } from 'react-redux';\nimport { setStyle } from '../redux/param/action';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            display: 'flex',\n            flexDirection: 'row',\n            overflowX: 'scroll',\n            '&::before, &::after': {\n                content: '\"\"',\n                margin: 'auto',\n            },\n            '& > svg': {\n                flex: '0 0 auto',\n                border: '1px solid black',\n            },\n        },\n    }),\n);\n\nexport default function SvgRouter() {\n    const classes = useStyles();\n    const location = useLocation();\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    const { canvasToShow, canvasScale } = useAppSelector(state => state.app);\n    const { svgWidth: svgWidths, svg_height: svgHeight, style: rmgStyle, theme } = useAppSelector(state => state.param);\n\n    if (location.pathname !== '/' + rmgStyle) {\n        const nextStyle = location.pathname.slice(1) as RmgStyle;\n        if (Object.values(RmgStyle).includes(nextStyle)) {\n            // set style in param\n            dispatch(setStyle(nextStyle));\n        } else {\n            // push route to match param's style\n            history.push('/' + rmgStyle)\n        }\n    }\n\n    useEffect(() => {\n        (document.getElementById('css_share') as HTMLLinkElement).href =\n            process.env.PUBLIC_URL + `/styles/share_${rmgStyle}.css`;\n    }, [rmgStyle]);\n\n    const filteredCanvas = (Object.keys(canvasList[rmgStyle]) as CanvasType[])\n        .filter(canvas => (canvasToShow === 'all' ? true : canvasToShow === canvas));\n\n    return (\n        <div className={classes.root}>\n            {filteredCanvas.map(canvas => (\n                <SvgWrapper\n                    key={canvas}\n                    type={canvas}\n                    style={rmgStyle}\n                    svgWidth={svgWidths[canvas]}\n                    svgHeight={svgHeight}\n                    canvasScale={canvasScale}\n                    theme={theme}\n                >\n                    {canvasList[rmgStyle][canvas]}\n                </SvgWrapper>\n            ))}\n        </div>\n    );\n}\n\n// Canvas available\n\nconst RunInGZMTR = lazy(() => import(/* webpackChunkName: \"runinGZMTR\" */ './runin/runin-gzmtr'));\nconst RailMapGZMTR = lazy(() => import(/* webpackChunkName: \"railmapGZMTR\" */ './railmap/railmap-gzmtr'));\n\nconst DestinationMTR = lazy(() => import(/* webpackChunkName: \"destinationMTR\" */ './destination/destination-mtr'));\nconst RailMapMTR = lazy(() => import(/* webpackChunkName: \"railmapMTR\" */ './railmap/railmap-mtr'));\n\nconst DestinationSHMetro = lazy(\n    () => import(/* webpackChunkName: \"destinationSHMetro\" */ './destination/destination-shmetro'),\n);\nconst RunInSHMetro = lazy(() => import(/* webpackChunkName: \"runinSHMetro\" */ './runin/runin-shmetro'));\nconst RailMapSHMetro = lazy(() => import(/* webpackChunkName: \"railmapSHMetro\" */ './railmap/railmap-shmetro'));\nconst IndoorSHMetro = lazy(() => import(/* webpackChunkName: \"indoorSHMetro\" */ './indoor/indoor-shmetro'));\n\n/**\n * Each value of this object is an object of ORDERED key-value pairs\n */\nconst canvasList: Record<RmgStyle, { [c in CanvasType]?: ReactNode }> = {\n    [RmgStyle.GZMTR]: {\n        [CanvasType.RunIn]: <RunInGZMTR />,\n        [CanvasType.RailMap]: <RailMapGZMTR />,\n    },\n    [RmgStyle.MTR]: {\n        [CanvasType.Destination]: <DestinationMTR />,\n        [CanvasType.RailMap]: <RailMapMTR />,\n    },\n    [RmgStyle.SHMetro]: {\n        [CanvasType.Destination]: <DestinationSHMetro />,\n        [CanvasType.RunIn]: <RunInSHMetro />,\n        [CanvasType.RailMap]: <RailMapSHMetro />,\n        [CanvasType.Indoor]: <IndoorSHMetro />,\n    },\n};\n","import React, { useEffect } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport AppAppBar from './app-appbar';\nimport Panels from './panels';\nimport { createMuiTheme, ThemeProvider, useMediaQuery, LinearProgress } from '@material-ui/core';\nimport { useAppSelector } from './redux';\nimport SvgRouter from './svgs/svg-router';\n\nconst darkTheme = createMuiTheme({\n    palette: {\n        type: 'dark',\n        primary: {\n            main: '#bb86fc',\n        },\n        secondary: {\n            main: '#018786',\n        },\n        error: {\n            main: '#cf6679',\n        },\n    },\n    // palette: {\n    //     type: 'dark',\n    //     primary: {\n    //         main: '#8ab4f8',\n    //     },\n    // },\n    overrides: {\n        MuiDialog: {\n            paper: {\n                minWidth: 280,\n            },\n        },\n    },\n});\n\nconst lightTheme = createMuiTheme({\n    palette: {\n        primary: {\n            light: '#bb86fc',\n            main: '#6200ee',\n        },\n        secondary: {\n            main: '#018786',\n        },\n        error: {\n            main: '#b00020',\n        },\n    },\n    // palette: {\n    //     primary: {\n    //         main: '#1a73e8',\n    //     },\n    //     text: {\n    //         primary: '#202124',\n    //         secondary: '#5f6368',\n    //     },\n    // },\n    overrides: {\n        MuiDialog: {\n            paper: {\n                minWidth: 280,\n            },\n        },\n    },\n});\n\nexport default function App() {\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n    const theme = prefersDarkMode ? darkTheme : lightTheme;\n\n    return (\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <ThemeProvider theme={theme}>\n                <React.Suspense fallback={<LinearProgress />}>\n                    <AppAppBar />\n                </React.Suspense>\n                <AppBody />\n            </ThemeProvider>\n        </BrowserRouter>\n    );\n}\n\nconst AppBody = () => {\n    const param = useAppSelector(store => store.param);\n\n    const paramString = JSON.stringify(param);\n    useEffect(() => {\n        window.rmgStorage.writeFile('rmgParam', paramString).then();\n    }, [paramString]);\n\n    return (\n        <>\n            <div style={{ overflowY: 'auto' }}>\n                <SvgRouter />\n            </div>\n            <div style={{ flex: 1, overflow: 'hidden' }}>\n                <Panels />\n            </div>\n\n            <canvas style={{ display: 'none' }} />\n        </>\n    );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","export const FILE_NOT_FOUND = 'FILE_NOT_FOUND';\n\nexport default interface StorageService {\n    init: () => Promise<void>;\n\n    writeFile: (filename: string, contents: string) => Promise<void>;\n\n    readFile: (filename: string) => Promise<string>;\n\n    deleteFile: (filename: string) => Promise<void>;\n}\n","import { FILE_NOT_FOUND } from './storageService';\n\nexport default class StorageLocalStorage {\n    private currentBusyFilename: false | string;\n\n    constructor() {\n        this.currentBusyFilename = false;\n    }\n\n    async init() {\n        console.warn('Using localStorage, please update your browser');\n\n        if (!window.localStorage) {\n            alert('Local storage is not available! Please upgrade to a newer browser!');\n            throw new Error('LocalStorage unavailable');\n        }\n\n        try {\n            window.localStorage.setItem('storage_test', '1');\n            window.localStorage.removeItem('storage_test');\n        } catch (e) {\n            alert(\n                \"Local storage is not accessible! Please modify your browser's settings or try with another browser!\"\n            );\n            throw new Error('LocalStorage no write permission');\n        }\n    }\n\n    async writeFile(filename: string, contents: string) {\n        if (this.currentBusyFilename === filename) {\n            console.warn('Attempt to write', filename, 'while write process is not finished!');\n        }\n\n        this.currentBusyFilename = filename;\n        window.localStorage.setItem(filename, contents);\n        this.currentBusyFilename = false;\n    }\n\n    async readFile(filename: string) {\n        if (this.currentBusyFilename === filename) {\n            console.warn('Attempt to read', filename, 'while write process is not finished!');\n        }\n\n        const contents = window.localStorage.getItem(filename);\n        if (!contents) {\n            throw new Error(FILE_NOT_FOUND);\n        }\n        return contents;\n    }\n\n    async deleteFile(filename: string) {\n        if (this.currentBusyFilename === filename) {\n            console.warn('Attempt to delete', filename, 'while write process is not finished!');\n        }\n\n        this.currentBusyFilename = filename;\n        window.localStorage.removeItem(filename);\n        this.currentBusyFilename = false;\n    }\n}\n","import StorageLocalStorage from './storageLocalStorage';\nimport StorageService from './storageService';\n\nexport default async function getRmgStorage(): Promise<StorageService> {\n    if (!window.indexedDB) {\n        console.log('IndexedDB not supported');\n        return new StorageLocalStorage();\n    }\n\n    return await new Promise<StorageService>(resolve => {\n        try {\n            const request = window.indexedDB.open('indexeddb_feature_detection', 1);\n\n            request.onerror = err => {\n                console.log('IndexedDB can NOT be accessed:', err);\n                console.log('Fallback to LocalStorage');\n                resolve(new StorageLocalStorage());\n            };\n\n            request.onsuccess = () => {\n                console.log('IndexedDB can be accessed');\n                // TODO: toggle on indexedDB\n                // resolve(new StorageIndexedDB());\n                resolve(new StorageLocalStorage());\n            };\n        } catch (error) {\n            console.warn('Error while opening IndexedDB:', error);\n            resolve(new StorageLocalStorage());\n        }\n    });\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport './i18n';\nimport App from './App';\nimport { updateParam } from './utils';\nimport * as serviceWorker from './serviceWorker';\n\nimport { AllCanvas, CanvasType } from './constants/constants';\nimport StorageService from './util/storage/storageService';\nimport getRmgStorage from './util/storage';\nimport store from './redux';\nimport { Provider } from 'react-redux';\nimport { setCanvasScale, setCanvasToShow } from './redux/app/action';\nimport { setFullParam } from './redux/param/action';\nimport autoSaveScheduler from './util/auto-save-scheduler';\n\ndeclare global {\n    interface Window {\n        gtag: any;\n        rmgStorage: StorageService;\n        rmgStore: any;\n    }\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// load empty stylesheet elements\ndocument.head.append(\n    ...['share', ...Object.values(CanvasType)].map(tag => {\n        let link = document.createElement('link');\n        link.rel = 'stylesheet';\n        link.id = 'css_' + tag;\n        return link;\n    })\n);\n\nconst renderApp = () => {\n    ReactDOM.render(\n        // <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>,\n        // </React.StrictMode>,\n        document.getElementById('root')\n    );\n};\n\ngetRmgStorage()\n    .then(async rmgStorage => {\n        // setup storage and param\n        await rmgStorage.init();\n        try {\n            const contents = await rmgStorage.readFile('rmgParam');\n\n            const updatedParam = updateParam(JSON.parse(contents));\n            await rmgStorage.writeFile('rmgParam', JSON.stringify(updatedParam));\n        } catch (err) {\n            console.warn('Error in reading rmgParam', err);\n            const module = await import('./constants/templates/basic/blank');\n            const updatedParam = updateParam(module.default);\n            await rmgStorage.writeFile('rmgParam', JSON.stringify(updatedParam));\n        } finally {\n            window.rmgStorage = rmgStorage;\n        }\n    })\n    .then(async () => {\n        // init param store with localStorage\n        const contents = await window.rmgStorage.readFile('rmgParam');\n        store.dispatch(setFullParam(JSON.parse(contents)));\n    })\n    .then(async () => {\n        // style being setup in SVG's router\n\n        // setup canvas scale\n        try {\n            const canvasScaleString = await window.rmgStorage.readFile('rmgScale');\n            const canvasScale = Number(canvasScaleString);\n            canvasScale >= 0.1 && store.dispatch(setCanvasScale(canvasScale));\n        } catch (err) {\n            console.warn('Error in reading rmgScale file', err);\n            console.log('Initiating rmgScale as 1');\n            await window.rmgStorage.writeFile('rmgScale', '1');\n            store.dispatch(setCanvasScale(1));\n        }\n\n        // setup canvas to show\n        try {\n            const canvasToShow = (await window.rmgStorage.readFile('rmgCanvas')) as CanvasType | typeof AllCanvas;\n            store.dispatch(setCanvasToShow(canvasToShow));\n        } catch (err) {\n            console.warn('Error in reading rmgCanvas file', err);\n            console.log('Initiating rmgCanvas as \"all\"');\n            await window.rmgStorage.writeFile('rmgCanvas', AllCanvas);\n            store.dispatch(setCanvasToShow(AllCanvas));\n        }\n\n        window.rmgStore = store;\n    })\n    .then(() => {\n        renderApp();\n    })\n    .then(() => {\n        autoSaveScheduler();\n    });\n","export default function autoSaveScheduler() {\n    setInterval(async () => {\n        await window.rmgStorage.writeFile('rmgParamRedux', JSON.stringify(window.rmgStore.getState().param));\n        console.log('Parameter auto saved!');\n    }, 60 * 1000);\n}\n"],"sourceRoot":""}