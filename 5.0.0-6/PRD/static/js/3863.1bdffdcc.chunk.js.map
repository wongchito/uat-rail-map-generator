{"version":3,"file":"static/js/3863.1bdffdcc.chunk.js","mappings":"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","sources":["svgs/indoor/station-shmetro.tsx","svgs/railmap/main/loop-shmetro.tsx","svgs/railmap/main/station/station-shmetro.tsx","svgs/railmap/methods/share.ts"],"sourcesContent":["import React from 'react';\nimport { InterchangeInfo, Name, Services } from '../../constants/constants';\nimport { useAppSelector } from '../../redux';\n\nexport type NameDirection = 'upward' | 'downward' | 'left' | 'right';\n\ninterface Props {\n    stnId: string;\n    nameDirection: NameDirection;\n    services: Services[];\n}\n\nexport const StationSHMetro = (props: Props) => {\n    const param = useAppSelector(store => store.param);\n    const stnInfo = param.stn_list[props.stnId];\n\n    let stationIconStyle = '';\n    if (stnInfo.services.length === 3) stationIconStyle = 'direct_indoor_sh';\n    else if (stnInfo.services.length === 2) stationIconStyle = 'express_indoor_sh';\n    else if ([...stnInfo.transfer.info[0], ...(stnInfo.transfer.info[1] || [])].length > 0)\n        stationIconStyle = 'int2_indoor_sh';\n    else stationIconStyle = 'stn_indoor_sh';\n\n    return (\n        <>\n            <StationNameGElement\n                name={stnInfo.name}\n                infos={stnInfo.transfer.info}\n                nameDirection={props.nameDirection}\n                services={props.services}\n            />\n            <use xlinkHref={`#${stationIconStyle}`} stroke=\"var(--rmg-theme-colour)\" />\n            {/* This should be in IntBoxGroupProps, put here because the station icon will cover this */}\n            {stnInfo.services.length > 1 && (\n                <text className=\"rmg-name__zh\" writingMode=\"tb\" fontSize=\"60%\" dy=\"-12\">\n                    {`大站车${stnInfo.services.length > 2 ? ' 直达车' : ''}停靠`}\n                </text>\n            )}\n        </>\n    );\n};\n\nexport default StationSHMetro;\n\ninterface StationNameGElementProps {\n    name: Name;\n    infos: InterchangeInfo[][];\n    nameDirection: NameDirection;\n    services: Services[];\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const { name, infos, nameDirection, services } = props;\n    const dy = { upward: 60, downward: -30, left: 0, right: 0 }[nameDirection];\n    return (\n        <g transform={`translate(0,${dy})`}>\n            {nameDirection === 'upward' || nameDirection === 'downward' ? (\n                <>\n                    <line\n                        x1={-30}\n                        x2={30}\n                        y1={nameDirection === 'upward' ? -23 : -10}\n                        y2={nameDirection === 'upward' ? -23 : -10}\n                        stroke=\"black\"\n                    />\n                    <line\n                        y1={nameDirection === 'upward' ? -23 : -10}\n                        y2={nameDirection === 'upward' ? -23 - 25 : 20}\n                        stroke=\"black\"\n                    />\n                </>\n            ) : (\n                <line\n                    x1={nameDirection === 'left' ? -100 : 15}\n                    x2={nameDirection === 'left' ? -15 : 100}\n                    y1={0}\n                    y2={0}\n                    stroke=\"black\"\n                />\n            )}\n\n            {[...infos[0], ...(infos[1] || [])].length > 0 && (\n                <IntBoxGroup\n                    intInfos={[...infos[0], ...(infos[1] || [])]}\n                    arrowDirection={nameDirection}\n                    services={services}\n                />\n            )}\n\n            <StationName stnName={name} nameDirection={nameDirection} fill=\"black\" />\n\n            {infos[1]?.length > 0 && (\n                <g transform={`translate(0,${nameDirection === 'upward' ? -185 : 150})`}>\n                    <OSIText osiInfos={infos[1]} />\n                </g>\n            )}\n\n            {infos[2]?.length > 0 && (\n                <g\n                    transform={`translate(0,${\n                        nameDirection === 'upward'\n                            ? infos[1]?.length\n                                ? -210\n                                : infos[0].length\n                                ? -180\n                                : -100\n                            : (infos[1]?.length ? 190 : infos[0].length ? 160 : 75) + (services.length === 3 ? 40 : 0)\n                    })`}\n                >\n                    <OSysIText osysiInfos={infos[2]} />\n                </g>\n            )}\n        </g>\n    );\n};\n\nconst StationName = React.forwardRef(\n    (\n        props: { stnName: Name; nameDirection: NameDirection } & React.SVGProps<SVGGElement>,\n        ref: React.Ref<SVGGElement>\n    ) => {\n        const { stnName, nameDirection, ...others } = props;\n        const name = stnName[0].split('\\\\');\n        const nameENLn = stnName[1].split('\\\\').length;\n        // TODO: set text-anchor on left and right\n        const dx = { upward: 0, downward: 0, left: -75, right: 75 }[nameDirection];\n        const dy = { upward: -2, downward: -30 - 12 * (nameENLn - 1), left: -15, right: -15 }[nameDirection];\n\n        return (\n            <g ref={ref} {...others} textAnchor=\"middle\" transform={`translate(${dx},${dy})`}>\n                {React.useMemo(\n                    () => (\n                        <>\n                            {name.map((txt, i, array) => (\n                                <text\n                                    key={i}\n                                    className=\"rmg-name__zh\"\n                                    dy={nameDirection === 'upward' ? 16 * i : (array.length - 1 - i) * -16}\n                                >\n                                    {txt}\n                                </text>\n                            ))}\n                            <g fontSize={9.6}>\n                                {stnName[1].split('\\\\').map((txt, i) => (\n                                    <text\n                                        key={i}\n                                        className=\"rmg-name__en\"\n                                        dy={\n                                            12 * (i + 1) +\n                                            (nameDirection === 'upward' ? (name.length > 1 ? name.length * 7.5 : 0) : 0)\n                                        }\n                                    >\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </>\n                    ),\n                    // eslint-disable-next-line react-hooks/exhaustive-deps\n                    [...stnName]\n                )}\n            </g>\n        );\n    }\n);\n\ninterface IntBoxGroupProps {\n    intInfos: InterchangeInfo[];\n    arrowDirection: NameDirection;\n    services: Services[];\n}\n\nconst IntBoxGroup = (props: IntBoxGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, arrowDirection, services } = props;\n\n    // name each different linearGradient that will fill the arrow\n    const intNameId = intInfos.map(intInfo => intInfo[2]).reduce((name, color) => name + color, '');\n\n    // get the interchange line names\n    const lineNames = [\n        intInfos\n            .filter(intInfo => intInfo[4].match(/^\\d+.*$/))\n            .map(intInfo => intInfo[4].replace(/^(\\d+)(.*)$/, '$1'))\n            .join('，')\n            .concat('号线'),\n        intInfos\n            .filter(intInfo => !intInfo[4].match(/^\\d+.*$/))\n            .map(intInfo => intInfo[4])\n            .join('，'),\n    ]\n        .filter(name => name && name !== '号线')\n        .join('，');\n    const lineNamesEn = [\n        'Line '.concat(\n            intInfos\n                .filter(intInfo => intInfo[5].match(/^L|line$/))\n                .map(intInfo => intInfo[5].replace('Line', '').replace('line', '').trim())\n                .join(',')\n        ),\n        intInfos\n            .filter(intInfo => !intInfo[5].match(/^L|line$/))\n            .map(intInfo => intInfo[5])\n            .join('，'),\n    ]\n        .filter(name => name && name !== 'Line ')\n        .join(',');\n\n    // for services contains three level (normal, express, direct)\n    // additional length is required on transfer arrow otherwise\n    // the station icon will be longer than the arrow itself\n    const arrowLength = services.length === 3 ? 80 : 45;\n    const transferDy = arrowDirection === 'upward' ? -145 : 125 + (services.length === 3 ? 40 : 0);\n\n    return (\n        <g>\n            <path\n                id=\"int_indoor_arrow_sh\"\n                stroke=\"var(--rmg-black)\"\n                strokeWidth={1}\n                transform={`translate(0,${arrowDirection === 'upward' ? -74 : 44})rotate(${\n                    arrowDirection === 'upward' ? 0 : 180\n                })`}\n                fill={intInfos.length === 1 ? intInfos[0][2] : `url(#grad${intNameId})`}\n                d={`M -7.5,0 v -${arrowLength} h -7.5 l 15,-15 l 15,15 h -7.5 v ${arrowLength} Z`}\n            />\n\n            {intInfos.length > 1 && (\n                <>\n                    <linearGradient\n                        id={`grad${intNameId}`}\n                        y1=\"0\"\n                        y2=\"0\"\n                        x1={arrowDirection === 'upward' ? '25%' : '75%'}\n                        x2={arrowDirection === 'upward' ? '75%' : '25%'}\n                    >\n                        {intInfos.map((intInfo, i) => (\n                            <React.Fragment key={i}>\n                                {/* more about React.Fragment on https://stackoverflow.com/a/59390967 */}\n                                <stop // start from\n                                    offset={`${(100 / intInfos.length) * (i + 0)}%`}\n                                    stopColor={intInfo[2]}\n                                />\n                                <stop // to\n                                    offset={`${(100 / intInfos.length) * (i + 1)}%`}\n                                    stopColor={intInfo[2]}\n                                />\n                            </React.Fragment>\n                        ))}\n                    </linearGradient>\n\n                    {/* a range inplementation [0, 1, 2 ... intInfos.length - 1] */}\n                    {/* {[...Array(intInfos.length - 1).keys()].map(i => (<line\n                        x1={-7.5 + (15 / intInfos.length) * (i + 1)}\n                        x2={-7.5 + (15 / intInfos.length) * (i + 1)}\n                        y1=\"-74\"\n                        y2={-104 - 7.5 - 7.5 / (intInfos.length - 1) * (i+1)}\n                        stroke=\"black\"\n                    />))} */}\n                </>\n            )}\n\n            <g transform={`translate(0,${transferDy})`} textAnchor=\"middle\">\n                <text className=\"rmg-name__zh\" dy={-7}>\n                    {`换乘${lineNames}`}\n                </text>\n                <text className=\"rmg-name__en\" dy={5} fontSize={9.6}>\n                    {`Interchange ${lineNamesEn}`}\n                </text>\n            </g>\n        </g>\n    );\n};\n\nconst OSIText = (props: { osiInfos: InterchangeInfo[] }) => {\n    return React.useMemo(\n        () => (\n            <g textAnchor=\"middle\" fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {`换乘${props.osiInfos.map(info => info[4]).join('，')}`}\n                </text>\n                <text className=\"rmg-name__zh\" dy={5}>\n                    仅限公共交通卡\n                </text>\n                <text className=\"rmg-name__en\" dy={12.5} fontSize=\"75%\">\n                    Only for Public Transportation Card\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.osiInfos.toString()]\n    );\n};\n\nconst OSysIText = (props: { osysiInfos: InterchangeInfo[] }) => {\n    return React.useMemo(\n        () => (\n            <g textAnchor=\"middle\">\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {`转乘${props.osysiInfos.map(info => info[4]).join('，')}`}\n                </text>\n                <text className=\"rmg-name__en\" dy={7.5} fontSize={9.6}>\n                    {`To ${props.osysiInfos.map(info => info[5]).join(', ')}`}\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.osysiInfos.toString()]\n    );\n};\n","import React from 'react';\nimport StationSHMetro from './station/station-shmetro';\nimport { NameDirection, StationSHMetro as StationSHMetroIndoor } from '../../indoor/station-shmetro';\nimport { Services } from '../../../constants/constants';\nimport { useAppSelector } from '../../../redux';\n\n// Split the loopline into four sides according to left_and_right_factor and bottom_factor.\n// It assumes parameters will follow these rules:\n//     1. loopline.length > bottom_factor + left_and_right_factor * 2\n//     2. bottom_factor >= 0\n//     3. left_and_right_factor >= 0\n//     4. left_and_right_factor + bottom_factor > 0\n// Each array returned should be consecutive, and when combined in top -> right -> bottom -> left order,\n// it will also be consecutive. Note that the length of right, bottom, and left can be 0.\nconst split_loop_stns = (\n    loopline: string[],\n    current_stn_id: string,\n    bottom_factor: number,\n    left_and_right_factor: number\n) => {\n    const top_factor = loopline.length - left_and_right_factor * 2 - bottom_factor;\n    const current_stn_idx = loopline.findIndex(val => val === current_stn_id);\n    const non_undefined_loopline = [...loopline, ...loopline, ...loopline];\n    const split_a = loopline.length + current_stn_idx - Math.floor(top_factor / 2) + (top_factor % 2 === 0 ? 1 : 0);\n    const split_b = loopline.length + current_stn_idx + Math.floor(top_factor / 2);\n    return {\n        top: non_undefined_loopline.slice(split_a, split_b + 1),\n        left: non_undefined_loopline.slice(split_a - left_and_right_factor, split_a),\n        right: non_undefined_loopline.slice(split_b + 1, split_b + 1 + left_and_right_factor),\n        bottom: non_undefined_loopline.slice(\n            split_b + 1 + left_and_right_factor,\n            split_b + 1 + left_and_right_factor + bottom_factor\n        ),\n    };\n};\n\ntype LoopStns = ReturnType<typeof split_loop_stns>;\n\n// Return the xshares and yshares of the loop stations. Values sit between -1 and 1.\nconst get_xshares_yshares_of_loop = (loopline: string[], loop_stns: LoopStns) => {\n    const x_shares = Object.fromEntries(loopline.map(stn_id => [stn_id, -1]));\n    const y_shares = Object.fromEntries(loopline.map(stn_id => [stn_id, -1]));\n\n    const [Y_TOP, Y_BOTTOM, X_LEFT, X_RIGHT] = [-1, 1, -1, 1];\n\n    // make sure first and last station do not position at the corner\n    const e = 0.1; // e should be smaller than 1\n\n    loop_stns.top.forEach((stn_id, i) => {\n        x_shares[stn_id] = -(1 - e) + ((2 - 2 * e) / loop_stns.top.length) * i + (1 - e) / loop_stns.top.length;\n        y_shares[stn_id] = Y_TOP;\n    });\n    loop_stns.right.forEach((stn_id, i) => {\n        x_shares[stn_id] = X_RIGHT;\n        y_shares[stn_id] = -(1 - e) + ((2 - 2 * e) / loop_stns.right.length) * i + (1 - e) / loop_stns.right.length;\n    });\n    loop_stns.bottom.forEach((stn_id, i) => {\n        x_shares[stn_id] = 1 - e - ((2 - 2 * e) / loop_stns.bottom.length) * i - (1 - e) / loop_stns.bottom.length;\n        y_shares[stn_id] = Y_BOTTOM;\n    });\n    loop_stns.left.forEach((stn_id, i) => {\n        x_shares[stn_id] = X_LEFT;\n        y_shares[stn_id] = 1 - e - ((2 - 2 * e) / loop_stns.left.length) * i - (1 - e) / loop_stns.left.length;\n    });\n\n    return {\n        x_shares: x_shares,\n        y_shares: y_shares,\n    };\n};\n\nconst LoopSHMetro = (props: { bank_angle: boolean }) => {\n    const { bank_angle } = props;\n    const { branches } = useAppSelector(store => store.helper);\n    const {\n        current_stn_idx: current_stn_id,\n        svgWidth: svg_width,\n        svg_height,\n        padding,\n        direction,\n        loop_info,\n    } = useAppSelector(store => store.param);\n    const { left_and_right_factor, bottom_factor } = loop_info;\n\n    const loopline = branches[0].filter(stn_id => !['linestart', 'lineend'].includes(stn_id));\n\n    const loop_stns = split_loop_stns(loopline, current_stn_id, bottom_factor, left_and_right_factor);\n\n    const { x_shares, y_shares } = get_xshares_yshares_of_loop(loopline, loop_stns);\n    loopline.forEach(stn_id => {\n        // normalization\n        x_shares[stn_id] = (x_shares[stn_id] + 1) / 2;\n        y_shares[stn_id] = (y_shares[stn_id] + 1) / 2;\n    });\n\n    const line_xs = [\n        (svg_width.railmap * padding) / 100 + (bank_angle ? 0 : 50),\n        svg_width.railmap * (1 - padding / 100) - (bank_angle ? 0 : 50),\n    ];\n    const xs = Object.keys(x_shares).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: line_xs[0] + x_shares[cur] * (line_xs[1] - line_xs[0]),\n        }),\n        {} as typeof x_shares\n    );\n    const line_ys = [175, svg_height - 75 - (bank_angle ? 0 : 100)] as [number, number];\n    const ys = Object.keys(x_shares).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: line_ys[0] + y_shares[cur] * (line_ys[1] - line_ys[0]),\n        }),\n        {} as typeof y_shares\n    );\n\n    // bank the right, bottom, left side if bank_angle\n    const bank = (bank_angle ? { l: 1, r: -1 }[direction] : 0) as -1 | 0 | 1;\n    [...loop_stns.right, ...loop_stns.left].forEach(stn_id => {\n        xs[stn_id] -= (ys[stn_id] - line_ys[0]) * bank;\n    });\n    loop_stns.bottom.forEach(stn_id => {\n        xs[stn_id] -= (line_ys[1] - line_ys[0]) * bank;\n    });\n\n    const path = _linePath(loop_stns, xs, ys, bank, line_ys);\n\n    return (\n        <>\n            <g id=\"loop\" transform={`translate(${bank * 150},0)`}>\n                <path stroke=\"var(--rmg-theme-colour)\" strokeWidth={12} fill=\"none\" d={path} strokeLinejoin=\"round\" />\n                <LoopStationGroup bank_angle={bank_angle} loop_stns={loop_stns} xs={xs} ys={ys} />\n            </g>\n        </>\n    );\n};\n\nexport default LoopSHMetro;\n\nexport const _linePath = (\n    loop_stns: LoopStns,\n    xs: { [stn_id: string]: number },\n    ys: { [stn_id: string]: number },\n    bank: -1 | 0 | 1,\n    line_ys: [number, number] // get Y_BOTTOM when no stations at bottom\n) => {\n    const [Y_TOP, Y_BOTTOM] = line_ys;\n\n    // calculate the corner point when two sides needs to be joined\n    const corner = (prev_x: number, prev_y: number, x: number, y: number, side: keyof LoopStns): [number, number] => {\n        return {\n            right: [x + (y - Y_TOP) * bank, prev_y] as [number, number],\n            bottom: [prev_x - (Y_BOTTOM - prev_y) * bank, y] as [number, number],\n            left: [x - (Y_BOTTOM - y) * bank, prev_y] as [number, number],\n            top: [prev_x + (prev_y - Y_TOP) * bank, y] as [number, number],\n        }[side];\n    };\n\n    const stn_pos = [] as [number, number][];\n    loop_stns.top.forEach(stn_id => {\n        stn_pos.push([xs[stn_id], ys[stn_id]]);\n    });\n    (['right', 'bottom', 'left'] as Exclude<keyof LoopStns, 'top'>[]).forEach(side => {\n        if (loop_stns[side].length > 0) {\n            stn_pos.push(\n                corner(stn_pos.at(-1)![0], stn_pos.at(-1)![1], xs[loop_stns[side][0]], ys[loop_stns[side][0]], side)\n            );\n            loop_stns[side].forEach(stn_id => {\n                stn_pos.push([xs[stn_id], ys[stn_id]]);\n            });\n        } else {\n            // simulate a fake station on the side\n            // this station in fact lays on the previous side with an extra_e dx\n            const extra_e = 100;\n            const extra = {\n                right: [stn_pos.at(-1)![0] + extra_e, stn_pos.at(-1)![1]] as [number, number],\n                bottom: [\n                    stn_pos.at(-1)![0] + (Y_BOTTOM - stn_pos.at(-1)![1]) * -bank,\n                    stn_pos.at(-1)![1] + (Y_BOTTOM - stn_pos.at(-1)![1]),\n                ] as [number, number],\n                left: [stn_pos.at(-1)![0] - extra_e, stn_pos.at(-1)![1]] as [number, number],\n            };\n            stn_pos.push(extra[side]);\n        }\n    });\n    stn_pos.push(corner(stn_pos.at(-1)![0], stn_pos.at(-1)![1], xs[loop_stns.top[0]], ys[loop_stns.top[0]], 'top'));\n\n    const path = stn_pos\n        .slice(1)\n        .map(([x, y]) => `L${x},${y}`)\n        .join(' ');\n    return `M${stn_pos[0][0]},${stn_pos[0][1]} ${path} Z`;\n};\n\nconst LoopStationGroup = (props: {\n    bank_angle: boolean;\n    loop_stns: LoopStns;\n    xs: {\n        [k: string]: number;\n    };\n    ys: {\n        [k: string]: number;\n    };\n}) => {\n    const { bank_angle, loop_stns, xs, ys } = props;\n\n    const railmap_bank: Record<keyof LoopStns, -1 | 0 | 1> = {\n        top: 0,\n        bottom: 0,\n        left: -1,\n        right: 1,\n    };\n    const railmap_direction: Record<keyof LoopStns, 'l' | 'r' | undefined> = {\n        left: 'r',\n        right: 'l',\n        top: undefined,\n        bottom: undefined,\n    };\n    const indoor_name_direction = (side: keyof LoopStns, i: number) =>\n        ({\n            top: i % 2 === 0 ? 'upward' : 'downward',\n            bottom: i % 2 === 0 ? 'upward' : 'downward',\n            left: 'left',\n            right: 'right',\n        }[side] as NameDirection);\n    return (\n        <g id=\"loop_stations\">\n            {bank_angle\n                ? Object.entries(loop_stns).map(([side, stn_ids]) =>\n                      stn_ids.map(stn_id => (\n                          <g key={stn_id} transform={`translate(${xs[stn_id]},${ys[stn_id]})`}>\n                              <StationSHMetro\n                                  stnId={stn_id}\n                                  stnState={1}\n                                  bank={railmap_bank[side as keyof LoopStns]}\n                                  direction={railmap_direction[side as keyof LoopStns]}\n                              />\n                          </g>\n                      ))\n                  )\n                : Object.entries(loop_stns).map(([side, stn_ids]) =>\n                      stn_ids.map((stn_id, i) => (\n                          <g key={stn_id} transform={`translate(${xs[stn_id]},${ys[stn_id]})`}>\n                              <StationSHMetroIndoor\n                                  stnId={stn_id}\n                                  nameDirection={indoor_name_direction(side as keyof LoopStns, i)}\n                                  services={[Services.local]}\n                              />\n                          </g>\n                      ))\n                  )}\n        </g>\n    );\n};\n","import React, { useRef, memo } from 'react';\nimport { InterchangeInfo, Name, Facilities, ColourHex } from '../../../../constants/constants';\nimport { useAppSelector } from '../../../../redux';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n    color?: ColourHex; // Control the station color if coline is in effect.\n    bank?: -1 | 0 | 1; // Loopline requires station element to be horizontal. Default to 0 (no bank to other side).\n    direction?: 'l' | 'r'; // Loopline requires station element to change direction. Default to current param.\n}\n\nconst StationSHMetro = (props: Props) => {\n    const { stnId, stnState, color, bank: bank_, direction: direction_override } = props;\n    const { direction: direction_param, info_panel_type, stn_list } = useAppSelector(store => store.param);\n    const stnInfo = stn_list[stnId];\n    const direction = direction_override ?? direction_param;\n\n    // shift station name if the line bifurcate here\n    const branchNameDX =\n        ([...stnInfo.branch.left, ...stnInfo.branch.right].length ? 8 + 12 * stnInfo.name[1].split('\\\\').length : 0) *\n        (direction === 'r' ? -1 : 1);\n\n    let stationIconStyle = '';\n    let stationIconColor: { [pos: string]: string } = {};\n    if (info_panel_type === 'sh2020') {\n        if (stnInfo.services.length === 3) stationIconStyle = 'stn_sh_2020_direct';\n        else if (stnInfo.services.length === 2) stationIconStyle = 'stn_sh_2020_express';\n        else stationIconStyle = 'stn_sh_2020';\n        stationIconColor.fill = stnState === -1 ? 'gray' : color ? color : 'var(--rmg-theme-colour)';\n    } else {\n        // param.info_panel_type === 'sh' or others (from other styles)\n        if (stnInfo.services.length === 3) stationIconStyle = 'direct_sh';\n        else if (stnInfo.services.length === 2) stationIconStyle = 'express_sh';\n        else if ([...stnInfo.transfer.info[0], ...(stnInfo.transfer.info[1] || [])].length > 0)\n            stationIconStyle = 'int2_sh';\n        else stationIconStyle = 'stn_sh';\n        stationIconColor.stroke = stnState === -1 ? 'gray' : color ? color : 'var(--rmg-theme-colour)';\n    }\n\n    const bank = bank_ ?? 0;\n    const dx = (direction === 'l' ? 6 : -6) + branchNameDX + bank * 30;\n    const dy = (info_panel_type === 'sh2020' ? -20 : -6) + Math.abs(bank) * 10;\n    const dr = bank ? 0 : direction === 'l' ? -45 : 45;\n    return (\n        <>\n            <use\n                xlinkHref={`#${stationIconStyle}`}\n                {...stationIconColor} // different styles use either `fill` or `stroke`\n                // sh and sh2020 have different headings of int_sh, so -1 | 1 is multiplied\n                transform={`rotate(${bank * 90 * (info_panel_type === 'sh2020' ? 1 : -1)})`}\n            />\n            <g transform={`translate(${dx},${dy})rotate(${dr})`}>\n                <StationNameGElement\n                    name={stnInfo.name}\n                    infos={stnInfo.transfer.info}\n                    stnState={stnState}\n                    direction={direction}\n                    facility={stnInfo.facility}\n                />\n            </g>\n        </>\n    );\n};\n\nexport default StationSHMetro;\n\ninterface StationNameGElementProps {\n    name: Name;\n    infos: InterchangeInfo[][];\n    stnState: -1 | 0 | 1;\n    direction: 'l' | 'r';\n    facility: Facilities;\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const { name, infos, stnState, direction, facility } = props;\n    const nameENLn = props.name[1].split('\\\\').length;\n\n    // get the exact station name width so that the\n    // interchange station icon can be right after the station name\n    const stnNameEl = useRef<SVGGElement | null>(null);\n    // the original name position\n    const [bBox, setBBox] = React.useState({ width: 0 } as DOMRect);\n    React.useEffect(\n        () => setBBox(stnNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [...name]\n    );\n    // the original name position's right x\n    const x = bBox.width + 5;\n\n    // rotate the station info now\n    // other wise the bcr will be inaccurate due to the rotation\n    // Chito: so, use BBox instead\n\n    // simplify the calculation times\n    const directionPolarity = direction === 'l' ? 1 : -1;\n\n    // main elements icon's dx will change if there is a facility icon or not\n    const mainDx = facility !== Facilities.none ? 30 : 0;\n\n    return (\n        <>\n            {infos.flat().length > 0 && (\n                <>\n                    <line\n                        x1={mainDx * directionPolarity}\n                        x2={(mainDx + x) * directionPolarity}\n                        stroke={stnState === -1 ? 'gray' : 'black'}\n                        strokeWidth={0.5}\n                    />\n                    <IntBoxGroup\n                        intInfos={infos}\n                        transform={`translate(${(mainDx + x) * directionPolarity},-10.75)`}\n                        direction={direction}\n                    />\n                </>\n            )}\n\n            {facility !== Facilities.none && <use xlinkHref={'#' + facility} x={10 * directionPolarity} y={-30} />}\n\n            <g\n                textAnchor={direction === 'l' ? 'start' : 'end'}\n                transform={`translate(${mainDx * directionPolarity},${-14.15625 - 2 - 12 * (nameENLn - 1)})`}\n            >\n                <StationName\n                    ref={stnNameEl}\n                    stnName={name}\n                    fill={stnState === -1 ? 'gray' : stnState === 0 ? 'red' : 'black'}\n                />\n\n                {/* deal out-of-station here as it is a y axis element. leave out-of-system in IntBoxGroup*/}\n                {infos[1]?.length > 0 && (\n                    <g\n                        transform={`translate(${\n                            (x + infos.reduce((sum, infos) => sum + infos.length, 0) * 15) * directionPolarity\n                        },-30)`}\n                    >\n                        <OSIText osiInfos={infos[1]} />\n                    </g>\n                )}\n            </g>\n        </>\n    );\n};\n\nconst StationName = React.forwardRef(\n    (props: { stnName: Name } & React.SVGProps<SVGGElement>, ref: React.Ref<SVGGElement>) => {\n        const { stnName, ...others } = props;\n\n        return (\n            <g ref={ref} {...others}>\n                {React.useMemo(\n                    () => (\n                        <>\n                            {stnName[0].split('\\\\').map((txt, i, array) => (\n                                <text key={i} className=\"rmg-name__zh\" dy={(array.length - 1 - i) * -15}>\n                                    {txt}\n                                </text>\n                            ))}\n                            <g fontSize={9.6}>\n                                {stnName[1].split('\\\\').map((txt, i) => (\n                                    <text key={i} className=\"rmg-name__en\" dy={12 * (i + 1)}>\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </>\n                    ),\n                    // eslint-disable-next-line react-hooks/exhaustive-deps\n                    [...stnName]\n                )}\n            </g>\n        );\n    }\n);\n\nconst IntBoxGroup = (props: { intInfos: InterchangeInfo[][]; direction: 'l' | 'r' } & React.SVGProps<SVGGElement>) => {\n    const { intInfos, direction, ...others } = props;\n\n    // also known as non out-of-system transfers\n    const boxInfos = [\n        ...intInfos[0],\n        ...(intInfos[1] || []),\n        // some dirty tricks here as shmetro shows maglev icon even it is a out-of-system transfer\n        // and display a maglev icon is much easier in boxInfos than in OSysIText\n        ...(intInfos[2]?.filter(info => Boolean(info[4].match(/^磁(悬)*浮/))) || []),\n    ];\n\n    let dx = 0; // update in every boxInfos\n\n    return (\n        <g fontSize={14} textAnchor=\"middle\" {...others}>\n            {boxInfos.map((info, i) => {\n                const isLineNumber = Boolean(info[4].match(/^\\d.*$/));\n                const isMaglev = Boolean(info[4].match(/^磁(悬)*浮/));\n\n                if (props.direction === 'r') {\n                    dx -= (isLineNumber || isMaglev ? 20 : info[4].length * 14 + 12 + 0) + (i === 0 ? 0 : 5);\n                }\n\n                let el = <g />;\n                if (isMaglev) {\n                    el = (\n                        <g transform={`translate(${dx},-16)scale(0.1428571429)`} key={i}>\n                            <IntBoxMaglev info={info} />\n                        </g>\n                    );\n                } else if (isLineNumber) {\n                    el = (\n                        <g transform={`translate(${dx},0)`} key={i}>\n                            <IntBoxNumber info={info} />\n                        </g>\n                    );\n                } else {\n                    el = (\n                        <g transform={`translate(${dx},0)`} key={i}>\n                            <IntBoxLetter info={info} />\n                        </g>\n                    );\n                }\n\n                if (props.direction === 'l') {\n                    dx += isLineNumber || isMaglev ? 20 + 5 : info[4].length * 14 + 12 + 5;\n                }\n                return el;\n            })}\n\n            {[...(intInfos[2] || [])].length > 0 && (\n                <g transform={`translate(${dx - (props.direction === 'r' ? 5 : 0)},0)`} key={boxInfos.length + 1}>\n                    <OSysIText osysiInfos={intInfos[2]} direction={props.direction} />\n                </g>\n            )}\n        </g>\n    );\n};\n\nconst IntBoxMaglev = memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_maglev\" fill={props.info[2]} stroke={props.info[2]} />\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxNumber = memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_number\" fill={props.info[2]} />\n            <text x={10} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                {/* // line starts with numbers */}\n                {props.info[4].match(/(\\d*)\\w+/)![0]}\n            </text>\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxLetter = memo(\n    (props: { info: InterchangeInfo }) => {\n        // box width: 16 * number of characters + 12\n        const textCount = props.info[4].split('\\\\')[0].length;\n        return (\n            <>\n                <rect height={22} width={textCount * 14 + 12} y={-11} fill={props.info[2]} />\n                <text x={textCount * 7 + 6} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                    {props.info[4].split('\\\\')[0]}\n                </text>\n            </>\n        );\n    },\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst OSIText = (props: { osiInfos: InterchangeInfo[] }) => {\n    // get the all names from the out of station interchanges\n    const lineNames = props.osiInfos.map(info => info[4]).join('，');\n    return React.useMemo(\n        () => (\n            <g textAnchor=\"middle\" fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {`换乘${lineNames}`}\n                </text>\n                <text className=\"rmg-name__zh\" dy={5}>\n                    仅限公共交通卡\n                </text>\n                <text className=\"rmg-name__en\" dy={12.5} fontSize=\"75%\">\n                    Only for Public Transportation Card\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [lineNames.toString()]\n    );\n};\n\nconst OSysIText = (props: { osysiInfos: InterchangeInfo[]; direction: 'l' | 'r' }) => {\n    // get the all names from out of system transfers\n    const lineNames = props.osysiInfos.map(info => info[4]).join('，');\n    const lineNamesEn = props.osysiInfos.map(info => info[5]).join(', ');\n\n    return React.useMemo(\n        () => (\n            <g textAnchor={props.direction === 'l' ? 'start' : 'end'} fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={3}>\n                    转乘{lineNames}\n                </text>\n                <text className=\"rmg-name__en\" dy={10} fontSize=\"75%\">\n                    To {lineNamesEn}\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.osysiInfos.toString(), props.direction]\n    );\n};\n","import * as Global from '../../../methods';\nimport { RMGParam, ShortDirection, StationDict, StationInfo } from '../../../constants/constants';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (\n                          direction === ShortDirection.right\n                              ? _isSuccessor(currentId, cur, routes)\n                              : _isPredecessor(currentId, cur, routes)\n                      )\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as StationDict;\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number\n    ) {\n        var [prevId, prevY, prevX] = [] as unknown as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 2;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + e}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - e}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number = 9.68\n    ) {\n        let linePaths = { main: [] as string[], pass: [] as string[] };\n        branches.forEach((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branch: string[], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n    let lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n    let linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n    if (lineMainStns.length === 1) {\n        linePassStns = branch;\n    }\n\n    if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n        // if two set disjoint\n        if (linePassStns[0] === branch[0]) {\n            // -1 -1 1 1\n            linePassStns.push(lineMainStns[0]);\n        } else if (\n            lineMainStns[0] === branch[0] &&\n            lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n            linePassStns.length\n        ) {\n            linePassStns = branch;\n            lineMainStns = [];\n        } else {\n            // 1 1 -1 -1\n            linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n        }\n    }\n\n    return {\n        main: lineMainStns,\n        pass: linePassStns,\n    };\n};\n"],"names":["StationSHMetro","props","stnInfo","useAppSelector","store","param","stn_list","stnId","stationIconStyle","services","length","transfer","info","StationNameGElement","name","infos","nameDirection","xlinkHref","stroke","className","writingMode","fontSize","dy","upward","downward","left","right","transform","x1","x2","y1","y2","IntBoxGroup","intInfos","arrowDirection","StationName","stnName","fill","OSIText","osiInfos","OSysIText","osysiInfos","React","ref","others","split","nameENLn","dx","textAnchor","map","txt","i","array","intNameId","intInfo","reduce","color","lineNames","filter","match","replace","join","concat","lineNamesEn","trim","arrowLength","transferDy","id","strokeWidth","d","offset","stopColor","toString","bank_angle","branches","helper","current_stn_id","current_stn_idx","svg_width","svgWidth","svg_height","padding","direction","loop_info","left_and_right_factor","bottom_factor","loopline","stn_id","includes","loop_stns","top_factor","findIndex","val","non_undefined_loopline","split_a","Math","floor","split_b","top","slice","bottom","split_loop_stns","x_shares","Object","fromEntries","y_shares","forEach","get_xshares_yshares_of_loop","line_xs","railmap","xs","keys","acc","cur","line_ys","ys","bank","l","r","path","_linePath","strokeLinejoin","LoopStationGroup","Y_TOP","Y_BOTTOM","corner","prev_x","prev_y","x","y","side","stn_pos","push","at","extra","railmap_bank","railmap_direction","undefined","indoor_name_direction","entries","stnState","Services","bank_","direction_override","direction_param","info_panel_type","branchNameDX","branch","stationIconColor","abs","dr","facility","stnNameEl","useRef","width","bBox","setBBox","current","getBBox","directionPolarity","mainDx","Facilities","flat","sum","boxInfos","Boolean","isLineNumber","isMaglev","el","IntBoxMaglev","IntBoxNumber","IntBoxLetter","memo","prevProps","nextProps","dominantBaseline","textCount","height","adjacencyList","stnList","leftW","rightW","children","a","c","criticalPathMethod","from","to","adjMat","len","nodes","allLengths","criticalPaths","child","cp","unshift","maxLength","max","indexOf","getXShareMTR","criticalPath","branchOfStn","partSource","partSink","leftOpenJaw","lens","getStnState","currentId","routes","console","log","Set","ShortDirection","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","yShares","xShares","namePoss","leftWideFactor","rightWideFactor","pathWeight","Infinity","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","parents","stnPred","res","getYShare","stnIds","lineXs","realXs","realYs","e","prevId","prevY","prevX","stnDX","stnExtraH","stnSpareH","warn","stations","stnStates","linePaths","main","pass","lineMainStns","linePassStns","drawLine"],"sourceRoot":""}