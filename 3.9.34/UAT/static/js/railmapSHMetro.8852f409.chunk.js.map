{"version":3,"sources":["svgs/railmap/main/station/station-shmetro.tsx","svgs/railmap/main/main-shmetro.tsx","svgs/railmap/railmap-shmetro.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","methods.ts","svgs/railmap/methods/share.ts"],"names":["StationSHMetro","props","param","useAppSelector","store","stnInfo","stn_list","stnId","branchNameDX","branch","left","right","length","name","split","direction","stationIconStyle","stationIconColor","info_panel_type","services","fill","stnState","transfer","info","stroke","xlinkHref","transform","infos","StationNameGElement","nameENLn","stnNameEl","useRef","React","useState","width","bBox","setBBox","useEffect","current","getBBox","x","flat","x1","x2","strokeWidth","intInfos","textAnchor","StationName","ref","stnName","reduce","sum","osiInfos","forwardRef","others","useMemo","map","txt","i","array","className","dy","fontSize","IntBoxGroup","boxInfos","filter","Boolean","match","dx","isLineNumber","isMaglev","el","IntBoxMaglev","IntBoxNumber","IntBoxLetter","osysiInfos","memo","prevProps","nextProps","toString","dominantBaseline","textCount","height","y","OSIText","lineNames","join","OSysIText","lineNamesEn","MainSHMetro","helper","routes","branches","deps","depsStr","adjMat","adjacencyList","criticalPath","criticalPathMethod","realCP","nodes","slice","xShares","console","log","Object","keys","acc","cur","getXShareMTR","JSON","stringify","lineXs","svgWidth","railmap","padding","xs","len","yShares","includes","ys","branch_spacing","stnStates","getStnState","current_stn_idx","values","Services","servicesLevel","stationInfo","indexOf","bool","s","linePaths","drawLine","paths","stns","_linePath","path","id","svg_height","Line","servicePath","pass","j","d","markerStart","undefined","markerEnd","strokeLinejoin","main","stnIds","type","servicesMax","e","prevY","prevX","servicesDelta","local","express","direct","servicesPassDelta","forEach","hasOwnProperty","xm","ym","h","StationGroup","ServicesElements","service","labelX","dx_hint","serviceLevel","y1","y2","DirectionElements","RailMapSHMetro","DefsSHMetro","r","viewBox","refY","refX","filterUnits","slope","intercept","_objectWithoutProperties","source","excluded","key","target","sourceKeys","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","getYShareMTR","stnList","parents","children","stnPred","leftW","rightW","a","c","from","to","allLengths","criticalPaths","child","cp","push","unshift","maxLength","Math","max","branchOfStn","partSource","partSink","leftOpenJaw","lens","currentId","Set","concat","ShortDirection","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","namePoss","leftWideFactor","rightWideFactor","pathWeight","Infinity","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","res","getYShare","realXs","realYs","prevId","stnDX","stnExtraH","stnSpareH","warn","replace","stations","lineMainStns","linePassStns"],"mappings":"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","file":"static/js/railmapSHMetro.8852f409.chunk.js","sourcesContent":["import React, { useRef, memo } from 'react';\nimport { InterchangeInfo, Name, PanelTypeGZMTR, PanelTypeShmetro } from '../../../../constants/constants';\nimport { useAppSelector } from '../../../../redux';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n}\n\nconst StationSHMetro = (props: Props) => {\n    const param = useAppSelector(store => store.param);\n    const stnInfo = param.stn_list[props.stnId];\n\n    // shift station name if the line bifurcate here\n    const branchNameDX =\n        ([...stnInfo.branch.left, ...stnInfo.branch.right].length ? 8 + 12 * stnInfo.name[1].split('\\\\').length : 0) *\n        (param.direction === 'r' ? -1 : 1);\n\n    let stationIconStyle = '';\n    let stationIconColor: { [pos: string]: string } = {};\n    if (param.info_panel_type === 'sh2020') {\n        if (stnInfo.services.length === 3) stationIconStyle = 'stn_sh_2020_direct';\n        else if (stnInfo.services.length === 2) stationIconStyle = 'stn_sh_2020_express';\n        else stationIconStyle = 'stn_sh_2020';\n        stationIconColor.fill = props.stnState === -1 ? 'gray' : 'var(--rmg-theme-colour)';\n    } else {\n        // param.info_panel_type === 'sh' or others (from other styles)\n        if (stnInfo.services.length === 3) stationIconStyle = 'direct_sh';\n        else if (stnInfo.services.length === 2) stationIconStyle = 'express_sh';\n        else if ([...stnInfo.transfer.info[0], ...(stnInfo.transfer.info[1] || [])].length > 0)\n            stationIconStyle = 'int2_sh';\n        else stationIconStyle = 'stn_sh';\n        stationIconColor.stroke = props.stnState === -1 ? 'gray' : 'var(--rmg-theme-colour)';\n    }\n\n    return (\n        <>\n            <use\n                xlinkHref={`#${stationIconStyle}`}\n                {...stationIconColor} // different styles use either `fill` or `stroke`\n            />\n            <g transform={`translate(${branchNameDX},0)`}>\n                <StationNameGElement\n                    name={stnInfo.name}\n                    infos={stnInfo.transfer.info}\n                    stnState={props.stnState}\n                    direction={param.direction}\n                    info_panel_type={param.info_panel_type}\n                />\n            </g>\n        </>\n    );\n};\n\nexport default StationSHMetro;\n\ninterface StationNameGElementProps {\n    name: Name;\n    infos: InterchangeInfo[][];\n    stnState: -1 | 0 | 1;\n    direction: 'l' | 'r';\n    info_panel_type: PanelTypeGZMTR | PanelTypeShmetro;\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const nameENLn = props.name[1].split('\\\\').length;\n\n    // get the exact station name width so that the\n    // interchange station icon can be right after the station name\n    const stnNameEl = useRef<SVGGElement | null>(null);\n    // the original name position\n    const [bBox, setBBox] = React.useState({ width: 0 } as DOMRect);\n    React.useEffect(\n        () => setBBox(stnNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [...props.name]\n    );\n    // the original name position's right x\n    const x = bBox.width + 5;\n\n    // rotate the station info now\n    // other wise the bcr will be inaccurate due to the rotation\n    // Chito: so, use BBox instead\n\n    return (\n        <g transform={`translate(${props.direction === 'l' ? 6 : -6},${props.info_panel_type === 'sh2020' ? -20 : -6})rotate(${props.direction === 'l' ? -45 : 45})`}>\n            {props.infos.flat().length > 0 && (\n                <>\n                    <line\n                        x1={0}\n                        x2={props.direction === 'l' ? x : -x}\n                        stroke={props.stnState === -1 ? 'gray' : 'black'}\n                        strokeWidth={0.5}\n                    />\n                    <IntBoxGroup\n                        intInfos={props.infos}\n                        transform={`translate(${x * (props.direction === 'l' ? 1 : -1)},-10.75)`}\n                        direction={props.direction}\n                    />\n                </>\n            )}\n\n            <g\n                textAnchor={props.direction === 'l' ? 'start' : 'end'}\n                transform={`translate(0,${-14.15625 - 2 - 12 * (nameENLn - 1)})`}\n            >\n                <StationName\n                    ref={stnNameEl}\n                    stnName={props.name}\n                    fill={props.stnState === -1 ? 'gray' : props.stnState === 0 ? 'red' : 'black'}\n                />\n\n                {/* deal out-of-station here as it is a y axis element. leave out-of-system in IntBoxGroup*/}\n                {props.infos[1]?.length > 0 && (\n                    <g\n                        transform={`translate(${\n                            (x + props.infos.reduce((sum, infos) => sum + infos.length, 0) * 15) *\n                            (props.direction === 'l' ? 1 : -1)\n                        },-22)`}\n                    >\n                        <OSIText osiInfos={props.infos[1]} />\n                    </g>\n                )}\n            </g>\n        </g>\n    );\n};\n\nconst StationName = React.forwardRef(\n    (props: { stnName: Name } & React.SVGProps<SVGGElement>, ref: React.Ref<SVGGElement>) => {\n        const { stnName, ...others } = props;\n\n        return (\n            <g ref={ref} {...others}>\n                {React.useMemo(\n                    () => (\n                        <>\n                            {stnName[0].split('\\\\').map((txt, i, array) => (\n                                <text key={i} className=\"rmg-name__zh\" dy={(array.length - 1 - i) * -15}>\n                                    {txt}\n                                </text>\n                            ))}\n                            <g fontSize={9.6}>\n                                {stnName[1].split('\\\\').map((txt, i) => (\n                                    <text key={i} className=\"rmg-name__en\" dy={12 * (i + 1)}>\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </>\n                    ),\n                    // eslint-disable-next-line react-hooks/exhaustive-deps\n                    [...stnName]\n                )}\n            </g>\n        );\n    }\n);\n\nconst IntBoxGroup = (props: { intInfos: InterchangeInfo[][]; direction: 'l' | 'r' } & React.SVGProps<SVGGElement>) => {\n    const { intInfos, direction, ...others } = props;\n\n    // also known as non out-of-system transfers\n    const boxInfos = [\n        ...intInfos[0],\n        ...intInfos[1] || [],\n        // some dirty tricks here as shmetro shows maglev icon even it is a out-of-system transfer\n        // and display a maglev icon is much easier in boxInfos than OSysIText\n        ...intInfos[2]?.filter(info => Boolean(info[4].match(/^磁(悬)*浮/))) || []\n    ];\n\n    let dx = 0;  // update in every boxInfos\n\n    return (\n        <g fontSize={14} textAnchor=\"middle\" {...others}>\n            {boxInfos.map((info, i) => {\n                const isLineNumber = Boolean(info[4].match(/^\\d.*$/));\n                const isMaglev = Boolean(info[4].match(/^磁(悬)*浮/));\n\n                if (props.direction === 'r') {\n                    dx -= (isLineNumber || isMaglev ? 20 : info[4].length * 14 + 12 + 0) + (i === 0 ? 0 : 5);\n                }\n\n                let el = <g />;\n                if (isMaglev) {\n                    el = (\n                        <g transform={`translate(${dx},-16)scale(0.1428571429)`} key={i}>\n                            <IntBoxMaglev info={info} />\n                        </g>\n                    );\n                } else if (isLineNumber) {\n                    el = (\n                        <g transform={`translate(${dx},0)`} key={i}>\n                            <IntBoxNumber info={info} />\n                        </g>\n                    );\n                } else {\n                    el = (\n                        <g transform={`translate(${dx},0)`} key={i}>\n                            <IntBoxLetter info={info} />\n                        </g>\n                    );\n                }\n\n                if (props.direction === 'l') {\n                    dx += isLineNumber || isMaglev ? 20 + 5 : info[4].length * 14 + 12 + 5;\n                }\n                return el;\n            })}\n\n            {[...intInfos[2] || []].length > 0 &&\n                <g\n                    transform={`translate(${dx - (props.direction === 'r' ? 5 : 0)},0)`}\n                    key={boxInfos.length + 1}>\n                    <OSysIText osysiInfos={intInfos[2]} direction={props.direction} />\n                </g>}\n        </g>\n    );\n};\n\nconst IntBoxMaglev = memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_maglev\" fill={props.info[2]} stroke={props.info[2]} />\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxNumber = memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_number\" fill={props.info[2]} />\n            <text x={10} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                {/* // line starts with numbers */}\n                {props.info[4].match(/(\\d*)\\w+/)![0]}\n            </text>\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxLetter = memo(\n    (props: { info: InterchangeInfo }) => {\n        // box width: 16 * number of characters + 12\n        const textCount = props.info[4].split('\\\\')[0].length;\n        return (\n            <>\n                <rect height={22} width={textCount * 14 + 12} y={-11} fill={props.info[2]} />\n                <text x={textCount * 7 + 6} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                    {props.info[4].split('\\\\')[0]}\n                </text>\n            </>\n        );\n    },\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst OSIText = (props: { osiInfos: InterchangeInfo[] }) => {\n    // get the all names from the out of station changes\n    const lineNames = props.osiInfos.map(info => info[4]).join('，');\n    return React.useMemo(\n        () => (\n            <g textAnchor=\"middle\" fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {`换乘${lineNames}`}\n                </text>\n                <text className=\"rmg-name__zh\" dy={5}>\n                    仅限公共交通卡\n                </text>\n                <text className=\"rmg-name__en\" dy={12.5} fontSize=\"75%\">\n                    Only for Public Transportation Card\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [lineNames.toString()]\n    );\n};\n\nconst OSysIText = (props: { osysiInfos: InterchangeInfo[], direction: 'l' | 'r' }) => {\n    // get the all names from out of system transfers\n    const lineNames = props.osysiInfos.map(info => info[4]).join('，');\n    const lineNamesEn = props.osysiInfos.map(info => info[5]).join(', ');\n\n    return React.useMemo(\n        () => (\n            <g textAnchor={props.direction === 'l' ? 'start' : 'end'} fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={3}>\n                    转乘{lineNames}\n                </text>\n                <text className=\"rmg-name__en\" dy={10} fontSize=\"75%\">\n                    To {lineNamesEn}\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.osysiInfos.toString(), props.direction]\n    );\n};\n","import React from 'react';\nimport { adjacencyList, getXShareMTR, criticalPathMethod, drawLine, getStnState } from '../methods/share';\nimport StationSHMetro from './station/station-shmetro';\nimport { Services } from '../../../constants/constants';\nimport { useAppSelector } from '../../../redux';\n\ninterface servicesPath {\n    main: string[];\n    pass: string[];\n    service: Services;\n}\n\nconst MainSHMetro = () => {\n    const { routes, branches, depsStr: deps } = useAppSelector(store => store.helper);\n    const param = useAppSelector(store => store.param);\n\n    const adjMat = adjacencyList(\n        param.stn_list,\n        () => 0,\n        () => 0\n    );\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const xShares = React.useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShareMTR(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n    const lineXs: [number, number] = [\n        (param.svgWidth.railmap * param.padding) / 100,\n        param.svgWidth.railmap * (1 - param.padding / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = React.useMemo(\n        () => {\n            console.log('computing y shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: branches[0].includes(cur) ? 0 : 3 }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: -yShares[cur] * param.branch_spacing }),\n        {} as typeof yShares\n    );\n\n    const stnStates = React.useMemo(\n        () => getStnState(param.current_stn_idx, routes, param.direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.current_stn_idx, param.direction, routes.toString()]\n    );\n\n    const services = Object.values(Services);\n    const servicesLevel = Object.values(param.stn_list)\n        .map(stationInfo => stationInfo.services)\n        .flat() // all services\n        .reduce(\n            (acc, cur) => {\n                acc[services.indexOf(cur)] = true;\n                return acc;\n            },\n            [false, false, false] as [boolean, boolean, boolean]\n        ) // set the flag in order\n        .map((bool, i) => [services[i], bool] as [Services, boolean]) // zip\n        .filter(s => s[1]) // get the existing service\n        .map(s => s[0]); // maintain the services' order\n\n    const linePaths = drawLine(branches, stnStates);\n\n    // paths = {'local':{'main':..., 'pass':...}, 'express':...}\n    // const paths = servicesLevel.reduce((allServicesPath, services) => ({\n    //         ...allServicesPath,\n    //         [services]: (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n    //             (acc, cur) => ({\n    //                 ...acc,\n    //                 [cur]: linePaths[cur].map(stns => _linePath(stns, cur, xs, ys, param.direction, services)).filter(path => path !== ''),\n    //             }),\n    //             {} as { [key in keyof ReturnType<typeof drawLine>]: string[] })\n    //     }), {} as {[services in Services]: { main: string[]; pass: string[] }}\n    // );\n\n    // paths = [{'main':..., 'pass':..., 'service':'local'}, ...}]\n    const paths = servicesLevel.map(services =>\n        (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n            (acc, cur) => ({\n                ...acc,\n                [cur]: linePaths[cur]\n                    .map(stns => _linePath(stns, cur, xs, ys, param.direction, services, servicesLevel.length))\n                    .filter(path => path !== ''),\n                service: services,\n            }),\n            {} as servicesPath\n        )\n    );\n\n    return (\n        <g id=\"main\" transform={`translate(0,${param.svg_height - 63})`}>\n            <Line paths={paths} direction={param.direction} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} />\n            <ServicesElements\n                servicesLevel={servicesLevel}\n                dy={-param.svg_height + 100}\n                direction={param.direction}\n                lineXs={lineXs}\n            />\n            <DirectionElements />\n        </g>\n    );\n};\n\nexport default MainSHMetro;\n\nconst Line = (props: { paths: servicesPath[]; direction: 'l' | 'r' }) => {\n    return (\n        <>\n            {props.paths.map((servicePath, i) => (\n                <g key={`servicePath${i}`} transform={`translate(0,${i * 25})`}>\n                    <g>\n                        {servicePath.pass.map((path, j) => (\n                            <path\n                                key={j}\n                                stroke=\"gray\"\n                                strokeWidth={12}\n                                fill=\"none\"\n                                d={path}\n                                markerStart={props.direction === 'l' ? 'url(#arrow_gray)' : undefined}\n                                markerEnd={props.direction === 'r' ? 'url(#arrow_gray)' : undefined}\n                                strokeLinejoin=\"round\"\n                            />\n                        ))}\n                    </g>\n                    <g>\n                        {servicePath.main.map((path, j) => (\n                            <path\n                                key={j}\n                                stroke=\"var(--rmg-theme-colour)\"\n                                strokeWidth={12}\n                                fill=\"none\"\n                                d={path}\n                                markerStart={props.direction === 'l' ? 'url(#arrow_theme_left)' : undefined}\n                                markerEnd={props.direction === 'r' ? 'url(#arrow_theme_right)' : undefined}\n                                strokeLinejoin=\"round\"\n                                filter={i === 2 ? 'url(#contrast-direct)' : i === 1 ? 'url(#contrast-express)' : ''}\n                            />\n                        ))}\n                    </g>\n                </g>\n            ))}\n        </>\n    );\n};\n\nconst _linePath = (\n    stnIds: string[],\n    type: 'main' | 'pass',\n    xs: { [stnId: string]: number },\n    ys: { [stnId: string]: number },\n    direction: 'l' | 'r',\n    services: Services,\n    servicesMax: number,\n    e: number = 30 // extra short line on either end, will be 0 in `indoor`\n) => {\n    var [prevY, prevX] = [] as number[];\n    var path: { [key: string]: number[] } = {};\n\n    const servicesDelta = {\n        local: 0,\n        express: 20,\n        direct: 40,\n    }[services]; // Todo: enum Services could be a better idea?\n    const servicesPassDelta = servicesMax > 1 ? 50 : 0;\n\n    stnIds.forEach(stnId => {\n        var x = xs[stnId];\n        var y = ys[stnId];\n        if (!prevY && prevY !== 0) {\n            [prevX, prevY] = [x, y];\n            path['start'] = [x, y];\n            return;\n        }\n        if (y === 0) {\n            // merge back to main line\n            if (y !== prevY) {\n                path['bifurcate'] = [prevX, prevY];\n            }\n        } else {\n            // on the branch line\n            if (y !== prevY) {\n                path['bifurcate'] = [x, y];\n            }\n        }\n        path['end'] = [x, y];\n        [prevX, prevY] = [x, y];\n    });\n\n    // generate path\n    if (!path.hasOwnProperty('start')) {\n        // no line generated\n        // keys in path: none\n        return '';\n    } else if (!path.hasOwnProperty('end')) {\n        // little line (only beyond terminal station)\n        // keys in path: start\n        let [x, y] = path['start'];\n        if (type === 'main') {\n            // current at terminal(end) station, draw the litte main line\n            if (direction === 'l') {\n                return `M ${x - e - servicesDelta},${y} H ${x}`;\n            } else {\n                return `M ${x},${y} H ${x + e + servicesDelta}`;\n            }\n        } else {\n            // type === 'pass'\n            // current at terminal(start) station, draw the litte pass line\n            if (direction === 'l') {\n                return `M ${x},${y} L ${x + e + servicesPassDelta},${y}`;\n            } else {\n                return `M ${x - e - servicesPassDelta},${y} L ${x},${y}`;\n            }\n        }\n    } else if (!path.hasOwnProperty('bifurcate')) {\n        // general main line\n        // keys in path: start, end\n        let [x, y] = path['start'],\n            h = path['end'][0];\n        if (type === 'main') {\n            if (direction === 'l') {\n                return `M ${x - e - servicesDelta},${y} H ${h}`;\n            } else {\n                return `M ${x},${y} H ${h + e + servicesDelta}`;\n            }\n        } else {\n            // type === 'pass'\n            if (direction === 'l') {\n                return `M ${x - e},${y} H ${h + e + servicesPassDelta}`;\n            } else {\n                return `M ${x - e - servicesPassDelta},${y} H ${h + e}`;\n            }\n        }\n    } else {\n        // main line bifurcate here to become the branch line\n        // and path return here are only branch line\n        // keys in path: start, bifurcate, end\n\n        // Todo: disable lower branch\n        let [x, y] = path['start'];\n        // let xb = path['bifurcate'][0];\n        let [xm, ym] = path['end'];\n        if (type === 'main') {\n            if (direction === 'l') {\n                if (ym > y) {\n                    // main line, left direction, center to upper\n                    return `M ${x - e},${y} H ${xm} V ${ym}`;\n                } else {\n                    // main line, left direction, upper to center\n                    return `M ${x},${y} V ${ym} H ${xm}`; // wrong marker\n                }\n            } else {\n                if (ym > y) {\n                    // main line, right direction, upper to center\n                    return `M ${x},${y} H ${xm} V ${ym}`; // wrong marker\n                } else {\n                    // main line, right direction, center to upper\n                    return `M ${x},${y} V ${ym} H ${xm + e}`;\n                }\n            }\n        } else {\n            // type === 'pass'\n            if (direction === 'l') {\n                if (ym > y) {\n                    // pass line, left direction, center to upper\n                    return `M ${x - e},${y} H ${xm} V ${ym}`;\n                } else {\n                    // pass line, left direction, upper to center\n                    return `M ${x},${y} V ${ym} H ${xm + e}`;\n                }\n            } else {\n                if (ym > y) {\n                    // pass line, right direction, upper to center\n                    return `M ${x - e},${y} H ${xm} V ${ym}`;\n                } else {\n                    // pass line, right direction, center to upper\n                    return `M ${x},${y} V ${ym} H ${xm + e}`;\n                }\n            }\n        }\n    }\n};\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const param = useAppSelector(store => store.param);\n\n    return (\n        <g>\n            {Object.keys(param.stn_list)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (\n                    <g key={stnId} transform={`translate(${props.xs[stnId]},${props.ys[stnId]})`}>\n                        <StationSHMetro stnId={stnId} stnState={props.stnStates[stnId]} />\n                    </g>\n                ))}\n        </g>\n    );\n};\n\nconst ServicesElements = (props: { servicesLevel: Services[]; direction: 'l' | 'r'; dy: number; lineXs: number[] }) => {\n    const param = useAppSelector(store => store.param);\n\n    if (props.servicesLevel.length === 1) return <></>;\n\n    const servicesLevel = props.servicesLevel.map(\n        service =>\n            ({\n                local: '普通车',\n                express: '大站车',\n                direct: '直达车',\n            }[service])\n    );\n\n    // let dx = props.direction === 'r' ? 5 : param.svgWidth.railmap - 55;\n    const labelX = props.direction === 'r' ? props.lineXs[0] - 42 : props.lineXs[1] + 42;\n\n    let dx_hint = props.servicesLevel.length === 2 ? 350 : 500;\n\n    return (\n        <g>\n            {servicesLevel.map((service, i) => (\n                <g key={service} transform={`translate(${labelX},${i * 25})`}>\n                    <rect x={-27.5} height={10} width={55} fill={'white'} stroke={'black'} y={-5}></rect>\n                    <text className=\"rmg-name__zh\" fontSize={9} y={3} textAnchor=\"middle\">{`${service}运行线`}</text>\n                </g>\n            ))}\n            <g transform={`translate(${props.direction === 'r' ? 30 : param.svgWidth.railmap - dx_hint},${props.dy})`}>\n                <text className=\"rmg-name__zh\">图例：</text>\n                {servicesLevel.map((serviceLevel, i) => (\n                    <g key={`serviceLevel${i}`} transform={`translate(${i * 150 + 50},0)`}>\n                        <line\n                            x1=\"0\"\n                            x2=\"35\"\n                            y1=\"-5\"\n                            y2=\"-5\"\n                            stroke=\"var(--rmg-theme-colour)\"\n                            strokeWidth=\"12\"\n                            filter={i === 2 ? 'url(#contrast-direct)' : i === 1 ? 'url(#contrast-express)' : ''}\n                        />\n                        <use x=\"17.5\" y=\"-5\" xlinkHref=\"#stn_sh\" fill=\"var(--rmg-theme-colour)\" />\n                        <text x=\"40\" className=\"rmg-name__zh\">{`${serviceLevel}停靠站`}</text>\n                    </g>\n                ))}\n            </g>\n        </g>\n    );\n};\n\nconst DirectionElements = () => {\n    const param = useAppSelector(store => store.param);\n\n    return React.useMemo(\n        () => (\n            <g\n                transform={`translate(${param.direction === 'l' ? 50 : param.svgWidth.railmap - 150},${\n                    -param.svg_height + 100\n                })`}\n            >\n                <text className=\"rmg-name__zh\">列车前进方向</text>\n                <path\n                    d=\"M60,60L0,0L60-60H100L55-15H160V15H55L100,60z\"\n                    fill=\"var(--rmg-theme-colour)\"\n                    transform={`translate(${param.direction === 'l' ? -30 : 125},-5)rotate(${\n                        param.direction === 'l' ? 0 : 180\n                    })scale(0.15)`}\n                />\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.direction, param.svgWidth.railmap, param.svg_height]\n    );\n};\n","import * as React from 'react';\nimport MainSHMetro from './main/main-shmetro';\n\nconst RailMapSHMetro = React.memo(() => (\n    <>\n        <DefsSHMetro />\n\n        <MainSHMetro />\n    </>\n));\n\nexport default RailMapSHMetro;\n\nconst DefsSHMetro = React.memo(() => (\n    <defs>\n        <circle id=\"stn_sh\" fill=\"#fff\" strokeWidth={2} r={5} />\n        <path id=\"int2_sh\" fill=\"#fff\" strokeWidth={2} d=\"M -5,0 a 5,5 0 1 1 10,0 V10 a 5,5 0 1 1 -10,0Z\" />\n        <path id=\"express_sh\" fill=\"#fff\" strokeWidth={2} d=\"M -5,0 a 5,5 0 1 1 10,0 V25 a 5,5 0 1 1 -10,0Z\" />\n        <path id=\"direct_sh\" fill=\"#fff\" strokeWidth={2} d=\"M -5,0 a 5,5 0 1 1 10,0 V50 a 5,5 0 1 1 -10,0Z\" />\n        <rect id=\"stn_sh_2020\" stroke=\"none\" height={24} width={10} y={-18} />\n        <rect id=\"stn_sh_2020_express\" stroke=\"none\" height={49} width={10} y={-18} />\n        <rect id=\"stn_sh_2020_direct\" stroke=\"none\" height={74} width={10} y={-18} />\n\n        <rect id=\"intbox_number\" height={22} width={20} y={-11} />\n\n        <g id=\"intbox_maglev\" transform=\"translate(-25,0)\">\n            <rect id=\"maglev_5\" height={144} width={130} y=\"40\" x=\"30\" strokeWidth={10} />\n            <path\n                id=\"maglev_3\"\n                fill=\"white\"\n                d=\"m90,55a40,5 0 0 0 -40,3a5,5 0 0 0 -5,5a5,60 0 0 0 -3,60a5,5 0 0 0 5,5l96,0a5,5 0 0 0 5,-5a5,60 0 0 0 -3,-60a5,5 0 0 0 -5,-5a40,5 0 0 0 -40,-3l-5,-10l-5,10\"\n            />\n            <path\n                id=\"maglev_4\"\n                fill=\"white\"\n                d=\"m90,140l-40,0a10,5 0 0 1 -10,-5l0,25a10,15 0 0 0 10,15l15,0l0,-10l-15,0l0,-15l90,0l0,15l-15,0l0,10l15,0a10,15 0 0 0 10,-15l0,-25a10,5 0 0 1 -10,5l-50,0\"\n            />\n            <rect id=\"maglev_1\" height=\"25\" width=\"40\" y=\"80\" x=\"50\" />\n            <rect id=\"maglev_2\" height=\"25\" width=\"40\" y=\"80\" x=\"100\" />\n        </g>\n\n        {/* An extension of the line/path. Remember to minus the stroke-width.  */}\n        <marker id=\"arrow_gray\" viewBox=\"-1.5 0 3 1.5\" refY={0.5}>\n            <path d=\"M0,0L1,1H-1z\" fill=\"gray\" />\n        </marker>\n        <marker id=\"arrow_theme_left\" refX={1} refY={0.5}>\n            <path d=\"M1,0L0,1H1z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n        <marker id=\"arrow_theme_right\" refY={0.5}>\n            <path d=\"M0,0L1,1H-1z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n\n        {/* Contrast filters for lines */}\n        <filter id=\"contrast-direct\" filterUnits=\"userSpaceOnUse\">\n            <feComponentTransfer>\n                <feFuncR type=\"linear\" slope={0.5} intercept={0.25} />\n                <feFuncG type=\"linear\" slope={0.5} intercept={0.25} />\n                <feFuncB type=\"linear\" slope={0.5} intercept={0.25} />\n            </feComponentTransfer>\n        </filter>\n        <filter id=\"contrast-express\" filterUnits=\"userSpaceOnUse\">\n            <feComponentTransfer>\n                <feFuncR type=\"linear\" slope={0.75} intercept={0.125} />\n                <feFuncG type=\"linear\" slope={0.75} intercept={0.125} />\n                <feFuncB type=\"linear\" slope={0.75} intercept={0.125} />\n            </feComponentTransfer>\n        </filter>\n    </defs>\n));\n","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { StationDict } from './constants/constants';\n\n/**\n * Vertical position (in shares) of station icon if using MTR style (for consistency of method `RMGLine.newStnPossibleLoc()`).\n */\nexport const getYShareMTR = (stnId: string, stnList: StationDict): -1 | 0 | 1 => {\n    if (\n        ['linestart', 'lineend'].includes(stnId) ||\n        stnList[stnId].parents.length > 1 ||\n        stnList[stnId].children.length > 1\n    ) {\n        return 0;\n    }\n    var stnPred = stnList[stnId].parents[0];\n    if (stnPred) {\n        // parent exist\n        if (stnList[stnPred].children.length === 1) {\n            // no sibling, then y same as parent\n            return getYShareMTR(stnPred, stnList);\n        } else {\n            // sibling exists, then y depends on its idx of being children\n            return stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n        }\n    } else {\n        // no parent, must be linestart\n        return 0;\n    }\n};\n","import * as Global from '../../../methods';\nimport { RMGParam, ShortDirection, StationDict, StationInfo } from '../../../constants/constants';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (\n                          direction === ShortDirection.right\n                              ? _isSuccessor(currentId, cur, routes)\n                              : _isPredecessor(currentId, cur, routes)\n                      )\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as StationDict;\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number\n    ) {\n        var [prevId, prevY, prevX] = [] as unknown as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 2;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + e}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - e}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number = 9.68\n    ) {\n        let linePaths = { main: [] as string[], pass: [] as string[] };\n        branches.forEach((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branches: string[][], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    let linePaths = { main: [] as string[][], pass: [] as string[][] };\n    branches.forEach(branch => {\n        branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n        var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n        var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n        if (lineMainStns.length === 1) {\n            linePassStns = branch;\n        }\n\n        if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n            // if two set disjoint\n            if (linePassStns[0] === branch[0]) {\n                // -1 -1 1 1\n                linePassStns.push(lineMainStns[0]);\n            } else if (\n                lineMainStns[0] === branch[0] &&\n                lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                linePassStns.length\n            ) {\n                linePassStns = branch;\n                lineMainStns = [];\n            } else {\n                // 1 1 -1 -1\n                linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n            }\n        }\n\n        linePaths.main.push(lineMainStns);\n        linePaths.pass.push(linePassStns);\n    });\n\n    return linePaths;\n};\n"],"sourceRoot":""}