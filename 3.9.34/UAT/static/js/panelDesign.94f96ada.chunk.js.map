{"version":3,"sources":["panels/design/list-common.tsx","panels/design/panel.tsx","panels/design/index.ts","constants/colours lazy /^/.//.*$/ groupOptions: {} namespace object","panels/colour-diag/theme-items.tsx","panels/colour-diag/dialog.tsx","panels/colour-diag/index.ts"],"names":["useStyles","makeStyles","theme","createStyles","dividerVertical","margin","spacing","nestedList","paddingLeft","DesignList","t","useTranslation","dispatch","useAppDispatch","rmgStyle","useAppSelector","store","app","lineName","param","line_name","React","useState","isCDiagOpen","setIsCDiagOpen","button","onClick","primary","secondary","style","backgroundColor","color","padding","Object","values","join","open","onUpdate","key","value","setLineName","setTheme","onClose","RmgStyle","SHMetro","DirectionLi","classes","direction","useMemo","orientation","flexItem","className","variant","setDirection","ShortDirection","left","right","PlatformNumLi","platform","platform_num","onChange","target","setPlatform","PlatformNumSHMetroLi","checked","_","in","unmountOnExit","component","disablePadding","placeholder","DesignMTR","lazy","DesignGZMTR","DesignShmetro","DesignPanel","container","justify","alignItems","item","xs","sm","md","lg","MTR","Suspense","fallback","GZMTR","Panel","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","module","exports","cityItem","display","flexDirection","menuItemSpan","borderRadius","height","width","minWidth","marginRight","inputColour","position","top","buttonContainer","flexShrink","PalettePanel","props","i18n","lineList","list","setList","listPromise","default","useEffect","a","data","CityCode","Other","colour","fg","MonoColour","white","toString","useLineList","length","filter","l","newTheme","event","slice","select","line","disabled","getTransText2","name","languages","CustomPanel","hexTemp","setHexTemp","type","rgb","opacity","htmlFor","title","borderColor","error","match","hex","val","idx","toUpperCase","native","label","CitySelectItem","items","cityList","c","CountryFlag","country","useEmojiStyles","img","codePoints","split","char","codePointAt","concat","LanguageCode","ChineseCN","ChineseSimp","includes","language","navigator","indexOf","src","process","alt","String","fromCodePoint","cp","parseInt","contentWrapper","overflow","paddingTop","paddingBottom","paddingRight","breakpoints","down","contentLeft","maxWidth","contentControl","flexGrow","paperRoot","listItemPaper","justifyContent","iconRoot","palette","action","active","inputBaseRoot","inputBaseInputZH","textAlign","fontSize","inputBaseInputEN","chipWrapper","overflowX","chipRoot","lineHeight","chipLabel","Dialog2","LineNameInput","nameChange","index","newName","root","input","autoFocus","RecentChipSet","stationList","stn_list","allInfos","Set","reduce","acc","info","transfer","JSON","stringify","reverse","chips","x","i","parse","txt","secondaryTypographyProps","ColourControl","tabIndex","setTabIndex","tabNav","indicatorColor","textColor","scrollButtons","panel","ColourDialog"],"mappings":"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CA,GAED,aAAc,CACb,GACA,GAED,gBAAiB,CAChB,GACA,GAED,WAAY,CACX,GACA,GAED,cAAe,CACd,GACA,GAED,cAAe,CACd,GACA,IAED,iBAAkB,CACjB,GACA,IAED,WAAY,CACX,GACA,IAED,cAAe,CACd,GACA,IAED,UAAW,CACV,GACA,IAED,aAAc,CACb,GACA,IAED,WAAY,CACX,GACA,IAED,cAAe,CACd,GACA,IAED,YAAa,CACZ,GACA,IAED,eAAgB,CACf,GACA,IAED,cAAe,CACd,GACA,IAED,iBAAkB,CACjB,GACA,IAED,UAAW,CACV,GACA,IAED,aAAc,CACb,GACA,IAED,SAAU,CACT,GACA,IAED,YAAa,CACZ,GACA,IAED,UAAW,CACV,GACA,IAED,aAAc,CACb,GACA,IAED,UAAW,CACV,GACA,IAED,aAAc,CACb,GACA,IAED,YAAa,CACZ,GACA,IAED,eAAgB,CACf,GACA,IAED,iBAAkB,CACjB,GACA,IAED,oBAAqB,CACpB,GACA,IAED,aAAc,CACb,GACA,IAED,gBAAiB,CAChB,GACA,IAED,UAAW,CACV,GACA,IAED,aAAc,CACb,GACA,IAED,aAAc,CACb,GACA,IAED,gBAAiB,CAChB,GACA,IAED,aAAc,CACb,GACA,IAED,gBAAiB,CAChB,GACA,IAED,cAAe,CACd,GACA,IAED,iBAAkB,CACjB,GACA,IAED,cAAe,CACd,GACA,IAED,iBAAkB,CACjB,GACA,IAED,WAAY,CACX,GACA,IAED,cAAe,CACd,GACA,IAED,YAAa,CACZ,GACA,IAED,eAAgB,CACf,GACA,IAED,UAAW,CACV,GACA,IAED,aAAc,CACb,GACA,IAED,YAAa,CACZ,GACA,IAED,eAAgB,CACf,GACA,IAED,gBAAiB,CAChB,GACA,IAED,mBAAoB,CACnB,GACA,IAED,SAAU,CACT,GACA,IAED,YAAa,CACZ,GACA,KAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAA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","file":"static/js/panelDesign.94f96ada.chunk.js","sourcesContent":["import React, { ChangeEvent, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    Collapse,\n    createStyles,\n    Divider,\n    Icon,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    makeStyles,\n    Switch,\n    TextField,\n} from '@material-ui/core';\nimport ColourDialog from '../colour-diag';\nimport { useAppDispatch, useAppSelector } from '../../redux';\nimport { Name, RmgStyle, ShortDirection } from '../../constants/constants';\nimport { setDirection, setLineName, setPlatform, setTheme } from '../../redux/param/action';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        dividerVertical: {\n            margin: theme.spacing(0, 2),\n        },\n        nestedList: {\n            paddingLeft: theme.spacing(5),\n        },\n    })\n);\n\nconst DesignList = () => {\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const rmgStyle = useAppSelector(store => store.app.rmgStyle);\n    const lineName = useAppSelector(store => store.param.line_name);\n    const theme = useAppSelector(store => store.param.theme);\n\n    const [isCDiagOpen, setIsCDiagOpen] = React.useState(false);\n\n    const nameDialogUpdate = (key: string, value: any) => {\n        if (key === 'name') {\n            dispatch(setLineName(Object.values(value) as Name));\n        }\n        if (key === 'theme') {\n            dispatch(setTheme(value));\n        }\n    };\n\n    return (\n        <>\n            <ListItem button onClick={() => setIsCDiagOpen(true)}>\n                <ListItemIcon>\n                    <Icon>color_lens</Icon>\n                </ListItemIcon>\n                <ListItemText\n                    primary={t('design.theme')}\n                    secondary={\n                        <span\n                            style={{\n                                backgroundColor: theme[2],\n                                color: theme[3],\n                                padding: '.1rem .3rem',\n                            }}\n                        >\n                            {Object.values(lineName).join()}\n                        </span>\n                    }\n                />\n                <Icon color=\"action\">arrow_right</Icon>\n            </ListItem>\n            <ColourDialog\n                open={isCDiagOpen}\n                theme={theme}\n                lineName={lineName}\n                onUpdate={nameDialogUpdate}\n                onClose={() => setIsCDiagOpen(false)}\n            />\n            <Divider />\n            <DirectionLi />\n            <Divider />\n            {rmgStyle === RmgStyle.SHMetro ? <PlatformNumSHMetroLi /> : <PlatformNumLi />}\n        </>\n    );\n};\n\nexport default DesignList;\n\nconst DirectionLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const direction = useAppSelector(store => store.param.direction);\n\n    return React.useMemo(() => {\n        const handleDirectionChange = () => {\n            dispatch(setDirection(direction === ShortDirection.left ? ShortDirection.right : ShortDirection.left));\n        };\n\n        return (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>directions</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('design.direction.button')} secondary={t('design.direction.' + direction)} />\n                <Divider orientation=\"vertical\" flexItem className={classes.dividerVertical} />\n                <Button variant=\"outlined\" color=\"primary\" onClick={handleDirectionChange}>\n                    {t('design.direction.switch')}\n                </Button>\n            </ListItem>\n        );\n    }, [classes.dividerVertical, direction, t, dispatch]);\n};\n\nconst PlatformNumLi = () => {\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const platform = useAppSelector(store => store.param.platform_num);\n\n    return React.useMemo(() => {\n        const handleChange = ({ target: { value } }: ChangeEvent<HTMLInputElement>) => {\n            dispatch(setPlatform(value));\n        };\n\n        return (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>looks_one</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('design.platform')} />\n                <TextField value={platform} onChange={handleChange} />\n            </ListItem>\n        );\n    }, [platform, dispatch, t]);\n};\n\nconst PlatformNumSHMetroLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const platform = useAppSelector(store => store.param.platform_num);\n\n    return useMemo(() => {\n        const handleSwitch = (_: React.ChangeEvent<HTMLInputElement>, checked: boolean) => {\n            if (checked) {\n                dispatch(setPlatform(''));\n            } else {\n                dispatch(setPlatform(false));\n            }\n        };\n\n        const handleChange = ({ target: { value } }: ChangeEvent<HTMLInputElement>) => {\n            dispatch(setPlatform(value));\n        };\n\n        return (\n            <>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>looks_one</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('design.platform')} />\n                    <ListItemSecondaryAction>\n                        <Switch color=\"primary\" checked={platform !== false} onChange={handleSwitch} />\n                    </ListItemSecondaryAction>\n                </ListItem>\n                <Collapse in={platform !== false} unmountOnExit>\n                    <List component=\"div\" disablePadding className={classes.nestedList}>\n                        <ListItem>\n                            <TextField placeholder={t('design.platform')} value={platform} onChange={handleChange} />\n                        </ListItem>\n                    </List>\n                </Collapse>\n            </>\n        );\n    }, [platform, classes.nestedList, t, dispatch]);\n};\n","import React from 'react';\nimport { Divider, Grid, LinearProgress, List, Paper } from '@material-ui/core';\nimport DesignCommon from './list-common';\nimport { useAppSelector } from '../../redux';\nimport { RmgStyle } from '../../constants/constants';\n\nconst DesignMTR = React.lazy(() => import(/* webpackChunkName: \"panelDesignMTR\" */ './list-mtr'));\nconst DesignGZMTR = React.lazy(() => import(/* webpackChunkName: \"panelDesignGZMTR\" */ './list-gzmtr'));\nconst DesignShmetro = React.lazy(() => import(/* webpackChunkName: \"panelDesignShmetro\" */ './list-shmetro'));\n\nconst DesignPanel = () => {\n    const rmgStyle = useAppSelector(store => store.app.rmgStyle);\n    return (\n        <Grid container spacing={3} justify=\"center\" alignItems=\"flex-start\">\n            <Grid item xs={12} sm={10} md={7} lg={5}>\n                <Paper>\n                    <List component=\"div\" disablePadding>\n                        <DesignCommon />\n                        {rmgStyle === RmgStyle.MTR && (\n                            <React.Suspense fallback={<LinearProgress />}>\n                                <Divider />\n                                <DesignMTR />\n                            </React.Suspense>\n                        )}\n                        {rmgStyle === RmgStyle.GZMTR && (\n                            <React.Suspense fallback={<LinearProgress />}>\n                                <Divider />\n                                <DesignGZMTR />\n                            </React.Suspense>\n                        )}\n                        {rmgStyle === RmgStyle.SHMetro && (\n                            <React.Suspense fallback={<LinearProgress />}>\n                                <Divider />\n                                <DesignShmetro />\n                            </React.Suspense>\n                        )}\n                    </List>\n                </Paper>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default DesignPanel;\n","import Panel from './panel';\n\nexport default Panel;\n","var map = {\n\t\"./README.md\": [\n\t\t84,\n\t\t85\n\t],\n\t\"./barcelona\": [\n\t\t39,\n\t\t1\n\t],\n\t\"./barcelona.ts\": [\n\t\t39,\n\t\t1\n\t],\n\t\"./beijing\": [\n\t\t40,\n\t\t12\n\t],\n\t\"./beijing.ts\": [\n\t\t40,\n\t\t12\n\t],\n\t\"./changsha\": [\n\t\t41,\n\t\t23\n\t],\n\t\"./changsha.ts\": [\n\t\t41,\n\t\t23\n\t],\n\t\"./chengdu\": [\n\t\t42,\n\t\t34\n\t],\n\t\"./chengdu.ts\": [\n\t\t42,\n\t\t34\n\t],\n\t\"./chongqing\": [\n\t\t43,\n\t\t37\n\t],\n\t\"./chongqing.ts\": [\n\t\t43,\n\t\t37\n\t],\n\t\"./dongguan\": [\n\t\t44,\n\t\t2\n\t],\n\t\"./dongguan.ts\": [\n\t\t44,\n\t\t2\n\t],\n\t\"./edinburgh\": [\n\t\t45,\n\t\t3\n\t],\n\t\"./edinburgh.ts\": [\n\t\t45,\n\t\t3\n\t],\n\t\"./foshan\": [\n\t\t46,\n\t\t4\n\t],\n\t\"./foshan.ts\": [\n\t\t46,\n\t\t4\n\t],\n\t\"./glasgow\": [\n\t\t47,\n\t\t5\n\t],\n\t\"./glasgow.ts\": [\n\t\t47,\n\t\t5\n\t],\n\t\"./guangzhou\": [\n\t\t48,\n\t\t6\n\t],\n\t\"./guangzhou.ts\": [\n\t\t48,\n\t\t6\n\t],\n\t\"./hangzhou\": [\n\t\t49,\n\t\t7\n\t],\n\t\"./hangzhou.ts\": [\n\t\t49,\n\t\t7\n\t],\n\t\"./hongkong\": [\n\t\t50,\n\t\t8\n\t],\n\t\"./hongkong.ts\": [\n\t\t50,\n\t\t8\n\t],\n\t\"./kansai\": [\n\t\t51,\n\t\t9\n\t],\n\t\"./kansai.ts\": [\n\t\t51,\n\t\t9\n\t],\n\t\"./kaohsiung\": [\n\t\t52,\n\t\t10\n\t],\n\t\"./kaohsiung.ts\": [\n\t\t52,\n\t\t10\n\t],\n\t\"./london\": [\n\t\t53,\n\t\t11\n\t],\n\t\"./london.ts\": [\n\t\t53,\n\t\t11\n\t],\n\t\"./macao\": [\n\t\t54,\n\t\t13\n\t],\n\t\"./macao.ts\": [\n\t\t54,\n\t\t13\n\t],\n\t\"./madrid\": [\n\t\t55,\n\t\t14\n\t],\n\t\"./madrid.ts\": [\n\t\t55,\n\t\t14\n\t],\n\t\"./nanjing\": [\n\t\t56,\n\t\t15\n\t],\n\t\"./nanjing.ts\": [\n\t\t56,\n\t\t15\n\t],\n\t\"./newtaipei\": [\n\t\t57,\n\t\t16\n\t],\n\t\"./newtaipei.ts\": [\n\t\t57,\n\t\t16\n\t],\n\t\"./osaka\": [\n\t\t58,\n\t\t17\n\t],\n\t\"./osaka.ts\": [\n\t\t58,\n\t\t17\n\t],\n\t\"./oslo\": [\n\t\t59,\n\t\t18\n\t],\n\t\"./oslo.ts\": [\n\t\t59,\n\t\t18\n\t],\n\t\"./other\": [\n\t\t60,\n\t\t19\n\t],\n\t\"./other.ts\": [\n\t\t60,\n\t\t19\n\t],\n\t\"./paris\": [\n\t\t61,\n\t\t20\n\t],\n\t\"./paris.ts\": [\n\t\t61,\n\t\t20\n\t],\n\t\"./qingdao\": [\n\t\t62,\n\t\t21\n\t],\n\t\"./qingdao.ts\": [\n\t\t62,\n\t\t21\n\t],\n\t\"./sanfrancisco\": [\n\t\t63,\n\t\t22\n\t],\n\t\"./sanfrancisco.ts\": [\n\t\t63,\n\t\t22\n\t],\n\t\"./saopaulo\": [\n\t\t64,\n\t\t24\n\t],\n\t\"./saopaulo.ts\": [\n\t\t64,\n\t\t24\n\t],\n\t\"./seoul\": [\n\t\t65,\n\t\t25\n\t],\n\t\"./seoul.ts\": [\n\t\t65,\n\t\t25\n\t],\n\t\"./shanghai\": [\n\t\t66,\n\t\t26\n\t],\n\t\"./shanghai.ts\": [\n\t\t66,\n\t\t26\n\t],\n\t\"./shenzhen\": [\n\t\t67,\n\t\t27\n\t],\n\t\"./shenzhen.ts\": [\n\t\t67,\n\t\t27\n\t],\n\t\"./singapore\": [\n\t\t68,\n\t\t28\n\t],\n\t\"./singapore.ts\": [\n\t\t68,\n\t\t28\n\t],\n\t\"./stockholm\": [\n\t\t69,\n\t\t29\n\t],\n\t\"./stockholm.ts\": [\n\t\t69,\n\t\t29\n\t],\n\t\"./taipei\": [\n\t\t70,\n\t\t30\n\t],\n\t\"./taipei.ts\": [\n\t\t70,\n\t\t30\n\t],\n\t\"./tianjin\": [\n\t\t71,\n\t\t31\n\t],\n\t\"./tianjin.ts\": [\n\t\t71,\n\t\t31\n\t],\n\t\"./tokyo\": [\n\t\t72,\n\t\t32\n\t],\n\t\"./tokyo.ts\": [\n\t\t72,\n\t\t32\n\t],\n\t\"./toronto\": [\n\t\t73,\n\t\t33\n\t],\n\t\"./toronto.ts\": [\n\t\t73,\n\t\t33\n\t],\n\t\"./tyneandwear\": [\n\t\t74,\n\t\t35\n\t],\n\t\"./tyneandwear.ts\": [\n\t\t74,\n\t\t35\n\t],\n\t\"./xian\": [\n\t\t75,\n\t\t36\n\t],\n\t\"./xian.ts\": [\n\t\t75,\n\t\t36\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 80;\nmodule.exports = webpackAsyncContext;","import React, { useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    createStyles,\n    Divider,\n    List,\n    ListItem,\n    ListItemText,\n    makeStyles,\n    MenuItem,\n    Select,\n    TextField,\n    Tooltip,\n} from '@material-ui/core';\nimport { getTransText2 } from '../../utils';\nimport { CityCode, cityList } from '../../constants/city-config';\nimport { ColourHex, LanguageCode, MonoColour, PaletteEntry, Theme } from '../../constants/constants';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        cityItem: {\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n        },\n        menuItemSpan: {\n            padding: '0 .3rem',\n        },\n        button: {\n            borderRadius: '50%',\n            height: 24,\n            width: 24,\n            minWidth: 0,\n            marginRight: 8,\n            // border: 'solid',\n            padding: 0,\n        },\n        inputColour: {\n            position: 'absolute',\n            width: 0,\n            height: 0,\n            left: 27,\n            top: 32,\n        },\n        buttonContainer: {\n            display: 'flex',\n            flexShrink: 1,\n        },\n    })\n);\n\nconst useLineList = (theme: Theme) => {\n    const [list, setList] = React.useState([] as PaletteEntry[]);\n\n    const listPromise = theme[0]\n        ? import(/* webpackChunkName: \"colours\" */ `../../constants/colours/${theme[0]}`).then(\n              module => module.default as PaletteEntry[]\n          )\n        : Promise.resolve([] as PaletteEntry[]);\n\n    useEffect(\n        () => {\n            if (typeof theme[0] === 'undefined') {\n                return;\n            }\n            (async () => {\n                const data = await listPromise;\n                setList(\n                    theme[0] === CityCode.Other\n                        ? [{ ...data[0], colour: theme[2], fg: theme[3] || MonoColour.white }]\n                        : data\n                );\n            })();\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [theme.toString()]\n    );\n\n    return list;\n};\n\ninterface ColourDialogProps {\n    theme: Theme;\n    onUpdate: (key: string, value: any) => void;\n}\n\nexport const PalettePanel = (props: ColourDialogProps) => {\n    const { t, i18n } = useTranslation();\n    const classes = useStyles();\n\n    const cityChange = (event: React.ChangeEvent<HTMLInputElement>) =>\n        props.onUpdate('theme', [event.target.value, ...props.theme.slice(1)]);\n\n    // Hook for fetching line list of current city\n    const lineList = useLineList(props.theme);\n\n    // Hook for updating props.theme when lineList changed\n    useEffect(\n        () => {\n            if (lineList.length === 0) return; // initialising, ignore\n            if (lineList.filter(l => l.id === props.theme[1]).length) return; // current city, ignore\n            let { id, colour, fg } = lineList[0];\n            let newTheme = [props.theme[0], id, colour, fg || MonoColour.white];\n            props.onUpdate('theme', newTheme);\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [lineList]\n    );\n\n    const lineChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let line = event.target.value;\n        let { colour, fg } = lineList.filter(l => l.id === line)[0];\n        let newTheme = [props.theme[0], line, colour, fg || MonoColour.white];\n        props.onUpdate('theme', newTheme);\n    };\n\n    return (\n        <List component=\"div\" disablePadding>\n            <CitySelectItem value={props.theme[0]} onChange={cityChange} />\n            <Divider variant=\"middle\" />\n            <ListItem>\n                <ListItemText primary={t('colour.line')} />\n                <TextField\n                    select\n                    style={{ width: 166 }}\n                    onChange={lineChange}\n                    value={props.theme[1]}\n                    disabled={props.theme[0] === 'other'}\n                >\n                    {lineList.map(l => (\n                        <MenuItem key={l.id} value={l.id}>\n                            <span\n                                className={classes.menuItemSpan}\n                                style={{\n                                    backgroundColor: l.colour,\n                                    color: l.fg || MonoColour.white,\n                                }}\n                            >\n                                {getTransText2(l.name, i18n.languages as LanguageCode[])}\n                            </span>\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </ListItem>\n        </List>\n    );\n};\n\nexport const CustomPanel = (props: ColourDialogProps) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const [hexTemp, setHexTemp] = useState(props.theme[2]);\n\n    useEffect(\n        () => setHexTemp(props.theme[2]),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.theme[2]]\n    );\n\n    const colourChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let rgb = event.target.value;\n        // setHexTemp(rgb);\n        props.onUpdate('theme', [CityCode.Other, 'other', rgb, props.theme[3]]);\n    };\n\n    const hexChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let hex = event.target.value;\n        if (hex.match(/^#[0-9a-fA-F]{0,6}$/) === null) return;\n        setHexTemp(hex as ColourHex);\n\n        if (props.theme[0] !== 'other') {\n            if (hex.match(/^#[0-9a-fA-f]{6}$/) !== null) {\n                // if hex valid, modify theme city and props.hex\n                let newTheme = [CityCode.Other, 'other', hex, props.theme[3]];\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (along with selection)\n                // then line will be updated by hook\n            } else {\n                // if hex not valid, modify theme city only\n                let newTheme = [CityCode.Other, 'other', ...props.theme.slice(2)];\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (along with selection)\n                // then line will be updated by hook\n            }\n        } else {\n            if (hex.match(/^#[0-9a-fA-F]{6}$/) !== null) {\n                // if hex valid, modify props.hex\n                let newTheme = props.theme.map((val, idx) => (idx === 2 ? hex : val));\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (actually only hex is changed)\n            } else {\n                // if hex not valid, do nothing\n            }\n        }\n    };\n\n    const fgChange = (event: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n        let newTheme = [CityCode.Other, 'other', props.theme[2], event.target.value];\n        props.onUpdate('theme', newTheme);\n    };\n\n    return (\n        <List component=\"div\" disablePadding>\n            <ListItem>\n                <ListItemText primary={t('colour.colour')} />\n                <div className={classes.buttonContainer}>\n                    <input\n                        type=\"color\"\n                        id=\"input-color\"\n                        value={props.theme[2]}\n                        onChange={colourChange}\n                        className={classes.inputColour}\n                        style={{ opacity: 0 }}\n                    />\n                    <label htmlFor=\"input-color\">\n                        <Tooltip title={t('colour.tooltip')} aria-label=\"colour picker\">\n                            <Button\n                                className={classes.button}\n                                style={{\n                                    backgroundColor: props.theme[2],\n                                    borderColor: props.theme[3] || MonoColour.white,\n                                }}\n                                variant=\"contained\"\n                                component=\"span\"\n                            >\n                                {' '}\n                            </Button>\n                        </Tooltip>\n                    </label>\n                </div>\n                <TextField\n                    error={!hexTemp?.match(/^#[0-9a-fA-F]{6}$/g)}\n                    style={{ width: 85 }}\n                    onChange={hexChange}\n                    value={hexTemp?.toUpperCase()}\n                />\n            </ListItem>\n            <Divider variant=\"middle\" />\n            <ListItem>\n                <ListItemText primary={t('colour.fg')} />\n                <Select\n                    native\n                    style={{ width: 85 }}\n                    label={t('colour.fg')}\n                    onChange={fgChange}\n                    value={props.theme[3] || MonoColour.white}\n                >\n                    <option value=\"#fff\">{t('colour.fgWhite')}</option>\n                    <option value=\"#000\">{t('colour.fgBlack')}</option>\n                </Select>\n            </ListItem>\n        </List>\n    );\n};\n\nconst CitySelectItem = (props: { value: string; onChange: (event: React.ChangeEvent<HTMLInputElement>) => void }) => {\n    const { t, i18n } = useTranslation();\n    const classes = useStyles();\n\n    const items = useMemo(\n        () =>\n            cityList.map(c => (\n                <MenuItem key={c.id} value={c.id}>\n                    <span className={classes.cityItem}>\n                        <CountryFlag code={c.country} />\n                        <span>{getTransText2(c.name, i18n.languages as LanguageCode[])}</span>\n                    </span>\n                </MenuItem>\n            )),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n    return (\n        <ListItem>\n            <ListItemText primary={t('colour.city')} />\n            <TextField select style={{ width: 166 }} value={props.value} onChange={props.onChange}>\n                {items}\n            </TextField>\n        </ListItem>\n    );\n};\n\nconst useEmojiStyles = makeStyles(() =>\n    createStyles({\n        img: {\n            height: 20,\n            marginRight: '0.2rem',\n        },\n    })\n);\n\n/**\n * Convert ISO 3166 alpha-2 country code (followed by BS 6879 UK subdivision code, if applicable) to flag Emoji. For Windows platform, an `img` element with image source from OpenMoji is returned.\n */\nfunction CountryFlag(props: { code: string }) {\n    const { i18n } = useTranslation();\n    const classes = useEmojiStyles();\n\n    let codePoints = [] as string[];\n\n    if (props.code.length === 2) {\n        codePoints = props.code\n            .toUpperCase()\n            .split('')\n            .map(char => ((char.codePointAt(0) || 0) + 127397).toString(16).toUpperCase());\n    } else {\n        codePoints = ['1F3F4'].concat(\n            props.code\n                .toUpperCase()\n                .split('')\n                .map(char => ((char.codePointAt(0) || 0) + 917536).toString(16).toUpperCase()),\n            'E007F'\n        );\n    }\n\n    // special case for simplified Chinese\n    if (\n        [LanguageCode.ChineseCN, LanguageCode.ChineseSimp].includes(i18n.language as LanguageCode) &&\n        props.code === 'TW'\n    )\n        codePoints = ['1F3F4'];\n\n    return navigator.platform.indexOf('Win32') !== -1 || navigator.platform.indexOf('Win64') !== -1 ? (\n        <img\n            src={process.env.PUBLIC_URL + `/images/flags/${codePoints.join('-')}.svg`}\n            className={classes.img}\n            alt={`Flag of ${props.code}`}\n        />\n    ) : (\n        // <img src={process.env.PUBLIC_URL + `/images/flags/${codePoints.join('-')}.svg`} className={classes.img} />\n        <span>{String.fromCodePoint(...codePoints.map(cp => parseInt(cp, 16)))}</span>\n    );\n}\n","import React, { useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    Chip,\n    createStyles,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Divider,\n    Icon,\n    InputBase,\n    List,\n    ListItem,\n    ListItemText,\n    makeStyles,\n    Paper,\n    Tab,\n    Tabs,\n} from '@material-ui/core';\nimport { CustomPanel, PalettePanel } from './theme-items';\nimport { InterchangeInfo, MonoColour, Name, Theme } from '../../constants/constants';\nimport { useAppSelector } from '../../redux';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        contentWrapper: {\n            display: 'flex',\n            overflow: 'hidden',\n            paddingTop: theme.spacing(1),\n            paddingBottom: theme.spacing(1),\n            paddingLeft: theme.spacing(3),\n            paddingRight: theme.spacing(3),\n            [theme.breakpoints.down('xs')]: {\n                flexDirection: 'column',\n            },\n        },\n        contentLeft: {\n            maxWidth: 280,\n        },\n        contentControl: {\n            flexGrow: 0,\n            flexShrink: 0,\n            display: 'flex',\n            flexDirection: 'column',\n            width: 270,\n        },\n\n        paperRoot: {\n            maxWidth: 250,\n        },\n        listItemPaper: {\n            justifyContent: 'center',\n        },\n        iconRoot: {\n            position: 'absolute',\n            color: theme.palette.action.active,\n        },\n        inputBaseRoot: {\n            display: 'block',\n        },\n        inputBaseInputZH: {\n            textAlign: 'center',\n            fontSize: 36,\n            padding: 0,\n            paddingTop: 6,\n            height: 45,\n        },\n        inputBaseInputEN: {\n            textAlign: 'center',\n            fontSize: 18,\n            padding: 0,\n            paddingBottom: 6,\n            height: 'auto',\n        },\n\n        chipWrapper: {\n            overflowX: 'auto',\n            display: 'flex',\n        },\n        chipRoot: {\n            borderRadius: 4.5,\n            height: 32,\n            lineHeight: '1rem',\n            margin: 2,\n        },\n        chipLabel: {\n            padding: '0 6px',\n            '& > span': {\n                display: 'block',\n                textAlign: 'center',\n            },\n            '& > span:first-child': {\n                fontSize: '1rem',\n            },\n            '& > span:last-child': {\n                lineHeight: '0.8rem',\n            },\n        },\n    })\n);\n\ninterface Props {\n    open: boolean;\n    theme: Theme;\n    lineName: Name;\n    onUpdate: (key: string, value: any) => void;\n    onClose: () => void;\n}\n\nconst Dialog2 = (props: Props) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    return (\n        <Dialog open={props.open} onClose={props.onClose}>\n            <DialogTitle>{t('colour.title')}</DialogTitle>\n            <DialogContent className={classes.contentWrapper}>\n                <List component=\"div\" disablePadding className={classes.contentLeft}>\n                    <LineNameInput theme={props.theme} lineName={props.lineName} onUpdate={props.onUpdate} />\n                    <Divider />\n                    <RecentChipSet onUpdate={props.onUpdate} />\n                </List>\n                <div className={classes.contentControl}>\n                    <ColourControl theme={props.theme} onUpdate={props.onUpdate} />\n                </div>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose} color=\"primary\">\n                    {t('dialog.done')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default Dialog2;\n\nconst LineNameInput = (props: { lineName: Name; theme: Theme; onUpdate: Props['onUpdate'] }) => {\n    const classes = useStyles();\n\n    const nameChange = (value: string, index: number) => {\n        let newName = props.lineName.map((val, idx) => (idx === index ? value : val));\n        props.onUpdate('name', newName);\n    };\n\n    return (\n        <ListItem style={{ justifyContent: 'center' }}>\n            <Paper className={classes.paperRoot} style={{ backgroundColor: props.theme[2] }}>\n                <Icon className={classes.iconRoot}>edit</Icon>\n                <InputBase\n                    value={props.lineName[0]}\n                    classes={{\n                        root: classes.inputBaseRoot,\n                        input: classes.inputBaseInputZH,\n                    }}\n                    style={{ color: props.theme[3] || MonoColour.white }}\n                    onChange={e => nameChange(e.target.value, 0)}\n                    autoFocus\n                />\n                <InputBase\n                    value={props.lineName[1]}\n                    classes={{\n                        root: classes.inputBaseRoot,\n                        input: classes.inputBaseInputEN,\n                    }}\n                    style={{ color: props.theme[3] || MonoColour.white }}\n                    onChange={e => nameChange(e.target.value, 1)}\n                />\n            </Paper>\n        </ListItem>\n    );\n};\n\nconst RecentChipSet = (props: { onUpdate: Props['onUpdate'] }) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const theme = useAppSelector(store => store.param.theme);\n    const lineName = useAppSelector(store => store.param.line_name);\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    const allInfos = useMemo(\n        () =>\n            new Set(\n                Object.values(stationList)\n                    .reduce(\n                        (acc, { transfer }) => {\n                            const { info } = transfer;\n                            return acc.concat(...info);\n                        },\n                        [[...theme, ...lineName]]\n                    )\n                    .map(val => JSON.stringify(val))\n                    .reverse()\n            ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n\n    const chips = useMemo(\n        () =>\n            [...allInfos].map((x, i) => {\n                const info: InterchangeInfo = JSON.parse(x);\n                const label = info.slice(4).map((txt, i) => (\n                    <span key={i} style={{ color: info[3] }}>\n                        {txt}\n                    </span>\n                ));\n\n                return (\n                    <Chip\n                        key={i}\n                        onClick={() => {\n                            props.onUpdate('theme', info.slice(0, 4));\n                            props.onUpdate('name', info.slice(4));\n                        }}\n                        style={{ backgroundColor: info[2] }}\n                        className={classes.chipRoot}\n                        classes={{ label: classes.chipLabel }}\n                        {...{ label }}\n                    />\n                );\n            }),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n\n    return (\n        <ListItem>\n            <ListItemText\n                primary={t('colour.recent')}\n                secondary={chips}\n                secondaryTypographyProps={{ component: 'div' }}\n                classes={{ secondary: classes.chipWrapper }}\n            />\n        </ListItem>\n    );\n};\n\nconst ColourControl = (props: { theme: Theme; onUpdate: Props['onUpdate'] }) => {\n    const { t } = useTranslation();\n    const [tabIndex, setTabIndex] = useState(props.theme[0] === 'other' ? 1 : 0);\n\n    const tabNav = (\n        <Tabs\n            value={tabIndex}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            onChange={(_, val) => setTabIndex(val)}\n            variant=\"fullWidth\"\n            scrollButtons=\"off\"\n        >\n            <Tab label={t('colour.palette')} style={{ minWidth: 'unset' }} />\n            <Tab label={t('colour.custom')} style={{ minWidth: 'unset' }} />\n        </Tabs>\n    );\n\n    const panel = (idx => {\n        switch (idx) {\n            case 0:\n                return <PalettePanel {...props} />;\n            case 1:\n                return <CustomPanel {...props} />;\n            default:\n                return <></>;\n        }\n    })(tabIndex);\n\n    return (\n        <>\n            {tabNav}\n            {panel}\n        </>\n    );\n};\n","import ColourDialog from './dialog';\n\nexport default ColourDialog;\n"],"sourceRoot":""}