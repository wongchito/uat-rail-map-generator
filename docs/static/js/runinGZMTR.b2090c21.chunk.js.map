{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","svgs/gzmtr/psd-number.tsx","svgs/strip/strip-gzmtr.tsx","svgs/gzmtr/station-icon/station-icon.tsx","svgs/gzmtr/station-icon/station-number.tsx","svgs/runin/info-gzmtr.tsx","svgs/gzmtr/platform-number.tsx","svgs/runin/runin-gzmtr.tsx"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","PsdNumber","props","num","inStrip","others","textAnchor","fill","MonoColour","black","height","width","rx","x","className","fontSize","dy","StripGZMTR","stripHeight","variant","indicatorLight","React","useMemo","cy","r","ry","y","transform","id","style","isShowLight","isShowPSD","PSD","memo","isInStrip","includes","psdDy","prevProps","nextProps","passed","pathD","large","d","strokeWidth","stroke","StationNumber","lineNum","stnNum","lineNumEl","useRef","stnNumEl","useState","lineNumBBox","setLineNumBBox","stnNumBBox","setStnNumBBox","useEffect","current","getBBox","lineNumScale","Math","max","stnNumScale","ref","InfoGZMTR","svgHeight","useAppSelector","store","param","svg_height","svgWidths","svgWidth","direction","infoPanelType","info_panel_type","lineNumber","line_num","currentStationIndex","current_stn_idx","curStnInfo","stn_list","curNameEl","nameBBox","setNameBBox","name","nextStnId","ShortDirection","left","otisTransforms","CanvasType","RunIn","next","PanelTypeGZMTR","gz2otis","BigName","curName","curSecName","secondaryName","split","nextId","nextIds","forwardRef","map","txt","secName","BigSecName","nameEl","bBox","setBBox","toString","BigNext","nextInfo","nextBBox","setNextBBox","nextNameEl","nextNameZHCount","nameBcrX","BigNextSec","BigNext2","routes","helper","stationList","nextNames","nextNameEls","prevBBox","forEach","el","validEnds","stnId","reduce","acc","route","concat","filter","s","slice","names","Fragment","j","join","replace","PlatformNumber","cx","RunInGZMTR","platformNumber","platform_num","psdNumber","psd_num","platform","OtisFrame","y2","x2"],"mappings":"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","file":"static/js/runinGZMTR.b2090c21.chunk.js","sourcesContent":["import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React, { SVGProps } from 'react';\nimport { MonoColour } from '../../constants/constants';\n\ninterface PsdNumberProps extends SVGProps<SVGGElement> {\n    num: string;\n    inStrip?: boolean;\n}\n\nexport default function PsdNumber(props: PsdNumberProps) {\n    const { num, inStrip, ...others } = props;\n\n    return (\n        <g textAnchor=\"middle\" fill={inStrip ? MonoColour.black : 'var(--rmg-theme-fg)'} {...others}>\n            <rect height={40} width={40} rx={4} x={-20} fill={inStrip ? '#fff' : 'var(--rmg-theme-colour)'} />\n            <text className=\"rmg-name__en\" fontSize={20} dy={12}>\n                {num}\n            </text>\n            <text className=\"rmg-name__zh\" fontSize={12} dy={26}>\n                屏蔽门\n            </text>\n            <text className=\"rmg-name__en\" fontSize={6.5} dy={36}>\n                Screen Door\n            </text>\n        </g>\n    );\n}\n","import React from 'react';\nimport { PanelTypeGZMTR, PanelTypeShmetro } from '../../constants/constants';\nimport PsdNumber from '../gzmtr/psd-number';\n\ninterface Props {\n    variant: PanelTypeGZMTR | PanelTypeShmetro;\n    isShowLight: boolean;\n    isShowPSD: false | string;\n}\n\nconst StripGZMTR = (props: Props) => {\n    const stripHeight = (variant => {\n        switch (variant) {\n            case 'gz28':\n            case 'gz2otis':\n            case 'gz6':\n            case 'gzgf':\n                return 60;\n            case 'gz1':\n            case 'gz3':\n                return 40;\n            case 'gz4':\n            case 'gz5':\n            case 'gz1421':\n                return 20;\n            default:\n                return 0;\n        }\n    })(props.variant);\n\n    const indicatorLight = React.useMemo(() => {\n        switch (props.variant) {\n            case 'gz1':\n                return <circle cy={-58} r={16} fill=\"red\" />;\n            case 'gz28':\n            case 'gz2otis':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz3':\n                return <rect x={-15} y={-55} height={30} width={30} fill=\"red\" />;\n            case 'gz6':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"white\" />;\n            case 'gz1421':\n                return <ellipse cy={-38} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz5':\n                return <rect x={-30} y={-70} height={30} width={60} fill=\"orange\" />;\n            case 'gz4':\n                return <rect x={-50} y={-50} height={25} width={100} fill=\"whitesmoke\" />;\n            case 'gzgf':\n                return <rect x={-30} y={-58} height={30} width={60} fill=\"orange\" />;\n            default:\n                return <></>;\n        }\n    }, [props.variant]);\n\n    const stripDy = -20;\n\n    return (\n        <g transform={`translate(0,${props.variant === 'gz4' ? stripDy : 0})`}>\n            <rect\n                id=\"strip_gz\"\n                style={{\n                    ['--height' as any]: `${stripHeight}px`,\n                }}\n            />\n            <g\n                style={{\n                    transform: 'translate(calc(var(--rmg-svg-width) / 2),var(--rmg-svg-height))',\n                }}\n            >\n                {props.isShowLight && indicatorLight}\n            </g>\n            {props.isShowPSD !== false && <PSD {...props} />}\n        </g>\n    );\n};\n\nexport default StripGZMTR;\n\nconst PSD = React.memo(\n    (props: Props) => {\n        /**\n         * Flag of whether PSD number is stick within the strip area. If `true`, should fill with white, otherwise, fill with theme colour.\n         */\n        const isInStrip = ['gz28', 'gz2otis', 'gz6', 'gzgf'].includes(props.variant);\n        const psdDy = ((variant: PanelTypeGZMTR | PanelTypeShmetro) => {\n            switch (variant) {\n                case 'gz1':\n                case 'gz3':\n                    return '82px';\n                case 'gz4':\n                    return '65px';\n                case 'gz5':\n                    return '80px';\n                case 'gz1421':\n                    return '62px';\n                default:\n                    return '58px';\n            }\n        })(props.variant);\n\n        return (\n            <PsdNumber\n                num={props.isShowPSD as string}\n                inStrip={isInStrip}\n                style={{\n                    ['--psd-dy' as any]: psdDy,\n                    transform: 'translate(var(--translate-x), var(--translate-y))',\n                    ['--translate-x' as any]: 'calc(var(--rmg-svg-width) / 2 + 80px)',\n                    ['--translate-y' as any]: 'calc(var(--rmg-svg-height) - var(--psd-dy, 58px))',\n                }}\n            />\n        );\n    },\n    (prevProps, nextProps) => prevProps.variant === nextProps.variant && prevProps.isShowPSD === nextProps.isShowPSD\n);\n","import React, { memo } from 'react';\n\ninterface StationIconProps {\n    passed?: boolean;\n    large?: boolean;\n}\n\nexport default memo(\n    function StationIcon(props: StationIconProps) {\n        const { passed, large } = props;\n\n        const pathD = large\n            ? 'M0,12.95 V-12.95 H-12.95 a12.95,12.95 0 0,0 0,25.9 h25.9 a12.95,12.95 0 0,0 0,-25.9 H0'\n            : 'M0,9.25 V-9.25 H-9.25 a9.25,9.25 0 0,0 0,18.5 h18.5 a9.25,9.25 0 0,0 0,-18.5 H0';\n\n        return <path d={pathD} fill=\"#fff\" strokeWidth={2} stroke={passed ? '#aaa' : 'var(--rmg-theme-colour)'} />;\n    },\n    (prevProps, nextProps) => prevProps.passed === nextProps.passed && prevProps.large === nextProps.large\n);\n","import React, { SVGProps, useEffect, useRef, useState } from 'react';\nimport StationIcon from './station-icon';\n\nconst TEXT_MAX_WIDTH = 15;\n\ninterface StationNumberProps extends SVGProps<SVGGElement> {\n    lineNum: string;\n    stnNum: string;\n    passed?: boolean;\n    large?: boolean;\n}\n\nexport default function StationNumber(props: StationNumberProps) {\n    const { lineNum, stnNum, passed, large, ...others } = props;\n\n    const lineNumEl = useRef<SVGTextElement | null>(null);\n    const stnNumEl = useRef<SVGTextElement | null>(null);\n\n    const [lineNumBBox, setLineNumBBox] = useState({ width: 0 } as DOMRect);\n    const [stnNumBBox, setStnNumBBox] = useState({ width: 0 } as DOMRect);\n\n    useEffect(() => {\n        setLineNumBBox(lineNumEl.current!.getBBox());\n        setStnNumBBox(stnNumEl.current!.getBBox());\n    }, [lineNum, stnNum]);\n\n    const lineNumScale = TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, lineNumBBox.width);\n    const stnNumScale =\n        lineNum.length === 2 && stnNum.length === 2\n            ? lineNumScale\n            : TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, stnNumBBox.width);\n\n    return (\n        <g {...others}>\n            <StationIcon passed={passed} large={large} />\n            <g\n                textAnchor=\"middle\"\n                fontSize={13.5}\n                transform={large ? 'scale(1.4)' : ''}\n                fill={passed ? '#aaa' : '#000'}\n            >\n                <g transform={`translate(-9.25,0)scale(${lineNumScale})`}>\n                    <text ref={lineNumEl} className=\"rmg-name__zh\">\n                        {lineNum}\n                    </text>\n                </g>\n                <g transform={`translate(9.25,0)scale(${stnNumScale})`}>\n                    <text ref={stnNumEl} className=\"rmg-name__zh\">\n                        {stnNum}\n                    </text>\n                </g>\n            </g>\n        </g>\n    );\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport StationNumber from '../gzmtr/station-icon/station-number';\nimport { CanvasType, Name, PanelTypeGZMTR, ShortDirection } from '../../constants/constants';\nimport { useAppSelector } from '../../redux';\n\nconst InfoGZMTR = () => {\n    const svgHeight = useAppSelector(store => store.param.svg_height);\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const direction = useAppSelector(store => store.param.direction);\n    const infoPanelType = useAppSelector(store => store.param.info_panel_type);\n    const lineNumber = useAppSelector(store => store.param.line_num);\n    const currentStationIndex = useAppSelector(store => store.param.current_stn_idx);\n    const curStnInfo = useAppSelector(store => store.param.stn_list[currentStationIndex]);\n\n    const curNameEl = React.useRef<SVGGElement | null>(null);\n    const [nameBBox, setNameBBox] = useState({ width: 0 } as DOMRect);\n    useEffect(\n        () => setNameBBox(curNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [curStnInfo.name[0], curStnInfo.name[1]]\n    );\n\n    const nextStnId = curStnInfo[direction === ShortDirection.left ? 'parents' : 'children'];\n\n    const otisTransforms = {\n        name: `translate(${((direction === ShortDirection.left ? 1 : -1) * svgWidths[CanvasType.RunIn]) / 4},45)`,\n        next: `translate(${((direction === ShortDirection.left ? 1 : -1) * svgWidths[CanvasType.RunIn]) / 10},45)`,\n    };\n\n    return (\n        <g>\n            <g transform={infoPanelType === PanelTypeGZMTR.gz2otis ? otisTransforms.name : ''}>\n                <BigName\n                    ref={curNameEl}\n                    curName={curStnInfo.name}\n                    curSecName={curStnInfo.secondaryName}\n                    style={{\n                        ['--translate-y' as any]: `${\n                            0.5 * svgHeight -\n                            50 -\n                            (curStnInfo.name[1].split('\\\\').length - 1) * 18 -\n                            (curStnInfo.secondaryName ? 58 / 2 : 0)\n                        }px`,\n                    }}\n                />\n\n                <StationNumber\n                    lineNum={lineNumber}\n                    stnNum={curStnInfo.num}\n                    style={{\n                        ['--translate-x' as any]: `${(svgWidths[CanvasType.RunIn] + nameBBox.width) / 2 + 55}px`,\n                        ['--translate-y' as any]: `${\n                            0.5 * svgHeight -\n                            30 -\n                            (curStnInfo.name[1].split('\\\\').length - 1) * 18 -\n                            (curStnInfo.secondaryName ? 58 / 2 : 0)\n                        }px`,\n                        transform: 'translate(var(--translate-x, 800px), var(--translate-y, 145px))'\n                    }}\n                    large\n                />\n            </g>\n\n            <g transform={infoPanelType === PanelTypeGZMTR.gz2otis ? otisTransforms.next : ''}>\n                {nextStnId.includes('linestart') || nextStnId.includes('lineend') ? (\n                    <></>\n                ) : nextStnId.length === 1 ? (\n                    <BigNext nextId={nextStnId[0]} nameBBox={nameBBox} />\n                ) : (\n                    <BigNext2 nextIds={nextStnId} nameBBox={nameBBox} />\n                )}\n            </g>\n        </g>\n    );\n};\n\nexport default InfoGZMTR;\n\nconst BigName = React.forwardRef(\n    (props: { curName: Name; curSecName: false | Name } & React.SVGProps<SVGGElement>, ref: React.Ref<SVGGElement>) => {\n        const { curName, curSecName, ...others } = props;\n\n        return (\n            <g id=\"big_name\" {...others}>\n                {React.useMemo(\n                    () => (\n                        <g ref={ref}>\n                            <text className=\"rmg-name__zh\" fontSize={90}>\n                                {curName[0]}\n                            </text>\n                            <g fontSize={36} className=\"rmg-name__en\">\n                                {curName[1].split('\\\\').map((txt, i) => (\n                                    <text key={i} dy={70 + i * 36}>\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </g>\n                    ),\n                    // eslint-disable-next-line react-hooks/exhaustive-deps\n                    [curName]\n                )}\n\n                {curSecName && (\n                    <BigSecName\n                        secName={curSecName}\n                        transform={`translate(0,${70 + curName[1].split('\\\\').length * 36})`}\n                    />\n                )}\n            </g>\n        );\n    }\n);\n\nconst BigSecName = (props: { secName: Name } & React.SVGProps<SVGGElement>) => {\n    const { secName, ...others } = props;\n    const nameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as DOMRect);\n    useEffect(\n        () => setBBox(nameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.secName.toString()]\n    );\n\n    return (\n        <g {...others}>\n            <g transform=\"translate(0,4.5)\" fontSize={36}>\n                <text textAnchor=\"end\" x={bBox.x - 3} className=\"rmg-name__zh\">\n                    {'('}\n                </text>\n                <text textAnchor=\"start\" x={bBox.width + bBox.x + 3} className=\"rmg-name__zh\">\n                    {')'}\n                </text>\n            </g>\n            <g ref={nameEl} textAnchor=\"middle\">\n                <text className=\"rmg-name__zh\" fontSize={26}>\n                    {secName[0]}\n                </text>\n                <text dy={22} className=\"rmg-name__en\" fontSize={14}>\n                    {secName[1]}\n                </text>\n            </g>\n        </g>\n    );\n};\n\nconst BigNext = (props: { nextId: string; nameBBox: DOMRect }) => {\n    const { nextId, nameBBox } = props;\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const direction = useAppSelector(store => store.param.direction);\n    const nextInfo = useAppSelector(store => store.param.stn_list[nextId]);\n    const { name, secondaryName } = nextInfo;\n\n    const [nextBBox, setNextBBox] = useState({ width: 0 } as DOMRect);\n    const nextNameEl = React.useRef<SVGGElement | null>(null);\n    useEffect(\n        () => setNextBBox(nextNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [name.toString()]\n    );\n\n    const nextNameZHCount = name[0].length;\n    const nameBcrX = (svgWidths[CanvasType.RunIn] - nameBBox.width) / 2;\n\n    return (\n        <>\n            <g id=\"big_next\">\n                <g\n                    textAnchor=\"middle\"\n                    style={{\n                        ['--translate-x' as any]:\n                            direction === ShortDirection.left\n                                ? '80px'\n                                : nextNameZHCount <= 2\n                                ? `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width - 70}px`\n                                : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width - 35 * 1.5}px`,\n                    }}\n                >\n                    <text className=\"rmg-name__zh\" fontSize={35}>\n                        下站\n                    </text>\n                    <text className=\"rmg-name__en\" fontSize={17} dy={30}>\n                        Next\n                    </text>\n                </g>\n                <g\n                    textAnchor=\"start\"\n                    ref={nextNameEl}\n                    style={{\n                        ['--translate-x' as any]:\n                            direction === ShortDirection.left\n                                ? nextNameZHCount <= 2\n                                    ? `${115 + 35}px`\n                                    : `${115 + 35 / 2}px`\n                                : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width}px`,\n                    }}\n                >\n                    <text className=\"rmg-name__zh\" fontSize={35}>\n                        {name[0]}\n                    </text>\n                    <g fontSize={17}>\n                        {name[1].split('\\\\').map((txt: string, i: number) => (\n                            <text className=\"rmg-name__en\" dy={30 + i * 17} key={i}>\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n                </g>\n                {secondaryName && (\n                    <g\n                        textAnchor=\"middle\"\n                        style={{\n                            ['--translate-x' as any]:\n                                direction === ShortDirection.left\n                                    ? nextNameZHCount <= 2\n                                        ? `${115 + 35}px`\n                                        : `${115 + 35 / 2}px`\n                                    : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width}px`,\n                        }}\n                    >\n                        <BigNextSec\n                            secName={secondaryName}\n                            transform={`translate(${nextBBox.width / 2},${30 + name[1].split('\\\\').length * 17 + 5})`}\n                        />\n                    </g>\n                )}\n            </g>\n            <path\n                id=\"arrow\"\n                d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\"\n                fill=\"black\"\n                style={{\n                    ['--translate-x' as any]:\n                        direction === ShortDirection.left\n                            ? `${\n                                  (115 + 35 * ((nextNameZHCount <= 2 ? 1 : 0.5) + nextNameZHCount) + nameBcrX) / 2 - 20\n                              }px`\n                            : `${\n                                  (svgWidths[CanvasType.RunIn] -\n                                      45 -\n                                      nextBBox.width -\n                                      (nextNameZHCount <= 2 ? 70 + 35 : 35 * 2.5) +\n                                      nameBcrX +\n                                      props.nameBBox.width +\n                                      55 +\n                                      18.5 * 1.4) /\n                                      2 +\n                                  20\n                              }px`,\n                    ['--rotate' as any]: direction === ShortDirection.left ? '0deg' : '180deg',\n                }}\n            />\n        </>\n    );\n};\n\nconst BigNextSec = (props: { secName: Name } & React.SVGProps<SVGGElement>) => {\n    const { secName, ...others } = props;\n\n    const nameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as DOMRect);\n    useEffect(\n        () => setBBox(nameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.secName.toString()]\n    );\n\n    return (\n        <g {...others}>\n            <g transform=\"translate(0,2.5)\" fontSize={25}>\n                <text textAnchor=\"end\" x={bBox.x - 3} className=\"rmg-name__zh\">\n                    {'('}\n                </text>\n                <text textAnchor=\"start\" x={bBox.width + bBox.x + 3} className=\"rmg-name__zh\">\n                    {')'}\n                </text>\n            </g>\n            <g ref={nameEl}>\n                <text className=\"rmg-name__zh\" fontSize={18}>\n                    {secName[0]}\n                </text>\n                <text className=\"rmg-name__en\" fontSize={10} dy={15}>\n                    {secName[1]}\n                </text>\n            </g>\n        </g>\n    );\n};\n\nconst BigNext2 = (props: { nextIds: string[]; nameBBox: DOMRect }) => {\n    const { nextIds, nameBBox } = props;\n    const { routes } = useAppSelector(store => store.helper);\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const direction = useAppSelector(store => store.param.direction);\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    const nextNames = nextIds.map(id => stationList[id].name);\n    const [nextBBox, setNextBBox] = useState({ width: 0 } as DOMRect);\n    const nextNameEls = useRef<(SVGGElement | null)[]>([]);\n    useEffect(\n        () => {\n            setNextBBox(prevBBox => ({ ...prevBBox, width: 0 }));\n            nextNameEls.current.forEach(el => {\n                let nextBBox = el?.getBBox();\n                setNextBBox(prevBBox => {\n                    if (nextBBox) {\n                        return prevBBox.width > nextBBox.width ? prevBBox : nextBBox;\n                    } else {\n                        return prevBBox;\n                    }\n                });\n            });\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [nextNames.toString()]\n    );\n\n    const validEnds = props.nextIds.map(stnId =>\n        routes.reduce(\n            (acc, route) =>\n                // filter routes not containing next station's id\n                route.includes(stnId)\n                    ? acc.concat(\n                          route\n                              .filter(s => !['linestart', 'lineend'].includes(s))\n                              // select first/last station's id\n                              .slice(direction === ShortDirection.left ? 0 : -1)[0]\n                      )\n                    : acc,\n            [] as string[]\n        )\n    );\n\n    const nextNameZHCount = Math.max(...nextNames.map(names => names[0].length));\n    const nameBcrX = (svgWidths[CanvasType.RunIn] - nameBBox.width) / 2;\n\n    return (\n        <>\n            <g id=\"big_next_2\">\n                {nextNames.map((name, i) => {\n                    return (\n                        <React.Fragment key={i}>\n                            <g\n                                textAnchor=\"middle\"\n                                style={{\n                                    ['--translate-x' as any]:\n                                        direction === ShortDirection.left\n                                            ? '72px'\n                                            : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width - 41}px`,\n                                }}\n                            >\n                                <text className=\"rmg-name__zh\">下站</text>\n                                <text className=\"rmg-name__en\" y={22}>\n                                    Next\n                                </text>\n                            </g>\n                            <g\n                                ref={el => (nextNameEls.current[i] = el)}\n                                textAnchor=\"start\"\n                                style={{\n                                    ['--translate-x' as any]:\n                                        direction === ShortDirection.left\n                                            ? '113px'\n                                            : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width}px`,\n                                }}\n                            >\n                                <text className=\"rmg-name__zh\">{name[0]}</text>\n                                {name[1].split('\\\\').map((txt, j) => (\n                                    <text key={j} className=\"rmg-name__en\" y={22 + j * 13}>\n                                        {txt}\n                                    </text>\n                                ))}\n                                <text className=\"rmg-name__zh\" y={-35}>\n                                    {validEnds[i].map(s => stationList[s].name[0]).join('/') + '方向'}\n                                </text>\n                                <text className=\"rmg-name__en rmg-name__gzmtr--next2-dest\" y={-20}>\n                                    {'Towards ' +\n                                        validEnds[i]\n                                            .map(s => stationList[s].name[1])\n                                            .join('/')\n                                            .replace('\\\\', ' ')}\n                                </text>\n                            </g>\n                        </React.Fragment>\n                    );\n                })}\n            </g>\n            <path\n                id=\"arrow\"\n                d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\"\n                fill=\"black\"\n                style={{\n                    ['--translate-x' as any]:\n                        direction === ShortDirection.left\n                            ? `${(99 + 27 * (1 + nextNameZHCount) + nameBcrX) / 2 - 20}px`\n                            : `${\n                                  (svgWidths[CanvasType.RunIn] -\n                                      45 -\n                                      nextBBox.width -\n                                      41 -\n                                      27 +\n                                      nameBcrX +\n                                      props.nameBBox.width +\n                                      55 +\n                                      18.5 * 1.4) /\n                                      2 +\n                                  20\n                              }px`,\n                    ['--rotate' as any]: direction === ShortDirection.left ? '0deg' : '180deg',\n                }}\n            />\n        </>\n    );\n};\n","import React, { SVGProps } from 'react';\n\ninterface PlatformNumberProps extends SVGProps<SVGGElement> {\n    num: string | false;\n}\n\nexport default function PlatformNumber(props: PlatformNumberProps) {\n    const { num, ...others } = props;\n\n    return (\n        <g textAnchor=\"middle\" fill=\"var(--rmg-theme-fg)\" {...others}>\n            <circle cx={0} cy={0} r={30} fill=\"var(--rmg-theme-colour)\" />\n            <text className=\"rmg-name__en\" fontSize={38} dy={-9.5}>\n                {num}\n            </text>\n            <text className=\"rmg-name__zh\" fontSize={13} dy={10}>\n                站台\n            </text>\n            <text className=\"rmg-name__en\" fontSize={9} dy={21}>\n                Platform\n            </text>\n        </g>\n    );\n}\n","import React from 'react';\nimport StripGZMTR from '../strip/strip-gzmtr';\nimport InfoGZMTR from './info-gzmtr';\nimport { useAppSelector } from '../../redux';\nimport { CanvasType, PanelTypeGZMTR, ShortDirection } from '../../constants/constants';\nimport PlatformNumber from '../gzmtr/platform-number';\n\nconst RunInGZMTR = () => {\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const direction = useAppSelector(store => store.param.direction);\n    const infoPanelType = useAppSelector(store => store.param.info_panel_type);\n    const platformNumber = useAppSelector(store => store.param.platform_num);\n    const psdNumber = useAppSelector(store => store.param.psd_num);\n\n    const otisTransforms = {\n        platform: `translate(${direction === ShortDirection.left ? 50 : -50},45)`,\n    };\n    return (\n        <>\n            <StripGZMTR\n                variant={infoPanelType}\n                isShowLight={infoPanelType !== PanelTypeGZMTR.gz2otis}\n                isShowPSD={infoPanelType !== PanelTypeGZMTR.gz2otis && psdNumber}\n            />\n\n            <g transform={infoPanelType === PanelTypeGZMTR.gz2otis ? otisTransforms.platform : ''}>\n                <PlatformNumber\n                    num={platformNumber}\n                    style={{\n                        ['--translate-x' as any]: `${\n                            direction === ShortDirection.left ? svgWidths[CanvasType.RunIn] - 100 : 100\n                        }px`,\n                        ['--translate-y' as any]: 'calc(var(--rmg-svg-height) / 2 - 30px)',\n                        transform: 'translate(var(--translate-x, 100px), var(--translate-y))',\n                    }}\n                />\n            </g>\n\n            <InfoGZMTR />\n\n            {infoPanelType === PanelTypeGZMTR.gz2otis && <OtisFrame />}\n        </>\n    );\n};\n\nexport default RunInGZMTR;\n\nconst OtisFrame = () => {\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const svgHeight = useAppSelector(store => store.param.svg_height);\n    return (\n        <g id=\"otis_frame\" strokeWidth={3} stroke=\"black\">\n            <line y2={svgHeight} transform={`translate(${svgWidths[CanvasType.RunIn] / 2},0)`} />\n            <line x2={svgWidths[CanvasType.RunIn]} transform=\"translate(0,90)\" />\n        </g>\n    );\n};\n"],"sourceRoot":""}