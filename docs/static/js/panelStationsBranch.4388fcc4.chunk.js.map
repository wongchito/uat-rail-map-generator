{"version":3,"sources":["panels/stations/edit-diag/branch-tab.tsx"],"names":["useStyles","makeStyles","createStyles","select","width","StationEditBranchTab","props","t","useTranslation","style","margin","BranchSelectSet","stnId","direction","rmgStyle","useContext","CanvasContext","branchEntry","ParamContext","param","stn_list","branch","React","useMemo","BranchTypeItem","BranchFirstItem","BranchPosItem","classes","dispatch","handleChange","event","branchType","target","value","type","primary","native","onChange","className","disabled","length","stnInfo","neighbours","parents","children","branchFirst","branchEndFirst","branchEndId","stnList","indexOf","branches","first","transform","map","formatStnName","toString","branchPos","right","left","p"],"mappings":"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","file":"static/js/panelStationsBranch.4388fcc4.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    List,\n    ListItem,\n    ListItemText,\n    Divider,\n    Icon,\n    ListItemIcon,\n    Select,\n    makeStyles,\n    createStyles,\n} from '@material-ui/core';\nimport { formatStnName } from '../../../utils';\nimport { ParamContext, CanvasContext } from '../../../context';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        select: {\n            width: 166,\n        },\n    })\n);\n\nfunction StationEditBranchTab(props: { stnId: string }) {\n    const { t } = useTranslation();\n\n    return (\n        <List>\n            <ListItem>\n                <ListItemText>\n                    <h3 style={{ margin: 0 }}>{t('stations.edit.branch.left')}</h3>\n                </ListItemText>\n            </ListItem>\n            <BranchSelectSet stnId={props.stnId} direction=\"left\" />\n            <Divider />\n            <ListItem>\n                <ListItemText>\n                    <h3 style={{ margin: 0 }}>{t('stations.edit.branch.right')}</h3>\n                </ListItemText>\n            </ListItem>\n            <BranchSelectSet stnId={props.stnId} direction=\"right\" />\n        </List>\n    );\n}\n\nexport default StationEditBranchTab;\n\ninterface BranchSelectSetProps {\n    stnId: string;\n    direction: 'left' | 'right';\n}\n\nconst BranchSelectSet = (props: BranchSelectSetProps) => {\n    const { rmgStyle } = useContext(CanvasContext);\n    const { param } = useContext(ParamContext);\n    const stnInfo = param.stn_list[props.stnId];\n    const branchEntry = stnInfo.branch[props.direction];\n\n    return React.useMemo(\n        () => (\n            <>\n                <BranchTypeItem {...props} />\n                {branchEntry[0] && (\n                    <>\n                        <BranchFirstItem {...props} />\n                        {rmgStyle !== 'shmetro' && <BranchPosItem {...props} />}\n                    </>\n                )}\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.stnId, props.direction, branchEntry[0]]\n    );\n};\n\ninterface ItemProps {\n    stnId: string;\n    direction: 'left' | 'right';\n}\n\nconst BranchTypeItem = (props: ItemProps) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const { param, dispatch } = React.useContext(ParamContext);\n    const stnInfo = param.stn_list[props.stnId];\n    const branchEntry = stnInfo.branch[props.direction];\n\n    const handleChange = (event: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n        let branchType = event.target.value as 'na' | 'through' | 'nonthrough';\n        if (branchType === 'na') {\n            // no changes\n            return;\n        } else if (branchType === branchEntry[0]) {\n            // no changes\n            return;\n        } else {\n            dispatch({\n                type: 'UPDATE_STATION_BRANCH_TYPE',\n                stnId: props.stnId,\n                direction: props.direction,\n                branchType,\n            });\n        }\n    };\n\n    return React.useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>merge_type</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('stations.edit.branch.type.title')} />\n                <Select native onChange={handleChange} value={branchEntry[0] || 'na'} className={classes.select}>\n                    <option value=\"na\" disabled={branchEntry.length !== 0}>\n                        {t('stations.edit.branch.type.na')}\n                    </option>\n                    <option value=\"through\" disabled={branchEntry.length === 0}>\n                        {t('stations.edit.branch.type.through')}\n                    </option>\n                    <option value=\"nonthrough\" disabled={branchEntry.length === 0}>\n                        {t('stations.edit.branch.type.nonThrough')}\n                    </option>\n                </Select>\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.stnId, branchEntry[0]]\n    );\n};\n\nconst BranchFirstItem = (props: ItemProps) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const { rmgStyle } = useContext(CanvasContext);\n    const { param, dispatch } = useContext(ParamContext);\n    const stnInfo = param.stn_list[props.stnId];\n    const branchEntry = stnInfo.branch[props.direction];\n    const neighbours = props.direction === 'left' ? stnInfo.parents : stnInfo.children;\n\n    const handleChange = (event: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n        let branchFirst = event.target.value as string;\n        if (branchEntry[1] === branchFirst) {\n            // no changes\n            return;\n        } else {\n            let branchEndId = branchFirst;\n            let branchEndFirst: string;\n            let stnList = param.stn_list;\n            if (props.direction === 'right') {\n                while (stnList[branchEndId].parents.length === 1) {\n                    branchEndId = stnList[branchEndId].children[0];\n                }\n                branchEndFirst = stnList[branchEndId].parents[neighbours.indexOf(branchFirst)];\n            } else {\n                while (stnList[branchEndId].children.length === 1) {\n                    branchEndId = stnList[branchEndId].parents[0];\n                }\n                branchEndFirst = stnList[branchEndId].children[neighbours.indexOf(branchFirst)];\n            }\n            dispatch({\n                type: 'UPDATE_STATION_BRANCH_FIRST',\n                branches: [\n                    {\n                        stnId: props.stnId,\n                        direction: props.direction,\n                        first: branchFirst,\n                    },\n                    {\n                        stnId: branchEndId,\n                        direction: props.direction === 'left' ? 'right' : 'left',\n                        first: branchEndFirst,\n                    },\n                ],\n            });\n        }\n    };\n\n    return React.useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon style={{ transform: props.direction === 'left' ? 'scale(-1)' : 'scale(1)' }}>share</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('stations.edit.branch.first')} />\n                <Select\n                    native\n                    onChange={handleChange}\n                    value={branchEntry[1] || neighbours[0]}\n                    className={classes.select}\n                >\n                    {neighbours.map(stnId => (\n                        <option key={stnId} value={stnId}>\n                            {formatStnName(param.stn_list[stnId], rmgStyle)}\n                        </option>\n                    ))}\n                </Select>\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.stnId, branchEntry[1], neighbours.toString()]\n    );\n};\n\nconst BranchPosItem = (props: ItemProps) => {\n    // mount only if branchEntry[0] is not undefined\n\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const { param, dispatch } = React.useContext(ParamContext);\n    const stnInfo = param.stn_list[props.stnId];\n    const branchEntry = stnInfo.branch[props.direction] as ['through' | 'nonthrough', string];\n    const neighbours = props.direction === 'left' ? stnInfo.parents : stnInfo.children;\n\n    const handleChange = (event: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n        let branchPos: 0 | 1 = event.target.value === 'lower' ? 1 : 0;\n        if (neighbours.indexOf(branchEntry[1]) === branchPos) {\n            // no changes\n            return;\n        } else {\n            let branchEndId = branchEntry[1];\n            let stnList = param.stn_list;\n            if (props.direction === 'right') {\n                while (stnList[branchEndId].parents.length === 1) {\n                    branchEndId = stnList[branchEndId].children[0];\n                }\n                dispatch({\n                    type: 'UPDATE_STATION_BRANCH_POS',\n                    right: props.stnId,\n                    left: branchEndId,\n                });\n            } else {\n                while (stnList[branchEndId].children.length === 1) {\n                    branchEndId = stnList[branchEndId].parents[0];\n                }\n                dispatch({\n                    type: 'UPDATE_STATION_BRANCH_POS',\n                    left: props.stnId,\n                    right: branchEndId,\n                });\n            }\n        }\n    };\n\n    return React.useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>swap_vert</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('stations.edit.branch.pos.title')} />\n                <Select\n                    native\n                    onChange={handleChange}\n                    value={neighbours.indexOf(branchEntry[1]) === 1 ? 'lower' : 'upper'}\n                    className={classes.select}\n                >\n                    {['upper', 'lower'].map(p => (\n                        <option key={p} value={p}>\n                            {t('stations.edit.branch.pos.' + p)}\n                        </option>\n                    ))}\n                </Select>\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.stnId, branchEntry[1], neighbours.toString()]\n    );\n};\n"],"sourceRoot":""}