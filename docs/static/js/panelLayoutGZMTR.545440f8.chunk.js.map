{"version":3,"sources":["panels/layout/gzmtr.tsx"],"names":["useStyles","makeStyles","theme","createStyles","nestedList","paddingLeft","spacing","slider","width","marginLeft","marginRight","React","DirectionGZLi","t","useTranslation","classes","reduxDispatch","useDispatch","directionIndicatorX","useSelector","store","param","direction_gz_x","directionIndicatorY","direction_gz_y","dispatch","ParamContext","isOpen","setIsOpen","button","onClick","prevOpen","primary","color","in","unmountOnExit","component","disablePadding","className","value","onChange","_","type","setDirectionIndicatorX","step","marks","label","valueLabelDisplay","variant","setDirectionIndicatorY"],"mappings":"wMAoBMA,EAAYC,sBAAW,SAAAC,GAAK,OAC9BC,uBAAa,CACTC,WAAY,CACRC,YAAaH,EAAMI,QAAQ,IAE/BC,OAAQ,CACJC,MAAO,IACPC,WAAY,EACZC,YAAa,QAKVC,kBAAW,WACtB,OACI,qCACI,cAAC,UAAD,IACA,cAACC,EAAD,UAKZ,IAAMA,EAAgB,WAClB,IAAQC,EAAMC,2BAAND,EACFE,EAAUf,IACVgB,EAAgBC,wBAEhBC,EAAsBC,uBAAY,SAACC,GAAD,OAAsBA,EAAMC,MAAMC,kBACpEC,EAAsBJ,uBAAY,SAACC,GAAD,OAAsBA,EAAMC,MAAMG,kBAClEC,EAAad,aAAiBe,KAA9BD,SAER,EAA4Bd,YAAe,GAA3C,mBAAOgB,EAAP,KAAeC,EAAf,KAEA,OAAOjB,WAAc,WAWjB,OACI,qCACI,eAAC,WAAD,CAAUkB,QAAM,EAACC,QAAS,kBAAMF,GAAU,SAAAG,GAAQ,OAAKA,MAAvD,UACI,cAAC,eAAD,UACI,cAAC,OAAD,0BAEJ,cAAC,eAAD,CAAcC,QAASnB,EAAE,8BACxBc,EAAS,cAAC,OAAD,CAAMM,MAAM,SAAZ,yBAA0C,cAAC,OAAD,CAAMA,MAAM,SAAZ,4BAExD,cAAC,WAAD,CAAUC,GAAIP,EAAQQ,eAAa,EAAnC,SACI,eAAC,OAAD,CAAMC,UAAU,MAAMC,gBAAc,EAACC,UAAWvB,EAAQX,WAAxD,UACI,eAAC,WAAD,WACI,cAAC,eAAD,CAAc4B,QAASnB,EAAE,mCACzB,cAAC,SAAD,CACIyB,UAAWvB,EAAQR,OACnBgC,MAAOrB,EACPsB,SA1BF,SAACC,EAAoBF,GACvCd,EAAS,CAAEiB,KAAM,qBAAsBH,MAAOA,IAC9CvB,EAAc2B,YAAuBJ,KAyBjBK,KAAM,IACNC,MAAO,CACH,CAAEN,MAAO,EAAGO,MAAOjC,EAAE,4BACrB,CAAE0B,MAAO,IAAKO,MAAOjC,EAAE,8BAE3BkC,kBAAkB,YAG1B,cAAC,UAAD,CAASC,QAAQ,WACjB,eAAC,WAAD,WACI,cAAC,eAAD,CAAchB,QAASnB,EAAE,iCACzB,cAAC,SAAD,CACIyB,UAAWvB,EAAQR,OACnBgC,MAAOhB,EACPiB,SApCF,SAACC,EAAoBF,GACvCd,EAAS,CAAEiB,KAAM,qBAAsBH,MAAOA,IAC9CvB,EAAciC,YAAuBV,KAmCjBK,KAAM,IACNC,MAAO,CACH,CAAEN,MAAO,EAAGO,MAAOjC,EAAE,2BACrB,CAAE0B,MAAO,IAAKO,MAAOjC,EAAE,+BAE3BkC,kBAAkB,sBAO3C,CACC7B,EACAK,EACAI,EACAZ,EAAQX,WACRW,EAAQR,OACRM,EACAY,EACAT","file":"static/js/panelLayoutGZMTR.545440f8.chunk.js","sourcesContent":["import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Slider,\n    ListItem,\n    ListItemText,\n    Icon,\n    Collapse,\n    makeStyles,\n    createStyles,\n    List,\n    ListItemIcon,\n    Divider,\n} from '@material-ui/core';\nimport { ParamContext } from '../../context';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../redux';\nimport { ChangeEvent } from 'react';\nimport { setDirectionIndicatorX, setDirectionIndicatorY } from '../../redux/param/action';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        nestedList: {\n            paddingLeft: theme.spacing(5),\n        },\n        slider: {\n            width: 168,\n            marginLeft: 8,\n            marginRight: 8,\n        },\n    })\n);\n\nexport default React.memo(function LayoutGZMTR() {\n    return (\n        <>\n            <Divider />\n            <DirectionGZLi />\n        </>\n    );\n});\n\nconst DirectionGZLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const reduxDispatch = useDispatch();\n\n    const directionIndicatorX = useSelector((store: RootState) => store.param.direction_gz_x);\n    const directionIndicatorY = useSelector((store: RootState) => store.param.direction_gz_y);\n    const { dispatch } = React.useContext(ParamContext);\n\n    const [isOpen, setIsOpen] = React.useState(false);\n\n    return React.useMemo(() => {\n        const handleXChange = (_: ChangeEvent<{}>, value: number | number[]) => {\n            dispatch({ type: 'SET_DIRECTION_GZ_X', value: value as number });\n            reduxDispatch(setDirectionIndicatorX(value as number));\n        };\n\n        const handleYChange = (_: ChangeEvent<{}>, value: number | number[]) => {\n            dispatch({ type: 'SET_DIRECTION_GZ_Y', value: value as number });\n            reduxDispatch(setDirectionIndicatorY(value as number));\n        };\n\n        return (\n            <>\n                <ListItem button onClick={() => setIsOpen(prevOpen => !prevOpen)}>\n                    <ListItemIcon>\n                        <Icon>open_with</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('layout.directionGZ.title')} />\n                    {isOpen ? <Icon color=\"action\">expand_less</Icon> : <Icon color=\"action\">expand_more</Icon>}\n                </ListItem>\n                <Collapse in={isOpen} unmountOnExit>\n                    <List component=\"div\" disablePadding className={classes.nestedList}>\n                        <ListItem>\n                            <ListItemText primary={t('layout.directionGZ.horizontal')} />\n                            <Slider\n                                className={classes.slider}\n                                value={directionIndicatorX}\n                                onChange={handleXChange}\n                                step={0.01}\n                                marks={[\n                                    { value: 0, label: t('layout.directionGZ.left') },\n                                    { value: 100, label: t('layout.directionGZ.right') },\n                                ]}\n                                valueLabelDisplay=\"auto\"\n                            />\n                        </ListItem>\n                        <Divider variant=\"middle\" />\n                        <ListItem>\n                            <ListItemText primary={t('layout.directionGZ.vertical')} />\n                            <Slider\n                                className={classes.slider}\n                                value={directionIndicatorY}\n                                onChange={handleYChange}\n                                step={0.01}\n                                marks={[\n                                    { value: 0, label: t('layout.directionGZ.top') },\n                                    { value: 100, label: t('layout.directionGZ.bottom') },\n                                ]}\n                                valueLabelDisplay=\"auto\"\n                            />\n                        </ListItem>\n                    </List>\n                </Collapse>\n            </>\n        );\n    }, [\n        directionIndicatorX,\n        directionIndicatorY,\n        isOpen,\n        classes.nestedList,\n        classes.slider,\n        t,\n        dispatch,\n        reduxDispatch,\n    ]);\n};\n"],"sourceRoot":""}