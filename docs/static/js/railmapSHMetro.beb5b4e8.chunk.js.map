{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","methods.ts","svgs/railmap/methods/share.ts","svgs/railmap/main/station/station-shmetro.tsx","svgs/railmap/main/main-shmetro.tsx","svgs/railmap/railmap-shmetro.tsx"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","getYShareMTR","stnId","stnList","includes","parents","children","stnPred","adjacencyList","leftW","rightW","reduce","acc","cur","a","c","criticalPathMethod","from","to","adjMat","len","nodes","allLengths","criticalPaths","forEach","child","cp","push","unshift","maxLength","Math","max","getXShareMTR","branches","criticalPath","branchOfStn","filter","branch","partSource","partSink","leftOpenJaw","lens","slice","getStnState","currentId","routes","direction","console","log","Set","concat","ShortDirection","right","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","yShares","xShares","namePoss","leftWideFactor","rightWideFactor","pathWeight","Infinity","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","res","getYShare","stnIds","lineXs","realXs","realYs","e","prevId","prevY","prevX","path","stnDX","stnExtraH","stnSpareH","warn","x","y","join","replace","stations","stnStates","xs","ys","linePaths","main","pass","lineMainStns","linePassStns","_linePath","drawLine","StationSHMetro","props","param","useAppSelector","store","stnInfo","stn_list","branchNameDX","left","name","split","stationIconStyle","stationIconColor","info_panel_type","services","fill","stnState","transfer","info","stroke","xlinkHref","transform","infos","facility","StationNameGElement","nameENLn","stnNameEl","useRef","React","useState","width","bBox","setBBox","useEffect","current","getBBox","directionPolarity","mainDx","Facilities","none","flat","x1","x2","strokeWidth","intInfos","textAnchor","StationName","ref","stnName","sum","osiInfos","forwardRef","others","useMemo","map","txt","array","className","dy","fontSize","IntBoxGroup","boxInfos","Boolean","match","dx","isLineNumber","isMaglev","el","IntBoxMaglev","IntBoxNumber","IntBoxLetter","osysiInfos","memo","prevProps","nextProps","toString","dominantBaseline","textCount","height","OSIText","lineNames","OSysIText","lineNamesEn","MainSHMetro","helper","deps","depsStr","realCP","JSON","stringify","svgWidth","railmap","padding","branch_spacing","current_stn_idx","servicesAll","values","Services","servicesPresent","stationInfo","bool","s","paths","stns","id","svg_height","servicesLevel","Line","theme","servicePath","undefined","j","d","markerStart","markerEnd","strokeLinejoin","type","servicesMax","servicesDelta","local","express","direct","servicesPassDelta","hasOwnProperty","xm","ym","h","StationGroup","ServicesElements","service","labelX","dx_hint","serviceLevel","y1","y2","DirectionElements","RailMapSHMetro","DefsSHMetro","r","cx","cy","viewBox","refY","refX","filterUnits","slope","intercept","operator","in","radius","result","in2","colorInterpolationFilters","tableValues","floodColor"],"mappings":"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","file":"static/js/railmapSHMetro.beb5b4e8.chunk.js","sourcesContent":["import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { StationDict } from './constants/constants';\n\n/**\n * Vertical position (in shares) of station icon if using MTR style (for consistency of method `RMGLine.newStnPossibleLoc()`).\n */\nexport const getYShareMTR = (stnId: string, stnList: StationDict): -1 | 0 | 1 => {\n    if (\n        ['linestart', 'lineend'].includes(stnId) ||\n        stnList[stnId].parents.length > 1 ||\n        stnList[stnId].children.length > 1\n    ) {\n        return 0;\n    }\n    var stnPred = stnList[stnId].parents[0];\n    if (stnPred) {\n        // parent exist\n        if (stnList[stnPred].children.length === 1) {\n            // no sibling, then y same as parent\n            return getYShareMTR(stnPred, stnList);\n        } else {\n            // sibling exists, then y depends on its idx of being children\n            return stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n        }\n    } else {\n        // no parent, must be linestart\n        return 0;\n    }\n};\n","import * as Global from '../../../methods';\nimport { RMGParam, ShortDirection, StationDict, StationInfo } from '../../../constants/constants';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (\n                          direction === ShortDirection.right\n                              ? _isSuccessor(currentId, cur, routes)\n                              : _isPredecessor(currentId, cur, routes)\n                      )\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as StationDict;\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number\n    ) {\n        var [prevId, prevY, prevX] = [] as unknown as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 2;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + e}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - e}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number = 9.68\n    ) {\n        let linePaths = { main: [] as string[], pass: [] as string[] };\n        branches.forEach((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branches: string[][], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    let linePaths = { main: [] as string[][], pass: [] as string[][] };\n    branches.forEach(branch => {\n        branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n        var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n        var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n        if (lineMainStns.length === 1) {\n            linePassStns = branch;\n        }\n\n        if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n            // if two set disjoint\n            if (linePassStns[0] === branch[0]) {\n                // -1 -1 1 1\n                linePassStns.push(lineMainStns[0]);\n            } else if (\n                lineMainStns[0] === branch[0] &&\n                lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                linePassStns.length\n            ) {\n                linePassStns = branch;\n                lineMainStns = [];\n            } else {\n                // 1 1 -1 -1\n                linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n            }\n        }\n\n        linePaths.main.push(lineMainStns);\n        linePaths.pass.push(linePassStns);\n    });\n\n    return linePaths;\n};\n","import React, { useRef, memo } from 'react';\nimport {\n    InterchangeInfo,\n    Name,\n    PanelTypeGZMTR,\n    PanelTypeShmetro,\n    Facilities,\n} from '../../../../constants/constants';\nimport { useAppSelector } from '../../../../redux';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n}\n\nconst StationSHMetro = (props: Props) => {\n    const param = useAppSelector(store => store.param);\n    const stnInfo = param.stn_list[props.stnId];\n\n    // shift station name if the line bifurcate here\n    const branchNameDX =\n        ([...stnInfo.branch.left, ...stnInfo.branch.right].length ? 8 + 12 * stnInfo.name[1].split('\\\\').length : 0) *\n        (param.direction === 'r' ? -1 : 1);\n\n    let stationIconStyle = '';\n    let stationIconColor: { [pos: string]: string } = {};\n    if (param.info_panel_type === 'sh2020') {\n        if (stnInfo.services.length === 3) stationIconStyle = 'stn_sh_2020_direct';\n        else if (stnInfo.services.length === 2) stationIconStyle = 'stn_sh_2020_express';\n        else stationIconStyle = 'stn_sh_2020';\n        stationIconColor.fill = props.stnState === -1 ? 'gray' : 'var(--rmg-theme-colour)';\n    } else {\n        // param.info_panel_type === 'sh' or others (from other styles)\n        if (stnInfo.services.length === 3) stationIconStyle = 'direct_sh';\n        else if (stnInfo.services.length === 2) stationIconStyle = 'express_sh';\n        else if ([...stnInfo.transfer.info[0], ...(stnInfo.transfer.info[1] || [])].length > 0)\n            stationIconStyle = 'int2_sh';\n        else stationIconStyle = 'stn_sh';\n        stationIconColor.stroke = props.stnState === -1 ? 'gray' : 'var(--rmg-theme-colour)';\n    }\n\n    return (\n        <>\n            <use\n                xlinkHref={`#${stationIconStyle}`}\n                {...stationIconColor} // different styles use either `fill` or `stroke`\n            />\n            <g transform={`translate(${branchNameDX},0)`}>\n                <StationNameGElement\n                    name={stnInfo.name}\n                    infos={stnInfo.transfer.info}\n                    stnState={props.stnState}\n                    direction={param.direction}\n                    info_panel_type={param.info_panel_type}\n                    facility={stnInfo.facility}\n                />\n            </g>\n        </>\n    );\n};\n\nexport default StationSHMetro;\n\ninterface StationNameGElementProps {\n    name: Name;\n    infos: InterchangeInfo[][];\n    stnState: -1 | 0 | 1;\n    direction: 'l' | 'r';\n    info_panel_type: PanelTypeGZMTR | PanelTypeShmetro;\n    facility: Facilities;\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const { name, infos, stnState, info_panel_type, direction, facility } = props;\n    const nameENLn = props.name[1].split('\\\\').length;\n\n    // get the exact station name width so that the\n    // interchange station icon can be right after the station name\n    const stnNameEl = useRef<SVGGElement | null>(null);\n    // the original name position\n    const [bBox, setBBox] = React.useState({ width: 0 } as DOMRect);\n    React.useEffect(\n        () => setBBox(stnNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [...name]\n    );\n    // the original name position's right x\n    const x = bBox.width + 5;\n\n    // rotate the station info now\n    // other wise the bcr will be inaccurate due to the rotation\n    // Chito: so, use BBox instead\n\n    // simplify the calculation times\n    const directionPolarity = direction === 'l' ? 1 : -1;\n\n    // main elements icon's dx will change if there is a facility icon or not\n    const mainDx = facility !== Facilities.none ? 30 : 0;\n\n    return (\n        <g transform={`translate(${direction === 'l' ? 6 : -6},${info_panel_type === 'sh2020' ? -20 : -6})rotate(${props.direction === 'l' ? -45 : 45})`}>\n            {infos.flat().length > 0 && (\n                <>\n                    <line\n                        x1={mainDx * directionPolarity}\n                        x2={(mainDx + x) * directionPolarity}\n                        stroke={stnState === -1 ? 'gray' : 'black'}\n                        strokeWidth={0.5}\n                    />\n                    <IntBoxGroup\n                        intInfos={infos}\n                        transform={`translate(${(mainDx + x) * directionPolarity},-10.75)`}\n                        direction={direction}\n                    />\n                </>\n            )}\n\n            {facility !== Facilities.none && (\n                <use\n                    xlinkHref={'#' + facility}\n                    x={10 * directionPolarity}\n                    y={-30}\n                />\n            )}\n\n            <g\n                textAnchor={direction === 'l' ? 'start' : 'end'}\n                transform={`translate(${mainDx * directionPolarity},${-14.15625 - 2 - 12 * (nameENLn - 1)})`}\n            >\n                <StationName\n                    ref={stnNameEl}\n                    stnName={name}\n                    fill={stnState === -1 ? 'gray' : stnState === 0 ? 'red' : 'black'}\n                />\n\n                {/* deal out-of-station here as it is a y axis element. leave out-of-system in IntBoxGroup*/}\n                {infos[1]?.length > 0 && (\n                    <g\n                        transform={`translate(${(x + infos.reduce((sum, infos) => sum + infos.length, 0) * 15) *\n                            directionPolarity\n                            },-30)`}\n                    >\n                        <OSIText osiInfos={infos[1]} />\n                    </g>\n                )}\n            </g>\n        </g>\n    );\n};\n\nconst StationName = React.forwardRef(\n    (props: { stnName: Name } & React.SVGProps<SVGGElement>, ref: React.Ref<SVGGElement>) => {\n        const { stnName, ...others } = props;\n\n        return (\n            <g ref={ref} {...others}>\n                {React.useMemo(\n                    () => (\n                        <>\n                            {stnName[0].split('\\\\').map((txt, i, array) => (\n                                <text key={i} className=\"rmg-name__zh\" dy={(array.length - 1 - i) * -15}>\n                                    {txt}\n                                </text>\n                            ))}\n                            <g fontSize={9.6}>\n                                {stnName[1].split('\\\\').map((txt, i) => (\n                                    <text key={i} className=\"rmg-name__en\" dy={12 * (i + 1)}>\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </>\n                    ),\n                    // eslint-disable-next-line react-hooks/exhaustive-deps\n                    [...stnName]\n                )}\n            </g>\n        );\n    }\n);\n\nconst IntBoxGroup = (props: { intInfos: InterchangeInfo[][]; direction: 'l' | 'r' } & React.SVGProps<SVGGElement>) => {\n    const { intInfos, direction, ...others } = props;\n\n    // also known as non out-of-system transfers\n    const boxInfos = [\n        ...intInfos[0],\n        ...intInfos[1] || [],\n        // some dirty tricks here as shmetro shows maglev icon even it is a out-of-system transfer\n        // and display a maglev icon is much easier in boxInfos than OSysIText\n        ...intInfos[2]?.filter(info => Boolean(info[4].match(/^磁(悬)*浮/))) || []\n    ];\n\n    let dx = 0;  // update in every boxInfos\n\n    return (\n        <g fontSize={14} textAnchor=\"middle\" {...others}>\n            {boxInfos.map((info, i) => {\n                const isLineNumber = Boolean(info[4].match(/^\\d.*$/));\n                const isMaglev = Boolean(info[4].match(/^磁(悬)*浮/));\n\n                if (props.direction === 'r') {\n                    dx -= (isLineNumber || isMaglev ? 20 : info[4].length * 14 + 12 + 0) + (i === 0 ? 0 : 5);\n                }\n\n                let el = <g />;\n                if (isMaglev) {\n                    el = (\n                        <g transform={`translate(${dx},-16)scale(0.1428571429)`} key={i}>\n                            <IntBoxMaglev info={info} />\n                        </g>\n                    );\n                } else if (isLineNumber) {\n                    el = (\n                        <g transform={`translate(${dx},0)`} key={i}>\n                            <IntBoxNumber info={info} />\n                        </g>\n                    );\n                } else {\n                    el = (\n                        <g transform={`translate(${dx},0)`} key={i}>\n                            <IntBoxLetter info={info} />\n                        </g>\n                    );\n                }\n\n                if (props.direction === 'l') {\n                    dx += isLineNumber || isMaglev ? 20 + 5 : info[4].length * 14 + 12 + 5;\n                }\n                return el;\n            })}\n\n            {[...intInfos[2] || []].length > 0 &&\n                <g\n                    transform={`translate(${dx - (props.direction === 'r' ? 5 : 0)},0)`}\n                    key={boxInfos.length + 1}>\n                    <OSysIText osysiInfos={intInfos[2]} direction={props.direction} />\n                </g>}\n        </g>\n    );\n};\n\nconst IntBoxMaglev = memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_maglev\" fill={props.info[2]} stroke={props.info[2]} />\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxNumber = memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_number\" fill={props.info[2]} />\n            <text x={10} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                {/* // line starts with numbers */}\n                {props.info[4].match(/(\\d*)\\w+/)![0]}\n            </text>\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxLetter = memo(\n    (props: { info: InterchangeInfo }) => {\n        // box width: 16 * number of characters + 12\n        const textCount = props.info[4].split('\\\\')[0].length;\n        return (\n            <>\n                <rect height={22} width={textCount * 14 + 12} y={-11} fill={props.info[2]} />\n                <text x={textCount * 7 + 6} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                    {props.info[4].split('\\\\')[0]}\n                </text>\n            </>\n        );\n    },\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst OSIText = (props: { osiInfos: InterchangeInfo[] }) => {\n    // get the all names from the out of station changes\n    const lineNames = props.osiInfos.map(info => info[4]).join('，');\n    return React.useMemo(\n        () => (\n            <g textAnchor=\"middle\" fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {`换乘${lineNames}`}\n                </text>\n                <text className=\"rmg-name__zh\" dy={5}>\n                    仅限公共交通卡\n                </text>\n                <text className=\"rmg-name__en\" dy={12.5} fontSize=\"75%\">\n                    Only for Public Transportation Card\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [lineNames.toString()]\n    );\n};\n\nconst OSysIText = (props: { osysiInfos: InterchangeInfo[], direction: 'l' | 'r' }) => {\n    // get the all names from out of system transfers\n    const lineNames = props.osysiInfos.map(info => info[4]).join('，');\n    const lineNamesEn = props.osysiInfos.map(info => info[5]).join(', ');\n\n    return React.useMemo(\n        () => (\n            <g textAnchor={props.direction === 'l' ? 'start' : 'end'} fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={3}>\n                    转乘{lineNames}\n                </text>\n                <text className=\"rmg-name__en\" dy={10} fontSize=\"75%\">\n                    To {lineNamesEn}\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.osysiInfos.toString(), props.direction]\n    );\n};\n","import React from 'react';\nimport { adjacencyList, getXShareMTR, criticalPathMethod, drawLine, getStnState } from '../methods/share';\nimport StationSHMetro from './station/station-shmetro';\nimport { Services } from '../../../constants/constants';\nimport { useAppSelector } from '../../../redux';\n\ninterface servicesPath {\n    main: string[];\n    pass: string[];\n    service: Services;\n}\n\nconst MainSHMetro = () => {\n    const { routes, branches, depsStr: deps } = useAppSelector(store => store.helper);\n    const param = useAppSelector(store => store.param);\n\n    const adjMat = adjacencyList(\n        param.stn_list,\n        () => 0,\n        () => 0\n    );\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const xShares = React.useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShareMTR(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n    const lineXs: [number, number] = [\n        (param.svgWidth.railmap * param.padding) / 100,\n        param.svgWidth.railmap * (1 - param.padding / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = React.useMemo(\n        () => {\n            console.log('computing y shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: branches[0].includes(cur) ? 0 : 3 }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: -yShares[cur] * param.branch_spacing }),\n        {} as typeof yShares\n    );\n\n    const stnStates = React.useMemo(\n        () => getStnState(param.current_stn_idx, routes, param.direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.current_stn_idx, param.direction, routes.toString()]\n    );\n\n    const servicesAll = Object.values(Services);\n    const servicesPresent = Object.values(param.stn_list)\n        .map(stationInfo => stationInfo.services)\n        .flat()  // all services in all stations\n        .reduce(\n            (acc, cur) => {\n                acc[servicesAll.indexOf(cur)] = true;\n                return acc;\n            },\n            [false, false, false] as [boolean, boolean, boolean]\n        )  // set the flag in order\n        .map((bool, i) => [servicesAll[i], bool] as [Services, boolean])  // zip\n        .filter(s => s[1])  // get the existing service\n        .map(s => s[0]);  // maintain the services' order\n\n    const linePaths = drawLine(branches, stnStates);\n\n    // paths = {'local':{'main':..., 'pass':...}, 'express':...}\n    // const paths = servicesLevel.reduce((allServicesPath, services) => ({\n    //         ...allServicesPath,\n    //         [services]: (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n    //             (acc, cur) => ({\n    //                 ...acc,\n    //                 [cur]: linePaths[cur].map(stns => _linePath(stns, cur, xs, ys, param.direction, services)).filter(path => path !== ''),\n    //             }),\n    //             {} as { [key in keyof ReturnType<typeof drawLine>]: string[] })\n    //     }), {} as {[services in Services]: { main: string[]; pass: string[] }}\n    // );\n\n    // paths = [{'main':..., 'pass':..., 'service':'local'}, ...}]\n    const paths = servicesPresent.map(services =>\n        (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n            (acc, cur) => ({\n                ...acc,\n                [cur]: linePaths[cur]\n                    .map(stns => _linePath(stns, cur, xs, ys, param.direction, services, servicesPresent.length))\n                    .filter(path => path !== ''),\n                service: services,\n            }),\n            {} as servicesPath\n        )\n    );\n\n    return (\n        <g id=\"main\" transform={`translate(0,${param.svg_height - 63})`}>\n            <Line paths={paths} direction={param.direction} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} />\n            <ServicesElements\n                servicesLevel={servicesPresent}\n                dy={-param.svg_height + 100}\n                direction={param.direction}\n                lineXs={lineXs}\n            />\n            <DirectionElements />\n        </g>\n    );\n};\n\nexport default MainSHMetro;\n\nconst Line = (props: { paths: servicesPath[]; direction: 'l' | 'r' }) => {\n    const { theme } = useAppSelector(store => store.param);\n\n    return (\n        <>\n            {props.paths.map((servicePath, i) => (\n                <g key={`servicePath${i}`} transform={`translate(0,${i * 25})`}\n                    // the following line is a special case for pujiang line\n                    // where its pass line color should be white with outline\n                    // surrounding it, see #161 for details.\n                    filter={theme[2] === '#999999' ? 'url(#colorreplace)' : undefined}>\n                    <g>\n                        {servicePath.pass.map((path, j) => (\n                            <path\n                                key={j}\n                                stroke=\"gray\"\n                                strokeWidth={12}\n                                fill=\"none\"\n                                d={path}\n                                markerStart={props.direction === 'l' ? 'url(#arrow_gray)' : undefined}\n                                markerEnd={props.direction === 'r' ? 'url(#arrow_gray)' : undefined}\n                                strokeLinejoin=\"round\"\n                            />\n                        ))}\n                    </g>\n                    <g>\n                        {servicePath.main.map((path, j) => (\n                            <path\n                                key={j}\n                                stroke=\"var(--rmg-theme-colour)\"\n                                strokeWidth={12}\n                                fill=\"none\"\n                                d={path}\n                                markerStart={props.direction === 'l' ? 'url(#arrow_theme_left)' : undefined}\n                                markerEnd={props.direction === 'r' ? 'url(#arrow_theme_right)' : undefined}\n                                strokeLinejoin=\"round\"\n                                filter={i === 2 ? 'url(#contrast-direct)' : i === 1 ? 'url(#contrast-express)' : undefined}\n                            />\n                        ))}\n                    </g>\n                </g>\n            ))}\n        </>\n    );\n};\n\nconst _linePath = (\n    stnIds: string[],\n    type: 'main' | 'pass',\n    xs: { [stnId: string]: number },\n    ys: { [stnId: string]: number },\n    direction: 'l' | 'r',\n    services: Services,\n    servicesMax: number,\n    e: number = 30 // extra short line on either end, will be 0 in `indoor`\n) => {\n    var [prevY, prevX] = [] as number[];\n    var path: { [key: string]: number[] } = {};\n\n    const servicesDelta = {\n        local: 0,\n        express: 20,\n        direct: 40,\n    }[services]; // Todo: enum Services could be a better idea?\n    const servicesPassDelta = servicesMax > 1 ? 50 : 0;\n\n    stnIds.forEach(stnId => {\n        var x = xs[stnId];\n        var y = ys[stnId];\n        if (!prevY && prevY !== 0) {\n            [prevX, prevY] = [x, y];\n            path['start'] = [x, y];\n            return;\n        }\n        if (y === 0) {\n            // merge back to main line\n            if (y !== prevY) {\n                path['bifurcate'] = [prevX, prevY];\n            }\n        } else {\n            // on the branch line\n            if (y !== prevY) {\n                path['bifurcate'] = [x, y];\n            }\n        }\n        path['end'] = [x, y];\n        [prevX, prevY] = [x, y];\n    });\n\n    // generate path\n    if (!path.hasOwnProperty('start')) {\n        // no line generated\n        // keys in path: none\n        return '';\n    } else if (!path.hasOwnProperty('end')) {\n        // little line (only beyond terminal station)\n        // keys in path: start\n        let [x, y] = path['start'];\n        if (type === 'main') {\n            // current at terminal(end) station, draw the litte main line\n            if (direction === 'l') {\n                return `M ${x - e - servicesDelta},${y} H ${x}`;\n            } else {\n                return `M ${x},${y} H ${x + e + servicesDelta}`;\n            }\n        } else {\n            // type === 'pass'\n            // current at terminal(start) station, draw the litte pass line\n            if (direction === 'l') {\n                return `M ${x},${y} L ${x + e + servicesPassDelta},${y}`;\n            } else {\n                return `M ${x - e - servicesPassDelta},${y} L ${x},${y}`;\n            }\n        }\n    } else if (!path.hasOwnProperty('bifurcate')) {\n        // general main line\n        // keys in path: start, end\n        let [x, y] = path['start'],\n            h = path['end'][0];\n        if (type === 'main') {\n            if (direction === 'l') {\n                return `M ${x - e - servicesDelta},${y} H ${h}`;\n            } else {\n                return `M ${x},${y} H ${h + e + servicesDelta}`;\n            }\n        } else {\n            // type === 'pass'\n            if (direction === 'l') {\n                return `M ${x - e},${y} H ${h + e + servicesPassDelta}`;\n            } else {\n                return `M ${x - e - servicesPassDelta},${y} H ${h + e}`;\n            }\n        }\n    } else {\n        // main line bifurcate here to become the branch line\n        // and path return here are only branch line\n        // keys in path: start, bifurcate, end\n\n        // Todo: disable lower branch\n        let [x, y] = path['start'];\n        // let xb = path['bifurcate'][0];\n        let [xm, ym] = path['end'];\n        if (type === 'main') {\n            if (direction === 'l') {\n                if (ym > y) {\n                    // main line, left direction, center to upper\n                    return `M ${x - e},${y} H ${xm} V ${ym}`;\n                } else {\n                    // main line, left direction, upper to center\n                    return `M ${x},${y} V ${ym} H ${xm}`; // wrong marker\n                }\n            } else {\n                if (ym > y) {\n                    // main line, right direction, upper to center\n                    return `M ${x},${y} H ${xm} V ${ym}`; // wrong marker\n                } else {\n                    // main line, right direction, center to upper\n                    return `M ${x},${y} V ${ym} H ${xm + e}`;\n                }\n            }\n        } else {\n            // type === 'pass'\n            if (direction === 'l') {\n                if (ym > y) {\n                    // pass line, left direction, center to upper\n                    return `M ${x - e},${y} H ${xm} V ${ym}`;\n                } else {\n                    // pass line, left direction, upper to center\n                    return `M ${x},${y} V ${ym} H ${xm + e}`;\n                }\n            } else {\n                if (ym > y) {\n                    // pass line, right direction, upper to center\n                    return `M ${x - e},${y} H ${xm} V ${ym}`;\n                } else {\n                    // pass line, right direction, center to upper\n                    return `M ${x},${y} V ${ym} H ${xm + e}`;\n                }\n            }\n        }\n    }\n};\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const param = useAppSelector(store => store.param);\n\n    return (\n        <g>\n            {Object.keys(param.stn_list)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (\n                    <g key={stnId} transform={`translate(${props.xs[stnId]},${props.ys[stnId]})`}>\n                        <StationSHMetro stnId={stnId} stnState={props.stnStates[stnId]} />\n                    </g>\n                ))}\n        </g>\n    );\n};\n\nconst ServicesElements = (props: { servicesLevel: Services[]; direction: 'l' | 'r'; dy: number; lineXs: number[] }) => {\n    const param = useAppSelector(store => store.param);\n\n    if (props.servicesLevel.length === 1) return <></>;\n\n    const servicesLevel = props.servicesLevel.map(\n        service =>\n            ({\n                local: '普通车',\n                express: '大站车',\n                direct: '直达车',\n            }[service])\n    );\n\n    // let dx = props.direction === 'r' ? 5 : param.svgWidth.railmap - 55;\n    const labelX = props.direction === 'r' ? props.lineXs[0] - 42 : props.lineXs[1] + 42;\n\n    let dx_hint = props.servicesLevel.length === 2 ? 350 : 500;\n\n    return (\n        <g>\n            {servicesLevel.map((service, i) => (\n                <g key={service} transform={`translate(${labelX},${i * 25})`}>\n                    <rect x={-27.5} height={10} width={55} fill={'white'} stroke={'black'} y={-5}></rect>\n                    <text className=\"rmg-name__zh\" fontSize={9} y={3} textAnchor=\"middle\">{`${service}运行线`}</text>\n                </g>\n            ))}\n            <g transform={`translate(${props.direction === 'r' ? 30 : param.svgWidth.railmap - dx_hint},${props.dy})`}>\n                <text className=\"rmg-name__zh\">图例：</text>\n                {servicesLevel.map((serviceLevel, i) => (\n                    <g key={`serviceLevel${i}`} transform={`translate(${i * 150 + 50},0)`}>\n                        <line\n                            x1=\"0\"\n                            x2=\"35\"\n                            y1=\"-5\"\n                            y2=\"-5\"\n                            stroke=\"var(--rmg-theme-colour)\"\n                            strokeWidth=\"12\"\n                            filter={i === 2 ? 'url(#contrast-direct)' : i === 1 ? 'url(#contrast-express)' : ''}\n                        />\n                        <use x=\"17.5\" y=\"-5\" xlinkHref=\"#stn_sh\" fill=\"var(--rmg-theme-colour)\" />\n                        <text x=\"40\" className=\"rmg-name__zh\">{`${serviceLevel}停靠站`}</text>\n                    </g>\n                ))}\n            </g>\n        </g>\n    );\n};\n\nconst DirectionElements = () => {\n    const param = useAppSelector(store => store.param);\n\n    return React.useMemo(\n        () => (\n            <g\n                transform={`translate(${param.direction === 'l' ? 50 : param.svgWidth.railmap - 150},${\n                    -param.svg_height + 100\n                })`}\n            >\n                <text className=\"rmg-name__zh\">列车前进方向</text>\n                <path\n                    d=\"M60,60L0,0L60-60H100L55-15H160V15H55L100,60z\"\n                    fill=\"var(--rmg-theme-colour)\"\n                    transform={`translate(${param.direction === 'l' ? -30 : 125},-5)rotate(${\n                        param.direction === 'l' ? 0 : 180\n                    })scale(0.15)`}\n                />\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.direction, param.svgWidth.railmap, param.svg_height]\n    );\n};\n","import * as React from 'react';\nimport MainSHMetro from './main/main-shmetro';\n\nconst RailMapSHMetro = React.memo(() => (\n    <>\n        <DefsSHMetro />\n\n        <MainSHMetro />\n    </>\n));\n\nexport default RailMapSHMetro;\n\nconst DefsSHMetro = React.memo(() => (\n    <defs>\n        <circle id=\"stn_sh\" fill=\"var(--rmg-white)\" strokeWidth={2} r={5} />\n        <path id=\"int2_sh\" fill=\"var(--rmg-white)\" strokeWidth={2} d=\"M -5,0 a 5,5 0 1 1 10,0 V10 a 5,5 0 1 1 -10,0Z\" />\n        <path id=\"express_sh\" fill=\"var(--rmg-white)\" strokeWidth={2} d=\"M -5,0 a 5,5 0 1 1 10,0 V25 a 5,5 0 1 1 -10,0Z\" />\n        <path id=\"direct_sh\" fill=\"var(--rmg-white)\" strokeWidth={2} d=\"M -5,0 a 5,5 0 1 1 10,0 V50 a 5,5 0 1 1 -10,0Z\" />\n        <rect id=\"stn_sh_2020\" stroke=\"none\" height={24} width={10} y={-18} />\n        <rect id=\"stn_sh_2020_express\" stroke=\"none\" height={49} width={10} y={-18} />\n        <rect id=\"stn_sh_2020_direct\" stroke=\"none\" height={74} width={10} y={-18} />\n\n        <rect id=\"intbox_number\" height={22} width={20} y={-11} />\n\n        <g id=\"intbox_maglev\" transform=\"translate(-25,0)\">\n            <rect id=\"maglev_5\" height={144} width={130} y=\"40\" x=\"30\" strokeWidth={10} />\n            <path\n                id=\"maglev_3\"\n                fill=\"var(--rmg-white)\"\n                d=\"m90,55a40,5 0 0 0 -40,3a5,5 0 0 0 -5,5a5,60 0 0 0 -3,60a5,5 0 0 0 5,5l96,0a5,5 0 0 0 5,-5a5,60 0 0 0 -3,-60a5,5 0 0 0 -5,-5a40,5 0 0 0 -40,-3l-5,-10l-5,10\"\n            />\n            <path\n                id=\"maglev_4\"\n                fill=\"var(--rmg-white)\"\n                d=\"m90,140l-40,0a10,5 0 0 1 -10,-5l0,25a10,15 0 0 0 10,15l15,0l0,-10l-15,0l0,-15l90,0l0,15l-15,0l0,10l15,0a10,15 0 0 0 10,-15l0,-25a10,5 0 0 1 -10,5l-50,0\"\n            />\n            <rect id=\"maglev_1\" height=\"25\" width=\"40\" y=\"80\" x=\"50\" />\n            <rect id=\"maglev_2\" height=\"25\" width=\"40\" y=\"80\" x=\"100\" />\n        </g>\n\n        <g id=\"airport\" transform=\"scale(0.5)\">\n            <circle cx=\"0\" cy=\"29.33899\" r=\"29.33899\" fill=\"var(--rmg-grey)\" />\n            <path\n                id=\"airport\"\n                d=\"M28.9769,6.60134c1.711.013,3.111,2.53205,3.111,4.241v10.337s17.106,15.435,17.358,15.666a1.145,1.145,0,0,1,.488,1.152v2.833c0,.651-.451.61-.695.467-.334-.119-17.151-8.863-17.151-8.863-.004,1.458-.797,9.006-1.326,13.304,0,0,4.61,2.457,4.699,2.521.334.268.352.359.352.852v2.001c0,.477-.352.428-.51.324-.183-.062-5.693-1.921-5.693-1.921a2.56018,2.56018,0,0,0-.633-.127,2.31654,2.31654,0,0,0-.666.127s-5.477,1.859-5.672,1.921c-.185.104-.523.153-.523-.324v-2.001c0-.493.029-.584.367-.852.086-.064,4.678-2.521,4.678-2.521-.524-4.298-1.307-11.846-1.325-13.304,0,0-16.822,8.744-17.148,8.863-.217.143-.69.184-.69-.467v-2.833a1.16206,1.16206,0,0,1,.473-1.152c.276-.231,17.365-15.666,17.365-15.666v-10.337c0-1.709,1.403-4.228,3.14105-4.241\"\n                transform=\"translate(-28.9697,0.14347)\"\n                fill=\"var(--rmg-white)\"\n            />\n        </g>\n        <g id=\"disney\" transform=\"scale(0.5)\">\n            <circle cx=\"0\" cy=\"29.33899\" r=\"29.33899\" fill=\"var(--rmg-grey)\" />\n            <path\n                fill=\"var(--rmg-white)\"\n                d=\"M45.6152,7.85015a9.80248,9.80248,0,0,0-9.79907,9.801,9.70059,9.70059,0,0,0,.342,2.582c.002.026.002.055.002.093a.31815.31815,0,0,1-.31494.318.67741.67741,0,0,1-.12806-.02,15.71521,15.71521,0,0,0-13.498,0,.61.61,0,0,1-.122.02.31841.31841,0,0,1-.322-.318v-.067a9.62553,9.62553,0,0,0,.35608-2.608,9.803,9.803,0,1,0-9.797,9.8,10.10364,10.10364,0,0,0,2.308-.271h.05493a.31113.31113,0,0,1,.31409.318.32433.32433,0,0,1-.019.12,15.72588,15.72588,0,1,0,29.703,7.216,15.83676,15.83676,0,0,0-1.746-7.23.18417.18417,0,0,1-.0271-.106.31612.31612,0,0,1,.32007-.318h.057a10.15953,10.15953,0,0,0,2.316.271,9.80051,9.80051,0,0,0,0-19.601\"\n                transform=\"translate(-28.9697 0.13398)\"\n            />\n        </g>\n        {/* Special thanks to Wikimedia Commons, see https://commons.wikimedia.org/wiki/File:China_Railways.svg */}\n        <g id=\"railway\">\n            <circle cx=\"0\" cy=\"29.33899\" r=\"29.33899\" fill=\"var(--rmg-grey)\" transform=\"translate(0,-2)scale(0.5)\" />\n            <path\n                fill=\"var(--rmg-white)\"\n                d=\"M169,273.5c0-19,14.7-34.8,33.7-36.3c18.9-1.5,38.1-2.2,57.4-2.2c19.3,0,38.4,0.8,57.3,2.2  c19,1.5,33.7,17.3,33.7,36.3v47.3l-51.3,14.7c-11.2,3.2-18.9,13.4-18.9,25v147.8c0,17.4,12.2,32.3,29.3,35.7l110.6,22.1  c4.9,1,8.4,5.2,8.4,10.2V599H91v-22.7c0-5,3.5-9.2,8.4-10.2L209.9,544c17-3.4,29.3-18.3,29.3-35.7V360.5c0-11.6-7.7-21.8-18.9-25  L169,320.8V273.5z M309.4,31.7c0.2-1.2,0.3-2.4,0.3-3.6c0-14-11.1-25.4-24.9-26C276.6,1.4,268.3,1,260,1c-8.3,0-16.6,0.4-24.7,1.1  c-13.9,0.6-24.9,12-24.9,26c0,1.2,0.1,2.5,0.3,3.6C90.6,54.8,0,160.3,0,287c0,97.2,53.4,182,132.4,226.6l36.8-48.1  C104.3,432.4,59.8,364.9,59.8,287c0-110.6,89.6-200.2,200.2-200.2S460.2,176.4,460.2,287c0,77.9-44.5,145.4-109.4,178.5  c15,19.6,25.6,33.5,36.8,48.1C466.6,469,520,384.2,520,287C520,160.3,429.4,54.8,309.4,31.7z\"\n                transform=\"translate(-10,0)scale(0.04)\"\n            />\n        </g>\n\n        {/* An extension of the line/path. Remember to minus the stroke-width.  */}\n        <marker id=\"arrow_gray\" viewBox=\"-1.5 0 3 1.5\" refY={0.5}>\n            <path d=\"M0,0L1,1H-1z\" fill=\"var(--rmg-grey)\" />\n        </marker>\n        <marker id=\"arrow_theme_left\" refX={1} refY={0.5}>\n            <path d=\"M1,0L0,1H1z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n        <marker id=\"arrow_theme_right\" refY={0.5}>\n            <path d=\"M0,0L1,1H-1z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n\n        {/* Contrast filters for lines. */}\n        <filter id=\"contrast-direct\" filterUnits=\"userSpaceOnUse\">\n            <feComponentTransfer>\n                <feFuncR type=\"linear\" slope={0.5} intercept={0.25} />\n                <feFuncG type=\"linear\" slope={0.5} intercept={0.25} />\n                <feFuncB type=\"linear\" slope={0.5} intercept={0.25} />\n            </feComponentTransfer>\n        </filter>\n        <filter id=\"contrast-express\" filterUnits=\"userSpaceOnUse\">\n            <feComponentTransfer>\n                <feFuncR type=\"linear\" slope={0.75} intercept={0.125} />\n                <feFuncG type=\"linear\" slope={0.75} intercept={0.125} />\n                <feFuncB type=\"linear\" slope={0.75} intercept={0.125} />\n            </feComponentTransfer>\n        </filter>\n\n        <filter id=\"groupborder\" filterUnits=\"userSpaceOnUse\" x=\"0\" y=\"-300\" width=\"3000\" height=\"500\">\n            <feMorphology operator=\"dilate\" in=\"SourceAlpha\" radius=\"0\" result=\"e1\" />\n            <feMorphology operator=\"dilate\" in=\"SourceAlpha\" radius=\"1\" result=\"e2\" />\n            <feComposite in=\"e1\" in2=\"e2\" operator=\"xor\" result=\"outline\" />\n            {/* <feColorMatrix type=\"matrix\" in=\"outline\"\n                values=\"1 0 0 0 0\n                                    0 1 0 0 0\n                                    0 0 1 0 0\n                                    0 0 0 .3 0\" result=\"outline2\" /> */}\n            <feComposite in=\"outline2\" in2=\"SourceGraphic\" operator=\"over\" result=\"output\" />\n        </filter>\n        <filter id=\"colorreplace\" colorInterpolationFilters=\"sRGB\"\n            // TODO: remove the absolute value while make the filter works correctly\n            filterUnits=\"userSpaceOnUse\" x=\"0\" y=\"-1000\" width=\"5000\" height=\"2000\">\n            {/* Replace pass gray color with white.\n                https://stackoverflow.com/questions/41639049/replace-one-color-using-svg-filters */}\n            <feComponentTransfer in=\"SourceGraphic\" >\n                <feFuncR type=\"discrete\" tableValues=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\" />\n                <feFuncG type=\"discrete\" tableValues=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\" />\n                <feFuncB type=\"discrete\" tableValues=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\" />\n            </feComponentTransfer>\n            <feColorMatrix type=\"matrix\" values=\"1 0 0 0 0\n                                                 0 1 0 0 0\n                                                 0 0 1 0 0\n                                                 1 1 1 1 -3\" result=\"selectedColor1\" />\n\n            {/* Draw an outline line around the pass line.\n                https://stackoverflow.com/questions/49693471/svg-border-outline-for-group-of-elements\n                Also see #181 why we do not simply outline the pass line element. */}\n            <feMorphology operator=\"erode\" in=\"selectedColor1\" radius=\"0\" result=\"e1\" />\n            <feMorphology operator=\"erode\" in=\"selectedColor1\" radius=\"1\" result=\"e2\" />\n            <feComposite in=\"e1\" in2=\"e2\" operator=\"xor\" result=\"uncoloredOutline\" />\n            {/* As the pass line is colored in white, we need to recolor the outline with black. */}\n            <feFlood floodColor=\"rgb(0,0,0)\" />\n            <feComposite operator=\"in\" in2=\"uncoloredOutline\" result=\"outline\" />\n            {/* Put the outline on the white not gray pass line. */}\n            <feComposite in=\"outline\" in2=\"selectedColor1\" operator=\"over\" result=\"result\" />\n            {/* Put the white pass line with outline on the original line. */}\n            <feComposite in=\"result\" in2=\"SourceGraphic\" operator=\"over\" />\n        </filter>\n    </defs>\n));\n"],"sourceRoot":""}