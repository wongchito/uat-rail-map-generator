{"version":3,"file":"static/js/panelStationsInterchange.9b8bd91b.chunk.js","mappings":"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","sources":["panels/colour-diag/theme-items.tsx","panels/colour-diag/dialog.tsx","panels/colour-diag/index.ts","panels/stations/edit-diag/name-list-items.tsx","panels/stations/edit-diag/interchange-tab.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    createStyles,\n    Divider,\n    List,\n    ListItem,\n    ListItemText,\n    makeStyles,\n    MenuItem,\n    Select,\n    TextField,\n    Tooltip,\n} from '@material-ui/core';\nimport { getTransText2 } from '../../utils';\nimport { ColourHex, LanguageCode, MonoColour, PaletteEntry, Theme } from '../../constants/constants';\nimport { useAppSelector } from '../../redux';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        cityItem: {\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n        },\n        menuItemSpan: {\n            padding: '0 .3rem',\n        },\n        button: {\n            borderRadius: '50%',\n            height: 24,\n            width: 24,\n            minWidth: 0,\n            marginRight: 8,\n            // border: 'solid',\n            padding: 0,\n        },\n        inputColour: {\n            position: 'absolute',\n            width: 0,\n            height: 0,\n            left: 27,\n            top: 32,\n        },\n        buttonContainer: {\n            display: 'flex',\n            flexShrink: 1,\n        },\n    })\n);\n\nconst useLineList = (theme: Theme) => {\n    const [list, setList] = React.useState([] as PaletteEntry[]);\n\n    const listPromise: Promise<PaletteEntry[]> = fetch(`https://railmapgen.github.io/rmg-palette/resources/palettes/${theme[0]}.json`)\n        .then(resp => resp.json())\n        .catch(() => []);\n\n    useEffect(\n        () => {\n            if (typeof theme[0] === 'undefined') {\n                return;\n            }\n            (async () => {\n                const data = await listPromise;\n                setList(\n                    theme[0] === 'other' ? [{ ...data[0], colour: theme[2], fg: theme[3] || MonoColour.white }] : data\n                );\n            })();\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [theme.toString()]\n    );\n\n    return list;\n};\n\ninterface ColourDialogProps {\n    theme: Theme;\n    onUpdate: (key: string, value: any) => void;\n}\n\nexport const PalettePanel = (props: ColourDialogProps) => {\n    const { t, i18n } = useTranslation();\n    const classes = useStyles();\n\n    const cityChange = (event: React.ChangeEvent<HTMLInputElement>) =>\n        props.onUpdate('theme', [event.target.value, ...props.theme.slice(1)]);\n\n    // Hook for fetching line list of current city\n    const lineList = useLineList(props.theme);\n\n    // Hook for updating props.theme when lineList changed\n    useEffect(\n        () => {\n            if (lineList.length === 0) return; // initialising, ignore\n            if (lineList.filter(l => l.id === props.theme[1]).length) return; // current city, ignore\n            let { id, colour, fg } = lineList[0];\n            let newTheme = [props.theme[0], id, colour, fg || MonoColour.white];\n            props.onUpdate('theme', newTheme);\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [lineList]\n    );\n\n    const lineChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let line = event.target.value;\n        let { colour, fg } = lineList.filter(l => l.id === line)[0];\n        let newTheme = [props.theme[0], line, colour, fg || MonoColour.white];\n        props.onUpdate('theme', newTheme);\n    };\n\n    return (\n        <List component=\"div\" disablePadding>\n            <CitySelectItem value={props.theme[0]} onChange={cityChange} />\n            <Divider variant=\"middle\" />\n            <ListItem>\n                <ListItemText primary={t('colour.line')} />\n                <TextField\n                    select\n                    style={{ width: 166 }}\n                    onChange={lineChange}\n                    value={props.theme[1]}\n                    disabled={props.theme[0] === 'other'}\n                >\n                    {lineList.map(l => (\n                        <MenuItem key={l.id} value={l.id}>\n                            <span\n                                className={classes.menuItemSpan}\n                                style={{\n                                    backgroundColor: l.colour,\n                                    color: l.fg || MonoColour.white,\n                                }}\n                            >\n                                {getTransText2(l.name, i18n.languages as LanguageCode[])}\n                            </span>\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </ListItem>\n        </List>\n    );\n};\n\nexport const CustomPanel = (props: ColourDialogProps) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const [hexTemp, setHexTemp] = useState(props.theme[2]);\n\n    useEffect(\n        () => setHexTemp(props.theme[2]),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.theme[2]]\n    );\n\n    const colourChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let rgb = event.target.value;\n        // setHexTemp(rgb);\n        props.onUpdate('theme', ['other', 'other', rgb, props.theme[3]]);\n    };\n\n    const hexChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let hex = event.target.value;\n        if (hex.match(/^#[0-9a-fA-F]{0,6}$/) === null) return;\n        setHexTemp(hex as ColourHex);\n\n        if (props.theme[0] !== 'other') {\n            if (hex.match(/^#[0-9a-fA-f]{6}$/) !== null) {\n                // if hex valid, modify theme city and props.hex\n                let newTheme = ['other', 'other', hex, props.theme[3]];\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (along with selection)\n                // then line will be updated by hook\n            } else {\n                // if hex not valid, modify theme city only\n                let newTheme = ['other', 'other', ...props.theme.slice(2)];\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (along with selection)\n                // then line will be updated by hook\n            }\n        } else {\n            if (hex.match(/^#[0-9a-fA-F]{6}$/) !== null) {\n                // if hex valid, modify props.hex\n                let newTheme = props.theme.map((val, idx) => (idx === 2 ? hex : val));\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (actually only hex is changed)\n            } else {\n                // if hex not valid, do nothing\n            }\n        }\n    };\n\n    const fgChange = (event: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n        let newTheme = ['other', 'other', props.theme[2], event.target.value];\n        props.onUpdate('theme', newTheme);\n    };\n\n    return (\n        <List component=\"div\" disablePadding>\n            <ListItem>\n                <ListItemText primary={t('colour.colour')} />\n                <div className={classes.buttonContainer}>\n                    <input\n                        type=\"color\"\n                        id=\"input-color\"\n                        value={props.theme[2]}\n                        onChange={colourChange}\n                        className={classes.inputColour}\n                        style={{ opacity: 0 }}\n                    />\n                    <label htmlFor=\"input-color\">\n                        <Tooltip title={t('colour.tooltip') || ''} aria-label=\"colour picker\">\n                            <Button\n                                className={classes.button}\n                                style={{\n                                    backgroundColor: props.theme[2],\n                                    borderColor: props.theme[3] || MonoColour.white,\n                                }}\n                                variant=\"contained\"\n                                component=\"span\"\n                            >\n                                {' '}\n                            </Button>\n                        </Tooltip>\n                    </label>\n                </div>\n                <TextField\n                    error={!hexTemp?.match(/^#[0-9a-fA-F]{6}$/g)}\n                    style={{ width: 85 }}\n                    onChange={hexChange}\n                    value={hexTemp?.toUpperCase()}\n                />\n            </ListItem>\n            <Divider variant=\"middle\" />\n            <ListItem>\n                <ListItemText primary={t('colour.fg')} />\n                <Select\n                    native\n                    style={{ width: 85 }}\n                    label={t('colour.fg')}\n                    onChange={fgChange}\n                    value={props.theme[3] || MonoColour.white}\n                >\n                    <option value=\"#fff\">{t('colour.fgWhite')}</option>\n                    <option value=\"#000\">{t('colour.fgBlack')}</option>\n                </Select>\n            </ListItem>\n        </List>\n    );\n};\n\nconst CitySelectItem = (props: { value: string; onChange: (event: React.ChangeEvent<HTMLInputElement>) => void }) => {\n    const { t, i18n } = useTranslation();\n    const classes = useStyles();\n\n    const cityList = useAppSelector(state => state.data.paletteCityConfig);\n\n    const items = useMemo(\n        () =>\n            cityList.map(c => (\n                <MenuItem key={c.id} value={c.id}>\n                    <span className={classes.cityItem}>\n                        <CountryFlag code={c.country} />\n                        <span>{getTransText2(c.name, i18n.languages as LanguageCode[])}</span>\n                    </span>\n                </MenuItem>\n            )),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n    return (\n        <ListItem>\n            <ListItemText primary={t('colour.city')} />\n            <TextField select style={{ width: 166 }} value={props.value} onChange={props.onChange}>\n                {items}\n            </TextField>\n        </ListItem>\n    );\n};\n\nconst useEmojiStyles = makeStyles(() =>\n    createStyles({\n        img: {\n            height: 20,\n            marginRight: '0.2rem',\n        },\n    })\n);\n\n/**\n * Convert ISO 3166 alpha-2 country code (followed by BS 6879 UK subdivision code, if applicable) to flag Emoji. For Windows platform, an `img` element with image source from OpenMoji is returned.\n */\nfunction CountryFlag(props: { code: string }) {\n    const { i18n } = useTranslation();\n    const classes = useEmojiStyles();\n\n    let codePoints = [] as string[];\n\n    if (props.code.length === 2) {\n        codePoints = props.code\n            .toUpperCase()\n            .split('')\n            .map(char => ((char.codePointAt(0) || 0) + 127397).toString(16).toUpperCase());\n    } else {\n        codePoints = ['1F3F4'].concat(\n            props.code\n                .toUpperCase()\n                .split('')\n                .map(char => ((char.codePointAt(0) || 0) + 917536).toString(16).toUpperCase()),\n            'E007F'\n        );\n    }\n\n    // special case for simplified Chinese\n    if (\n        [LanguageCode.ChineseCN, LanguageCode.ChineseSimp].includes(i18n.language as LanguageCode) &&\n        props.code === 'TW'\n    )\n        codePoints = ['1F3F4'];\n\n    return navigator.platform.indexOf('Win32') !== -1 || navigator.platform.indexOf('Win64') !== -1 ? (\n        <img\n            src={process.env.PUBLIC_URL + `/images/flags/${codePoints.join('-')}.svg`}\n            className={classes.img}\n            alt={`Flag of ${props.code}`}\n        />\n    ) : (\n        // <img src={process.env.PUBLIC_URL + `/images/flags/${codePoints.join('-')}.svg`} className={classes.img} />\n        <span>{String.fromCodePoint(...codePoints.map(cp => parseInt(cp, 16)))}</span>\n    );\n}\n","import React, { useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    Chip,\n    createStyles,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Divider,\n    Icon,\n    InputBase,\n    List,\n    ListItem,\n    ListItemText,\n    makeStyles,\n    Paper,\n    Tab,\n    Tabs,\n} from '@material-ui/core';\nimport { CustomPanel, PalettePanel } from './theme-items';\nimport { InterchangeInfo, MonoColour, Name, Theme } from '../../constants/constants';\nimport { useAppSelector } from '../../redux';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        contentWrapper: {\n            display: 'flex',\n            overflow: 'hidden',\n            paddingTop: theme.spacing(1),\n            paddingBottom: theme.spacing(1),\n            paddingLeft: theme.spacing(3),\n            paddingRight: theme.spacing(3),\n            [theme.breakpoints.down('xs')]: {\n                flexDirection: 'column',\n            },\n        },\n        contentLeft: {\n            maxWidth: 280,\n        },\n        contentControl: {\n            flexGrow: 0,\n            flexShrink: 0,\n            display: 'flex',\n            flexDirection: 'column',\n            width: 270,\n        },\n\n        paperRoot: {\n            maxWidth: 250,\n        },\n        listItemPaper: {\n            justifyContent: 'center',\n        },\n        iconRoot: {\n            position: 'absolute',\n            color: theme.palette.action.active,\n        },\n        inputBaseRoot: {\n            display: 'block',\n        },\n        inputBaseInputZH: {\n            textAlign: 'center',\n            fontSize: 36,\n            padding: 0,\n            paddingTop: 6,\n            height: 45,\n        },\n        inputBaseInputEN: {\n            textAlign: 'center',\n            fontSize: 18,\n            padding: 0,\n            paddingBottom: 6,\n            height: 'auto',\n        },\n\n        chipWrapper: {\n            overflowX: 'auto',\n            display: 'flex',\n        },\n        chipRoot: {\n            borderRadius: 4.5,\n            height: 32,\n            lineHeight: '1rem',\n            margin: 2,\n        },\n        chipLabel: {\n            padding: '0 6px',\n            '& > span': {\n                display: 'block',\n                textAlign: 'center',\n            },\n            '& > span:first-child': {\n                fontSize: '1rem',\n            },\n            '& > span:last-child': {\n                lineHeight: '0.8rem',\n            },\n        },\n    })\n);\n\ninterface Props {\n    open: boolean;\n    theme: Theme;\n    lineName: Name;\n    onUpdate: (key: string, value: any) => void;\n    onClose: () => void;\n}\n\nconst Dialog2 = (props: Props) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    return (\n        <Dialog open={props.open} onClose={props.onClose}>\n            <DialogTitle>{t('colour.title')}</DialogTitle>\n            <DialogContent className={classes.contentWrapper}>\n                <List component=\"div\" disablePadding className={classes.contentLeft}>\n                    <LineNameInput theme={props.theme} lineName={props.lineName} onUpdate={props.onUpdate} />\n                    <Divider />\n                    <RecentChipSet onUpdate={props.onUpdate} />\n                </List>\n                <div className={classes.contentControl}>\n                    <ColourControl theme={props.theme} onUpdate={props.onUpdate} />\n                </div>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose} color=\"primary\">\n                    {t('dialog.done')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default Dialog2;\n\nconst LineNameInput = (props: { lineName: Name; theme: Theme; onUpdate: Props['onUpdate'] }) => {\n    const classes = useStyles();\n\n    const nameChange = (value: string, index: number) => {\n        let newName = props.lineName.map((val, idx) => (idx === index ? value : val));\n        props.onUpdate('name', newName);\n    };\n\n    return (\n        <ListItem style={{ justifyContent: 'center' }}>\n            <Paper className={classes.paperRoot} style={{ backgroundColor: props.theme[2] }}>\n                <Icon className={classes.iconRoot}>edit</Icon>\n                <InputBase\n                    value={props.lineName[0]}\n                    classes={{\n                        root: classes.inputBaseRoot,\n                        input: classes.inputBaseInputZH,\n                    }}\n                    style={{ color: props.theme[3] || MonoColour.white }}\n                    onChange={e => nameChange(e.target.value, 0)}\n                    autoFocus\n                />\n                <InputBase\n                    value={props.lineName[1]}\n                    classes={{\n                        root: classes.inputBaseRoot,\n                        input: classes.inputBaseInputEN,\n                    }}\n                    style={{ color: props.theme[3] || MonoColour.white }}\n                    onChange={e => nameChange(e.target.value, 1)}\n                />\n            </Paper>\n        </ListItem>\n    );\n};\n\nconst RecentChipSet = (props: { onUpdate: Props['onUpdate'] }) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const theme = useAppSelector(store => store.param.theme);\n    const lineName = useAppSelector(store => store.param.line_name);\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    const allInfos = useMemo(\n        () =>\n            new Set(\n                Object.values(stationList)\n                    .reduce(\n                        (acc, { transfer }) => {\n                            const { info } = transfer;\n                            return acc.concat(...info);\n                        },\n                        [[...theme, ...lineName]]\n                    )\n                    .map(val => JSON.stringify(val))\n                    .reverse()\n            ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n\n    const chips = useMemo(\n        () =>\n            [...allInfos].map((x, i) => {\n                const info: InterchangeInfo = JSON.parse(x);\n                const label = info.slice(4).map((txt, i) => (\n                    <span key={i} style={{ color: info[3] }}>\n                        {txt}\n                    </span>\n                ));\n\n                return (\n                    <Chip\n                        key={i}\n                        onClick={() => {\n                            props.onUpdate('theme', info.slice(0, 4));\n                            props.onUpdate('name', info.slice(4));\n                        }}\n                        style={{ backgroundColor: info[2] }}\n                        className={classes.chipRoot}\n                        classes={{ label: classes.chipLabel }}\n                        {...{ label }}\n                    />\n                );\n            }),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n\n    return (\n        <ListItem>\n            <ListItemText\n                primary={t('colour.recent')}\n                secondary={chips}\n                secondaryTypographyProps={{ component: 'div' }}\n                classes={{ secondary: classes.chipWrapper }}\n            />\n        </ListItem>\n    );\n};\n\nconst ColourControl = (props: { theme: Theme; onUpdate: Props['onUpdate'] }) => {\n    const { t } = useTranslation();\n    const [tabIndex, setTabIndex] = useState(props.theme[0] === 'other' ? 1 : 0);\n\n    const tabNav = (\n        <Tabs\n            value={tabIndex}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            onChange={(_, val) => setTabIndex(val)}\n            variant=\"fullWidth\"\n            scrollButtons=\"off\"\n        >\n            <Tab label={t('colour.palette')} style={{ minWidth: 'unset' }} />\n            <Tab label={t('colour.custom')} style={{ minWidth: 'unset' }} />\n        </Tabs>\n    );\n\n    const panel = (idx => {\n        switch (idx) {\n            case 0:\n                return <PalettePanel {...props} />;\n            case 1:\n                return <CustomPanel {...props} />;\n            default:\n                return <></>;\n        }\n    })(tabIndex);\n\n    return (\n        <>\n            {tabNav}\n            {panel}\n        </>\n    );\n};\n","import ColourDialog from './dialog';\n\nexport default ColourDialog;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ListItem, ListItemIcon, TextField, makeStyles, createStyles } from '@material-ui/core';\nimport { Name } from '../../../constants/constants';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        listItemIcon: {\n            width: '1em',\n            fontSize: '1.5rem',\n            textAlign: 'center',\n        },\n    })\n);\n\ninterface Props {\n    onUpdate: (index: number) => (event: React.ChangeEvent<HTMLInputElement>) => void;\n    name: Name;\n}\n\nconst NameListItems = (props: Props) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    return React.useMemo(\n        () => (\n            <>\n                <ListItem>\n                    <ListItemIcon>\n                        <span className={classes.listItemIcon}>文</span>\n                    </ListItemIcon>\n                    <TextField\n                        style={{ width: '100%' }}\n                        variant=\"outlined\"\n                        label={t('stations.edit.name.nameZH')}\n                        onChange={props.onUpdate(0)}\n                        value={props.name[0]}\n                        autoFocus\n                    />\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <span className={classes.listItemIcon}>A</span>\n                    </ListItemIcon>\n                    <TextField\n                        style={{ width: '100%' }}\n                        variant=\"outlined\"\n                        label={t('stations.edit.name.nameEN')}\n                        onChange={props.onUpdate(1)}\n                        value={props.name[1]}\n                        helperText={t('stations.edit.name.nameENHelper')}\n                    />\n                </ListItem>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.name?.toString() || '']\n    );\n};\n\nexport default NameListItems;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    Chip,\n    createStyles,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Divider,\n    Icon,\n    IconButton,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    makeStyles,\n    Select,\n    Switch,\n    Tooltip,\n} from '@material-ui/core';\nimport ColourDialog from '../../colour-diag';\nimport NameListItems from './name-list-items';\nimport { useAppDispatch, useAppSelector } from '../../../redux';\nimport { InterchangeInfo, MonoColour, Name, RmgStyle, ShortDirection, Theme } from '../../../constants/constants';\nimport {\n    addInterchange,\n    removeInterchange,\n    updateInterchange,\n    updateStationOsiName,\n    updateStationPaidArea,\n    updateStationTickDirection,\n} from '../../../redux/param/action';\n\nconst StationEditInterchangeTab = (props: { stnId: string }) => {\n    const { stnId } = props;\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const rmgStyle = useAppSelector(store => store.param.style);\n    const theme = useAppSelector(store => store.param.theme);\n    const { transfer } = useAppSelector(store => store.param.stn_list[stnId]);\n\n    const [osiNameDialog0Opened, setOsiNameDialog0Opened] = React.useState(false);\n    const [osiNameDialog1Opened, setOsiNameDialog1Opened] = React.useState(false);\n\n    const addClick = (index: number) => {\n        let newInfo: InterchangeInfo = [...theme, '轉綫', 'Line'];\n        dispatch(addInterchange(stnId, index, newInfo));\n    };\n\n    const deleteClick = (setIdx: number, intIdx: number) => {\n        dispatch(removeInterchange(stnId, setIdx, intIdx));\n    };\n\n    return (\n        <List>\n            <ListItem>\n                <ListItemText>\n                    <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.within')}</h3>\n                </ListItemText>\n                <ListItemSecondaryAction>\n                    <Tooltip title={t('stations.edit.interchange.add') || ''} aria-label=\"add\">\n                        <IconButton onClick={() => addClick(0)}>\n                            <Icon>add_circle</Icon>\n                        </IconButton>\n                    </Tooltip>\n                </ListItemSecondaryAction>\n            </ListItem>\n            <ListItem>\n                <InterchangeChipSet stnId={stnId} setIndex={0} onDelete={i => deleteClick(0, i)} />\n            </ListItem>\n\n            {/* Out of station transfer */}\n            {[RmgStyle.MTR, RmgStyle.SHMetro].includes(rmgStyle) && (\n                <>\n                    <Divider />\n                    <ListItem>\n                        <ListItemText>\n                            <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.osi')}</h3>\n                        </ListItemText>\n                        <ListItemSecondaryAction>\n                            {[RmgStyle.MTR].includes(rmgStyle) && (\n                                <React.Fragment>\n                                    <Button\n                                        variant=\"outlined\"\n                                        color=\"primary\"\n                                        style={{ lineHeight: '1rem', whiteSpace: 'pre', marginRight: 5 }}\n                                        onClick={() => setOsiNameDialog0Opened(true)}\n                                    >\n                                        {transfer.osi_names[0]\n                                            ? transfer.osi_names[0].join('\\r\\n')\n                                            : '車站名\\r\\nStn Name'}\n                                    </Button>\n                                    <OSINameDialog\n                                        open={osiNameDialog0Opened}\n                                        stnId={stnId}\n                                        setIndex={0}\n                                        onClose={() => setOsiNameDialog0Opened(false)}\n                                    />\n                                </React.Fragment>\n                            )}\n                            <Tooltip title={t('stations.edit.interchange.add') || ''} aria-label=\"add\">\n                                <IconButton onClick={() => addClick(1)}>\n                                    <Icon>add_circle</Icon>\n                                </IconButton>\n                            </Tooltip>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                    <ListItem>\n                        <InterchangeChipSet stnId={stnId} setIndex={1} onDelete={i => deleteClick(1, i)} />\n                    </ListItem>\n                </>\n            )}\n\n            {/* Out of system transfer */}\n            {[RmgStyle.SHMetro].includes(rmgStyle || '') && (\n                <>\n                    <Divider />\n                    <ListItem>\n                        <ListItemText>\n                            <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.osysi')}</h3>\n                        </ListItemText>\n                        <ListItemSecondaryAction>\n                            {[RmgStyle.MTR].includes(rmgStyle) && (\n                                <React.Fragment>\n                                    <Button\n                                        variant=\"outlined\"\n                                        color=\"primary\"\n                                        style={{ lineHeight: '1rem', whiteSpace: 'pre', marginRight: 5 }}\n                                        onClick={() => setOsiNameDialog1Opened(true)}\n                                    >\n                                        {transfer.osi_names[1]\n                                            ? transfer.osi_names[1].join('\\r\\n')\n                                            : '車站名\\r\\nStn Name'}\n                                    </Button>\n                                    <OSINameDialog\n                                        open={osiNameDialog1Opened}\n                                        stnId={stnId}\n                                        setIndex={1}\n                                        onClose={() => setOsiNameDialog1Opened(false)}\n                                    />\n                                </React.Fragment>\n                            )}\n                            <Tooltip title={t('stations.edit.interchange.add') || ''} aria-label=\"add\">\n                                <IconButton onClick={() => addClick(2)}>\n                                    <Icon>add_circle</Icon>\n                                </IconButton>\n                            </Tooltip>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                    <ListItem>\n                        <InterchangeChipSet stnId={stnId} setIndex={2} onDelete={i => deleteClick(2, i)} />\n                    </ListItem>\n                </>\n            )}\n            {[RmgStyle.MTR, RmgStyle.SHMetro].includes(rmgStyle) && (\n                <ListItem>\n                    <span>{t('stations.edit.interchange.note')}</span>\n                </ListItem>\n            )}\n            {/* MTR more settings */ rmgStyle === RmgStyle.MTR && <InterchangeMore stnId={props.stnId} />}\n        </List>\n    );\n};\n\nexport default StationEditInterchangeTab;\n\nconst intChipSetStyles = makeStyles(() =>\n    createStyles({\n        intChip: {\n            borderRadius: 4.5,\n            height: 40,\n            lineHeight: '1rem',\n            margin: 2,\n        },\n        intChipText: {\n            display: 'block',\n            textAlign: 'center' as 'center',\n        },\n        intChipTextZH: {\n            fontSize: 18,\n            lineHeight: '1.2rem',\n        },\n        intChipTextEN: {\n            fontSize: '.75rem',\n            lineHeight: '.9rem',\n            whiteSpace: 'pre-wrap' as 'pre-wrap',\n        },\n        intChipLabel: {\n            paddingLeft: 6,\n            paddingRight: 6,\n        },\n        intChipDeleteIcon: {\n            marginLeft: -3,\n        },\n    })\n);\n\ninterface InterchangeChipSetProps {\n    stnId: string;\n    setIndex: number;\n    onDelete: (i: number) => void;\n}\n\nconst InterchangeChipSet = (props: InterchangeChipSetProps) => {\n    const { stnId, setIndex, onDelete } = props;\n    const classes = intChipSetStyles();\n    const dispatch = useAppDispatch();\n\n    const intInfos = useAppSelector(store => store.param.stn_list[stnId].transfer.info[setIndex]);\n\n    const [chipSelected, setChipSelected] = React.useState(-1);\n    const [nameDialogOpened, setNameDialogOpened] = React.useState(false);\n\n    const handleClick = (index: number) => {\n        setChipSelected(index);\n        setNameDialogOpened(true);\n    };\n\n    const nameDialogUpdate = (key: string, value: any) => {\n        if (key === 'theme') {\n            const newInfo = (value as string[]).concat(Array(2)) as InterchangeInfo;\n            dispatch(updateInterchange(stnId, setIndex, chipSelected, newInfo));\n        }\n        if (key === 'name') {\n            const newInfo = Array(4).concat(value) as InterchangeInfo;\n            dispatch(updateInterchange(stnId, setIndex, chipSelected, newInfo));\n        }\n    };\n\n    const intChips = intInfos?.map((intInfo, i) => {\n        let label = (\n            <span style={{ color: intInfo[3] }}>\n                <span className={`${classes.intChipText} ${classes.intChipTextZH}`}>{intInfo[4]}</span>\n                <span className={`${classes.intChipText} ${classes.intChipTextEN}`}>{intInfo[5]}</span>\n            </span>\n        );\n        return (\n            <Chip\n                key={i}\n                label={label}\n                className={classes.intChip}\n                classes={{\n                    label: classes.intChipLabel,\n                    deleteIcon: classes.intChipDeleteIcon,\n                }}\n                style={{ backgroundColor: intInfo[2] }}\n                onDelete={() => onDelete(i)}\n                onClick={() => handleClick(i)}\n            />\n        );\n    });\n\n    return (\n        <div>\n            {intChips}\n\n            <ColourDialog\n                open={nameDialogOpened}\n                theme={\n                    intInfos?.[chipSelected] === undefined\n                        ? ([] as any as Theme)\n                        : [\n                              intInfos[chipSelected][0],\n                              intInfos[chipSelected][1],\n                              intInfos[chipSelected][2],\n                              intInfos[chipSelected][3] as MonoColour,\n                          ]\n                }\n                lineName={\n                    intInfos?.[chipSelected] === undefined\n                        ? ['', '']\n                        : [intInfos[chipSelected][4], intInfos[chipSelected][5]]\n                }\n                onUpdate={nameDialogUpdate}\n                onClose={() => setNameDialogOpened(false)}\n            />\n        </div>\n    );\n};\n\ninterface OSINameDialogProps {\n    open: boolean;\n    stnId: string;\n    setIndex: number;\n    onClose: () => void;\n}\n\nconst OSINameDialog = (props: OSINameDialogProps) => {\n    const { open, stnId, setIndex, onClose } = props;\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const osiName = useAppSelector(store => store.param.stn_list[stnId].transfer.osi_names[setIndex]) || [\n        '車站名',\n        'Stn Name',\n    ];\n\n    const handleUpdate =\n        (index: number) =>\n        ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\n            let newOSIName = osiName.map((val, i) => (i === index ? value : val)) as Name;\n            dispatch(updateStationOsiName(stnId, setIndex, newOSIName));\n        };\n\n    return (\n        <Dialog open={open} onClose={onClose}>\n            <DialogTitle>{t('stations.edit.interchange.osiName')}</DialogTitle>\n            <DialogContent dividers>\n                <List>\n                    <NameListItems onUpdate={handleUpdate} name={osiName} />\n                </List>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose} color=\"primary\" autoFocus>\n                    {t('dialog.done')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nconst InterchangeMore = (props: { stnId: string }) => {\n    const { stnId } = props;\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const { transfer } = useAppSelector(store => store.param.stn_list[stnId]);\n\n    return React.useMemo(() => {\n        const tickDirecChange = ({ target: { value } }: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n            let direction = value;\n            if (direction === ShortDirection.left || direction === ShortDirection.right) {\n                dispatch(updateStationTickDirection(stnId, direction as ShortDirection));\n            }\n        };\n\n        return (\n            <>\n                <Divider />\n                <ListItem>\n                    <ListItemText>\n                        <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.settings')}</h3>\n                    </ListItemText>\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>format_textdirection_l_to_r</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('stations.edit.interchange.tickDirec.label')} />\n                    <ListItemSecondaryAction>\n                        <Select native value={transfer.tick_direc} onChange={tickDirecChange}>\n                            {Object.values(ShortDirection).map(d => (\n                                <option key={d} value={d}>\n                                    {t('stations.edit.interchange.tickDirec.' + d)}\n                                </option>\n                            ))}\n                        </Select>\n                    </ListItemSecondaryAction>\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>attach_money</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('stations.edit.interchange.paidArea')} />\n                    <ListItemSecondaryAction>\n                        <Switch\n                            color=\"primary\"\n                            edge=\"end\"\n                            onChange={(_, checked) => {\n                                dispatch(updateStationPaidArea(stnId, checked));\n                            }}\n                            checked={transfer.paid_area}\n                        />\n                    </ListItemSecondaryAction>\n                </ListItem>\n            </>\n        );\n    }, [stnId, t, dispatch, transfer.paid_area, transfer.tick_direc]);\n};\n"],"names":["useStyles","makeStyles","createStyles","cityItem","display","flexDirection","alignItems","menuItemSpan","padding","button","borderRadius","height","width","minWidth","marginRight","inputColour","position","left","top","buttonContainer","flexShrink","PalettePanel","props","useTranslation","t","i18n","classes","lineList","theme","React","list","setList","listPromise","fetch","then","resp","json","catch","useEffect","data","colour","fg","MonoColour","toString","useLineList","length","filter","l","id","newTheme","onUpdate","List","component","disablePadding","CitySelectItem","value","onChange","event","target","slice","Divider","variant","ListItem","ListItemText","primary","TextField","select","style","line","disabled","map","MenuItem","className","backgroundColor","color","getTransText2","name","languages","CustomPanel","useState","hexTemp","setHexTemp","type","rgb","opacity","htmlFor","Tooltip","title","Button","borderColor","error","match","hex","val","idx","toUpperCase","Select","native","label","cityList","useAppSelector","state","paletteCityConfig","items","useMemo","c","CountryFlag","code","country","useEmojiStyles","img","codePoints","split","char","codePointAt","concat","LanguageCode","includes","language","navigator","platform","indexOf","src","process","join","alt","String","fromCodePoint","cp","parseInt","contentWrapper","overflow","paddingTop","spacing","paddingBottom","paddingLeft","paddingRight","breakpoints","down","contentLeft","maxWidth","contentControl","flexGrow","paperRoot","listItemPaper","justifyContent","iconRoot","palette","action","active","inputBaseRoot","inputBaseInputZH","textAlign","fontSize","inputBaseInputEN","chipWrapper","overflowX","chipRoot","lineHeight","margin","chipLabel","Dialog","open","onClose","DialogTitle","DialogContent","LineNameInput","lineName","RecentChipSet","ColourControl","DialogActions","onClick","nameChange","index","newName","Paper","Icon","InputBase","root","input","e","autoFocus","store","param","line_name","stationList","stn_list","allInfos","Set","Object","values","reduce","acc","info","transfer","JSON","stringify","reverse","chips","x","i","parse","txt","Chip","secondary","secondaryTypographyProps","tabIndex","setTabIndex","tabNav","Tabs","indicatorColor","textColor","_","scrollButtons","Tab","panel","listItemIcon","ListItemIcon","helperText","stnId","dispatch","useAppDispatch","rmgStyle","osiNameDialog0Opened","setOsiNameDialog0Opened","osiNameDialog1Opened","setOsiNameDialog1Opened","addClick","newInfo","addInterchange","deleteClick","setIdx","intIdx","removeInterchange","ListItemSecondaryAction","IconButton","InterchangeChipSet","setIndex","onDelete","RmgStyle","whiteSpace","osi_names","OSINameDialog","InterchangeMore","intChipSetStyles","intChip","intChipText","intChipTextZH","intChipTextEN","intChipLabel","intChipDeleteIcon","marginLeft","intInfos","chipSelected","setChipSelected","nameDialogOpened","setNameDialogOpened","intChips","intInfo","deleteIcon","undefined","key","Array","updateInterchange","osiName","dividers","newOSIName","updateStationOsiName","tick_direc","direction","ShortDirection","updateStationTickDirection","d","Switch","edge","checked","updateStationPaidArea","paid_area"],"sourceRoot":""}