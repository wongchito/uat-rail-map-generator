{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","methods.ts","svgs/railmap/methods/share.ts","svgs/railmap/methods/mtr.ts","svgs/indoor/station-shmetro.tsx","svgs/indoor/indoor-shmetro.tsx"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","getYShareMTR","stnId","stnList","includes","parents","children","stnPred","adjacencyList","leftW","rightW","reduce","acc","cur","a","c","criticalPathMethod","from","to","adjMat","len","nodes","allLengths","criticalPaths","forEach","child","cp","push","unshift","maxLength","Math","max","getXShareMTR","branches","criticalPath","branchOfStn","filter","branch","partSource","partSink","leftOpenJaw","lens","slice","getStnState","currentId","routes","direction","console","log","Set","concat","ShortDirection","right","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","yShares","xShares","namePoss","leftWideFactor","rightWideFactor","pathWeight","Infinity","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","res","getYShare","stnIds","lineXs","realXs","realYs","e","prevId","prevY","prevX","path","stnDX","stnExtraH","stnSpareH","warn","x","y","join","replace","stations","stnStates","xs","ys","linePaths","main","pass","lineMainStns","linePassStns","_linePath","drawLine","StationsMTR","transfer","ls","info","map","val","tick_direc","StationSHMetro","props","param","useAppSelector","store","stnInfo","stn_list","stationIconStyle","services","name","infos","stnState","nameDirection","xlinkHref","stroke","className","writingMode","fontSize","dy","StationNameGElement","transform","x1","x2","y1","y2","intInfos","arrowDirection","StationName","stnName","fill","osiInfos","osysiInfos","React","forwardRef","ref","others","split","nameENLn","textAnchor","useMemo","txt","array","IntBoxGroup","intNameId","intInfo","color","lineNames","match","lineNamesEn","trim","arrowLength","transferDy","id","strokeWidth","d","Fragment","offset","stopColor","OSIText","toString","OSysIText","DefsSHMetro","memo","r","IndoorSHMetro","helper","deps","depsStr","realCP","JSON","stringify","svgWidth","indoor","padding","getYShares","branch_spacing","current_stn_idx","servicesAll","values","Services","servicesPresent","stationInfo","flat","bool","s","svg_height","paths","Lines","service","StationGroup","InfoElements","line_name","dx","width","height","rx"],"mappings":"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","file":"static/js/indoorSHMetro.158b9dd9.chunk.js","sourcesContent":["import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { StationDict } from './constants/constants';\n\n/**\n * Vertical position (in shares) of station icon if using MTR style (for consistency of method `RMGLine.newStnPossibleLoc()`).\n */\nexport const getYShareMTR = (stnId: string, stnList: StationDict): -1 | 0 | 1 => {\n    if (\n        ['linestart', 'lineend'].includes(stnId) ||\n        stnList[stnId].parents.length > 1 ||\n        stnList[stnId].children.length > 1\n    ) {\n        return 0;\n    }\n    var stnPred = stnList[stnId].parents[0];\n    if (stnPred) {\n        // parent exist\n        if (stnList[stnPred].children.length === 1) {\n            // no sibling, then y same as parent\n            return getYShareMTR(stnPred, stnList);\n        } else {\n            // sibling exists, then y depends on its idx of being children\n            return stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n        }\n    } else {\n        // no parent, must be linestart\n        return 0;\n    }\n};\n","import * as Global from '../../../methods';\nimport { RMGParam, ShortDirection, StationDict, StationInfo } from '../../../constants/constants';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (\n                          direction === ShortDirection.right\n                              ? _isSuccessor(currentId, cur, routes)\n                              : _isPredecessor(currentId, cur, routes)\n                      )\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as StationDict;\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number\n    ) {\n        var [prevId, prevY, prevX] = [] as unknown as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 2;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + e}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - e}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number = 9.68\n    ) {\n        let linePaths = { main: [] as string[], pass: [] as string[] };\n        branches.forEach((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branches: string[][], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    let linePaths = { main: [] as string[][], pass: [] as string[][] };\n    branches.forEach(branch => {\n        branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n        var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n        var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n        if (lineMainStns.length === 1) {\n            linePassStns = branch;\n        }\n\n        if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n            // if two set disjoint\n            if (linePassStns[0] === branch[0]) {\n                // -1 -1 1 1\n                linePassStns.push(lineMainStns[0]);\n            } else if (\n                lineMainStns[0] === branch[0] &&\n                lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                linePassStns.length\n            ) {\n                linePassStns = branch;\n                lineMainStns = [];\n            } else {\n                // 1 1 -1 -1\n                linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n            }\n        }\n\n        linePaths.main.push(lineMainStns);\n        linePaths.pass.push(linePassStns);\n    });\n\n    return linePaths;\n};\n","import { Stations } from './share';\n\nexport class StationsMTR extends Stations {\n    protected leftWideFactor = (stnId: string) => {\n        var res = 0;\n        let { transfer } = this.stnList[stnId];\n        let ls = transfer.info.map(val => val.length);\n        if (transfer.tick_direc === 'l') {\n            // int3 or above\n            if (!ls[1] && ls[0] > 1) res += 0.8;\n            // osi except osi22\n            if (ls[1] && (ls[0] !== 1 || ls[1] !== 2)) res += 0.8;\n        }\n        if (ls[0] === 1 && ls[1] === 2) {\n            // osi22 not end\n            if (this.stnList[stnId].parents[0] !== 'linestart' && this.stnList[stnId].children[0] !== 'lineend')\n                res += 0.8;\n        }\n        if (this.stnList[stnId].parents.length === 2) res += 0.4;\n        if (this.stnList[this.stnList[stnId].parents[0]].children.length === 2) res += 0.4;\n        return res;\n    };\n\n    protected rightWideFactor = (stnId: string) => {\n        var res = 0;\n        let { transfer } = this.stnList[stnId];\n        let ls = transfer.info.map(val => val.length);\n        if (transfer.tick_direc === 'r') {\n            // int3 or above\n            if (!ls[1] && ls[0] > 1) res += 0.8;\n            // osi except osi22\n            if (ls[1] && (ls[0] !== 1 || ls[1] !== 2)) res += 0.8;\n        }\n        if (ls[0] === 1 && ls[1] === 2) {\n            // osi22 not end\n            if (this.stnList[stnId].parents[0] !== 'linestart' && this.stnList[stnId].children[0] !== 'lineend')\n                res += 0.8;\n        }\n        if (this.stnList[stnId].children.length === 2) res += 0.4;\n        if (this.stnList[this.stnList[stnId].children[0]].parents.length === 2) res += 0.4;\n        return res;\n    };\n}\n","import React from 'react';\nimport { InterchangeInfo, Name, Services } from \"../../constants/constants\";\nimport { useAppSelector } from '../../redux';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n    nameDirection: 'upward' | 'downward';\n    services: Services[];\n}\n\nconst StationSHMetro = (props: Props) => {\n    const param = useAppSelector(store => store.param);\n    const stnInfo = param.stn_list[props.stnId];\n\n    let stationIconStyle = '';\n    if (stnInfo.services.length === 3) stationIconStyle = 'direct_indoor_sh';\n    else if (stnInfo.services.length === 2) stationIconStyle = 'express_indoor_sh';\n    else if ([...stnInfo.transfer.info[0], ...(stnInfo.transfer.info[1] || [])].length > 0)\n        stationIconStyle = 'int2_indoor_sh';\n    else stationIconStyle = 'stn_indoor_sh';\n\n    return (\n        <>\n            <StationNameGElement\n                name={stnInfo.name}\n                infos={stnInfo.transfer.info}\n                stnState={props.stnState}\n                direction={param.direction}\n                nameDirection={props.nameDirection}\n                services={props.services}\n            />\n            <use\n                xlinkHref={`#${stationIconStyle}`}\n                stroke='var(--rmg-theme-colour)'\n            />\n            {/* This should be in IntBoxGroupProps, put here due to station icon will cover this */}\n            {stnInfo.services.length > 1 && (\n                <text className=\"rmg-name__zh\" writingMode=\"tb\" fontSize=\"60%\" dy=\"-12\">\n                    {`大站车${stnInfo.services.length > 2 ? ' 直达车' : ''}停靠`}\n                </text>\n            )}\n        </>\n    );\n};\n\nexport default StationSHMetro;\n\ninterface StationNameGElementProps {\n    name: Name;\n    infos: InterchangeInfo[][];\n    stnState: -1 | 0 | 1;\n    direction: 'l' | 'r';\n    nameDirection: 'upward' | 'downward';\n    services: Services[];\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    return (\n        <g transform={`translate(0,${props.nameDirection === 'upward' ? 60 : -30})`}>\n            <line\n                x1={-30}\n                x2={30}\n                y1={props.nameDirection === 'upward' ? -23 : -10}\n                y2={props.nameDirection === 'upward' ? -23 : -10}\n                stroke='black'\n            />\n            <line\n                y1={props.nameDirection === 'upward' ? -23 : -10}\n                y2={props.nameDirection === 'upward' ? -23 - 25 : 20}\n                stroke='black'\n            />\n\n            {[...props.infos[0], ...props.infos[1] || []].length > 0 && (\n                <IntBoxGroup\n                    intInfos={[...props.infos[0], ...props.infos[1] || []]}\n                    arrowDirection={props.nameDirection}\n                    services={props.services}\n                />\n            )}\n\n            <StationName\n                stnName={props.name}\n                nameDirection={props.nameDirection}\n                fill='black'\n            />\n\n            {props.infos[1]?.length > 0 && (\n                <g transform={`translate(0,${props.nameDirection === 'upward' ? -185 : 150})`}>\n                    <OSIText osiInfos={props.infos[1]} />\n                </g>\n            )}\n\n            {props.infos[2]?.length > 0 && (\n                <g transform={`translate(0,${props.nameDirection === 'upward' ?\n                    (props.infos[1]?.length ? -210 : (props.infos[0].length ? -180 : -100)) :\n                    ((props.infos[1]?.length ? 190 : (props.infos[0].length ? 160 : 75)) +\n                        (props.services.length === 3 ? 40 : 0))})`}>\n                    <OSysIText osysiInfos={props.infos[2]} />\n                </g>\n            )}\n        </g>\n    );\n};\n\nconst StationName = React.forwardRef(\n    (props: { stnName: Name, nameDirection: 'upward' | 'downward' } & React.SVGProps<SVGGElement>, ref: React.Ref<SVGGElement>) => {\n        const { stnName, nameDirection, ...others } = props\n        const name = stnName[0].split('\\\\')\n        const nameENLn = stnName[1].split('\\\\').length\n\n        return (\n            <g ref={ref} {...others} textAnchor='middle'\n                transform={`translate(0,${nameDirection === 'upward' ? -2 : -30 - 12 * (nameENLn - 1)})`}>\n                {React.useMemo(\n                    () => (\n                        <>\n                            {name.map((txt, i, array) => (<text key={i} className=\"rmg-name__zh\"\n                                dy={nameDirection === 'upward' ? 16 * i : (array.length - 1 - i) * -16}>\n                                {txt}\n                            </text>))}\n                            <g fontSize={9.6}>\n                                {stnName[1].split('\\\\').map((txt, i) => (\n                                    <text key={i} className=\"rmg-name__en\"\n                                        dy={12 * (i + 1) + (nameDirection === 'upward' ? name.length > 1 ? name.length * 7.5 : 0 : 0)}>\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </>\n                    ),\n                    // eslint-disable-next-line react-hooks/exhaustive-deps\n                    [...stnName]\n                )}\n            </g>\n        );\n    }\n);\n\ninterface IntBoxGroupProps {\n    intInfos: InterchangeInfo[];\n    arrowDirection: 'upward' | 'downward';\n    services: Services[];\n}\n\nconst IntBoxGroup = (props: IntBoxGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, arrowDirection, services } = props\n\n    // name each different linearGradient that will fill the arrow \n    const intNameId = intInfos\n        .map(intInfo => intInfo[2])\n        .reduce((name, color) => name + color, \"\")\n\n    // get the interchange line names\n    const lineNames = [intInfos\n        .filter(intInfo => intInfo[4].match(/^\\d+.*$/))\n        .map(intInfo => intInfo[4].replace(/^(\\d+)(.*)$/, \"$1\"))\n        .join('，')\n        .concat('号线'), intInfos\n            .filter(intInfo => !intInfo[4].match(/^\\d+.*$/))\n            .map(intInfo => intInfo[4])\n            .join('，')].filter(name => name && name !== '号线').join('，')\n    const lineNamesEn = ['Line '.concat(intInfos\n        .filter(intInfo => intInfo[5].match(/^L|line$/))\n        .map(intInfo => intInfo[5].replace('Line', '').replace('line', '').trim())\n        .join(',')), intInfos\n            .filter(intInfo => !intInfo[5].match(/^L|line$/))\n            .map(intInfo => intInfo[5])\n            .join('，')].filter(name => name && name !== 'Line ').join(',')\n\n    // for services contains three level (normal, express, direct)\n    // additional length is required on transfer arrow otherwise\n    // the station icon will be longer than the arrow itself\n    const arrowLength = services.length === 3 ? 80 : 45;\n    const transferDy = arrowDirection === 'upward' ? -145 : 125 + (services.length === 3 ? 40 : 0);\n\n    return (<g>\n        <path id=\"int_indoor_arrow_sh\" stroke=\"var(--rmg-black)\" strokeWidth={1}\n            transform={`translate(0,${arrowDirection === 'upward' ? -74 : 44})rotate(${arrowDirection === 'upward' ? 0 : 180})`}\n            fill={intInfos.length === 1 ? intInfos[0][2] : `url(#grad${intNameId})`}\n            d={`M -7.5,0 v -${arrowLength} h -7.5 l 15,-15 l 15,15 h -7.5 v ${arrowLength} Z`}\n        />\n\n        {intInfos.length > 1 && (<>\n            <linearGradient id={`grad${intNameId}`} y1=\"0\" y2=\"0\"\n                x1={arrowDirection === 'upward' ? '25%' : '75%'}\n                x2={arrowDirection === 'upward' ? '75%' : '25%'}>\n                {intInfos.map((intInfo, i) => (<React.Fragment key={i}>\n                    {/* more about React.Fragment on https://stackoverflow.com/a/59390967 */}\n                    <stop  // start from\n                        offset={`${(100 / intInfos.length) * (i + 0)}%`}\n                        stopColor={intInfo[2]} />\n                    <stop  // to\n                        offset={`${(100 / intInfos.length) * (i + 1)}%`}\n                        stopColor={intInfo[2]} />\n                </React.Fragment>))}\n            </linearGradient>\n\n            {/* a range inplementation [0, 1, 2 ... intInfos.length - 1] */}\n            {/* {[...Array(intInfos.length - 1).keys()].map(i => (<line\n                x1={-7.5 + (15 / intInfos.length) * (i + 1)}\n                x2={-7.5 + (15 / intInfos.length) * (i + 1)}\n                y1=\"-74\"\n                y2={-104 - 7.5 - 7.5 / (intInfos.length - 1) * (i+1)}\n                stroke=\"black\"\n            />))} */}\n\n        </>)}\n\n        <g transform={`translate(0,${transferDy})`} textAnchor=\"middle\">\n            <text className=\"rmg-name__zh\" dy={-7}>\n                {`换乘${lineNames}`}\n            </text>\n            <text className=\"rmg-name__en\" dy={5} fontSize={9.6}>\n                {`Interchange ${lineNamesEn}`}\n            </text>\n        </g>\n    </g>)\n};\n\nconst OSIText = (props: { osiInfos: InterchangeInfo[] }) => {\n    return React.useMemo(\n        () => (\n            <g textAnchor=\"middle\" fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {`换乘${props.osiInfos.map(info => info[4]).join('，')}`}\n                </text>\n                <text className=\"rmg-name__zh\" dy={5}>\n                    仅限公共交通卡\n                </text>\n                <text className=\"rmg-name__en\" dy={12.5} fontSize=\"75%\">\n                    Only for Public Transportation Card\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.osiInfos.toString()]\n    )\n}\n\nconst OSysIText = (props: { osysiInfos: InterchangeInfo[] }) => {\n    return React.useMemo(\n        () => (\n            <g textAnchor=\"middle\">\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {`转乘${props.osysiInfos.map(info => info[4]).join('，')}`}\n                </text>\n                <text className=\"rmg-name__en\" dy={7.5} fontSize={9.6}>\n                    {`To ${props.osysiInfos.map(info => info[5]).join(', ')}`}\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.osysiInfos.toString()]\n    )\n}\n","import React, { memo, useMemo } from 'react';\nimport { adjacencyList, getXShareMTR, criticalPathMethod, getStnState } from '../railmap/methods/share';\nimport StationSHMetro from './station-shmetro';\nimport { StationsMTR } from '../railmap/methods/mtr';\nimport { StationDict, Services } from \"../../constants/constants\";\nimport { useAppSelector } from '../../redux';\n\nexport default memo(function IndoorWrapperSHMetro() {\n    return (\n        <>\n            <DefsSHMetro />\n            <IndoorSHMetro />\n        </>\n    );\n});\n\nexport const DefsSHMetro = React.memo(() => (\n    <defs>\n        <circle id=\"stn_indoor_sh\" fill=\"var(--rmg-white)\" strokeWidth={5} stroke=\"var(--rmg-theme-colour)\"\n            r={8} transform=\"scale(1.5)\" />\n        <path id=\"int2_indoor_sh\" fill=\"var(--rmg-white)\" stroke=\"black\" transform=\"translate(0, -10)scale(2)\"\n            strokeWidth={4} d=\"M -5,0 a 5,5 0 1 1 10,0 V10 a 5,5 0 1 1 -10,0Z\" />\n        <path id=\"express_indoor_sh\" fill=\"var(--rmg-white)\" stroke=\"black\" transform=\"translate(0, -10)scale(2)\"\n            strokeWidth={4} d=\"M -5,0 a 5,5 0 1 1 10,0 V25 a 5,5 0 1 1 -10,0Z\" />\n        <path id=\"direct_indoor_sh\" fill=\"var(--rmg-white)\" stroke=\"black\" transform=\"translate(0, -10)scale(2)\"\n            strokeWidth={4} d=\"M -5,0 a 5,5 0 1 1 10,0 V40 a 5,5 0 1 1 -10,0Z\" />\n    </defs>\n));\n\nconst leftWideFactor = (stnList: StationDict, stnId: string) => {\n    let res = 0\n    if (stnList[stnId].parents.length === 2) res += 1\n    if (stnList[stnList[stnId].parents[0]].children.length === 2) res += 1\n    return res\n}\n\nconst rightWideFactor = (stnList: StationDict, stnId: string) => {\n    let res = 0\n    if (stnList[stnId].children.length === 2) res += 1\n    if (stnList[stnList[stnId].children[0]].parents.length === 2) res += 1\n    return res\n}\n\nconst IndoorSHMetro = () => {\n    const { routes, branches, depsStr: deps } = useAppSelector(store => store.helper);\n    const param = useAppSelector(store => store.param);\n\n    const adjMat = adjacencyList(\n        param.stn_list,\n        leftWideFactor,\n        rightWideFactor\n    );\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const xShares = React.useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShareMTR(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n    const lineXs: [number, number] = [\n        (param.svgWidth.indoor * param.padding) / 100,\n        param.svgWidth.indoor * (1 - param.padding / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = useMemo(\n        () => StationsMTR.getYShares(param.stn_list, branches),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: yShares[cur] * param.branch_spacing * 2 }),\n        {} as typeof yShares\n    );\n\n    const stnStates = React.useMemo(\n        () => getStnState(param.current_stn_idx, routes, param.direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.current_stn_idx, param.direction, routes.toString()]\n    );\n\n    const servicesAll = Object.values(Services);\n    const servicesPresent = Object.values(param.stn_list)\n        .map(stationInfo => stationInfo.services)\n        .flat()  // all services in all stations\n        .reduce(\n            (acc, cur) => {\n                acc[servicesAll.indexOf(cur)] = true;\n                return acc;\n            },\n            [false, false, false] as [boolean, boolean, boolean]\n        )  // set the flag in order\n        .map((bool, i) => [servicesAll[i], bool] as [Services, boolean])  // zip\n        .filter(s => s[1])  // get the existing service\n        .map(s => s[0]);  // maintain the services' order\n\n    const linePaths = StationsMTR.drawLine(\n        branches,\n        stnStates,\n        param.stn_list,\n        lineXs,\n        xs,\n        ys,\n        param.branch_spacing * 2,\n        criticalPath,\n        0\n    );\n\n    return (\n        <>\n            <g id=\"main\" transform={`translate(0,${param.svg_height / 2})`}>\n                <Lines paths={linePaths} services={servicesPresent} />\n                <StationGroup xs={xs} ys={ys} stnStates={stnStates} services={servicesPresent} />\n            </g>\n            <InfoElements />\n        </>\n    );\n}\n\nconst Lines = (props: { paths: { main: string[]; pass: string[] }, services: Services[] }) => {\n    return (\n        <g fill=\"none\" strokeWidth={12} stroke=\"var(--rmg-theme-colour)\">\n            {props.services.map((service, i) => (\n                <g key={`indoor_line_${i}`} transform={`translate(0, ${i * 30})`}>\n                    {props.paths.main.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                    {props.paths.pass.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                </g>\n            ))}\n        </g>\n    );\n};\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n    services: Services[];  // determine if all station text should be upward\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { branches } = useAppSelector(store => store.helper);\n    const param = useAppSelector(store => store.param);\n    const {xs, ys, stnStates, services} = props;\n\n    return (\n        <g>\n            {Object.keys(param.stn_list)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (<g key={stnId} transform={`translate(${xs[stnId]},${ys[stnId]})`}>\n                    <StationSHMetro\n                        stnId={stnId}\n                        stnState={stnStates[stnId]}\n                        nameDirection={branches\n                            .filter(branch => branch.includes(stnId))\n                            .map(branch => branch.indexOf(stnId) % 2 === 0 || services.length > 1 ?\n                                'downward' : 'upward')[0] as 'upward' | 'downward'}\n                        services={services}\n                    />\n                </g>)\n                )\n            }\n        </g>\n    );\n};\n\nconst InfoElements = () => {\n    const param = useAppSelector(store => store.param);\n\n    return React.useMemo(() => (\n        <>\n            <g transform={`translate(${param.svgWidth.indoor / 2},50)`}>\n                <text textAnchor=\"middle\" fontSize=\"30\" className=\"rmg-name__zh\">\n                    轨道交通{param.line_name[0]}运营线路示意图\n                </text>\n            </g>\n            <g transform={`translate(${param.svgWidth.indoor / 2},${param.svg_height - 300})`}>\n                <text textAnchor=\"middle\" fontSize=\"18\" className=\"rmg-name__zh\" dx=\"-30\" dy=\"230\">\n                    友情提示：请留意您需要换乘线路的首末班时间，以免耽误您的出行，末班车进站前三分钟停售该末班车车票。\n                </text>\n                <text textAnchor=\"middle\" fontSize=\"12\" className=\"rmg-name__en\" dx=\"10\" dy=\"250\">\n                    Please pay attention to the interchange schedule if you want to transfer to other lines. Stop selling tickets 3 minutes before the last train services.\n                </text>\n                <g transform=\"translate(-600,215)\">\n                    <rect x=\"-5\" y=\"-25\" width=\"100\" height=\"70\" fill=\"none\" stroke=\"black\" rx=\"5\"></rect>\n                    <line x1=\"28\" x2=\"28\" y1=\"-20\" y2=\"40\" stroke=\"black\"></line>\n                    <text className=\"rmg-name__zh\" dx=\"3\" fontSize=\"18\">图</text>\n                    <text className=\"rmg-name__zh\" dx=\"3\" dy=\"18\" fontSize=\"18\">例</text>\n                    <text className=\"rmg-name__en\" dy=\"35\" fontSize=\"8\">legend</text>\n                    <use\n                        transform=\"translate(45,10)\"\n                        xlinkHref=\"#int2_indoor_sh\"\n                        stroke=\"var(--rmg-theme-colour)\"\n                    />\n                    <text className=\"rmg-name__zh\" dx=\"60\" dy=\"10\" fontSize=\"10\">换乘站</text>\n                    <text className=\"rmg-name__en\" dx=\"60\" dy=\"20\" fontSize=\"6\">Interchange</text>\n                    <text className=\"rmg-name__en\" dx=\"60\" dy=\"30\" fontSize=\"6\">Station</text>\n                </g>\n            </g>\n        </>\n    ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.svgWidth.indoor, param.svg_height, param.line_name]);\n};\n\n/* Some unused functions to split branches from the main line.\n * Note the branches here has a slightly different meaning.\n * It refers to all the line sections that have a parallel line\n * rather than the upper or the bottom branch section.\n *\n * Currently these functions only can be used on a line that\n * branches in the middle and ends at the linestart, which also\n * means that linestart has two children in the adjMat.\n*/\n/*\nconst getPathLength = (adjMat: ReturnType<typeof adjacencyList>, from: string, to: string): number => {\n    let cnt = 0, cur = from\n    while (Object.keys(adjMat[cur]).length > 0) {\n        cnt += 1\n        // we choose the first for all the cases so that the length for different branches will end in the same node\n        cur = Object.keys(adjMat[cur])[0]\n    }\n    return cnt\n}\nconst getIntersectionStn = (adjMat: ReturnType<typeof adjacencyList>) => {\n    const start = Object.keys(adjMat['linestart'])\n\n    let a = start[0], b = start[1]\n    const lenA = getPathLength(adjMat, a, 'lineend')\n    const lenB = getPathLength(adjMat, b, 'lineend')\n    if (lenA < lenB) {\n        for (let i = 0; i < lenB - lenA; i++) b = Object.keys(adjMat[b])[0]\n    } else {\n        for (let i = 0; i < lenA - lenB; i++) a = Object.keys(adjMat[a])[0]\n    }\n    while (a !== b) {\n        a = Object.keys(adjMat[a])[0]\n        b = Object.keys(adjMat[b])[0]\n    }\n    return a\n}\nconst getBranchesAndMainLine = (adjMat: ReturnType<typeof adjacencyList>) => {\n    const start = Object.keys(adjMat['linestart'])\n    const intersection = getIntersectionStn(adjMat)\n    return {\n        'branches': [\n            criticalPathMethod(start[0], intersection, adjMat).nodes,\n            criticalPathMethod(start[1], intersection, adjMat).nodes\n        ],\n        'main': criticalPathMethod(intersection, 'lineend', adjMat).nodes\n    }\n}\nconst getYShares = (adjMat: ReturnType<typeof adjacencyList>,\n    branchesAndMainLine: ReturnType<typeof getBranchesAndMainLine>,\n    stnId: string) => {\n    const branches = branchesAndMainLine.branches\n    const main = branchesAndMainLine.main\n\n    if (main.includes(stnId)) {\n        return 3\n    } else if (branches[0].includes(stnId)) {\n        return 0\n    } else {\n        return 6\n    }\n}\n*/\n"],"sourceRoot":""}