{"version":3,"sources":["panels/stations/station-list.tsx","panels/stations/utils.ts","panels/stations/add-diag.tsx","panels/stations/edit-diag/dialog.tsx","panels/stations/edit-diag/index.ts","panels/stations/delete-diags.tsx","panels/stations/fabs.tsx","panels/stations/auto-num-diag.tsx","panels/stations/panel2.tsx","panels/stations/index.ts"],"names":["useStyles","makeStyles","theme","createStyles","listItemNum","marginRight","spacing","fontSize","listItemText","display","alignItems","whiteSpace","overflow","selectedItem","background","palette","action","hover","StationList","props","tpo","useContext","ParamContext","dense","disablePadding","map","stnId","Fragment","isSelected","selectedId","onAction","StationEntry","t","useTranslation","classes","rmgStyle","useSelector","store","app","param","dispatch","stn_list","linestart","name","num","useState","toggleEl","setToggleEl","handleAction","className","RmgStyle","GZMTR","primary","secondary","replace","size","onClick","e","currentTarget","anchorEl","open","Boolean","onClose","type","getRandomId","Math","floor","random","pow","toString","padStart","getNameFromId","numsZH","split","numsEN","char","parseInt","join","dialogContent","padding","select","width","marginLeft","React","memo","stnList","allLocs","centre","upper","lower","newupper","newlower","prep","setPrep","pivot","setPivot","Object","keys","loc","setLoc","Array","fill","locOK","setLocOK","end","setEnd","endList","setEndList","newLocs","useMemo","length","y","getYShareMTR","state","res","parents","unshift","pop","children","push","shift","newBranchPossibleEnd","newStnPossibleLoc","useEffect","p","indexOf","handleClick","newId","includes","newInfo","secondaryName","services","Services","local","branch","left","right","transfer","info","tick_direc","ShortDirection","paid_area","osi_names","facility","Facilities","none","newStnList","JSON","parse","stringify","slice","forEach","par","child","parChildLen","BranchStyle","through","lineend","addStation","component","native","onChange","target","value","variant","formatStnName","key","idx","disabled","style","color","autoFocus","prevProps","nextProps","NameTab","lazy","InterchangeTab","BranchTab","MoreTab","tab","height","minWidth","flexDirection","minHeight","marginBottom","paddingLeft","DialogWrapper","useTheme","isMobile","useMediaQuery","breakpoints","down","fullScreen","dividers","Dialog","tabIndex","setTabIndex","tabNav","indicatorColor","textColor","_","val","scrollButtons","i","label","icon","role","Suspense","fallback","StationDeleteDialog","isError","setIsError","isLastMainBranchStn","id","console","log","parId","childId","childIdxOfPar","parIdxOfChild","splice","removeStation","current_stn_idx","newCurrentId","filter","i18nKey","ErrorDialog","fab","position","bottom","StationFabs","fabEl","setFabEl","title","AutoNumDialog","branches","branch0","gridContainer","gridItem","PanelStations2","stnSelected","setStnSelected","isOpen","setIsOpen","isAddDialogOpen","setIsAddDialogOpen","isAutoNumDialogOpen","setIsAutoNumDialogOpen","stnToRemove","setStnToRemove","isDeleteDialogOpen","setIsDeleteDialogOpen","container","item","xs","md","Panel"],"mappings":"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","file":"static/js/panelStations.1e7743a2.chunk.js","sourcesContent":["import React, { useContext, useState } from 'react';\nimport {\n    createStyles,\n    Divider,\n    Icon,\n    IconButton,\n    List,\n    ListItem,\n    ListItemSecondaryAction,\n    ListItemText,\n    makeStyles,\n    Menu,\n    MenuItem,\n    Paper,\n    Typography,\n} from '@material-ui/core';\nimport { ParamContext } from '../../context';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../redux';\nimport { RmgStyle } from '../../constants/constants';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        listItemNum: {\n            marginRight: theme.spacing(1),\n            fontSize: '1.2rem',\n        },\n        listItemText: {\n            display: 'flex',\n            alignItems: 'baseline',\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            '& .MuiListItemText-primary': {\n                marginRight: theme.spacing(1),\n            },\n        },\n        selectedItem: {\n            background: theme.palette.action.hover,\n        },\n    })\n);\n\ninterface Props {\n    selectedId: string;\n    onAction: (stnId: string) => (action: 'edit' | 'remove') => void;\n}\n\nconst StationList = (props: Props) => {\n    const { tpo } = useContext(ParamContext);\n\n    return (\n        <Paper>\n            <List dense disablePadding>\n                {tpo.map(stnId => (\n                    <React.Fragment key={stnId}>\n                        <StationEntry\n                            stnId={stnId}\n                            isSelected={stnId === props.selectedId}\n                            onAction={props.onAction(stnId)}\n                        />\n                        <Divider />\n                    </React.Fragment>\n                ))}\n            </List>\n        </Paper>\n    );\n};\n\nexport default StationList;\n\nconst StationEntry = (props: { stnId: string; isSelected: boolean; onAction: (action: 'edit' | 'remove') => void }) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const rmgStyle = useSelector((store: RootState) => store.app.rmgStyle);\n    const { param, dispatch } = useContext(ParamContext);\n\n    const { name, num } = param.stn_list[props.stnId] || param.stn_list.linestart;\n\n    const [toggleEl, setToggleEl] = useState<null | HTMLElement>(null);\n\n    const handleCurrent = () => {\n        dispatch({ type: 'SET_CURRENT_STATION', stnId: props.stnId });\n        setToggleEl(null);\n    };\n\n    const handleAction = (action: 'edit' | 'remove') => () => {\n        props.onAction(action);\n        setToggleEl(null);\n    };\n\n    return (\n        <ListItem className={props.isSelected ? classes.selectedItem : ''}>\n            {rmgStyle === RmgStyle.GZMTR && <Typography className={classes.listItemNum}>{num}</Typography>}\n            <ListItemText primary={name[0]} secondary={name[1].replace('\\\\', ' ')} className={classes.listItemText} />\n            <ListItemSecondaryAction>\n                <IconButton size=\"small\" onClick={e => setToggleEl(e.currentTarget)}>\n                    <Icon>more_vert</Icon>\n                </IconButton>\n                <Menu anchorEl={toggleEl} open={Boolean(toggleEl)} onClose={() => setToggleEl(null)}>\n                    <MenuItem onClick={handleCurrent}>{t('stations.current')}</MenuItem>\n                    <MenuItem onClick={handleAction('edit')}>{t('stations.edit.button')}</MenuItem>\n                    <MenuItem onClick={handleAction('remove')}>{t('stations.remove.button')}</MenuItem>\n                </Menu>\n            </ListItemSecondaryAction>\n        </ListItem>\n    );\n};\n","import { getYShareMTR } from '../../methods';\nimport {\n    BranchStyle,\n    Facilities,\n    Name,\n    Services,\n    ShortDirection,\n    StationDict,\n    StationInfo\n} from \"../../constants/constants\";\n\nexport const addStation = (\n    prep: 'before' | 'after',\n    stnId: string,\n    loc: 'centre' | 'upper' | 'lower' | 'newupper' | 'newlower',\n    end: string,\n    stnList: StationDict\n): [string, StationDict] => {\n    // get new id\n    let newId = getRandomId();\n    while (Object.keys(stnList).includes(newId)) {\n        newId = getRandomId();\n    }\n    let newInfo: StationInfo = {\n        name: getNameFromId(newId),\n        secondaryName: false,\n        num: '00',\n        services: [Services.local],\n        parents: [],\n        children: [],\n        branch: {\n            left: [],\n            right: [],\n        },\n        transfer: {\n            info: [[]],\n            // type: 'none',\n            tick_direc: ShortDirection.right,\n            paid_area: true,\n            osi_names: [],\n        },\n        facility: Facilities.none,\n    };\n\n    let newStnList = JSON.parse(JSON.stringify(stnList)) as StationDict;\n\n    if (prep === 'before') {\n        if (loc === 'centre') {\n            newInfo.parents = stnList[stnId].parents;\n            if (stnList[stnId].parents.length === 0 && getYShareMTR(stnId, stnList) !== 0) {\n                // todo: is this case really exist?\n                newInfo.children = stnList.linestart.children;\n            } else if (getYShareMTR(stnId, stnList) !== 0) {\n                // pivot on branch\n                newInfo.children = stnList[stnList[stnId].parents[0]].children.slice();\n                newInfo.branch.right = stnList[newInfo.parents[0]].branch.right;\n                newStnList[newInfo.parents[0]].branch.right = [];\n            } else {\n                // pivot on main\n                newInfo.children = [stnId];\n                newInfo.branch.left = stnList[stnId].branch.left;\n                newStnList[stnId].branch.left = [];\n            }\n            newInfo.parents.forEach(par => {\n                newStnList[par].children = [newId];\n            });\n            newInfo.children.forEach(child => {\n                newStnList[child].parents = [newId];\n            });\n        } else if (loc === 'upper') {\n            if (stnList[stnId].parents.length === 2) {\n                if (stnList[stnId].branch.left[1] === stnList[stnId].parents[0]) {\n                    newStnList[stnId].branch.left[1] = newId;\n                }\n\n                newInfo.parents = stnList[stnId].parents.slice(0, 1);\n                newInfo.children = [stnId];\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n                newStnList[stnId].parents[0] = newId;\n            } else {\n                // already on branch\n                newInfo.parents = stnList[stnId].parents;\n                newInfo.children = [stnId];\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children[0] = newId;\n\n                    if (stnList[par].branch.right[1] === stnId) {\n                        newStnList[par].branch.right[1] = newId;\n                    }\n                });\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n            }\n        } else if (loc === 'lower') {\n            if (stnList[stnId].parents.length === 2) {\n                if (stnList[stnId].branch.left[1] === stnList[stnId].parents[1]) {\n                    newStnList[stnId].branch.left[1] = newId;\n                }\n\n                newInfo.parents = stnList[stnId].parents.slice(1);\n                newInfo.children = [stnId];\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n                newStnList[stnId].parents[1] = newId;\n            } else {\n                // already on branch\n                newInfo.parents = stnList[stnId].parents;\n                newInfo.children = [stnId];\n                newInfo.parents.forEach(par => {\n                    let parChildLen = stnList[par].children.length;\n                    newStnList[par].children[parChildLen - 1] = newId;\n\n                    if (stnList[par].branch.right[1] === stnId) {\n                        newStnList[par].branch.right[1] = newId;\n                    }\n                });\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n            }\n        } else {\n            newStnList[stnId].branch.left = [BranchStyle.through, newId];\n            newStnList[end].branch.right = [BranchStyle.through, newId];\n            newInfo.parents = [end];\n            newInfo.children = [stnId];\n\n            if (loc === 'newupper') {\n                newStnList[end].children.unshift(newId);\n                newStnList[stnId].parents.unshift(newId);\n            } else {\n                newStnList[end].children.push(newId);\n                newStnList[stnId].parents.push(newId);\n            }\n        }\n    } else {\n        if (loc === 'centre') {\n            newInfo.children = stnList[stnId].children;\n            if (stnList[stnId].children.length === 0 && getYShareMTR(stnId, stnList) !== 0) {\n                newInfo.parents = stnList.lineend.parents;\n            } else if (getYShareMTR(stnId, stnList) !== 0) {\n                // pivot on branch\n                newInfo.parents = stnList[stnList[stnId].children[0]].parents;\n                newInfo.branch.left = stnList[newInfo.children[0]].branch.left;\n                newStnList[newInfo.children[0]].branch.left = [];\n            } else {\n                // pivot on main\n                newInfo.parents = [stnId];\n                newInfo.branch.right = stnList[stnId].branch.right;\n                newStnList[stnId].branch.right = [];\n            }\n            newInfo.children.forEach(child => {\n                newStnList[child].parents = [newId];\n            });\n            newInfo.parents.forEach(par => {\n                newStnList[par].children = [newId];\n            });\n        } else if (loc === 'upper') {\n            if (stnList[stnId].children.length === 2) {\n                if (stnList[stnId].branch.right[1] === stnList[stnId].children[0]) {\n                    newStnList[stnId].branch.right[1] = newId;\n                }\n\n                newInfo.children = stnList[stnId].children.slice(0, 1);\n                newInfo.parents = [stnId];\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n                newStnList[stnId].children[0] = newId;\n            } else {\n                // already on branch\n                newInfo.children = stnList[stnId].children;\n                newInfo.parents = [stnId];\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents[0] = newId;\n\n                    if (stnList[child].branch.left[1] === stnId) {\n                        newStnList[child].branch.left[1] = newId;\n                    }\n                });\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n            }\n        } else if (loc === 'lower') {\n            if (stnList[stnId].children.length === 2) {\n                if (stnList[stnId].branch.right[1] === stnList[stnId].children[1]) {\n                    newStnList[stnId].branch.right[1] = newId;\n                }\n\n                newInfo.children = stnList[stnId].children.slice(1);\n                newInfo.parents = [stnId];\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n                newStnList[stnId].children[1] = newId;\n            } else {\n                // already on branch\n                newInfo.children = stnList[stnId].children;\n                newInfo.parents = [stnId];\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents[stnList[child].parents.length === 1 ? 0 : 1] = newId;\n\n                    if (stnList[child].branch.left[1] === stnId) {\n                        newStnList[child].branch.left[1] = newId;\n                    }\n                });\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n            }\n        } else {\n            newStnList[stnId].branch.right = [BranchStyle.through, newId];\n            newStnList[end].branch.left = [BranchStyle.through, newId];\n\n            newInfo.children = [end];\n            newInfo.parents = [stnId];\n\n            if (loc === 'newupper') {\n                newStnList[end].parents.unshift(newId);\n                newStnList[stnId].children.unshift(newId);\n            } else {\n                newStnList[end].parents.push(newId);\n                newStnList[stnId].children.push(newId);\n            }\n        }\n    }\n\n    return [\n        newId,\n        {\n            ...newStnList,\n            [newId]: newInfo,\n        } as StationDict,\n    ];\n};\n\nconst getRandomId = () =>\n    Math.floor(Math.random() * Math.pow(36, 4))\n        .toString(36)\n        .padStart(4, '0');\n\nfunction getNameFromId(stnId: string): Name {\n    let numsZH = '癸甲乙丙丁戊己庚辛壬日月金木水火土竹戈十大中一弓人心手口尸廿山女田難卜重'.split('');\n    let numsEN = 'Zero One Two Three Four Five Six Seven Eight Nine Alfa Bravo Charlie Delta Echo Foxtrot Golf Hotel India Juliett Kilo Lima Mike November Oscar Papa Quebec Romeo Sierra Tango Uniform Victor Whiskey X-ray Yankee Zulu'.split(\n        ' '\n    );\n    return [\n        stnId\n            .split('')\n            .map(char => numsZH[parseInt(char, 36)])\n            .join(''),\n        stnId\n            .split('')\n            .map(char => numsEN[parseInt(char, 36)])\n            .join(' '),\n    ];\n}\n\n/**\n * Remove a station and update neighbour's parameters at the same time.\n * (All descriptions are based on MTR style. )\n */\nexport const removeStation = (stnId: string, stnList: StationDict) => {\n    let newStnList = JSON.parse(JSON.stringify(stnList)) as StationDict;\n    let parents = newStnList[stnId].parents;\n    let children = newStnList[stnId].children;\n\n    let isLastMainBranchStn = true;\n    for (let id in newStnList) {\n        if ([stnId, 'linestart', 'lineend'].includes(id)) continue;\n        if (getYShareMTR(id, newStnList) === 0) {\n            isLastMainBranchStn = false;\n            break;\n        }\n    }\n\n    if (parents.length === 2 && children.length === 2) {\n        // Todo: rewrite, join two branches rather than reject\n        return false;\n    } else if (isLastMainBranchStn) {\n        // Last main line station\n        return false;\n    } else if (Object.keys(newStnList).length === 4) {\n        // Last two stations\n        return false;\n    } else if (parents.length === 2 || children.length === 2) {\n        console.log('this case');\n        parents.forEach(parId => {\n            newStnList[parId].children = children;\n        });\n        children.forEach(childId => {\n            newStnList[childId].parents = parents;\n        });\n        if (parents.length === 1) {\n            newStnList[parents[0]].branch.right = newStnList[stnId].branch.right;\n        }\n        if (children.length === 1) {\n            newStnList[children[0]].branch.left = newStnList[stnId].branch.left;\n        }\n    } else if (newStnList[parents[0]].children.length === 2 && newStnList[children[0]].parents.length === 2) {\n        // 1 par 1 child, last station on upper/lower branch\n        // branch disappear\n        var childIdxOfPar = newStnList[parents[0]].children.indexOf(stnId);\n        var parIdxOfChild = newStnList[children[0]].parents.indexOf(stnId);\n        newStnList[parents[0]].children.splice(childIdxOfPar, 1);\n        newStnList[children[0]].parents.splice(parIdxOfChild, 1);\n\n        newStnList[parents[0]].branch.right = [];\n        newStnList[children[0]].branch.left = [];\n    } else {\n        // 1 par 1 child\n        parents.forEach(parId => {\n            var idx = newStnList[parId].children.indexOf(stnId);\n            if (children.length) {\n                newStnList[parId].children[idx] = children[0];\n            } else {\n                // Right dest\n                newStnList[parId].children.splice(idx, 1);\n            }\n\n            if (newStnList[parId].branch.right[1] === stnId) {\n                newStnList[parId].branch.right[1] = children[0];\n            }\n        });\n        children.forEach(childId => {\n            var idx = newStnList[childId].parents.indexOf(stnId);\n            if (parents.length) {\n                newStnList[childId].parents[idx] = parents[0];\n            } else {\n                // Left dest\n                newStnList[childId].parents.splice(idx, 1);\n            }\n\n            if (newStnList[childId].branch.left[1] === stnId) {\n                newStnList[childId].branch.left[1] = parents[0];\n            }\n        });\n    }\n\n    delete newStnList[stnId];\n\n    return newStnList;\n};\n","import React, { useContext, useMemo, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    List,\n    ListItem,\n    ListItemIcon,\n    Icon,\n    DialogActions,\n    Button,\n    makeStyles,\n    createStyles,\n    ListItemText,\n    Select,\n    Divider,\n} from '@material-ui/core';\nimport { formatStnName } from '../../utils';\nimport { getYShareMTR } from '../../methods';\nimport { addStation } from './utils';\nimport { ParamContext } from '../../context';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../redux';\nimport { StationDict, StationInfo } from \"../../constants/constants\";\n\nconst newBranchPossibleEnd = (prep: 'before' | 'after', pivot: string, stnList: StationDict) => {\n    let res: string[] = [];\n    if (prep === 'before') {\n        while (stnList[pivot].parents.length === 1) {\n            pivot = stnList[pivot].parents[0];\n            res.unshift(pivot);\n        }\n        res.pop();\n    } else {\n        while (stnList[pivot].children.length === 1) {\n            pivot = stnList[pivot].children[0];\n            res.push(pivot);\n        }\n        res.shift();\n    }\n    return res;\n};\n\nconst newStnPossibleLoc = (\n    prep: 'before' | 'after',\n    pivot: string,\n    stnList: { [stnId: string]: StationInfo }\n): [number, number, number, string[], string[]] => {\n    let deg = stnList[pivot] ? stnList[pivot][prep === 'before' ? 'parents' : 'children'].length : 0;\n    switch (deg) {\n        case 2:\n            // 1 -> 2\n            return [1, 1, 1, [], []];\n        case 1:\n            let y = getYShareMTR(pivot, stnList);\n            if (y === 0) {\n                // 1 -> 1\n                let state: string[] | 0 = newBranchPossibleEnd(prep, pivot, stnList);\n                state = state.length ? state : [];\n                return [1, 0, 0, state, state];\n                // [1,0,0,1,1];\n            } else if (y < 0) {\n                if (prep === 'before') {\n                    return [stnList[stnList[pivot].parents[0]].children.length - 1, 0, 1, [], []];\n                } else {\n                    return [stnList[stnList[pivot].children[0]].parents.length - 1, 0, 1, [], []];\n                }\n            } else {\n                if (prep === 'before') {\n                    return [stnList[stnList[pivot].parents[0]].children.length - 1, 1, 0, [], []];\n                } else {\n                    return [stnList[stnList[pivot].children[0]].parents.length - 1, 1, 0, [], []];\n                }\n            }\n    }\n    return [0, 0, 0, [], []];\n};\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        dialogContent: {\n            padding: 8,\n        },\n        select: {\n            width: 166,\n            marginLeft: 8,\n        },\n    })\n);\n\ninterface StationAddDialogProps {\n    open: boolean;\n    onClose: (action: 'close' | string) => void;\n}\n\nexport default React.memo(\n    function StationAddDialog(props: StationAddDialogProps) {\n        const { t } = useTranslation();\n        const classes = useStyles();\n\n        const rmgStyle = useSelector((store: RootState) => store.app.rmgStyle);\n        const { param, dispatch, tpo } = useContext(ParamContext);\n        const stnList = param.stn_list;\n\n        const allLocs = {\n            centre: t('stations.add.centre'),\n            upper: t('stations.add.upper'),\n            lower: t('stations.add.lower'),\n            newupper: t('stations.add.newUpper'),\n            newlower: t('stations.add.newLower'),\n        };\n\n        const [prep, setPrep] = React.useState('before' as 'before' | 'after');\n        const [pivot, setPivot] = React.useState(tpo[0]);\n        const [loc, setLoc] = React.useState(Object.keys(allLocs)[0]);\n        const [locOK, setLocOK] = React.useState(Array(5).fill(true) as boolean[]);\n\n        const [end, setEnd] = React.useState('');\n        const [endList, setEndList] = React.useState([] as string[]);\n\n        // Hook for updating loc list and end lists when pivot changed\n        const newLocs = useMemo(() => newStnPossibleLoc(prep, pivot, stnList), [prep, pivot, stnList]);\n        useEffect(\n            () => {\n                setLocOK(newLocs.map(p => (typeof p === 'number' ? Boolean(p) : Boolean(p.length))));\n                setEndList(newLocs[3]);\n            },\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [newLocs.toString()]\n        );\n\n        // Hook for updating loc selection (first available) when locOK list changed\n        useEffect(\n            () => setLoc(Object.keys(allLocs)[locOK.indexOf(true)]),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [locOK]\n        );\n\n        // Hook for updating end selection when end list changed\n        useEffect(() => {\n            if (endList.length === 0) return;\n            setEnd(endList[0]);\n        }, [endList]);\n\n        // Hook for setting new pivot in case of previous one being deleted\n        useEffect(\n            () => {\n                if (!(pivot in stnList)) setPivot(tpo[0]);\n            },\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [Object.keys(stnList).toString()]\n        );\n\n        const handleClick = (action: string) => {\n            if (action === 'close') {\n                props.onClose('close');\n            } else {\n                let [newId, res] = addStation(\n                    prep as 'before' | 'after',\n                    pivot,\n                    loc as 'centre' | 'upper' | 'lower' | 'newupper' | 'newlower',\n                    end as string,\n                    stnList\n                );\n                dispatch({ type: 'UPDATE_STATION_LIST', stnList: res });\n                props.onClose(newId);\n            }\n        };\n\n        return (\n            <Dialog open={props.open} onClose={() => handleClick('close')}>\n                <DialogTitle>{t('stations.add.title')}</DialogTitle>\n                <DialogContent className={classes.dialogContent}>\n                    <List component=\"div\" disablePadding>\n                        <ListItem>\n                            <ListItemIcon>\n                                <Icon>control_camera</Icon>\n                            </ListItemIcon>\n                            <ListItemText primary={t('stations.add.prep')} />\n                            <Select\n                                native\n                                onChange={e => setPrep(e.target.value as 'before' | 'after')}\n                                value={prep}\n                                className={classes.select}\n                            >\n                                {['before', 'after'].map(p => (\n                                    <option key={p} value={p}>\n                                        {t('stations.add.' + p)}\n                                    </option>\n                                ))}\n                            </Select>\n                        </ListItem>\n                        <Divider variant=\"middle\" />\n                        <ListItem>\n                            <ListItemIcon>\n                                <Icon>near_me</Icon>\n                            </ListItemIcon>\n                            <ListItemText primary={t('stations.add.pivot')} />\n                            <Select\n                                native\n                                onChange={e => setPivot(e.target.value as string)}\n                                value={pivot}\n                                className={classes.select}\n                            >\n                                {tpo.map(stnId => (\n                                    <option key={stnId} value={stnId}>\n                                        {formatStnName(stnList[stnId], rmgStyle)}\n                                    </option>\n                                ))}\n                            </Select>\n                        </ListItem>\n                        <Divider variant=\"middle\" />\n                        <ListItem>\n                            <ListItemIcon>\n                                <Icon>share</Icon>\n                            </ListItemIcon>\n                            <ListItemText primary={t('stations.add.loc')} />\n                            <Select\n                                native\n                                onChange={e => setLoc(e.target.value as string)}\n                                value={loc}\n                                className={classes.select}\n                            >\n                                {(Object.keys(allLocs) as (keyof typeof allLocs)[]).map((key, idx) => (\n                                    <option key={key} value={key} disabled={!locOK[idx]}>\n                                        {allLocs[key]}\n                                    </option>\n                                ))}\n                            </Select>\n                        </ListItem>\n                        <Divider\n                            variant=\"middle\"\n                            style={{ display: ['newupper', 'newlower'].includes(loc) ? 'flex' : 'none' }}\n                        />\n                        <ListItem style={{ display: ['newupper', 'newlower'].includes(loc) ? 'flex' : 'none' }}>\n                            <ListItemIcon>\n                                <Icon>undo</Icon>\n                            </ListItemIcon>\n                            <ListItemText primary={t('stations.add.end')} />\n                            <Select\n                                native\n                                onChange={e => setEnd(e.target.value as string)}\n                                value={end}\n                                className={classes.select}\n                            >\n                                {endList.map(stnId => (\n                                    <option key={stnId} value={stnId}>\n                                        {formatStnName(stnList[stnId], rmgStyle)}\n                                    </option>\n                                ))}\n                            </Select>\n                        </ListItem>\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => handleClick('close')} color=\"primary\">\n                        {t('dialog.cancel')}\n                    </Button>\n                    <Button onClick={() => handleClick('accept')} color=\"primary\" autoFocus>\n                        {t('dialog.ok')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    },\n    (prevProps, nextProps) => prevProps.open === nextProps.open\n);\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    Tabs,\n    Tab,\n    Icon,\n    Typography,\n    CircularProgress,\n    DialogActions,\n    Button,\n    useTheme,\n    useMediaQuery,\n    makeStyles,\n    createStyles,\n    Paper,\n} from '@material-ui/core';\n\nconst NameTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsName\" */ './name-tab'));\nconst InterchangeTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsInterchange\" */ './interchange-tab'));\nconst BranchTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsBranch\" */ './branch-tab'));\nconst MoreTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsMore\" */ './more-tab'));\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        tab: {\n            padding: '6px 24px',\n            height: 48,\n            minWidth: 'calc(100% / 4)',\n            '& .MuiTab-wrapper': {\n                flexDirection: 'row',\n            },\n            '&.MuiTab-labelIcon': {\n                minHeight: 'unset',\n                '& .MuiTab-wrapper': {\n                    '& > *:first-child': {\n                        marginBottom: 0,\n                    },\n                    '& > *:not(first-child)': {\n                        paddingLeft: 8,\n                    },\n                },\n            },\n        },\n    })\n);\n\ninterface StationEditDialogProps {\n    onClose: () => void;\n    open: boolean;\n    stnId: string;\n}\n\nexport default function StationEditDialog(props: StationEditDialogProps) {\n    const { t } = useTranslation();\n\n    const [tabIndex, setTabIndex] = React.useState(0);\n\n    const classes = useStyles();\n\n    const tabNav = React.useMemo(\n        () => (\n            <Tabs\n                value={tabIndex}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                onChange={(_, val) => setTabIndex(val)}\n                variant=\"scrollable\"\n                scrollButtons=\"off\"\n            >\n                {[\n                    ['name', 'title'],\n                    ['interchange', 'transfer_within_a_station'],\n                    ['branch', 'share'],\n                    ['more', 'more_horiz'],\n                ].map((val, i) => (\n                    <Tab\n                        label={<span>{t('stations.edit.tab.' + val[0])}</span>}\n                        icon={<Icon>{val[1]}</Icon>}\n                        key={i}\n                        className={classes.tab}\n                    />\n                ))}\n            </Tabs>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [tabIndex, classes.tab]\n    );\n\n    return (\n        <DialogWrapper {...props}>\n            {tabNav}\n            <Typography component=\"div\" role=\"tabpanel\">\n                <React.Suspense fallback={<CircularProgress />}>\n                    {(idx => {\n                        switch (idx) {\n                            case 0:\n                                return <NameTab stnId={props.stnId} />;\n                            case 1:\n                                return <InterchangeTab stnId={props.stnId} />;\n                            case 2:\n                                return <BranchTab stnId={props.stnId} />;\n                            case 3:\n                                return <MoreTab stnId={props.stnId} />;\n                        }\n                    })(tabIndex)}\n                </React.Suspense>\n            </Typography>\n        </DialogWrapper>\n    );\n}\n\nconst DialogWrapper = (props: { children: React.ReactNode } & StationEditDialogProps) => {\n    const { t } = useTranslation();\n\n    const theme = useTheme();\n    const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\n    const isDialog = useMediaQuery(theme.breakpoints.down('sm'));\n\n    return isDialog ? (\n        <Dialog onClose={props.onClose} open={props.open} fullScreen={isMobile}>\n            <DialogTitle>{t('stations.edit.title')}</DialogTitle>\n            <DialogContent dividers style={{ padding: '0 16px' }}>\n                {props.children}\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose} color=\"primary\">\n                    {t('dialog.done')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    ) : (\n        <Paper>{props.children}</Paper>\n    );\n};\n","import Dialog from './dialog';\n\nexport default Dialog;","import React, { useContext, useState, memo } from 'react';\nimport { useTranslation, Trans } from 'react-i18next';\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core';\nimport { ParamContext } from '../../context';\nimport { removeStation } from './utils';\n\ninterface Props {\n    open: boolean;\n    onClose: () => void;\n}\n\nexport default function StationDeleteDialog(props: Props & { stnId: string }) {\n    const { t } = useTranslation();\n\n    const { param, dispatch } = useContext(ParamContext);\n    const stnList = param.stn_list;\n\n    const [isError, setIsError] = useState(false);\n\n    const handleClick = (action: 'close' | 'accept') => () => {\n        if (action === 'accept') {\n            let res = removeStation(props.stnId, stnList);\n            if (res === false) {\n                setIsError(true);\n            } else {\n                if (param.current_stn_idx === props.stnId) {\n                    let newCurrentId = Object.keys(res).filter(id => !['linestart', 'lineend'].includes(id))[0];\n                    dispatch({ type: 'SET_CURRENT_STATION', stnId: newCurrentId });\n                }\n                dispatch({ type: 'UPDATE_STATION_LIST', stnList: res });\n            }\n        }\n        props.onClose();\n    };\n    return (\n        <>\n            <Dialog open={props.open} onClose={handleClick('close')}>\n                <DialogTitle>{t('stations.remove.title')}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        <Trans i18nKey=\"stations.remove.msg\">{{ name: stnList[props.stnId]?.name.join() }}</Trans>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClick('close')} color=\"primary\" autoFocus>\n                        {t('dialog.cancel')}\n                    </Button>\n                    <Button onClick={handleClick('accept')} color=\"primary\">\n                        {t('stations.remove.button')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <ErrorDialog open={isError} onClose={() => setIsError(false)} />\n        </>\n    );\n}\n\nconst ErrorDialog = memo(\n    (props: Props) => {\n        const { t } = useTranslation();\n        return (\n            <Dialog open={props.open} onClose={props.onClose}>\n                <DialogTitle>{t('stations.remove.error.title')}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>{t('stations.remove.error.msg')}</DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.onClose} color=\"primary\" autoFocus>\n                        {t('dialog.ok')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    },\n    (prevProps, nextProps) => prevProps.open === nextProps.open\n);\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    createStyles,\n    Fab,\n    Icon,\n    ListItemIcon,\n    ListItemText,\n    makeStyles,\n    Menu,\n    MenuItem,\n    Tooltip,\n} from '@material-ui/core';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../redux';\nimport { RmgStyle } from '../../constants/constants';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        fab: {\n            position: 'fixed',\n            right: theme.spacing(2),\n            bottom: theme.spacing(2),\n        },\n    })\n);\n\ninterface Props {\n    onAction: (action: string) => void;\n}\n\nconst StationFabs = React.memo(\n    (props: Props) => {\n        const { t } = useTranslation();\n        const rmgStyle = useSelector((store: RootState) => store.app.rmgStyle);\n        const classes = useStyles();\n        const [fabEl, setFabEl] = React.useState<null | HTMLElement>(null);\n\n        const handleAction = (action: string) => () => {\n            setFabEl(null);\n            props.onAction(action);\n        };\n\n        return (\n            <>\n                <Tooltip title={t('stations.fabs.tooltip')} aria-label=\"options\">\n                    <Fab color=\"primary\" className={classes.fab} onClick={e => setFabEl(e.target as HTMLElement)}>\n                        <Icon>more_vert</Icon>\n                    </Fab>\n                </Tooltip>\n\n                <Menu anchorEl={fabEl} open={Boolean(fabEl)} onClose={() => setFabEl(null)}>\n                    <MenuItem onClick={handleAction('add')}>\n                        <ListItemIcon>\n                            <Icon>add_box</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('stations.fabs.add')} />\n                    </MenuItem>\n                    <MenuItem onClick={handleAction('reverse')}>\n                        <ListItemIcon>\n                            <Icon>cached</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('stations.fabs.reverse')} />\n                    </MenuItem>\n                    {rmgStyle === RmgStyle.GZMTR && (\n                        <MenuItem onClick={handleAction('autonum')}>\n                            <ListItemIcon>\n                                <Icon>filter_1</Icon>\n                            </ListItemIcon>\n                            <ListItemText primary={t('design.autoNum.button')} />\n                        </MenuItem>\n                    )}\n                </Menu>\n            </>\n        );\n    },\n    () => true\n);\n\nexport default StationFabs;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core';\nimport { ParamContext } from '../../context';\n\ninterface Props {\n    open: boolean;\n    onClose: () => void;\n}\n\nconst AutoNumDialog = (props: Props) => {\n    const { t } = useTranslation();\n\n    const { dispatch, branches } = React.useContext(ParamContext);\n\n    const handleClick = (action: 'ascend' | 'descend') => {\n        let branch0 = branches[0];\n        branch0.forEach((stnId, i) => {\n            let num: string;\n            if (action === 'ascend') {\n                num = i.toString().padStart(2, '0');\n            } else {\n                num = (branch0.length - 1 - i).toString().padStart(2, '0');\n            }\n            dispatch({ type: 'UPDATE_STATION_NUM', stnId, num });\n            // (window.myLine as RMGLineGZ).updateStnNum(stnId, num);\n        });\n        // props.paramUpdate('stn_list', getParams().stn_list);\n        props.onClose();\n    };\n\n    return React.useMemo(\n        () => (\n            <Dialog onClose={props.onClose} open={props.open}>\n                <DialogTitle>{t('design.autoNum.title')}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>{t('design.autoNum.msg')}</DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.onClose} color=\"primary\" autoFocus>\n                        {t('dialog.cancel')}\n                    </Button>\n                    <Button onClick={() => handleClick('ascend')} color=\"primary\">\n                        {t('design.autoNum.ascend')}\n                    </Button>\n                    <Button onClick={() => handleClick('descend')} color=\"primary\">\n                        {t('design.autoNum.descend')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.open]\n    );\n};\n\nexport default AutoNumDialog;\n","import React, { useContext, useState } from 'react';\nimport { createStyles, Grid, makeStyles } from '@material-ui/core';\nimport { ParamContext } from '../../context';\n\nimport StationList from './station-list';\nimport StationAddDialog from './add-diag';\nimport StationEditDialog from './edit-diag';\nimport StationDeleteDialog from './delete-diags';\nimport StationFabs from './fabs';\nimport AutoNumDialog from './auto-num-diag';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../redux';\nimport { RmgStyle } from '../../constants/constants';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        gridContainer: {\n            height: '100%',\n            overflow: 'hidden',\n        },\n        gridItem: {\n            height: '100%',\n            overflow: 'auto',\n        },\n    })\n);\n\nconst PanelStations2 = () => {\n    const classes = useStyles();\n\n    const rmgStyle = useSelector((store: RootState) => store.app.rmgStyle);\n    const { dispatch } = useContext(ParamContext);\n\n    const [stnSelected, setStnSelected] = useState('');\n    const [isOpen, setIsOpen] = useState(false);\n\n    const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n    const [isAutoNumDialogOpen, setIsAutoNumDialogOpen] = useState(false);\n\n    const [stnToRemove, setStnToRemove] = useState('');\n    const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n\n    const handleAction = (stnId: string) => (action: 'edit' | 'remove') => {\n        if (action === 'edit') {\n            setStnSelected(stnId);\n            setIsOpen(true);\n        }\n        if (action === 'remove') {\n            if (stnSelected === stnId) setStnSelected('');\n            setStnToRemove(stnId);\n            setIsDeleteDialogOpen(true);\n        }\n    };\n\n    const fabsAction = (action: string) => {\n        if (action === 'add') {\n            setIsAddDialogOpen(true);\n        }\n        if (action === 'reverse') {\n            dispatch({ type: 'REVERSE_STATIONS' });\n        }\n        if (action === 'autonum') {\n            setIsAutoNumDialogOpen(true);\n        }\n    };\n\n    const stnAddDialogClose = (action: 'close' | string) => {\n        setIsAddDialogOpen(false);\n        if (action !== 'close') {\n            setStnSelected(action);\n            setIsOpen(true);\n        }\n    };\n\n    return (\n        <>\n            <Grid container spacing={1} className={classes.gridContainer}>\n                <Grid item xs={12} md={4} className={classes.gridItem}>\n                    <StationList selectedId={stnSelected} onAction={handleAction} />\n                </Grid>\n                <Grid item xs={8} className={classes.gridItem}>\n                    {stnSelected && (\n                        <StationEditDialog open={isOpen} stnId={stnSelected} onClose={() => setIsOpen(false)} />\n                    )}\n                </Grid>\n            </Grid>\n\n            <StationFabs onAction={fabsAction} />\n\n            <StationAddDialog open={isAddDialogOpen} onClose={stnAddDialogClose} />\n            <StationDeleteDialog\n                open={isDeleteDialogOpen}\n                onClose={() => setIsDeleteDialogOpen(false)}\n                stnId={stnToRemove}\n            />\n            {rmgStyle === RmgStyle.GZMTR && (\n                <AutoNumDialog open={isAutoNumDialogOpen} onClose={() => setIsAutoNumDialogOpen(false)} />\n            )}\n        </>\n    );\n};\n\nexport default PanelStations2;\n","import Panel from './panel2';\n\nexport default Panel;\n"],"sourceRoot":""}