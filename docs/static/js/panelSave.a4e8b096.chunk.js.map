{"version":3,"sources":["panels/save/upload-item.tsx","panels/save/export-diag/utils.ts","panels/save/export-diag/preview-diag.tsx","panels/save/export-diag/index.ts","panels/save/export-diag/dialog.tsx","panels/save/panel.tsx","panels/save/index.ts"],"names":["UploadLi","t","useTranslation","dispatch","useDispatch","canvasToShow","useAppSelector","state","app","React","useState","open","setOpen","importedParam","setImportedParam","ListItem","button","component","htmlFor","ListItemIcon","Icon","ListItemText","primary","type","accept","style","display","id","onChange","event","console","log","target","files","Promise","resolve","reader","FileReader","onloadend","readAsText","then","e","JSON","parse","result","param","ImportDialog","onClose","action","a","document","getElementById","value","window","rmgStorage","writeFile","stringify","canvas","canvasConfig","some","c","AllCanvas","selectCanvas","location","assign","RmgStyle","MTR","error","content","props","Dialog","DialogTitle","DialogContent","dividers","DialogContentText","whiteSpace","Object","keys","length","stn_list","entries","map","x","includes","name","join","trim","replace","DialogActions","Button","onClick","color","autoFocus","test","svgEl","scale","filename","svgW","viewBox","baseVal","width","svgH","height","querySelectorAll","Number","devicePixelRatio","setAttribute","toString","ctx","getContext","clearRect","forEach","el","elStyle","getComputedStyle","fontFamily","fill","dominantBaseline","textAnchor","img","Image","onload","setTimeout","drawImage","uri","link","createElement","download","href","body","appendChild","click","removeChild","saveAs","toDataURL","src","btoa","unescape","encodeURIComponent","outerHTML","useStyles","makeStyles","theme","createStyles","contentWrapper","overflow","paddingTop","spacing","paddingBottom","paddingLeft","paddingRight","breakpoints","down","flexDirection","contentCanvas","flex","contentControl","flexGrow","flexShrink","minWidth","contentAction","alignSelf","contentRoot","padding","contentControlContent","justifyContent","formControlRoot","margin","PreviewDialog","classes","useAppDispatch","store","currentStationIndex","current_stn_idx","rmgStyle","setSvgEl","setS","isLoaded","setIsLoaded","showBorder","setShowBorder","isTransparent","setIsTransparent","setScale","format","setFormat","isAccept","setIsAccept","isTermsDialogOpen","setIsTermsDialogOpen","contentEl","useRef","useEffect","elem","cloneSvgNode","getBase64FontFace","uris","s","textContent","prepend","alert","fonts","ready","key","querySelector","getPropertyValue","match","thisSVGHeight","cloneNode","setProperty","tag","filter","l","sheet","cssRules","rule","cssText","txt","downloadSvg","stn_list_keys","stnId","pop","undefined","setCurrentStation","replaceAll","removeAttribute","handleClose","maxWidth","className","dangerouslySetInnerHTML","__html","ref","root","List","disablePadding","ListItemSecondaryAction","Switch","checked","_","disabled","Divider","variant","Select","native","nextScale","getAttribute","ratio","toFixed","Checkbox","size","Typography","cursor","TermsDialog","useMemo","ExportDialog","previewDialogOpened","setPreviewDialogOpened","setCanvas","TemplateDialog","lazy","allLangs","en","SaveLists","i18n","isTempDialogOpen","setIsTempDialogOpen","isExportDialogOpen","setIsExportDialogOpen","isStyleDialogOpen","setIsStyleDialogOpen","isLangDialogOpen","setIsLangDialogOpen","saveClick","Date","toISOString","Card","secondary","getTransText2","languages","Suspense","fallback","LinearProgress","StyleDialog","gtag","event_category","event_label","LangDialog","setStyle","values","to","textDecoration","lang","language","changeLanguage","title","documentElement","Panel","TranslatedSaveLists","withTranslation","Grid","container","alignItems","item","xs","sm","md","lg"],"mappings":"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","file":"static/js/panelSave.a4e8b096.chunk.js","sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    ListItem,\n    ListItemIcon,\n    Icon,\n    ListItemText,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogContentText,\n    DialogActions,\n    Button,\n} from '@material-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { RMGParam, RmgStyle, canvasConfig, AllCanvas } from '../../constants/constants';\nimport { useAppSelector } from '../../redux';\nimport { selectCanvas } from '../../redux/app/action';\n\nexport default function UploadLi() {\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n\n    const { canvasToShow } = useAppSelector(state => state.app);\n\n    const [open, setOpen] = React.useState(false);\n    const [importedParam, setImportedParam] = React.useState({} as RMGParam);\n\n    const handleUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n        console.log(event.target.files![0]);\n        let filePromise = new Promise((resolve: (event: ProgressEvent<FileReader>) => void) => {\n            let reader = new FileReader();\n            reader.onloadend = resolve;\n            reader.readAsText(event.target.files![0]);\n        });\n        filePromise\n            .then(e => JSON.parse(e.target!.result as string))\n            .then(param => {\n                setImportedParam(param);\n                setOpen(true);\n            });\n    };\n\n    const handleClose = (action: string) => async () => {\n        if (action === 'close') {\n            (document.getElementById('upload-param') as HTMLInputElement).value = '';\n            setOpen(false);\n            return;\n        }\n        if (action === 'accept') {\n            try {\n                await window.rmgStorage.writeFile('rmgParam', JSON.stringify(importedParam));\n\n                // reset to AllCanvas if current canvas is not supported in the new style\n                const canvas = canvasConfig[importedParam.style]\n                    .some(c => c === canvasToShow) ? canvasToShow : AllCanvas;\n                dispatch(selectCanvas(canvas));\n    \n                // TODO: electron will fail here, wait for #96\n                window.location.assign(`./${importedParam.style || RmgStyle.MTR}`);\n                // So after #96 is fixed, we first need to dispatch the param\n                // and then <Link> to the importedParam.style\n            } catch (err) {\n                console.error(err);\n            }\n        }\n    };\n\n    return (\n        <>\n            <ListItem button component=\"label\" htmlFor=\"upload-param\">\n                <ListItemIcon>\n                    <Icon>folder_open</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('file.open.button')} />\n            </ListItem>\n            <input\n                type=\"file\"\n                accept=\"application/json\"\n                style={{ display: 'none' }}\n                id=\"upload-param\"\n                onChange={handleUpload}\n            />\n            <ImportDialog open={open} onClose={handleClose} content={importedParam} />\n        </>\n    );\n}\n\ninterface ImportDialogProps {\n    onClose: (action: string) => () => void;\n    open: boolean;\n    content: {} | RMGParam;\n}\n\nfunction ImportDialog(props: ImportDialogProps) {\n    const { t } = useTranslation();\n\n    const describeParams = (param: RMGParam) => {\n        return `Number of stations: ${Object.keys(param.stn_list).length - 2}\n                ${Object.entries(param.stn_list)\n                    .map(x => (['linestart', 'lineend'].includes(x[0]) ? '' : x[1].name.join(' - ')))\n                    .join('\\r\\n')\n                    .trim()\n                    .replace(/\\\\/, ' ')}`;\n    };\n\n    return (\n        <Dialog onClose={props.onClose('close')} open={props.open}>\n            <DialogTitle>Your Configuration</DialogTitle>\n            <DialogContent dividers>\n                <DialogContentText style={{ whiteSpace: 'pre-line' }}>\n                    {Object.keys(props.content).length === 0 ? 'empty' : describeParams(props.content as RMGParam)}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose('close')} color=\"primary\">\n                    {t('dialog.cancel')}\n                </Button>\n                <Button onClick={props.onClose('accept')} color=\"primary\" autoFocus>\n                    Import\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","export function test(svgEl: SVGSVGElement, scale: number, filename: string) {\n    let svgW = svgEl.viewBox.baseVal.width;\n    let svgH = svgEl.viewBox.baseVal.height;\n\n    // svgEl.removeAttribute('height');\n\n    let canvas = document.querySelectorAll('canvas')[0];\n    canvas.width = Number(svgW) * window.devicePixelRatio * scale;\n    canvas.height = Number(svgH) * window.devicePixelRatio * scale;\n\n    svgEl.setAttribute('width', canvas.width.toString());\n    svgEl.setAttribute('height', canvas.height.toString());\n\n    let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // bypass Chrome min font size (to be improved)\n\n    svgEl.querySelectorAll('.rmg-name__en.rmg-name__mtr--station').forEach(el => el.setAttribute('font-size', '11px'));\n\n    svgEl.querySelectorAll('.rmg-name__zh.IntName').forEach(el => el.setAttribute('font-size', '10px'));\n\n    svgEl.querySelectorAll('.rmg-name__en.rmg-name__mtr--osi').forEach(el => el.setAttribute('font-size', '9px'));\n\n    svgEl\n        .querySelectorAll('.rmg-name__en.rmg-name__gzmtr--next2-dest')\n        .forEach(el => el.setAttribute('font-size', '8.5px'));\n\n    svgEl.querySelectorAll('.rmg-name__en.IntName').forEach(el => el.setAttribute('font-size', '7px'));\n\n    // svgEl\n    //     .querySelectorAll('text:not([font-size]), tspan:not([font-size])')\n    //     .forEach((el) => el.setAttribute('font-size', window.getComputedStyle(el).fontSize));\n\n    svgEl.querySelectorAll('text, tspan').forEach(el => {\n        let elStyle = window.getComputedStyle(el);\n        el.setAttribute('font-family', elStyle.fontFamily);\n        el.setAttribute('fill', elStyle.fill);\n        el.setAttribute('dominant-baseline', elStyle.dominantBaseline);\n        el.setAttribute('text-anchor', elStyle.textAnchor || '');\n        // el.removeAttribute('class');\n    });\n\n    var img = new Image();\n    img.onload = () => {\n        setTimeout(() => {\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n            saveAs(canvas.toDataURL('image/png'), filename);\n        }, 2000);\n    };\n    img.src = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgEl.outerHTML)));\n}\n\nfunction saveAs(uri: string, filename: string) {\n    var link = document.createElement('a');\n\n    if (typeof link.download === 'string') {\n        link.href = uri;\n        link.download = `${filename}.png`;\n        //Firefox requires the link to be in the body\n        document.body.appendChild(link);\n        //simulate click\n        link.click();\n        //remove the link when done\n        document.body.removeChild(link);\n    } else {\n        window.open(uri);\n    }\n}\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    Checkbox,\n    createStyles,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Divider,\n    List,\n    ListItem,\n    ListItemSecondaryAction,\n    ListItemText,\n    makeStyles,\n    Select,\n    Switch,\n    Typography,\n} from '@material-ui/core';\n\nimport { test } from './utils';\nimport { useAppDispatch, useAppSelector } from '../../../redux';\nimport { RmgStyle } from '../../../constants/constants';\nimport { setCurrentStation } from '../../../redux/param/action';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        contentWrapper: {\n            display: 'flex',\n            overflow: 'hidden',\n            paddingTop: theme.spacing(1),\n            paddingBottom: theme.spacing(1),\n            paddingLeft: theme.spacing(3),\n            paddingRight: theme.spacing(3),\n            [theme.breakpoints.down('xs')]: {\n                flexDirection: 'column',\n            },\n        },\n        contentCanvas: {\n            flex: 1,\n        },\n        contentControl: {\n            flexGrow: 0,\n            flexShrink: 0,\n            display: 'flex',\n            flexDirection: 'column',\n            minWidth: 250,\n        },\n        contentAction: {\n            display: 'flex',\n            alignSelf: 'end',\n        },\n        contentRoot: {\n            padding: 'unset',\n            '&:first-child': {\n                paddingTop: 'unset',\n            },\n        },\n        contentControlContent: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'space-between',\n        },\n        formControlRoot: {\n            margin: 0,\n        },\n    })\n);\n\ninterface Props {\n    onClose: (action: string) => void;\n    open: boolean;\n    canvas: string;\n}\n\nexport default function PreviewDialog(props: Props) {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const stn_list = useAppSelector(store => store.param.stn_list);\n    const currentStationIndex = useAppSelector(store => store.param.current_stn_idx);\n    const rmgStyle = useAppSelector(store => store.param.style);\n\n    const [svgEl, setSvgEl] = useState(document.createElement('svg') as Element as SVGSVGElement);\n    // TODO: cache fonts here? Will s sometimes disappear after `dispatch` which close the dialog?\n    const [s, setS] = useState(document.createElement('style') as Element as HTMLStyleElement);\n    const [isLoaded, setIsLoaded] = useState(false);\n\n    const [showBorder, setShowBorder] = useState(false);\n    const [isTransparent, setIsTransparent] = useState(false);\n    const [scale, setScale] = useState(1);\n    const [format, setFormat] = useState('png');\n\n    const [isAccept, setIsAccept] = useState(false);\n    const [isTermsDialogOpen, setIsTermsDialogOpen] = useState(false);\n\n    const handleShowBorder = (_: React.ChangeEvent<HTMLInputElement>, checked: boolean) => {\n        svgEl.querySelector('rect#canvas-border')?.setAttribute('stroke', checked ? 'black' : 'none');\n        setShowBorder(checked);\n    };\n\n    const handleTransparent = (_: React.ChangeEvent<HTMLInputElement>, checked: boolean) => {\n        svgEl.querySelector('rect#canvas-bg')?.setAttribute('fill', checked ? 'none' : 'white');\n        setIsTransparent(checked);\n    };\n\n    const handleScaleChange = (event: React.ChangeEvent<{ name?: string | undefined; value: unknown }>) => {\n        let nextScale = event.target.value as number;\n        svgEl.setAttribute('height', ((Number(svgEl.getAttribute('height')) / scale) * nextScale).toString());\n        setScale(nextScale);\n    };\n\n    const contentEl = React.useRef<HTMLDivElement | null>(null);\n\n    // wait for svg canvas and fonts to be fully loaded\n    useEffect(\n        () => {\n            if (props.canvas === '') {\n                setSvgEl(document.createElement('svg') as Element as SVGSVGElement);\n                setIsLoaded(false);\n                return;\n            }\n\n            let elem = cloneSvgNode();\n\n            if (rmgStyle === RmgStyle.MTR) {\n                import(/* webpackChunkName: \"panelPreviewMTR\" */ './mtr-helper').then(async ({ getBase64FontFace }) => {\n                    try {\n                        const uris = await getBase64FontFace(elem);\n                        const s = document.createElement('style');\n                        s.textContent = uris.join('\\n');\n                        // TODO: cache fonts here?\n                        setS(s);\n                        elem.prepend(s);\n                    } catch (err) {\n                        alert('Failed to fonts. Fonts in the exported PNG will be missing.');\n                        console.error(err);\n                    } finally {\n                        setSvgEl(elem);\n                        await document.fonts.ready;\n                        setIsLoaded(true);\n                    }\n                });\n            } else {\n                setSvgEl(elem);\n                setIsLoaded(true);\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.canvas]\n    );\n\n    /**\n     * Clone the svg canvas and adjust its properties like heights and border.\n     * \n     * @returns The cloned svg canvas\n     */\n    const cloneSvgNode = (): SVGSVGElement => {\n        let [, thisSVGHeight] = ['--rmg-svg-width', '--rmg-svg-height']\n            .map(\n                key =>\n                    (document.querySelector(`svg#${props.canvas}`) as SVGSVGElement).style\n                        .getPropertyValue(key)\n                        .match(/\\d+/g)![0]\n            )\n            .map(Number);\n\n        // let MAX_WIDTH = Math.min(window.innerWidth, 1412) - 64 - 24 * 2;\n        // let MAX_HEIGHT = window.innerHeight - 64 - 64 - 52 - 8 * 2;\n        // let scaleFactor = Math.min(MAX_WIDTH / thisSVGWidth, MAX_HEIGHT / thisSVGHeight);\n\n        const elem = document.querySelector(`svg#${props.canvas}`)!.cloneNode(true) as SVGSVGElement;\n        // elem.setAttribute('width', (thisSVGWidth * scaleFactor).toString());\n        elem.setAttribute('height', (thisSVGHeight * scale).toString());\n        elem.style.setProperty('all', 'initial');\n\n        ['share', props.canvas]\n            .map(tag =>\n                [\n                    ...(\n                        [...document.querySelectorAll('link')].filter(l => l.id === 'css_' + tag)[0]\n                            ?.sheet as CSSStyleSheet\n                    ).cssRules,\n                ]\n                    .map(rule => rule.cssText)\n                    .join(' ')\n            )\n            .forEach(txt => {\n                let s = document.createElement('style');\n                s.textContent = txt;\n                elem.prepend(s);\n            });\n\n        elem.querySelector('rect#canvas-border')?.setAttribute('stroke', showBorder ? 'black' : 'none');\n        elem.querySelector('rect#canvas-bg')?.setAttribute('fill', isTransparent ? 'none' : 'white');\n\n        return elem;\n    }\n\n    /**\n     * A recursive function that the batch can run in sequence.\n     * We need to wait for svg elements updated for station A before we dispatch the current station to B.\n     * \n     * @param stn_list_keys Stations that need to be download\n     * @returns Nothing\n     */\n    const downloadSvg = (stn_list_keys: string[]) => {\n        // process the stn_list_keys one by one\n        const stnId = stn_list_keys.pop();\n        if (stnId === undefined) return;\n\n        dispatch(setCurrentStation(stnId, stn_list_keys))\n            .then(async (stn_list_keys: string[]) => {\n                const elem = cloneSvgNode();\n\n                if (rmgStyle === RmgStyle.MTR) {\n                    // TODO: duplicate code here and useEffect, request internet for the same font multiple times, could be solved by cache s?\n                    const s = await import(/* webpackChunkName: \"panelPreviewMTR\" */ './mtr-helper')\n                        .then(async ({ getBase64FontFace }): Promise<HTMLStyleElement> => {\n                            // TODO: duplicate code here and useEffect\n                            const s = document.createElement('style');\n                            try {\n                                const uris = await getBase64FontFace(elem);\n                                s.textContent = uris.join('\\n');\n                            } catch (err) {\n                                alert('Failed to load fonts. Fonts in the exported PNG will be missing.');\n                                console.error(err);\n                            } finally {\n                                await document.fonts.ready;\n                                // TODO: remove this line, they are used to determine the sequence of load fonts and download process\n                                console.log('Pass load fonts process.')\n                                return Promise.resolve(s);\n                            }\n                        });\n                    // TODO: s could also be retrieved from cache, so the entire code above is useless, and so the promise and async\n                    elem.prepend(s);\n                }\n\n                // TODO: remove this line, they are used to determine the sequence of load fonts and download process\n                console.log('Trigger the download process.')\n\n                // TODO: border, transparent, and scale are not respected by now\n\n                // append svg to the document so the bbox and fonts will be loaded correctly\n                document.body.appendChild(elem);\n\n                const filename = `rmg.${stnId}.${stn_list[stnId].name[0]}.${stn_list[stnId].name[1]}`.replaceAll(' ', '_');\n                if (format === 'png') {\n                    test(elem, scale, filename);\n                } else if (format === 'svg') {\n                    elem.removeAttribute('height');\n                    var link = document.createElement('a');\n                    link.href = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(elem.outerHTML)));\n                    link.download = `${filename}.svg`;\n                    link.click();\n                }\n\n                // don't forget to release it after use\n                document.body.removeChild(elem)\n\n                // trigger download for the remaining stations\n                downloadSvg(stn_list_keys);\n            })\n    }\n\n    const handleClose = (action: 'close' | 'downloadCurrentStation' | 'downloadAllStation') => () => {\n        if (action === 'downloadCurrentStation') {\n            const stn_list_keys = [currentStationIndex];\n            downloadSvg(stn_list_keys);\n        } else if (action === 'downloadAllStation') {\n            const stn_list_keys = Object.keys(stn_list)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            downloadSvg(stn_list_keys);\n        }\n\n        props.onClose('close');\n    };\n\n    return (\n        <Dialog onClose={handleClose('close')} open={props.open} maxWidth={false}>\n            <DialogTitle>{t('file.preview.title')}</DialogTitle>\n            <div className={classes.contentWrapper}>\n                <DialogContent\n                    dangerouslySetInnerHTML={{ __html: svgEl.outerHTML }}\n                    ref={contentEl}\n                    className={classes.contentCanvas}\n                    classes={{ root: classes.contentRoot }}\n                />\n                <div className={classes.contentControl}>\n                    <DialogContent classes={{ root: classes.contentRoot }} className={classes.contentControlContent}>\n                        <List component=\"div\" disablePadding>\n                            <ListItem>\n                                <ListItemText primary={t('file.preview.transparent')} />\n                                <ListItemSecondaryAction>\n                                    <Switch\n                                        color=\"primary\"\n                                        checked={isTransparent}\n                                        onChange={handleTransparent}\n                                        disabled={!isLoaded}\n                                    />\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                            <Divider variant=\"middle\" />\n                            <ListItem>\n                                <ListItemText primary={t('file.preview.border')} />\n                                <ListItemSecondaryAction>\n                                    <Switch\n                                        color=\"primary\"\n                                        checked={showBorder}\n                                        onChange={handleShowBorder}\n                                        disabled={!isLoaded}\n                                    />\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                            <Divider variant=\"middle\" />\n                            <ListItem>\n                                <ListItemText primary={t('file.preview.scale')} />\n                                <ListItemSecondaryAction>\n                                    <Select native value={scale} onChange={handleScaleChange} disabled={!isLoaded}>\n                                        {[\n                                            0.25, 0.33, 0.5, 0.67, 0.75, 0.8, 0.9, 1, 1.1, 1.25, 1.5, 1.75, 2, 2.5, 3,\n                                            4, 5,\n                                        ].map(ratio => (\n                                            <option key={ratio} value={ratio}>\n                                                {(ratio * 100).toFixed(0) + '%'}\n                                            </option>\n                                        ))}\n                                    </Select>\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                            <Divider variant=\"middle\" />\n                            <ListItem>\n                                <ListItemText primary={t('file.preview.format')} />\n                                <ListItemSecondaryAction>\n                                    <Select\n                                        native\n                                        value={format}\n                                        onChange={e => setFormat(e.target.value as string)}\n                                        style={{ width: 65 }}\n                                        disabled={!isLoaded}\n                                    >\n                                        <option value=\"png\">PNG</option>\n                                        <option value=\"svg\">SVG (Web Use)</option>\n                                    </Select>\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                        </List>\n                        <ListItem style={{ padding: 0 }}>\n                            <Checkbox\n                                color=\"primary\"\n                                size=\"small\"\n                                checked={isAccept}\n                                onChange={(_, checked) => setIsAccept(checked)}\n                            />\n                            <Typography variant=\"body2\">\n                                {t('file.preview.terms.accept')}\n                                <Typography\n                                    component=\"a\"\n                                    color=\"primary\"\n                                    variant=\"body2\"\n                                    style={{ cursor: 'pointer' }}\n                                    onClick={() => setIsTermsDialogOpen(true)}\n                                >\n                                    {t('file.preview.terms.tandc')}\n                                </Typography>\n                            </Typography>\n\n                            <TermsDialog open={isTermsDialogOpen} onClose={() => setIsTermsDialogOpen(false)} />\n                        </ListItem>\n                    </DialogContent>\n                </div>\n            </div>\n            <div className={classes.contentAction}>\n                <DialogActions>\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleClose('downloadCurrentStation')}\n                        color=\"primary\"\n                        disabled={!isLoaded || !isAccept}\n                    >\n                        {t('file.preview.downloadCurrentStation')}\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleClose('downloadAllStation')}\n                        color=\"primary\"\n                        disabled={!isLoaded || !isAccept}\n                    >\n                        {t('file.preview.downloadAllStations')}\n                    </Button>\n                    <Button variant=\"outlined\" onClick={handleClose('close')} color=\"primary\" autoFocus>\n                        {t('dialog.cancel')}\n                    </Button>\n                </DialogActions>\n            </div>\n        </Dialog>\n    );\n}\n\nconst TermsDialog = (props: { open: boolean; onClose: () => void }) => {\n    const { t } = useTranslation();\n    return useMemo(\n        () => (\n            <Dialog open={props.open} onClose={props.onClose}>\n                <DialogTitle>{t('file.preview.terms.tandc')}</DialogTitle>\n                <DialogContent dividers>\n                    <Typography component=\"p\">\n                        The downloaded image may be modified, published, or used for other purposes, under the following\n                        conditions.\n                    </Typography>\n                    <Typography component=\"ol\">\n                        <Typography component=\"li\">\n                            The layout of the elements on the sign or rail map, is designed by{' '}\n                            <Typography component=\"a\" color=\"primary\" href=\"http://www.gzmtr.com\" target=\"_blank\">\n                                Guangzhou Metro Corporation\n                            </Typography>\n                            ,{' '}\n                            <Typography component=\"a\" color=\"primary\" href=\"http://www.mtr.com.hk\" target=\"_blank\">\n                                MTR Corporation\n                            </Typography>{' '}\n                            or{' '}\n                            <Typography component=\"a\" color=\"primary\" href=\"http://www.shmetro.com\" target=\"_blank\">\n                                Shanghai Shentong Metro Group\n                            </Typography>\n                            , depending on your selection. You shall grant appropriate permit or license from the\n                            relevant company above before using the downloaded image for commercial purposes, if it is\n                            required to do so.\n                        </Typography>\n                        <Typography component=\"li\">\n                            The elements including shapes and lines on the image are drawn by{' '}\n                            <Typography\n                                component=\"a\"\n                                color=\"primary\"\n                                href=\"https://github.com/wongchito\"\n                                target=\"_blank\"\n                            >\n                                Chito Wong\n                            </Typography>{' '}\n                            and{' '}\n                            <Typography\n                                component=\"a\"\n                                color=\"primary\"\n                                href=\"https://github.com/thekingofcity\"\n                                target=\"_blank\"\n                            >\n                                thekingofcity\n                            </Typography>\n                            , based on the design standards or rules of the companies listed above. You may use them for\n                            any purposes, but it is recommended to state the name and the link of software alongside.\n                        </Typography>\n                        <Typography component=\"li\">\n                            The fonts of the Chinese characters in MTR style are provided by{' '}\n                            <Typography\n                                component=\"a\"\n                                color=\"primary\"\n                                href=\"https://www.google.com/get/noto/help/cjk/\"\n                                target=\"_blank\"\n                            >\n                                Google Inc.\n                            </Typography>{' '}\n                            while all others fonts are rendered from local files. You shall grant appropriate permit or\n                            license from the manufacturers before using the downloaded image for commercial purposes.\n                        </Typography>\n                    </Typography>\n                    <Typography component=\"p\">\n                        We reserve the rights, without notice, to modify, add, or remove these terms.\n                    </Typography>\n                    <Typography component=\"p\">本條款及細則暫只提供英文版，敬請原諒。</Typography>\n                    <Typography component=\"p\" variant=\"body2\">\n                        Last modified: 6 Apr 2020, 12:39 UTC\n                    </Typography>\n                </DialogContent>\n                <DialogActions>\n                    <Button variant=\"outlined\" color=\"primary\" onClick={props.onClose}>\n                        {t('dialog.close')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.open]\n    );\n};\n","import ExportDialog from './dialog';\n\nexport default ExportDialog;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Dialog, DialogContent, DialogTitle, List, ListItem, ListItemText } from '@material-ui/core';\n\nimport PreviewDialog from './preview-diag';\nimport { useAppSelector } from '../../../redux';\nimport { AllCanvas, canvasConfig } from '../../../constants/constants';\n\ninterface Props {\n    onClose: (action: string) => void;\n    open: boolean;\n}\n\nexport default function ExportDialog(props: Props) {\n    const { t } = useTranslation();\n\n    const rmgStyle = useAppSelector(store => store.param.style);\n    const canvasToShow = useAppSelector(store => store.app.canvasToShow);\n\n    const [previewDialogOpened, setPreviewDialogOpened] = React.useState(false);\n    const [canvas, setCanvas] = React.useState('');\n\n    const handleClose = (action: string) => () => {\n        if (action !== 'close') {\n            setPreviewDialogOpened(true);\n            setCanvas(action);\n        }\n        props.onClose('close');\n    };\n\n    const previewDialogClose = (action: string) => {\n        if (action === 'close') {\n            setPreviewDialogOpened(false);\n            setCanvas('');\n        }\n    };\n\n    return (\n        <>\n            <Dialog onClose={handleClose('close')} open={props.open}>\n                <DialogTitle>{t('file.export.title')}</DialogTitle>\n                <DialogContent dividers>\n                    <List>\n                        {(canvasToShow === AllCanvas ? canvasConfig[rmgStyle] : [canvasToShow]).map(c => (\n                            <ListItem button key={c} onClick={handleClose(c)}>\n                                <ListItemText primary={t('file.export.' + c)} />\n                            </ListItem>\n                        ))}\n                    </List>\n                </DialogContent>\n            </Dialog>\n\n            <PreviewDialog open={previewDialogOpened} onClose={previewDialogClose} canvas={canvas} />\n        </>\n    );\n}\n","import React, { useState } from 'react';\nimport { useTranslation, withTranslation } from 'react-i18next';\nimport {\n    Grid,\n    Card,\n    List,\n    ListItem,\n    ListItemIcon,\n    Icon,\n    ListItemText,\n    Divider,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    LinearProgress,\n} from '@material-ui/core';\nimport { getTransText2 } from '../../utils';\nimport UploadListItem from './upload-item';\nimport ExportDialog from './export-diag';\nimport { Link } from 'react-router-dom';\nimport { useAppDispatch, useAppSelector } from '../../redux';\nimport { LanguageCode, RmgStyle } from '../../constants/constants';\nimport { setStyle } from '../../redux/param/action';\n\nconst TemplateDialog = React.lazy(() => import(/* webpackChunkName: \"panelSaveTemplateDialog\" */ './template-diag'));\n\nexport default function PanelSave() {\n    let TranslatedSaveLists = withTranslation()(SaveLists);\n\n    return (\n        <Grid container spacing={3} justifyContent=\"center\" alignItems=\"center\">\n            <Grid item xs={12} sm={8} md={6} lg={4}>\n                <TranslatedSaveLists />\n            </Grid>\n        </Grid>\n    );\n}\n\nconst allLangs = {\n    en: 'English',\n    'zh-Hans': '中文（简体）',\n    'zh-HK': '中文（香港）',\n};\n\nconst SaveLists = () => {\n    const { t, i18n } = useTranslation();\n\n    const rmgStyle = useAppSelector(store => store.param.style);\n    const param = useAppSelector(store => store.param);\n\n    const [isTempDialogOpen, setIsTempDialogOpen] = useState(false);\n    const [isExportDialogOpen, setIsExportDialogOpen] = useState(false);\n    const [isStyleDialogOpen, setIsStyleDialogOpen] = useState(false);\n    const [isLangDialogOpen, setIsLangDialogOpen] = useState(false);\n\n    const saveClick = async () => {\n        let link = document.createElement('a');\n        link.href = 'data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(param))));\n        link.download = 'rmg.param.' + new Date().toISOString() + '.json';\n        link.click();\n    };\n\n    const exportDialogClose = (action: string) => {\n        setIsExportDialogOpen(false);\n    };\n\n    const styleDialogClose = (action: 'close' | RmgStyle) => {\n        if (action === 'close' || action === rmgStyle) {\n        } else {\n            // setStyle(action);\n            // setIsStyleDialogOpen(false);\n\n            window.gtag('event', 'set', {\n                event_category: 'style',\n                event_label: action,\n            });\n            // window.location.href = process.env.PUBLIC_URL + '/' + action;\n        }\n        setIsStyleDialogOpen(false);\n\n        // TODO: how about integrity check?\n        // e.g. when user switch from guangzhou mtr to shanghai metro\n        // the info_panel_type will be invaild\n        // do we need to set info_panel_type to default or prompt up a dialog\n    };\n\n    return (\n        <div>\n            <Card>\n                <List component=\"nav\">\n                    <ListItem button onClick={() => setIsTempDialogOpen(true)}>\n                        <ListItemIcon>\n                            <Icon>note_add</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('file.new.button')} />\n                    </ListItem>\n                    <UploadListItem />\n                    <ListItem button onClick={saveClick}>\n                        <ListItemIcon>\n                            <Icon>save</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('file.save')} />\n                    </ListItem>\n                    <ListItem button onClick={() => setIsExportDialogOpen(true)}>\n                        <ListItemIcon>\n                            <Icon>cloud_download</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('file.export.button')} />\n                    </ListItem>\n                </List>\n                <Divider />\n                <List component=\"nav\">\n                    <ListItem button onClick={() => setIsStyleDialogOpen(true)}>\n                        <ListItemIcon>\n                            <Icon>style</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('file.style.button')} secondary={t('file.style.' + rmgStyle)} />\n                    </ListItem>\n                    <ListItem button onClick={() => setIsLangDialogOpen(true)}>\n                        <ListItemIcon>\n                            <Icon>translate</Icon>\n                        </ListItemIcon>\n                        <ListItemText\n                            primary={t('file.lang.button')}\n                            secondary={getTransText2(allLangs, i18n.languages as LanguageCode[])}\n                        />\n                    </ListItem>\n                </List>\n            </Card>\n\n            <React.Suspense fallback={<LinearProgress />}>\n                <TemplateDialog open={isTempDialogOpen} onClose={() => setIsTempDialogOpen(false)} />\n            </React.Suspense>\n\n            <ExportDialog open={isExportDialogOpen} onClose={exportDialogClose} />\n\n            <StyleDialog open={isStyleDialogOpen} onClose={styleDialogClose} />\n            <LangDialog open={isLangDialogOpen} onClose={() => setIsLangDialogOpen(false)} />\n        </div>\n    );\n};\n\ninterface StyleDialogProps {\n    onClose: (style: 'close' | RmgStyle) => void;\n    open: boolean;\n}\n\nfunction StyleDialog(props: StyleDialogProps) {\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const handleClose = (key: RmgStyle) => () => {\n        dispatch(setStyle(key));\n        props.onClose(key);\n    };\n\n    return (\n        <Dialog onClose={() => props.onClose('close')} open={props.open}>\n            <DialogTitle>{t('file.style.title')}</DialogTitle>\n            <DialogContent dividers>\n                <List>\n                    {Object.values(RmgStyle).map(key => (\n                        <Link to={'/' + key} key={key} style={{ textDecoration: 'none', color: 'unset' }}>\n                            <ListItem button onClick={handleClose(key)}>\n                                <ListItemText primary={t('file.style.' + key)} />\n                            </ListItem>\n                        </Link>\n                    ))}\n                </List>\n            </DialogContent>\n        </Dialog>\n    );\n}\n\ninterface LangDialogProps {\n    onClose: () => void;\n    open: boolean;\n}\n\nfunction LangDialog(props: LangDialogProps) {\n    const { t, i18n } = useTranslation();\n\n    const handleClick = (lang: string) => {\n        if (lang === i18n.language) {\n            props.onClose();\n        } else {\n            i18n.changeLanguage(lang).then(t => (document.title = t('title')));\n            // history.pushState({url:window.location.href}, null, '?' + window.urlParams.toString());\n            window.gtag('event', 'set', {\n                event_category: 'language',\n                event_label: lang,\n            });\n            document.documentElement.setAttribute('lang', lang);\n            props.onClose();\n        }\n    };\n\n    return (\n        <Dialog onClose={props.onClose} open={props.open}>\n            <DialogTitle>{t('file.lang.title')}</DialogTitle>\n            <DialogContent dividers>\n                <List>\n                    {(Object.keys(allLangs) as (keyof typeof allLangs)[]).map(key => (\n                        <ListItem button onClick={() => handleClick(key)} key={key}>\n                            <ListItemText primary={allLangs[key]} />\n                        </ListItem>\n                    ))}\n                </List>\n            </DialogContent>\n        </Dialog>\n    );\n}\n","import Panel from './panel';\n\nexport default Panel;\n"],"sourceRoot":""}