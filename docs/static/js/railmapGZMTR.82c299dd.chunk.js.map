{"version":3,"sources":["svgs/railmap/main/line-box-gzmtr.tsx","svgs/railmap/main/station/station-gzmtr.tsx","svgs/railmap/main/main-gzmtr.tsx","svgs/railmap/railmap-gzmtr.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","svgs/railmap/methods/share.ts","svgs/strip/strip-gzmtr.tsx","svgs/station-num-gzmtr.tsx"],"names":["memo","props","textAnchor","fill","stnState","info","xlinkHref","LineBoxNameSpan","name","slice","LineBoxName","prevProps","nextProps","toString","nameZHEl","dy","match","forEach","t","i","isNaN","Number","push","dominantBaseline","fontSize","nameZHGroupEl","useRef","useState","width","zhBBox","setZhBBox","useEffect","current","getBBox","nameZHGroupScale","nameENEl","enBBox","setEnBBox","nameENScale","ref","y","navigator","userAgent","includes","className","transform","replace","length","sharedText","idx","nameEl","x","bBox","setBBox","nameScale","trim","StationGZMTR","param","useContext","ParamContext","stnInfo","stn_list","stnId","isNameShift","parents","children","tickRotation","stnY","indexOf","branch","left","right","nameENLns","split","nameDX","Math","cos","intInfos","theme","line_name","concat","transfer","stroke","lineNum","line_num","stnNum","num","secondaryName","isExpress","services","StationNameGElement","nameDY","stnNameEl","secNameEl","secNameBBox","setSecNameBBox","prevBBox","StationName","StationSecondaryName","secName","ExpressTag","forwardRef","useMemo","map","txt","React","IntGroup","strokeWidth","IntTicks","others","IntBoxs","other","wideFactor","stnList","MainGZMTR","branches","routes","deps","adjMat","adjacencyList","xShares","console","log","Object","keys","reduce","acc","cur","criticalPath","criticalPathMethod","nodes","len","branchOfStn","filter","partSource","partSink","leftOpenJaw","rightOpenJaw","lens","getXShare","JSON","stringify","realCP","lineXs","direction","svgWidth","railmap","padding","xs","yShares","ys","branch_spacing","stnStates","getStnState","current_stn_idx","linePaths","drawLine","paths","stns","_linePath","id","style","y_pc","Line","Array","strokeDasharray","pass","path","d","main","stnIds","realXs","realYs","prevY","join","StationGroup","DefsGZMTR","RailMapGZMTR","variant","info_panel_type","isShowLight","isShowPSD","psd_num","TerminusFlag","notesGZMTR","note","NoteBox","x2","strokeLinecap","height","rx","DirectionIndicator","validDests","Set","textGroupProps","destIds","direction_gz_x","direction_gz_y","DirectionIndicatorTextGroup","DirectionIndicatorTextGroup2","charCounts","minCharCounts","min","charSpacing","abs","letterSpacing","max","noteTextEl","textLength","lengthAdjust","_objectWithoutProperties","source","excluded","key","target","sourceKeys","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","leftW","rightW","a","c","from","to","allLengths","criticalPaths","child","cp","unshift","maxLength","getXShareMTR","currentId","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","namePoss","leftWideFactor","rightWideFactor","pathWeight","Infinity","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","stnPred","res","getYShare","prevId","prevX","stnDX","stnExtraH","stnSpareH","warn","stations","lineMainStns","linePassStns","StripGZMTR","stripHeight","indicatorLight","cy","r","ry","PSD","isInStrip","psdDy","StationNumberText","LINE_NUM_MAX_WIDTH","lineNumEl","lineNumScale","stnNumScale"],"mappings":"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","file":"static/js/railmapGZMTR.82c299dd.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect, memo } from 'react';\n\nexport default memo(\n    function LineBox(props: { info: InterchangeInfo; stnState: -1 | 0 | 1 }) {\n        return (\n            <g textAnchor=\"middle\" fill={props.stnState === -1 ? '#fff' : props.info[3]}>\n                <use xlinkHref=\"#intbox\" fill={props.stnState === -1 ? '#aaa' : props.info[2]} />\n                {props.info[4][0] === props.info[5][0] ? (\n                    <LineBoxNameSpan name={props.info.slice(-2) as Name} />\n                ) : (\n                    <LineBoxName name={props.info.slice(-2) as Name} />\n                )}\n            </g>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.info.toString() === nextProps.info.toString() && prevProps.stnState === nextProps.stnState\n);\n\nconst LineBoxName = memo(\n    (props: { name: Name }) => {\n        let nameZHEl = [] as JSX.Element[];\n        let dy = 0;\n        props.name[0].match(/\\d+|\\D+/g)?.forEach((t, i) => {\n            if (isNaN(Number(t))) {\n                // text\n                nameZHEl.push(\n                    <tspan key={i} dominantBaseline=\"hanging\" dy={1 - dy}>\n                        {t}\n                    </tspan>\n                );\n                dy += 1 - dy;\n            } else {\n                // number\n                nameZHEl.push(\n                    <tspan key={i} dominantBaseline=\"hanging\" fontSize={16} dy={-dy}>\n                        {t}\n                    </tspan>\n                );\n                dy = 0;\n            }\n        });\n\n        const nameZHGroupEl = useRef<SVGTextElement | null>(null);\n        const [zhBBox, setZhBBox] = useState({ width: 0 } as DOMRect);\n        useEffect(\n            () => setZhBBox(nameZHGroupEl.current!.getBBox()),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [props.name[0]]\n        );\n        const nameZHGroupScale = zhBBox.width > 43.5 ? 43.5 / zhBBox.width : 1;\n\n        const nameENEl = useRef<SVGTextElement | null>(null);\n        const [enBBox, setEnBBox] = useState({ width: 0 } as DOMRect);\n        useEffect(\n            () => setEnBBox(nameENEl.current!.getBBox()),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [props.name[1]]\n        );\n        const nameENScale = enBBox.width > 43.5 ? 43.5 / enBBox.width : 1;\n\n        return (\n            <>\n                <text\n                    ref={nameZHGroupEl}\n                    y={navigator.userAgent.includes('Firefox') ? -0.5 : 2}\n                    className=\"rmg-name__zh\"\n                    fontSize={12}\n                    transform={`scale(${nameZHGroupScale},1)`}\n                >\n                    {nameZHEl}\n                </text>\n                <text\n                    ref={nameENEl}\n                    y={19.5}\n                    fontSize={props.name[1].replace('\\\\', ' ').length > 10 ? 7 : 8}\n                    className=\"rmg-name__en\"\n                    transform={`scale(${nameENScale},1)`}\n                >\n                    {props.name[1]}\n                </text>\n            </>\n        );\n    },\n    (prevProps, nextProps) => prevProps.name.toString() === nextProps.name.toString()\n);\n\nconst LineBoxNameSpan = memo(\n    (props: { name: Name }) => {\n        let sharedText = '';\n        for (let idx in [...props.name[0]]) {\n            if (props.name[0][idx] === props.name[1][idx]) {\n                sharedText += props.name[0][idx];\n            } else {\n                break;\n            }\n        }\n\n        const nameEl = useRef<SVGTextElement | null>(null);\n        const [bBox, setBBox] = useState({ x: 0, width: 0 } as DOMRect);\n        useEffect(\n            () => setBBox(nameEl.current!.getBBox()),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [props.name.toString()]\n        );\n\n        const nameScale = bBox.width > 43.5 ? 43.5 / bBox.width : 1;\n\n        // unsymmetrical scaling, wrap with <g>\n        return (\n            <g transform={`scale(${nameScale},1)`}>\n                <g transform={`translate(${-bBox.x - bBox.width / 2},0)`}>\n                    <text ref={nameEl} className=\"rmg-name__zh\" fontSize={14} y={12} textAnchor=\"end\">\n                        {sharedText}\n                        <tspan className=\"rmg-name__zh\" fontSize={8} x={0} dy={-2} textAnchor=\"start\">\n                            {props.name[0].slice(sharedText.length)}\n                        </tspan>\n                        <tspan className=\"rmg-name__en\" fontSize={4} x={0} dy={6} textAnchor=\"start\">\n                            {props.name[1].slice(sharedText.length).trim()}\n                        </tspan>\n                    </text>\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.name.toString() === nextProps.name.toString()\n);\n","import React, { useContext, useState, useEffect, useRef, useMemo, forwardRef } from 'react';\nimport { ParamContext } from '../../../../context';\nimport StationNumberText from '../../../station-num-gzmtr';\nimport LineBox from '../line-box-gzmtr';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n    stnY: number;\n}\n\nconst StationGZMTR = (props: Props) => {\n    const { param } = useContext(ParamContext);\n    const stnInfo = param.stn_list[props.stnId];\n\n    const isNameShift = stnInfo.parents.length === 2 || stnInfo.children.length === 2;\n    const tickRotation =\n        props.stnY > 0\n            ? 180\n            : stnInfo.parents.indexOf(stnInfo.branch.left[1] || '') === 1 ||\n              stnInfo.children.indexOf(stnInfo.branch.right[1] || '') === 1\n            ? 180\n            : 0;\n    const nameENLns = stnInfo.name[1].split('\\\\').length;\n    const nameDX = isNameShift\n        ? tickRotation === 180\n            ? 16 + (nameENLns - 1) * 12 * Math.cos(-45)\n            : -9\n        : tickRotation === 180\n        ? -6\n        : (25 + (nameENLns - 1) * 15) * Math.cos(-45);\n\n    return (\n        <>\n            <IntGroup\n                intInfos={\n                    isNameShift\n                        ? (([\n                              [\n                                  param.theme[0],\n                                  param.theme[1],\n                                  'var(--rmg-theme-colour)',\n                                  'var(--rmg-theme-fg)',\n                                  param.line_name[0],\n                                  param.line_name[1],\n                              ],\n                          ] as any[]) as InterchangeInfo[]).concat(stnInfo.transfer.info[0])\n                        : stnInfo.transfer.info[0]\n                }\n                stnState={props.stnState}\n                tickRotation={tickRotation}\n            />\n            <g>\n                <use xlinkHref=\"#stn\" stroke={props.stnState === -1 ? '#aaa' : 'var(--rmg-theme-colour)'} />\n                <StationNumberText\n                    className={`Name ${props.stnState === -1 ? 'Pass' : 'Future'}`}\n                    lineNum={param.line_num}\n                    stnNum={stnInfo.num}\n                />\n            </g>\n            <g transform={`translate(${-nameDX},0)`}>\n                <StationNameGElement\n                    name={stnInfo.name}\n                    secondaryName={stnInfo.secondaryName}\n                    stnState={props.stnState}\n                    tickRotation={tickRotation}\n                    isExpress={stnInfo.services.includes('express')}\n                />\n            </g>\n        </>\n    );\n};\n\nexport default StationGZMTR;\n\ninterface StationNameGElementProps {\n    name: Name;\n    secondaryName: false | Name;\n    stnState: -1 | 0 | 1;\n    tickRotation: 0 | 180;\n    isExpress: boolean;\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const nameDY = props.tickRotation === 180 ? 17.5 : -20 - props.name[1].split('\\\\').length * 14 * Math.cos(-45);\n\n    const stnNameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ width: 0 } as DOMRect);\n    useEffect(\n        () => setBBox(stnNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.name.toString()]\n    );\n\n    const secNameEl = useRef<SVGGElement | null>(null);\n    const [secNameBBox, setSecNameBBox] = useState({ x: 0, width: -20 } as SVGRect);\n    useEffect(\n        () => {\n            if (secNameEl.current) {\n                setSecNameBBox(secNameEl.current.getBBox());\n            } else {\n                setSecNameBBox(prevBBox => {\n                    const { x } = prevBBox;\n                    return { x, width: -20 } as SVGRect;\n                });\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.secondaryName.toString()]\n    );\n\n    return (\n        <g\n            textAnchor={props.tickRotation === 180 ? 'end' : 'start'}\n            className={`Name ${props.stnState === -1 ? 'Pass' : props.stnState === 0 ? 'CurrentGZ' : 'Future'}`}\n            transform={`translate(0,${nameDY})rotate(-45)`}\n        >\n            <StationName ref={stnNameEl} name={props.name} />\n            {props.secondaryName && (\n                <g\n                    transform={`translate(${(bBox.width + secNameBBox.width / 2 + 10) *\n                        (props.tickRotation === 180 ? -1 : 1)},${2 + 5 * (props.name[1].split('\\\\').length - 1)})`}\n                    className={`Name ${props.stnState === -1 ? 'Pass' : 'Future'}`}\n                >\n                    <g transform=\"translate(0,3)\" fontSize={18}>\n                        <text textAnchor=\"end\" x={secNameBBox.x - 3} className=\"rmg-name__zh\">\n                            {'('}\n                        </text>\n                        <text textAnchor=\"start\" x={secNameBBox.width + secNameBBox.x + 3} className=\"rmg-name__zh\">\n                            {')'}\n                        </text>\n                    </g>\n                    <StationSecondaryName ref={secNameEl} secName={props.secondaryName} />\n                </g>\n            )}\n            {props.isExpress && (\n                <ExpressTag\n                    fill={props.stnState === -1 ? '#aaa' : 'var(--rmg-theme-colour)'}\n                    transform={`translate(${(bBox.width + secNameBBox.width + 20 + 35) *\n                        (props.tickRotation === 180 ? -1 : 1)},${2 + 5 * (props.name[1].split('\\\\').length - 1)})`}\n                />\n            )}\n        </g>\n    );\n};\n\nconst StationName = forwardRef((props: { name: Name }, ref: React.Ref<SVGGElement>) =>\n    useMemo(\n        () => (\n            <g ref={ref}>\n                <text className=\"rmg-name__zh\" fontSize={18}>\n                    {props.name[0]}\n                </text>\n                <g fontSize={10.5}>\n                    {props.name[1].split('\\\\').map((txt, i) => (\n                        <text key={i} className=\"rmg-name__en\" dy={16 + i * 11}>\n                            {txt}\n                        </text>\n                    ))}\n                </g>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.name[0], props.name[1]]\n    )\n);\n\nconst StationSecondaryName = forwardRef((props: { secName: Name }, ref: React.Ref<SVGGElement>) =>\n    useMemo(\n        () => (\n            <g ref={ref} textAnchor=\"middle\">\n                <text className=\"rmg-name__zh\" fontSize={13}>\n                    {props.secName[0]}\n                </text>\n                <text dy={10} className=\"rmg-name__en\" fontSize={6.5}>\n                    {props.secName[1]}\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.secName.toString()]\n    )\n);\n\nconst ExpressTag = React.memo((props: React.SVGProps<SVGGElement>) => (\n    <g textAnchor=\"middle\" {...props}>\n        <text className=\"rmg-name__zh\" fontSize={13}>\n            快车停靠站\n        </text>\n        <text dy={10} className=\"rmg-name__en\" fontSize={6.5}>\n            Express Station\n        </text>\n    </g>\n));\n\ninterface IntGroupProps {\n    intInfos: InterchangeInfo[];\n    stnState: -1 | 0 | 1;\n    tickRotation: 0 | 180;\n}\n\nconst IntGroup = (props: IntGroupProps) => (\n    <>\n        <IntTicks strokeWidth={4} {...props} />\n        <IntBoxs transform={`translate(0,${props.tickRotation === 180 ? -47 : 23})`} {...props} />\n    </>\n);\n\nconst IntTicks = (props: IntGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, stnState, tickRotation, ...others } = props;\n\n    return (\n        <g {...others}>\n            {intInfos.map((info, i) => (\n                <use\n                    key={i}\n                    xlinkHref=\"#inttick\"\n                    stroke={stnState === -1 ? '#aaa' : info[2]}\n                    transform={`translate(${-2 * (intInfos.length - 1) + 4 * i},0)rotate(${\n                        tickRotation === 180 ? 180 : 0\n                    })`}\n                />\n            ))}\n        </g>\n    );\n};\n\nconst IntBoxs = (props: IntGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, tickRotation, stnState, ...other } = props;\n\n    return (\n        <g {...other}>\n            {intInfos.map((info, i) => (\n                <g key={i} transform={`translate(0,${i * 28 * (tickRotation === 180 ? -1 : 1)})`}>\n                    <LineBox info={info} stnState={stnState} />\n                </g>\n            ))}\n        </g>\n    );\n};\n","import React, { useMemo } from 'react';\nimport { ParamContext } from '../../../context';\nimport StationGZMTR from './station/station-gzmtr';\nimport LineBox from './line-box-gzmtr';\nimport { adjacencyList, criticalPathMethod, drawLine, getStnState } from '../methods/share';\n\nconst wideFactor = (stnList: StationDict, stnId: string) =>\n    stnList[stnId].parents.length === 2 || stnList[stnId].children.length === 2 ? 0.25 : 0;\n\nconst getXShare = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]): number => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        if (branchOfStn.toString() === branches[0].toString()) {\n            // station on main line, expand to fit\n            let lens = [];\n            if (!leftOpenJaw && !rightOpenJaw) {\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n            } else if (leftOpenJaw) {\n                lens[0] = 0;\n                lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n                lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n            } else {\n                // right open jaw\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n            }\n            return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n        } else {\n            if (!leftOpenJaw && !rightOpenJaw) {\n                let lens = [];\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n                return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n            } else if (leftOpenJaw) {\n                return (\n                    criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len -\n                    criticalPathMethod(stnId, partSink, adjMat).len\n                );\n            } else {\n                // right open jaw\n                return (\n                    criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len +\n                    criticalPathMethod(partSource, stnId, adjMat).len\n                );\n            }\n        }\n    }\n};\n\nconst MainGZMTR = () => {\n    const { param, branches, routes, deps } = React.useContext(ParamContext);\n\n    const adjMat = adjacencyList(param.stn_list, wideFactor, wideFactor);\n\n    const xShares = useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShare(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const lineXs: [number, number] =\n        param.direction === 'r'\n            ? [\n                  (param.svgWidth.railmap * param.padding) / 100 + 65,\n                  param.svgWidth.railmap * (1 - param.padding / 100) - 20,\n              ]\n            : [(param.svgWidth.railmap * param.padding) / 100, param.svgWidth.railmap * (1 - param.padding / 100) - 65];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = useMemo(\n        () => {\n            console.log('computing y shares');\n            return Object.keys(param.stn_list).reduce((acc, cur) => {\n                if (branches[0].includes(cur)) {\n                    return { ...acc, [cur]: 0 };\n                } else {\n                    let branchOfStn = branches.slice(1).filter(branch => branch.includes(cur))[0];\n                    return { ...acc, [cur]: param.stn_list[branchOfStn[0]].children.indexOf(branchOfStn[1]) ? -2 : 2 };\n                }\n            }, {} as { [stnId: string]: number });\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: -yShares[cur] * param.branch_spacing }),\n        {} as typeof yShares\n    );\n\n    const stnStates = useMemo(\n        () => getStnState(param.current_stn_idx, routes, param.direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.current_stn_idx, param.direction, routes.toString()]\n    );\n\n    const linePaths = drawLine(branches, stnStates);\n    const paths = (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: linePaths[cur].map(stns => _linePath(stns, xs, ys)),\n        }),\n        {} as { [key in keyof ReturnType<typeof drawLine>]: string[] }\n    );\n\n    return (\n        <g\n            id=\"main\"\n            style={{\n                ['--y-percentage' as any]: param.y_pc,\n                transform: 'translateY(calc(var(--y-percentage) * var(--rmg-svg-height) / 100))',\n            }}\n        >\n            <Line paths={paths} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} />\n            <g\n                id=\"line_name\"\n                style={{\n                    ['--translate-x' as any]: param.direction === 'r' ? `${lineXs[0] - 65}px` : `${lineXs[1] + 65}px`,\n                }}\n            >\n                <LineBox\n                    info={\n                        Array(2).concat(\n                            ['var(--rmg-theme-colour)', 'var(--rmg-theme-fg)'],\n                            param.line_name\n                        ) as InterchangeInfo\n                    }\n                    stnState={1}\n                />\n            </g>\n        </g>\n    );\n};\n\nexport default MainGZMTR;\n\nconst Line = React.memo(\n    (props: { paths: { main: string[]; pass: string[] } }) => (\n        <g fill=\"none\" strokeWidth={4}>\n            <g stroke=\"#aaa\" strokeDasharray={4}>\n                {props.paths.pass.map((path, i) => (\n                    <path key={i} d={path} />\n                ))}\n            </g>\n            <g stroke=\"var(--rmg-theme-colour)\">\n                {props.paths.main.map((path, i) => (\n                    <path key={i} d={path} />\n                ))}\n            </g>\n        </g>\n    ),\n    (prevProps, nextProps) => JSON.stringify(prevProps.paths) === JSON.stringify(nextProps.paths)\n);\n\nconst _linePath = (stnIds: string[], realXs: { [stnId: string]: number }, realYs: { [stnId: string]: number }) => {\n    let prevY: number;\n    var path = [] as string[];\n\n    stnIds.forEach(stnId => {\n        let x = realXs[stnId];\n        let y = realYs[stnId];\n        if (!prevY && prevY !== 0) {\n            prevY = y;\n            path.push(`M ${x},${y}`);\n            return;\n        }\n        if (y === 0) {\n            if (y < prevY) path.push(`H ${x - 40}`, 'a 40,40 0 0,0 40,-40', `V ${y}`);\n            if (y > prevY) path.push(`H ${x - 40}`, 'a 40,40 0 0,1 40,40', `V ${y}`);\n        } else {\n            if (y < prevY) path.push(`V ${y + 40}`, 'a 40,40 0 0,1 40,-40', `H ${x}`);\n            if (y > prevY) path.push(`V ${y - 40}`, 'a 40,40 0 0,0 40,40', `H ${x}`);\n        }\n        path.push(`H ${x}`);\n        prevY = y;\n    });\n\n    // simplify path\n    return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n};\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { param } = React.useContext(ParamContext);\n\n    return (\n        <g id=\"stn_icons\">\n            {Object.keys(param.stn_list)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (\n                    <g\n                        key={stnId}\n                        style={{\n                            transform: `translate(${props.xs[stnId]}px,${props.ys[stnId]}px)`,\n                        }}\n                    >\n                        <StationGZMTR stnId={stnId} stnState={props.stnStates[stnId]} stnY={props.ys[stnId]} />\n                    </g>\n                ))}\n        </g>\n    );\n};\n","import * as React from 'react';\nimport { ParamContext } from '../../context';\nimport StripGZMTR from '../strip/strip-gzmtr';\nimport MainGZMTR from './main/main-gzmtr';\n\nconst RailMapGZMTR = () => {\n    const { param } = React.useContext(ParamContext);\n    return (\n        <>\n            <DefsGZMTR />\n\n            <StripGZMTR\n                variant={param.info_panel_type}\n                isShowLight={param.info_panel_type === 'gz2otis'}\n                isShowPSD={param.info_panel_type === 'gz2otis' && param.psd_num}\n            />\n\n            {(param.direction === 'l' && param.stn_list[param.current_stn_idx].parents.includes('linestart')) ||\n            (param.direction === 'r' && param.stn_list[param.current_stn_idx].children.includes('lineend')) ? (\n                <TerminusFlag />\n            ) : (\n                <>\n                    <MainGZMTR />\n                    <DirectionIndicator />\n                    {param.notesGZMTR.map((note, i) => (\n                        <NoteBox key={i} note={note} />\n                    ))}\n                </>\n            )}\n\n            {param.info_panel_type === 'gz2otis' && (\n                <line x2={param.svgWidth.railmap} transform=\"translate(0,90)\" strokeWidth={3} stroke=\"black\" />\n            )}\n        </>\n    );\n};\n\nexport default RailMapGZMTR;\n\nconst DefsGZMTR = React.memo(() => (\n    <defs>\n        <path\n            id=\"stn\"\n            className=\"rmg-stn\"\n            d=\"M 0,9.25 V -9.25 H -9.25 a 9.25,9.25 0 0,0 0,18.5 h 18.5 a 9.25,9.25 0 0,0 0,-18.5 H 0 \"\n        />\n        <path\n            id=\"stn_pass\"\n            stroke=\"#aaa\"\n            fill=\"#fff\"\n            strokeWidth={2}\n            d=\"M 0,9.25 V -9.25 H -9.25 a 9.25,9.25 0 0,0 0,18.5 h 18.5 a 9.25,9.25 0 0,0 0,-18.5 H 0 \"\n        />\n        <path id=\"arrow_direction\" d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\" fill=\"black\" />\n\n        <path id=\"inttick\" d=\"M 0,0 v 18\" strokeLinecap=\"square\" />\n        <rect id=\"intbox\" x={-22.5} height={24} width={45} rx={4.5} />\n    </defs>\n));\n\nconst DirectionIndicator = () => {\n    const { param, routes } = React.useContext(ParamContext);\n\n    const validDests = React.useMemo(\n        () => [\n            ...new Set(\n                routes\n                    .reduce(\n                        (acc, cur) =>\n                            cur.includes(param.current_stn_idx)\n                                ? acc.concat(\n                                      cur\n                                          .filter((stnId) => !['linestart', 'lineend'].includes(stnId))\n                                          .slice(param.direction === 'l' ? 0 : -1)[0]\n                                  )\n                                : acc,\n                        []\n                    )\n                    .filter((id) => id !== param.current_stn_idx)\n            ),\n        ],\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.current_stn_idx, param.direction, routes.toString()]\n    );\n\n    const textGroupProps: TextGroupProps = {\n        textAnchor: param.direction === 'l' ? 'start' : 'end',\n        transform: `translate(${param.direction === 'l' ? 65 : -65},-5)`,\n        destIds: validDests,\n    };\n\n    return (\n        <g\n            id=\"direction_gz\"\n            style={{ ['--x-percentage' as any]: param.direction_gz_x, ['--y-percentage' as any]: param.direction_gz_y }}\n        >\n            <use\n                xlinkHref=\"#arrow_direction\"\n                style={{ ['--rotate' as any]: param.direction === 'l' ? '0deg' : '180deg' }}\n            />\n\n            {validDests.length !== 2 ? (\n                <DirectionIndicatorTextGroup {...textGroupProps} />\n            ) : (\n                <DirectionIndicatorTextGroup2 {...textGroupProps} />\n            )}\n        </g>\n    );\n};\n\ntype TextGroupProps = {\n    destIds: string[];\n} & React.SVGProps<SVGGElement>;\n\nconst DirectionIndicatorTextGroup = (props: TextGroupProps) => {\n    const { destIds, ...others } = props;\n    const { param } = React.useContext(ParamContext);\n    return (\n        <g {...others}>\n            <text className=\"rmg-name__zh\" fontSize={28}>\n                {destIds.map((stnId) => param.stn_list[stnId].name[0]).join('/') + '方向'}\n            </text>\n            <text className=\"rmg-name__en\" fontSize={14} dy={22}>\n                {'Towards ' + destIds.map((stnId) => param.stn_list[stnId].name[1].replace('\\\\', ' ')).join('/')}\n            </text>\n        </g>\n    );\n};\n\nconst DirectionIndicatorTextGroup2 = (props: TextGroupProps) => {\n    const { destIds, ...others } = props;\n    const { param } = React.useContext(ParamContext);\n\n    const charCounts = destIds.map((stnId) => param.stn_list[stnId].name[0].length);\n    const minCharCounts = Math.min(...charCounts);\n    const charSpacing =\n        minCharCounts > 1 && charCounts[0] !== charCounts[1]\n            ? Math.abs(charCounts[0] - charCounts[1]) / (minCharCounts - 1)\n            : 0;\n\n    return (\n        <g {...others}>\n            {destIds.map((id, i) => (\n                <React.Fragment key={id}>\n                    <text\n                        className=\"rmg-name__zh\"\n                        fontSize={25}\n                        x={param.direction === 'l' ? 0 : -75}\n                        y={-21 + 42 * i}\n                        letterSpacing={charCounts[i] > charCounts[1 - i] ? '0em' : `${charSpacing}em`}\n                    >\n                        {param.stn_list[id].name[0]}\n                    </text>\n                    <text\n                        className=\"rmg-name__en\"\n                        fontSize={11.5}\n                        x={param.direction === 'l' ? 0 : -75}\n                        y={-1 + 42 * i}\n                    >\n                        {'Towards ' + param.stn_list[id].name[1].replace('\\\\', ' ')}\n                    </text>\n                </React.Fragment>\n            ))}\n            <text\n                className=\"rmg-name__zh\"\n                fontSize={28}\n                x={param.direction === 'l' ? 25 * (Math.max(...charCounts) + 1) : 0}\n                y={5}\n            >\n                方向\n            </text>\n        </g>\n    );\n};\n\nconst TerminusFlag = React.memo(() => (\n    <g id=\"terminus_gz\" textAnchor=\"middle\">\n        <text className=\"rmg-name__zh\" fontSize={90}>\n            终 点 站\n        </text>\n        <text dy={70} className=\"rmg-name__en\" fontSize={36}>\n            Terminal\n        </text>\n        <g strokeWidth={8} stroke=\"#000\">\n            <path d=\"M -160,68 h -160\" />\n            <path d=\"M 160,68 h 160\" />\n        </g>\n    </g>\n));\n\nconst NoteBox = React.memo(\n    (props: { note: Note }) => {\n        const noteTextEl = React.useRef<SVGGElement | null>(null);\n        const [bBox, setBBox] = React.useState({ width: 0, height: 0, y: 0 } as DOMRect);\n        React.useEffect(\n            () => setBBox(noteTextEl.current!.getBBox()),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [props.note[0], props.note[1]]\n        );\n\n        return (\n            <g\n                className=\"note-box\"\n                style={{ ['--x-percentage' as any]: props.note[2], ['--y-percentage' as any]: props.note[3] }}\n            >\n                {props.note[4] && (\n                    <rect\n                        height={bBox.height + 4}\n                        width={bBox.width + 4}\n                        x={-2}\n                        y={bBox.y - 2}\n                        fill=\"none\"\n                        stroke=\"black\"\n                        strokeWidth={0.5}\n                    />\n                )}\n                <g ref={noteTextEl}>\n                    <g fontSize={16} letterSpacing={1.2}>\n                        {props.note[0].split('\\n').map((txt, i) => (\n                            <text key={i} className=\"rmg-name__zh\" y={i * 18}>\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n\n                    <g\n                        fontSize={10}\n                        letterSpacing={0.33}\n                        transform={`translate(0,${18 * props.note[0].split('\\n').length})`}\n                    >\n                        {props.note[1].split('\\n').map((txt, i) => (\n                            <text\n                                key={i}\n                                className=\"rmg-name__en\"\n                                y={i * 11}\n                                textLength={\n                                    i < (props.note[1].match(/\\n/g)?.length || 0)\n                                        ? bBox.width\n                                        : navigator.userAgent.includes('Firefox')\n                                        ? -1\n                                        : 0\n                                }\n                                lengthAdjust=\"spacing\"\n                            >\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.note.toString() === nextProps.note.toString()\n);\n","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import * as Global from '../../../methods';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (direction === 'r'\n                        ? _isSuccessor(currentId, cur, routes)\n                        : _isPredecessor(currentId, cur, routes))\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as { [stnId: string]: StationInfo };\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] }\n    ) {\n        var [prevId, prevY, prevX] = ([] as unknown) as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 0.8;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + 9.68}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - 9.68}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] }\n    ) {\n        let linePaths = { main: [] as string[], pass: [] as string[] };\n        branches.forEach((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branches: string[][], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    let linePaths = { main: [] as string[][], pass: [] as string[][] };\n    branches.forEach(branch => {\n        branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n        var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n        var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n        if (lineMainStns.length === 1) {\n            linePassStns = branch;\n        }\n\n        if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n            // if two set disjoint\n            if (linePassStns[0] === branch[0]) {\n                // -1 -1 1 1\n                linePassStns.push(lineMainStns[0]);\n            } else if (\n                lineMainStns[0] === branch[0] &&\n                lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                linePassStns.length\n            ) {\n                linePassStns = branch;\n                lineMainStns = [];\n            } else {\n                // 1 1 -1 -1\n                linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n            }\n        }\n\n        linePaths.main.push(lineMainStns);\n        linePaths.pass.push(linePassStns);\n    });\n\n    return linePaths;\n};\n","import React from 'react';\n\ninterface Props {\n    variant: PanelTypeGZMTR | PanelTypeShmetro;\n    isShowLight: boolean;\n    isShowPSD: false | string;\n}\n\nconst StripGZMTR = (props: Props) => {\n    const stripHeight = ((variant) => {\n        switch (variant) {\n            case 'gz28':\n            case 'gz2otis':\n            case 'gz6':\n            case 'gzgf':\n                return 60;\n            case 'gz1':\n            case 'gz3':\n                return 40;\n            case 'gz4':\n            case 'gz5':\n            case 'gz1421':\n                return 20;\n            default:\n                return 0;\n        }\n    })(props.variant);\n\n    const indicatorLight = React.useMemo(() => {\n        switch (props.variant) {\n            case 'gz1':\n                return <circle cy={-58} r={16} fill=\"red\" />;\n            case 'gz28':\n            case 'gz2otis':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz3':\n                return <rect x={-15} y={-55} height={30} width={30} fill=\"red\" />;\n            case 'gz6':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"white\" />;\n            case 'gz1421':\n                return <ellipse cy={-38} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz5':\n                return <rect x={-30} y={-70} height={30} width={60} fill=\"orange\" />;\n            case 'gz4':\n                return <rect x={-50} y={-50} height={25} width={100} fill=\"whitesmoke\" />;\n            case 'gzgf':\n                return <rect x={-30} y={-58} height={30} width={60} fill=\"orange\" />;\n            default:\n                return <></>;\n        }\n    }, [props.variant]);\n\n    const stripDy = -20;\n\n    return (\n        <g transform={`translate(0,${props.variant === 'gz4' ? stripDy : 0})`}>\n            <rect\n                id=\"strip_gz\"\n                style={{\n                    ['--height' as any]: `${stripHeight}px`,\n                }}\n            />\n            <g\n                style={{\n                    transform: 'translate(calc(var(--rmg-svg-width) / 2),var(--rmg-svg-height))',\n                }}\n            >\n                {props.isShowLight && indicatorLight}\n            </g>\n            {props.isShowPSD !== false && <PSD {...props} />}\n        </g>\n    );\n};\n\nexport default StripGZMTR;\n\nconst PSD = React.memo(\n    (props: Props) => {\n        /**\n         * Flag of whether PSD number is stick within the strip area. If `true`, should fill with white, otherwise, fill with theme colour.\n         */\n        const isInStrip = ['gz28', 'gz2otis', 'gz6', 'gzgf'].includes(props.variant);\n        const psdDy = ((variant: PanelTypeGZMTR | PanelTypeShmetro) => {\n            switch (variant) {\n                case 'gz1':\n                case 'gz3':\n                    return '82px';\n                case 'gz4':\n                    return '65px';\n                case 'gz5':\n                    return '80px';\n                case 'gz1421':\n                    return '62px';\n                default:\n                    return '58px';\n            }\n        })(props.variant);\n\n        return (\n            <g\n                textAnchor=\"middle\"\n                fill={isInStrip ? '#000' : 'var(--rmg-theme-fg)'}\n                style={{\n                    ['--psd-dy' as any]: psdDy,\n                    transform: 'translate(var(--translate-x), var(--translate-y))',\n                    ['--translate-x' as any]: 'calc(var(--rmg-svg-width) / 2 + 80px)',\n                    ['--translate-y' as any]: 'calc(var(--rmg-svg-height) - var(--psd-dy, 58px))',\n                }}\n            >\n                <rect height={40} width={40} rx={4} x={-20} fill={isInStrip ? '#fff' : 'var(--rmg-theme-colour)'} />\n                <text className=\"rmg-name__en\" fontSize={20} dy={12}>\n                    {props.isShowPSD}\n                </text>\n                <text className=\"rmg-name__zh\" fontSize={12} dy={26}>\n                    屏蔽门\n                </text>\n                <text className=\"rmg-name__en\" fontSize={6.5} dy={36}>\n                    Screen Door\n                </text>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.variant === nextProps.variant && prevProps.isShowPSD === nextProps.isShowPSD\n);\n","import React from 'react';\n\nconst StationNumberText = (props: { lineNum: string; stnNum: string } & React.SVGProps<SVGGElement>) => {\n    const { lineNum, stnNum, ...others } = props;\n\n    const LINE_NUM_MAX_WIDTH = 15.03125;\n\n    const lineNumEl = React.useRef<SVGTextElement | null>(null);\n    const [bBox, setBBox] = React.useState({ width: LINE_NUM_MAX_WIDTH } as DOMRect);\n    React.useEffect(() => setBBox(lineNumEl.current!.getBBox()), [lineNum]);\n\n    const lineNumScale = bBox.width > LINE_NUM_MAX_WIDTH ? LINE_NUM_MAX_WIDTH / bBox.width : 1;\n    const stnNumScale = lineNum.length === 2 ? lineNumScale : 1;\n\n    return (\n        <g textAnchor=\"middle\" fontSize={13.5} {...others}>\n            {React.useMemo(\n                () => (\n                    <>\n                        <g transform={`translate(-9.25,0)scale(${lineNumScale})`}>\n                            <text ref={lineNumEl} className=\"rmg-name__zh\">\n                                {lineNum}\n                            </text>\n                        </g>\n                        <g transform={`translate(9.25,0)scale(${stnNumScale})`}>\n                            <text className=\"rmg-name__zh\">{stnNum}</text>\n                        </g>\n                    </>\n                ),\n                // eslint-disable-next-line react-hooks/exhaustive-deps\n                [bBox.width, lineNum, stnNum]\n            )}\n        </g>\n    );\n};\n\nexport default StationNumberText;\n"],"sourceRoot":""}