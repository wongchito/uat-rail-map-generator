{"version":3,"file":"static/js/panelStations.1dbb7942.chunk.js","mappings":"6XAqBMA,GAAYC,EAAAA,EAAAA,IAAW,SAAAC,GAAK,OAC9BC,EAAAA,EAAAA,GAAa,CACTC,YAAa,CACTC,YAAaH,EAAMI,QAAQ,GAC3BC,SAAU,UAEdC,aAAc,CACVC,QAAS,OACTC,WAAY,WACZC,WAAY,SACZC,SAAU,SACV,6BAA8B,CAC1BP,YAAaH,EAAMI,QAAQ,KAGnCO,aAAc,CACVC,WAAYZ,EAAMa,QAAQC,OAAOC,YA+B7C,EArBoB,SAACC,GACjB,IAAMC,GAAMC,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMC,OAAOH,OAEjD,OACI,SAACI,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,CAAMC,OAAK,EAACC,gBAAc,EAA1B,SACKP,EAAIQ,KAAI,SAAAC,GAAK,OACV,UAAC,WAAD,YACI,SAACC,EAAD,CACID,MAAOA,EACPE,WAAYF,IAAUV,EAAMa,WAC5BC,SAAUd,EAAMc,SAASJ,MAE7B,SAACK,EAAA,EAAD,MANiBL,WAgBnCC,EAAe,SAACX,GAClB,IAAQU,EAAgCV,EAAhCU,MAAOE,EAAyBZ,EAAzBY,WAAYE,EAAad,EAAbc,SACnBE,GAAMC,EAAAA,EAAAA,KAAND,EACFE,EAAUpC,IACVqC,GAAWC,EAAAA,EAAAA,MAEXC,GAAWnB,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMmB,MAAMC,SAC/CC,GAActB,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMmB,MAAMG,SAASf,MAE3DgB,GAAkB,OAAXF,QAAW,IAAXA,OAAA,EAAAA,EAAaE,OAAQ,CAAC,GAAI,IACjCC,GAAiB,OAAXH,QAAW,IAAXA,OAAA,EAAAA,EAAaG,MAAO,KAEhC,GAAgCC,EAAAA,EAAAA,UAA6B,MAA7D,eAAOC,EAAP,KAAiBC,EAAjB,KAOMC,EAAe,SAACjC,GAAD,OAA+B,WAChDgB,EAAShB,GACTgC,EAAY,QAGhB,OACI,UAACE,EAAA,EAAD,CAAUC,UAAWrB,EAAaM,EAAQvB,aAAe,GAAzD,UACK0B,IAAaa,EAAAA,GAAAA,QAAkB,SAACC,EAAA,EAAD,CAAYF,UAAWf,EAAQhC,YAA/B,SAA6CyC,KAC7E,SAACS,EAAA,EAAD,CAAcC,QAASX,EAAK,GAAIY,UAAWZ,EAAK,GAAGa,QAAQ,KAAM,KAAMN,UAAWf,EAAQ5B,gBAC1F,UAACkD,EAAA,EAAD,YACI,SAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,QAAS,SAAAC,GAAC,OAAId,EAAYc,EAAEC,gBAArD,UACI,SAACC,EAAA,EAAD,2BAEJ,UAACC,EAAA,EAAD,CAAMC,SAAUnB,EAAUoB,KAAMC,QAAQrB,GAAWsB,QAAS,kBAAMrB,EAAY,OAA9E,WACI,SAACsB,EAAA,EAAD,CAAUT,QAnBJ,WAClBxB,GAASkC,EAAAA,EAAAA,IAAkB3C,IAC3BoB,EAAY,OAiBA,SAAmCd,EAAE,uBACrC,SAACoC,EAAA,EAAD,CAAUT,QAASZ,EAAa,QAAhC,SAA0Cf,EAAE,2BAC5C,SAACoC,EAAA,EAAD,CAAUT,QAASZ,EAAa,UAAhC,SAA4Cf,EAAE,sC,6GCzGrDsC,EAAc,kBACvBC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKG,IAAI,GAAI,IACnCC,SAAS,IACTC,SAAS,EAAG,MC0Ef9E,GAAYC,EAAAA,EAAAA,IAAW,kBACzBE,EAAAA,EAAAA,GAAa,CACT4E,cAAe,CACXC,QAAS,GAEbC,OAAQ,CACJC,MAAO,IACPC,WAAY,QAUxB,EAAeC,EAAAA,MACX,SAA0BlE,GACtB,IAAQgB,GAAMC,EAAAA,EAAAA,KAAND,EACFE,EAAUpC,IACVqC,GAAWC,EAAAA,EAAAA,MAEXC,GAAWnB,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMmB,MAAMC,SAC/C4C,GAAUjE,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMmB,MAAMG,YAC5CxB,GAAQC,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMC,UAAtCH,IAEFmE,EAAU,CACZC,OAAQrD,EAAE,uBACVsD,MAAOtD,EAAE,sBACTuD,MAAOvD,EAAE,sBACTwD,SAAUxD,EAAE,yBACZyD,SAAUzD,EAAE,0BAGhB,EAAwBkD,EAAAA,SAAe,UAAvC,eAAOQ,EAAP,KAAaC,EAAb,KACA,EAA0BT,EAAAA,SAAejE,EAAI,IAA7C,eAAO2E,EAAP,KAAcC,EAAd,KACA,EAAsBX,EAAAA,SAAeY,OAAOC,KAAKX,GAAS,IAA1D,eAAOY,EAAP,KAAYC,EAAZ,KACA,EAA0Bf,EAAAA,SAAegB,MAAM,GAAGC,MAAK,IAAvD,eAAOC,EAAP,KAAcC,EAAd,KAEA,EAAsBnB,EAAAA,SAAe,IAArC,eAAOoB,EAAP,KAAYC,EAAZ,KACA,EAA8BrB,EAAAA,SAAe,IAA7C,gBAAOsB,GAAP,MAAgBC,GAAhB,MAGMC,IAAUC,EAAAA,EAAAA,UAAQ,kBA/EN,SACtBjB,EACAE,EACAT,GAGA,OADUA,EAAQS,GAAST,EAAQS,GAAgB,WAATF,EAAoB,UAAY,YAAYkB,OAAS,GAE3F,KAAK,EAED,MAAO,CAAC,EAAG,EAAG,EAAG,GAAI,IACzB,KAAK,EACD,IAAIC,GAAIC,EAAAA,EAAAA,GAAalB,EAAOT,GAC5B,GAAU,IAAN0B,EAAS,CAET,IAAIE,EAhCS,SAACrB,EAA0BE,EAAeT,GACnE,IAAI6B,EAAgB,GACpB,GAAa,WAATtB,EAAmB,CACnB,KAAyC,IAAlCP,EAAQS,GAAOqB,QAAQL,QAC1BhB,EAAQT,EAAQS,GAAOqB,QAAQ,GAC/BD,EAAIE,QAAQtB,GAEhBoB,EAAIG,UACD,CACH,KAA0C,IAAnChC,EAAQS,GAAOwB,SAASR,QAC3BhB,EAAQT,EAAQS,GAAOwB,SAAS,GAChCJ,EAAIK,KAAKzB,GAEboB,EAAIM,QAER,OAAON,EAiB+BO,CAAqB7B,EAAME,EAAOT,GAE5D,MAAO,CAAC,EAAG,EAAG,EADd4B,EAAQA,EAAMH,OAASG,EAAQ,GACPA,GAErB,OAAIF,EAAI,EACE,WAATnB,EACO,CAACP,EAAQA,EAAQS,GAAOqB,QAAQ,IAAIG,SAASR,OAAS,EAAG,EAAG,EAAG,GAAI,IAEnE,CAACzB,EAAQA,EAAQS,GAAOwB,SAAS,IAAIH,QAAQL,OAAS,EAAG,EAAG,EAAG,GAAI,IAGjE,WAATlB,EACO,CAACP,EAAQA,EAAQS,GAAOqB,QAAQ,IAAIG,SAASR,OAAS,EAAG,EAAG,EAAG,GAAI,IAEnE,CAACzB,EAAQA,EAAQS,GAAOwB,SAAS,IAAIH,QAAQL,OAAS,EAAG,EAAG,EAAG,GAAI,IAI1F,MAAO,CAAC,EAAG,EAAG,EAAG,GAAI,IA+CaY,CAAkB9B,EAAME,EAAOT,KAAU,CAACO,EAAME,EAAOT,KACrFsC,EAAAA,EAAAA,YACI,WACIpB,EAASK,GAAQjF,KAAI,SAAAiG,GAAC,MAAkB,kBAANA,EAAiBxD,QAAQwD,GAAKxD,QAAQwD,EAAEd,YAC1EH,GAAWC,GAAQ,MAGvB,CAACA,GAAQ/B,cAIb8C,EAAAA,EAAAA,YACI,kBAAMxB,EAAOH,OAAOC,KAAKX,GAASgB,EAAMuB,SAAQ,OAEhD,CAACvB,KAILqB,EAAAA,EAAAA,YAAU,WACiB,IAAnBjB,GAAQI,QACZL,EAAOC,GAAQ,MAChB,CAACA,MAGJiB,EAAAA,EAAAA,YACI,WACU7B,KAAST,GAAUU,EAAS5E,EAAI,MAG1C,CAAC6E,OAAOC,KAAKZ,GAASR,aAG1B,IAAMiD,GAAc,SAAC9G,GACjB,GAAe,UAAXA,EACAE,EAAMmD,QAAQ,aACX,CACH,IAAM0D,EAAQ1F,ECvJJ,SACtBuD,EACAoC,EACA9B,EACAM,GAGA,OAAO,SAACnE,EAAuB4F,GAI3B,IAHA,IAAMC,EAAcD,IAAWzF,MAAMG,SAEjCoF,EAAQvD,IACLwB,OAAOC,KAAKiC,GAAaC,SAASJ,IACrCA,EAAQvD,IAEZ,IAAI4D,EAAuB,CACvBxF,KAAM,CAAC,sBAASmF,EAAO,WAAaA,GACpCM,eAAe,EACfxF,IAAK,KACLyF,SAAU,CAACC,EAAAA,GAAAA,OACXpB,QAAS,GACTG,SAAU,GACVkB,OAAQ,CACJC,KAAM,GACNC,MAAO,IAEXC,SAAU,CACNC,KAAM,CAAC,IAEPC,WAAYC,EAAAA,GAAAA,MACZC,WAAW,EACXC,UAAW,IAEfC,SAAUC,EAAAA,GAAAA,KACVC,YAAY,GAGZC,EAAaC,KAAKC,MAAMD,KAAKE,UAAUrB,IAuM3C,MArMa,WAATtC,EACY,WAARM,GACAkC,EAAQjB,QAAUe,EAAYF,GAAgBb,QAEK,IAA/Ce,EAAYF,GAAgBb,QAAQL,QACU,KAA9CE,EAAAA,EAAAA,GAAagB,EAAgBE,GAG7BE,EAAQd,SAAWY,EAAYsB,UAAUlC,SACY,KAA9CN,EAAAA,EAAAA,GAAagB,EAAgBE,IAEpCE,EAAQd,SAAWY,EAAYA,EAAYF,GAAgBb,QAAQ,IAAIG,SAASmC,QAChFrB,EAAQI,OAAOE,MAAQR,EAAYE,EAAQjB,QAAQ,IAAIqB,OAAOE,MAC9DU,EAAWhB,EAAQjB,QAAQ,IAAIqB,OAAOE,MAAQ,KAG9CN,EAAQd,SAAW,CAACU,GACpBI,EAAQI,OAAOC,KAAOP,EAAYF,GAAgBQ,OAAOC,KACzDW,EAAWpB,GAAgBQ,OAAOC,KAAO,IAE7CL,EAAQjB,QAAQuC,SAAQ,SAAAC,GACpBP,EAAWO,GAAKrC,SAAW,CAACS,MAEhCK,EAAQd,SAASoC,SAAQ,SAAAE,GACrBR,EAAWQ,GAAOzC,QAAU,CAACY,OAElB,UAAR7B,EAC4C,IAA/CgC,EAAYF,GAAgBb,QAAQL,QAChCoB,EAAYF,GAAgBQ,OAAOC,KAAK,KAAOP,EAAYF,GAAgBb,QAAQ,KACnFiC,EAAWpB,GAAgBQ,OAAOC,KAAK,GAAKV,GAGhDK,EAAQjB,QAAUe,EAAYF,GAAgBb,QAAQsC,MAAM,EAAG,GAC/DrB,EAAQd,SAAW,CAACU,GACpBI,EAAQjB,QAAQuC,SAAQ,SAAAC,GACpBP,EAAWO,GAAKrC,SAAW,CAACS,MAEhCqB,EAAWpB,GAAgBb,QAAQ,GAAKY,IAGxCK,EAAQjB,QAAUe,EAAYF,GAAgBb,QAC9CiB,EAAQd,SAAW,CAACU,GACpBI,EAAQjB,QAAQuC,SAAQ,SAAAC,GACpBP,EAAWO,GAAKrC,SAAS,GAAKS,EAE1BG,EAAYyB,GAAKnB,OAAOE,MAAM,KAAOV,IACrCoB,EAAWO,GAAKnB,OAAOE,MAAM,GAAKX,MAG1CK,EAAQd,SAASoC,SAAQ,SAAAE,GACrBR,EAAWQ,GAAOzC,QAAU,CAACY,OAGtB,UAAR7B,EAC4C,IAA/CgC,EAAYF,GAAgBb,QAAQL,QAChCoB,EAAYF,GAAgBQ,OAAOC,KAAK,KAAOP,EAAYF,GAAgBb,QAAQ,KACnFiC,EAAWpB,GAAgBQ,OAAOC,KAAK,GAAKV,GAGhDK,EAAQjB,QAAUe,EAAYF,GAAgBb,QAAQsC,MAAM,GAC5DrB,EAAQd,SAAW,CAACU,GACpBI,EAAQjB,QAAQuC,SAAQ,SAAAC,GACpBP,EAAWO,GAAKrC,SAAW,CAACS,MAEhCqB,EAAWpB,GAAgBb,QAAQ,GAAKY,IAGxCK,EAAQjB,QAAUe,EAAYF,GAAgBb,QAC9CiB,EAAQd,SAAW,CAACU,GACpBI,EAAQjB,QAAQuC,SAAQ,SAAAC,GACpB,IAAIE,EAAc3B,EAAYyB,GAAKrC,SAASR,OAC5CsC,EAAWO,GAAKrC,SAASuC,EAAc,GAAK9B,EAExCG,EAAYyB,GAAKnB,OAAOE,MAAM,KAAOV,IACrCoB,EAAWO,GAAKnB,OAAOE,MAAM,GAAKX,MAG1CK,EAAQd,SAASoC,SAAQ,SAAAE,GACrBR,EAAWQ,GAAOzC,QAAU,CAACY,QAIrCqB,EAAWpB,GAAgBQ,OAAOC,KAAO,CAACqB,EAAAA,GAAAA,QAAqB/B,GAC/DqB,EAAW5C,GAAKgC,OAAOE,MAAQ,CAACoB,EAAAA,GAAAA,QAAqB/B,GACrDK,EAAQjB,QAAU,CAACX,GACnB4B,EAAQd,SAAW,CAACU,GAER,aAAR9B,GACAkD,EAAW5C,GAAKc,SAASF,QAAQW,GACjCqB,EAAWpB,GAAgBb,QAAQC,QAAQW,KAE3CqB,EAAW5C,GAAKc,SAASC,KAAKQ,GAC9BqB,EAAWpB,GAAgBb,QAAQI,KAAKQ,KAIpC,WAAR7B,GACAkC,EAAQd,SAAWY,EAAYF,GAAgBV,SAEK,IAAhDY,EAAYF,GAAgBV,SAASR,QACS,KAA9CE,EAAAA,EAAAA,GAAagB,EAAgBE,GAE7BE,EAAQjB,QAAUe,EAAY6B,QAAQ5C,QACe,KAA9CH,EAAAA,EAAAA,GAAagB,EAAgBE,IAEpCE,EAAQjB,QAAUe,EAAYA,EAAYF,GAAgBV,SAAS,IAAIH,QACvEiB,EAAQI,OAAOC,KAAOP,EAAYE,EAAQd,SAAS,IAAIkB,OAAOC,KAC9DW,EAAWhB,EAAQd,SAAS,IAAIkB,OAAOC,KAAO,KAG9CL,EAAQjB,QAAU,CAACa,GACnBI,EAAQI,OAAOE,MAAQR,EAAYF,GAAgBQ,OAAOE,MAC1DU,EAAWpB,GAAgBQ,OAAOE,MAAQ,IAE9CN,EAAQd,SAASoC,SAAQ,SAAAE,GACrBR,EAAWQ,GAAOzC,QAAU,CAACY,MAEjCK,EAAQjB,QAAQuC,SAAQ,SAAAC,GACpBP,EAAWO,GAAKrC,SAAW,CAACS,OAEjB,UAAR7B,EAC6C,IAAhDgC,EAAYF,GAAgBV,SAASR,QACjCoB,EAAYF,GAAgBQ,OAAOE,MAAM,KAAOR,EAAYF,GAAgBV,SAAS,KACrF8B,EAAWpB,GAAgBQ,OAAOE,MAAM,GAAKX,GAGjDK,EAAQd,SAAWY,EAAYF,GAAgBV,SAASmC,MAAM,EAAG,GACjErB,EAAQjB,QAAU,CAACa,GACnBI,EAAQd,SAASoC,SAAQ,SAAAE,GACrBR,EAAWQ,GAAOzC,QAAU,CAACY,MAEjCqB,EAAWpB,GAAgBV,SAAS,GAAKS,IAGzCK,EAAQd,SAAWY,EAAYF,GAAgBV,SAC/Cc,EAAQjB,QAAU,CAACa,GACnBI,EAAQd,SAASoC,SAAQ,SAAAE,GACrBR,EAAWQ,GAAOzC,QAAQ,GAAKY,EAE3BG,EAAY0B,GAAOpB,OAAOC,KAAK,KAAOT,IACtCoB,EAAWQ,GAAOpB,OAAOC,KAAK,GAAKV,MAG3CK,EAAQjB,QAAQuC,SAAQ,SAAAC,GACpBP,EAAWO,GAAKrC,SAAW,CAACS,OAGrB,UAAR7B,EAC6C,IAAhDgC,EAAYF,GAAgBV,SAASR,QACjCoB,EAAYF,GAAgBQ,OAAOE,MAAM,KAAOR,EAAYF,GAAgBV,SAAS,KACrF8B,EAAWpB,GAAgBQ,OAAOE,MAAM,GAAKX,GAGjDK,EAAQd,SAAWY,EAAYF,GAAgBV,SAASmC,MAAM,GAC9DrB,EAAQjB,QAAU,CAACa,GACnBI,EAAQd,SAASoC,SAAQ,SAAAE,GACrBR,EAAWQ,GAAOzC,QAAU,CAACY,MAEjCqB,EAAWpB,GAAgBV,SAAS,GAAKS,IAGzCK,EAAQd,SAAWY,EAAYF,GAAgBV,SAC/Cc,EAAQjB,QAAU,CAACa,GACnBI,EAAQd,SAASoC,SAAQ,SAAAE,GACrBR,EAAWQ,GAAOzC,QAA8C,IAAtCe,EAAY0B,GAAOzC,QAAQL,OAAe,EAAI,GAAKiB,EAEzEG,EAAY0B,GAAOpB,OAAOC,KAAK,KAAOT,IACtCoB,EAAWQ,GAAOpB,OAAOC,KAAK,GAAKV,MAG3CK,EAAQjB,QAAQuC,SAAQ,SAAAC,GACpBP,EAAWO,GAAKrC,SAAW,CAACS,QAIpCqB,EAAWpB,GAAgBQ,OAAOE,MAAQ,CAACoB,EAAAA,GAAAA,QAAqB/B,GAChEqB,EAAW5C,GAAKgC,OAAOC,KAAO,CAACqB,EAAAA,GAAAA,QAAqB/B,GAEpDK,EAAQd,SAAW,CAACd,GACpB4B,EAAQjB,QAAU,CAACa,GAEP,aAAR9B,GACAkD,EAAW5C,GAAKW,QAAQC,QAAQW,GAChCqB,EAAWpB,GAAgBV,SAASF,QAAQW,KAE5CqB,EAAW5C,GAAKW,QAAQI,KAAKQ,GAC7BqB,EAAWpB,GAAgBV,SAASC,KAAKQ,KAKrD1F,GACI2H,EAAAA,EAAAA,KAAgB,kBACTZ,GADQ,cAEVrB,EAAQK,MAGVL,GDpFwBkC,CAAWrE,EAAME,EAAOI,EAAYM,IAC3DtF,EAAMmD,QAAQ0D,KAItB,OACI,UAACmC,EAAA,EAAD,CAAQ/F,KAAMjD,EAAMiD,KAAME,QAAS,kBAAMyD,GAAY,UAArD,WACI,SAACqC,EAAA,EAAD,UAAcjI,EAAE,yBAChB,SAACkI,EAAA,EAAD,CAAejH,UAAWf,EAAQ2C,cAAlC,UACI,UAACvD,EAAA,EAAD,CAAM6I,UAAU,MAAM3I,gBAAc,EAApC,WACI,UAACwB,EAAA,EAAD,YACI,SAACoH,EAAA,EAAD,WACI,SAACtG,EAAA,EAAD,gCAEJ,SAACV,EAAA,EAAD,CAAcC,QAASrB,EAAE,wBACzB,SAACqI,EAAA,EAAD,CACIC,QAAM,EACNC,SAAU,SAAA3G,GAAC,OAAI+B,EAAQ/B,EAAE4G,OAAOC,QAChCA,MAAO/E,EACPzC,UAAWf,EAAQ6C,OAJvB,SAMK,CAAC,SAAU,SAAStD,KAAI,SAAAiG,GAAC,OACtB,mBAAgB+C,MAAO/C,EAAvB,SACK1F,EAAE,gBAAkB0F,IADZA,YAMzB,SAAC3F,EAAA,EAAD,CAAS2I,QAAQ,YACjB,UAAC1H,EAAA,EAAD,YACI,SAACoH,EAAA,EAAD,WACI,SAACtG,EAAA,EAAD,yBAEJ,SAACV,EAAA,EAAD,CAAcC,QAASrB,EAAE,yBACzB,SAACqI,EAAA,EAAD,CACIC,QAAM,EACNC,SAAU,SAAA3G,GAAC,OAAIiC,EAASjC,EAAE4G,OAAOC,QACjCA,MAAO7E,EACP3C,UAAWf,EAAQ6C,OAJvB,SAMK9D,EAAIQ,KAAI,SAAAC,GAAK,OACV,mBAAoB+I,MAAO/I,EAA3B,UACKiJ,EAAAA,EAAAA,IAAcxF,EAAQzD,GAAQW,IADtBX,YAMzB,SAACK,EAAA,EAAD,CAAS2I,QAAQ,YACjB,UAAC1H,EAAA,EAAD,YACI,SAACoH,EAAA,EAAD,WACI,SAACtG,EAAA,EAAD,uBAEJ,SAACV,EAAA,EAAD,CAAcC,QAASrB,EAAE,uBACzB,SAACqI,EAAA,EAAD,CACIC,QAAM,EACNC,SAAU,SAAA3G,GAAC,OAAIqC,EAAOrC,EAAE4G,OAAOC,QAC/BA,MAAOzE,EACP/C,UAAWf,EAAQ6C,OAJvB,SAMMe,OAAOC,KAAKX,GAAsC3D,KAAI,SAACmJ,EAAKC,GAAN,OACpD,mBAAkBJ,MAAOG,EAAKE,UAAW1E,EAAMyE,GAA/C,SACKzF,EAAQwF,IADAA,YAMzB,SAAC7I,EAAA,EAAD,CACI2I,QAAQ,SACRnI,MAAO,CAAEhC,QAAS,CAAC,WAAY,YAAY0H,SAASjC,GAAO,OAAS,WAExE,UAAChD,EAAA,EAAD,CAAUT,MAAO,CAAEhC,QAAS,CAAC,WAAY,YAAY0H,SAASjC,GAAO,OAAS,QAA9E,WACI,SAACoE,EAAA,EAAD,WACI,SAACtG,EAAA,EAAD,sBAEJ,SAACV,EAAA,EAAD,CAAcC,QAASrB,EAAE,uBACzB,SAACqI,EAAA,EAAD,CACIC,QAAM,EACNC,SAAU,SAAA3G,GAAC,OAAI2C,EAAO3C,EAAE4G,OAAOC,QAC/BA,MAAOnE,EACPrD,UAAWf,EAAQ6C,OAJvB,SAMKyB,GAAQ/E,KAAI,SAAAC,GAAK,OACd,mBAAoB+I,MAAO/I,EAA3B,UACKiJ,EAAAA,EAAAA,IAAcxF,EAAQzD,GAAQW,IADtBX,iBAQjC,UAACqJ,EAAA,EAAD,YACI,SAACC,EAAA,EAAD,CAAQrH,QAAS,kBAAMiE,GAAY,UAAUqD,MAAM,UAAnD,SACKjJ,EAAE,oBAEP,SAACgJ,EAAA,EAAD,CAAQrH,QAAS,kBAAMiE,GAAY,WAAWqD,MAAM,UAAUC,WAAS,EAAvE,SACKlJ,EAAE,wBAMvB,SAACmJ,EAAWC,GAAZ,OAA0BD,EAAUlH,OAASmH,EAAUnH,Q,kDE9OrDoH,EAAUnG,EAAAA,MAAW,kBAAM,2DAC3BoG,EAAiBpG,EAAAA,MAAW,kBAAM,qEAClCqG,EAAYrG,EAAAA,MAAW,kBAAM,kCAC7BsG,EAAUtG,EAAAA,MAAW,kBAAM,kCAE3BpF,GAAYC,EAAAA,EAAAA,IAAW,kBACzBE,EAAAA,EAAAA,GAAa,CACTwL,IAAK,CACD3G,QAAS,WACT4G,OAAQ,GACRC,SAAU,iBACV,oBAAqB,CACjBC,cAAe,OAEnB,qBAAsB,CAClBC,UAAW,QACX,oBAAqB,CACjB,oBAAqB,CACjBC,aAAc,GAElB,yBAA0B,CACtBC,YAAa,WAyErC,IAAMC,EAAgB,SAAChL,GACnB,IAAQgB,GAAMC,EAAAA,EAAAA,KAAND,EAEFhC,GAAQiM,EAAAA,EAAAA,KACRC,GAAWC,EAAAA,EAAAA,GAAcnM,EAAMoM,YAAYC,KAAK,OAGtD,OAFiBF,EAAAA,EAAAA,GAAcnM,EAAMoM,YAAYC,KAAK,QAGlD,UAACrC,EAAA,EAAD,CAAQ7F,QAASnD,EAAMmD,QAASF,KAAMjD,EAAMiD,KAAMqI,WAAYJ,EAA9D,WACI,SAACjC,EAAA,EAAD,UAAcjI,EAAE,0BAChB,SAACkI,EAAA,EAAD,CAAeqC,UAAQ,EAAChK,MAAO,CAAEuC,QAAS,UAA1C,SACK9D,EAAMoG,YAEX,SAAC2D,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,CAAQrH,QAAS3C,EAAMmD,QAAS8G,MAAM,UAAtC,SACKjJ,EAAE,uBAKf,SAACX,EAAA,EAAD,UAAQL,EAAMoG,YCpItB,EDqDe,SAA2BpG,GACtC,IAAQgB,GAAMC,EAAAA,EAAAA,KAAND,EAER,EAAgCkD,EAAAA,SAAe,GAA/C,eAAOsH,EAAP,KAAiBC,EAAjB,KAEMvK,EAAUpC,IAEV4M,EAASxH,EAAAA,SACX,kBACI,SAACyH,EAAA,EAAD,CACIlC,MAAO+B,EACPI,eAAe,UACfC,UAAU,UACVtC,SAAU,SAACuC,EAAGC,GAAJ,OAAYN,EAAYM,IAClCrC,QAAQ,aACRsC,cAAc,MANlB,SAQK,CACG,CAAC,OAAQ,SACT,CAAC,cAAe,6BAChB,CAAC,SAAU,SACX,CAAC,OAAQ,eACXvL,KAAI,SAACsL,EAAKE,GAAN,OACF,SAACC,EAAA,EAAD,CACIC,OAAO,0BAAOnL,EAAE,qBAAuB+K,EAAI,MAC3CK,MAAM,SAACtJ,EAAA,EAAD,UAAOiJ,EAAI,KAEjB9J,UAAWf,EAAQuJ,KADdwB,UAOrB,CAACT,EAAUtK,EAAQuJ,MAGvB,OACI,UAACO,GAAD,kBAAmBhL,GAAnB,cACK0L,GACD,SAACvJ,EAAA,EAAD,CAAYgH,UAAU,MAAMkD,KAAK,WAAjC,UACI,SAAC,WAAD,CAAgBC,UAAU,SAACC,EAAA,EAAD,IAA1B,SACM,SAAA1C,GACE,OAAQA,GACJ,KAAK,EACD,OAAO,SAACQ,EAAD,CAAS3J,MAAOV,EAAMU,QACjC,KAAK,EACD,OAAO,SAAC4J,EAAD,CAAgB5J,MAAOV,EAAMU,QACxC,KAAK,EACD,OAAO,SAAC6J,EAAD,CAAW7J,MAAOV,EAAMU,QACnC,KAAK,EACD,OAAO,SAAC8J,EAAD,CAAS9J,MAAOV,EAAMU,SATvC,CAWC8K,Y,+BE/FR,SAASgB,GAAoBxM,GAAmC,IAAD,EAClEU,EAAyBV,EAAzBU,MAAOuC,EAAkBjD,EAAlBiD,KAAME,EAAYnD,EAAZmD,QACbnC,GAAMC,EAAAA,EAAAA,KAAND,EACFG,GAAWC,EAAAA,EAAAA,MAEX+C,GAAUjE,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMmB,MAAMG,YAC9CgL,GAAsBvM,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMmB,MAAMoL,mBAEhE,GAA8B9K,EAAAA,EAAAA,WAAS,GAAvC,eAAO+K,EAAP,KAAgBC,EAAhB,KAEMhG,EAAc,SAAC9G,GAAD,OAAgC,WAChD,GAAe,WAAXA,EACA,IAAI+M,EAAAA,GAAAA,GAA2BnM,EAAOyD,IAElC,GADAhD,GAAS2L,EAAAA,GAAAA,GAAcpM,IACnB+L,IAAwB/L,EAAO,CAC/B,IAAIqM,EAAejI,OAAOC,KAAKZ,GAAS6I,QAAO,SAAAC,GAAE,OAAK,CAAC,YAAa,WAAWhG,SAASgG,MAAK,GAC7F9L,GAASkC,EAAAA,EAAAA,IAAkB0J,UAG/BH,GAAW,GAGnBzJ,MAEJ,OACI,iCACI,UAAC6F,EAAA,EAAD,CAAQ/F,KAAMA,EAAME,QAASyD,EAAY,SAAzC,WACI,SAACqC,EAAA,EAAD,UAAcjI,EAAE,4BAChB,SAACkI,EAAA,EAAD,WACI,SAACgE,GAAA,EAAD,WACI,SAACC,EAAA,EAAD,CAAOC,QAAQ,sBAAf,SAAsC,CAAE1L,KAAI,UAAEyC,EAAQnE,EAAMU,cAAhB,aAAE,EAAsBgB,KAAK2L,eAGjF,UAACtD,EAAA,EAAD,YACI,SAACC,EAAA,EAAD,CAAQrH,QAASiE,EAAY,SAAUqD,MAAM,UAAUC,WAAS,EAAhE,SACKlJ,EAAE,oBAEP,SAACgJ,EAAA,EAAD,CAAQrH,QAASiE,EAAY,UAAWqD,MAAM,UAA9C,SACKjJ,EAAE,mCAIf,SAACsM,GAAD,CAAarK,KAAM0J,EAASxJ,QAAS,kBAAMyJ,GAAW,SAKlE,IAAMU,IAAcC,EAAAA,EAAAA,OAChB,SAACvN,GACG,IAAQgB,GAAMC,EAAAA,EAAAA,KAAND,EACR,OACI,UAACgI,EAAA,EAAD,CAAQ/F,KAAMjD,EAAMiD,KAAME,QAASnD,EAAMmD,QAAzC,WACI,SAAC8F,EAAA,EAAD,UAAcjI,EAAE,kCAChB,SAACkI,EAAA,EAAD,WACI,SAACgE,GAAA,EAAD,UAAoBlM,EAAE,kCAE1B,SAAC+I,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,CAAQrH,QAAS3C,EAAMmD,QAAS8G,MAAM,UAAUC,WAAS,EAAzD,SACKlJ,EAAE,uBAMvB,SAACmJ,EAAWC,GAAZ,OAA0BD,EAAUlH,OAASmH,EAAUnH,Q,sBC5DrDnE,IAAYC,EAAAA,EAAAA,IAAW,SAAAC,GAAK,OAC9BC,EAAAA,EAAAA,GAAa,CACTuO,IAAK,CACDC,SAAU,QACVjG,MAAOxI,EAAMI,QAAQ,GACrBsO,OAAQ1O,EAAMI,QAAQ,SAyDlC,GAhDoB8E,EAAAA,MAChB,SAAClE,GACG,IAAQgB,GAAMC,EAAAA,EAAAA,KAAND,EACFK,GAAWnB,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMmB,MAAMC,SAC/CL,EAAUpC,KAChB,EAA0BoF,EAAAA,SAAmC,MAA7D,eAAOyJ,EAAP,KAAcC,EAAd,KAEM7L,EAAe,SAACjC,GAAD,OAAoB,WACrC8N,EAAS,MACT5N,EAAMc,SAAShB,KAGnB,OACI,iCACI,SAAC+N,GAAA,GAAD,CAASC,MAAO9M,EAAE,0BAA4B,GAAI,aAAW,UAA7D,UACI,SAAC+M,GAAA,EAAD,CAAK9D,MAAM,UAAUhI,UAAWf,EAAQsM,IAAK7K,QAAS,SAAAC,GAAC,OAAIgL,EAAShL,EAAE4G,SAAtE,UACI,SAAC1G,EAAA,EAAD,6BAIR,UAACC,EAAA,EAAD,CAAMC,SAAU2K,EAAO1K,KAAMC,QAAQyK,GAAQxK,QAAS,kBAAMyK,EAAS,OAArE,WACI,UAACxK,EAAA,EAAD,CAAUT,QAASZ,EAAa,OAAhC,WACI,SAACqH,EAAA,EAAD,WACI,SAACtG,EAAA,EAAD,yBAEJ,SAACV,EAAA,EAAD,CAAcC,QAASrB,EAAE,2BAE7B,UAACoC,EAAA,EAAD,CAAUT,QAASZ,EAAa,WAAhC,WACI,SAACqH,EAAA,EAAD,WACI,SAACtG,EAAA,EAAD,wBAEJ,SAACV,EAAA,EAAD,CAAcC,QAASrB,EAAE,8BAE5BK,IAAaa,EAAAA,GAAAA,QACV,UAACkB,EAAA,EAAD,CAAUT,QAASZ,EAAa,WAAhC,WACI,SAACqH,EAAA,EAAD,WACI,SAACtG,EAAA,EAAD,0BAEJ,SAACV,EAAA,EAAD,CAAcC,QAASrB,EAAE,uCAOjD,kBAAM,KCjBV,GA/CsB,SAAChB,GACnB,IAAQgB,GAAMC,EAAAA,EAAAA,KAAND,EACFG,GAAWC,EAAAA,EAAAA,MAET4M,GAAa9N,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMC,UAA3C4N,SAEFpH,EAAc,SAAC9G,GACjB,IAAImO,EAAUD,EAAS,GACvBC,EAAQzF,SAAQ,SAAC9H,EAAOuL,GACpB,IAAItK,EAEAA,EADW,WAAX7B,EACMmM,EAAEtI,WAAWC,SAAS,EAAG,MAExBqK,EAAQrI,OAAS,EAAIqG,GAAGtI,WAAWC,SAAS,EAAG,KAE1DzC,GAAS+M,EAAAA,EAAAA,IAAiBxN,EAAOiB,OAIrC3B,EAAMmD,WAGV,OAAOe,EAAAA,SACH,kBACI,UAAC8E,EAAA,EAAD,CAAQ7F,QAASnD,EAAMmD,QAASF,KAAMjD,EAAMiD,KAA5C,WACI,SAACgG,EAAA,EAAD,UAAcjI,EAAE,2BAChB,SAACkI,EAAA,EAAD,WACI,SAACgE,GAAA,EAAD,UAAoBlM,EAAE,2BAE1B,UAAC+I,EAAA,EAAD,YACI,SAACC,EAAA,EAAD,CAAQrH,QAAS3C,EAAMmD,QAAS8G,MAAM,UAAUC,WAAS,EAAzD,SACKlJ,EAAE,oBAEP,SAACgJ,EAAA,EAAD,CAAQrH,QAAS,kBAAMiE,EAAY,WAAWqD,MAAM,UAApD,SACKjJ,EAAE,4BAEP,SAACgJ,EAAA,EAAD,CAAQrH,QAAS,kBAAMiE,EAAY,YAAYqD,MAAM,UAArD,SACKjJ,EAAE,oCAMnB,CAAChB,EAAMiD,QC1CTnE,IAAYC,EAAAA,EAAAA,IAAW,kBACzBE,EAAAA,EAAAA,GAAa,CACTkP,cAAe,CACXzD,OAAQ,OACRhL,SAAU,UAEd0O,SAAU,CACN1D,OAAQ,OACRhL,SAAU,aClBtB,GDuBuB,WACnB,IAAMwB,EAAUpC,KACVqC,GAAWC,EAAAA,EAAAA,MAEXC,GAAWnB,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMmB,MAAMC,SAErD,GAAsCK,EAAAA,EAAAA,UAAS,IAA/C,eAAOyM,EAAP,KAAoBC,EAApB,KACA,GAA4B1M,EAAAA,EAAAA,WAAS,GAArC,eAAO2M,EAAP,KAAeC,EAAf,KAEA,GAA8C5M,EAAAA,EAAAA,WAAS,GAAvD,eAAO6M,EAAP,KAAwBC,EAAxB,KACA,GAAsD9M,EAAAA,EAAAA,WAAS,GAA/D,eAAO+M,EAAP,KAA4BC,EAA5B,KAEA,GAAsChN,EAAAA,EAAAA,UAAS,IAA/C,eAAOiN,EAAP,KAAoBC,EAApB,KACA,GAAoDlN,EAAAA,EAAAA,WAAS,GAA7D,eAAOmN,EAAP,KAA2BC,EAA3B,KAkCA,OACI,iCACI,UAACC,EAAA,EAAD,CAAMC,WAAS,EAAC9P,QAAS,EAAG6C,UAAWf,EAAQiN,cAA/C,WACI,SAACc,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGpN,UAAWf,EAAQkN,SAA7C,UACI,SAAC,EAAD,CAAavN,WAAYwN,EAAavN,SApCjC,SAACJ,GAAD,OAAmB,SAACZ,GACtB,SAAXA,IACAwO,EAAe5N,GACf8N,GAAU,IAEC,WAAX1O,IACIuO,IAAgB3N,GAAO4N,EAAe,IAC1CQ,EAAepO,GACfsO,GAAsB,WA8BlB,SAACC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGnN,UAAWf,EAAQkN,SAArC,SACKC,IACG,SAAC,EAAD,CAAmBpL,KAAMsL,EAAQ7N,MAAO2N,EAAalL,QAAS,kBAAMqL,GAAU,YAK1F,SAAC,GAAD,CAAa1N,SAjCF,SAAChB,GACD,QAAXA,GACA4O,GAAmB,GAER,YAAX5O,GACAqB,GAASmO,EAAAA,EAAAA,OAEE,YAAXxP,GACA8O,GAAuB,OA2BvB,SAAC,EAAD,CAAkB3L,KAAMwL,EAAiBtL,QAvBvB,SAACrD,GACvB4O,GAAmB,GACJ,UAAX5O,IACAwO,EAAexO,GACf0O,GAAU,QAoBV,SAAChC,GAAD,CACIvJ,KAAM8L,EACN5L,QAAS,kBAAM6L,GAAsB,IACrCtO,MAAOmO,IAEVxN,IAAaa,EAAAA,GAAAA,QACV,SAAC,GAAD,CAAee,KAAM0L,EAAqBxL,QAAS,kBAAMyL,GAAuB","sources":["panels/stations/station-list.tsx","redux/param/station-list-util.ts","panels/stations/add-diag.tsx","redux/param/add-station-action.ts","panels/stations/edit-diag/dialog.tsx","panels/stations/edit-diag/index.ts","panels/stations/delete-diags.tsx","panels/stations/fabs.tsx","panels/stations/auto-num-diag.tsx","panels/stations/panel2.tsx","panels/stations/index.ts"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n    createStyles,\n    Divider,\n    Icon,\n    IconButton,\n    List,\n    ListItem,\n    ListItemSecondaryAction,\n    ListItemText,\n    makeStyles,\n    Menu,\n    MenuItem,\n    Paper,\n    Typography,\n} from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\nimport { useAppDispatch, useAppSelector } from '../../redux';\nimport { RmgStyle } from '../../constants/constants';\nimport { setCurrentStation } from '../../redux/param/action';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        listItemNum: {\n            marginRight: theme.spacing(1),\n            fontSize: '1.2rem',\n        },\n        listItemText: {\n            display: 'flex',\n            alignItems: 'baseline',\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            '& .MuiListItemText-primary': {\n                marginRight: theme.spacing(1),\n            },\n        },\n        selectedItem: {\n            background: theme.palette.action.hover,\n        },\n    })\n);\n\ninterface Props {\n    selectedId: string;\n    onAction: (stnId: string) => (action: 'edit' | 'remove') => void;\n}\n\nconst StationList = (props: Props) => {\n    const tpo = useAppSelector(store => store.helper.tpo);\n\n    return (\n        <Paper>\n            <List dense disablePadding>\n                {tpo.map(stnId => (\n                    <React.Fragment key={stnId}>\n                        <StationEntry\n                            stnId={stnId}\n                            isSelected={stnId === props.selectedId}\n                            onAction={props.onAction(stnId)}\n                        />\n                        <Divider />\n                    </React.Fragment>\n                ))}\n            </List>\n        </Paper>\n    );\n};\n\nexport default StationList;\n\nconst StationEntry = (props: { stnId: string; isSelected: boolean; onAction: (action: 'edit' | 'remove') => void }) => {\n    const { stnId, isSelected, onAction } = props;\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const rmgStyle = useAppSelector(store => store.param.style);\n    const stationInfo = useAppSelector(store => store.param.stn_list[stnId]);\n\n    const name = stationInfo?.name || ['', ''];\n    const num = stationInfo?.num || '00';\n\n    const [toggleEl, setToggleEl] = useState<null | HTMLElement>(null);\n\n    const handleCurrent = () => {\n        dispatch(setCurrentStation(stnId));\n        setToggleEl(null);\n    };\n\n    const handleAction = (action: 'edit' | 'remove') => () => {\n        onAction(action);\n        setToggleEl(null);\n    };\n\n    return (\n        <ListItem className={isSelected ? classes.selectedItem : ''}>\n            {rmgStyle === RmgStyle.GZMTR && <Typography className={classes.listItemNum}>{num}</Typography>}\n            <ListItemText primary={name[0]} secondary={name[1].replace('\\\\', ' ')} className={classes.listItemText} />\n            <ListItemSecondaryAction>\n                <IconButton size=\"small\" onClick={e => setToggleEl(e.currentTarget)}>\n                    <Icon>more_vert</Icon>\n                </IconButton>\n                <Menu anchorEl={toggleEl} open={Boolean(toggleEl)} onClose={() => setToggleEl(null)}>\n                    <MenuItem onClick={handleCurrent}>{t('stations.current')}</MenuItem>\n                    <MenuItem onClick={handleAction('edit')}>{t('stations.edit.button')}</MenuItem>\n                    <MenuItem onClick={handleAction('remove')}>{t('stations.remove.button')}</MenuItem>\n                </Menu>\n            </ListItemSecondaryAction>\n        </ListItem>\n    );\n};\n","export const getRandomId = () =>\n    Math.floor(Math.random() * Math.pow(36, 4))\n        .toString(36)\n        .padStart(4, '0');\n","import React, { useMemo, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    List,\n    ListItem,\n    ListItemIcon,\n    Icon,\n    DialogActions,\n    Button,\n    makeStyles,\n    createStyles,\n    ListItemText,\n    Select,\n    Divider,\n} from '@material-ui/core';\nimport { formatStnName } from '../../utils';\nimport { getYShareMTR } from '../../methods';\nimport { useAppDispatch, useAppSelector } from '../../redux';\nimport { StationDict, StationInfo } from '../../constants/constants';\nimport { addStation } from '../../redux/param/add-station-action';\n\nconst newBranchPossibleEnd = (prep: 'before' | 'after', pivot: string, stnList: StationDict) => {\n    let res: string[] = [];\n    if (prep === 'before') {\n        while (stnList[pivot].parents.length === 1) {\n            pivot = stnList[pivot].parents[0];\n            res.unshift(pivot);\n        }\n        res.pop();\n    } else {\n        while (stnList[pivot].children.length === 1) {\n            pivot = stnList[pivot].children[0];\n            res.push(pivot);\n        }\n        res.shift();\n    }\n    return res;\n};\n\nconst newStnPossibleLoc = (\n    prep: 'before' | 'after',\n    pivot: string,\n    stnList: { [stnId: string]: StationInfo }\n): [number, number, number, string[], string[]] => {\n    let deg = stnList[pivot] ? stnList[pivot][prep === 'before' ? 'parents' : 'children'].length : 0;\n    switch (deg) {\n        case 2:\n            // 1 -> 2\n            return [1, 1, 1, [], []];\n        case 1:\n            let y = getYShareMTR(pivot, stnList);\n            if (y === 0) {\n                // 1 -> 1\n                let state: string[] | 0 = newBranchPossibleEnd(prep, pivot, stnList);\n                state = state.length ? state : [];\n                return [1, 0, 0, state, state];\n                // [1,0,0,1,1];\n            } else if (y < 0) {\n                if (prep === 'before') {\n                    return [stnList[stnList[pivot].parents[0]].children.length - 1, 0, 1, [], []];\n                } else {\n                    return [stnList[stnList[pivot].children[0]].parents.length - 1, 0, 1, [], []];\n                }\n            } else {\n                if (prep === 'before') {\n                    return [stnList[stnList[pivot].parents[0]].children.length - 1, 1, 0, [], []];\n                } else {\n                    return [stnList[stnList[pivot].children[0]].parents.length - 1, 1, 0, [], []];\n                }\n            }\n    }\n    return [0, 0, 0, [], []];\n};\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        dialogContent: {\n            padding: 8,\n        },\n        select: {\n            width: 166,\n            marginLeft: 8,\n        },\n    })\n);\n\ninterface StationAddDialogProps {\n    open: boolean;\n    onClose: (action: 'close' | string) => void;\n}\n\nexport default React.memo(\n    function StationAddDialog(props: StationAddDialogProps) {\n        const { t } = useTranslation();\n        const classes = useStyles();\n        const dispatch = useAppDispatch();\n\n        const rmgStyle = useAppSelector(store => store.param.style);\n        const stnList = useAppSelector(store => store.param.stn_list);\n        const { tpo } = useAppSelector(store => store.helper);\n\n        const allLocs = {\n            centre: t('stations.add.centre'),\n            upper: t('stations.add.upper'),\n            lower: t('stations.add.lower'),\n            newupper: t('stations.add.newUpper'),\n            newlower: t('stations.add.newLower'),\n        };\n\n        const [prep, setPrep] = React.useState('before' as 'before' | 'after');\n        const [pivot, setPivot] = React.useState(tpo[0]);\n        const [loc, setLoc] = React.useState(Object.keys(allLocs)[0]);\n        const [locOK, setLocOK] = React.useState(Array(5).fill(true) as boolean[]);\n\n        const [end, setEnd] = React.useState('');\n        const [endList, setEndList] = React.useState([] as string[]);\n\n        // Hook for updating loc list and end lists when pivot changed\n        const newLocs = useMemo(() => newStnPossibleLoc(prep, pivot, stnList), [prep, pivot, stnList]);\n        useEffect(\n            () => {\n                setLocOK(newLocs.map(p => (typeof p === 'number' ? Boolean(p) : Boolean(p.length))));\n                setEndList(newLocs[3]);\n            },\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [newLocs.toString()]\n        );\n\n        // Hook for updating loc selection (first available) when locOK list changed\n        useEffect(\n            () => setLoc(Object.keys(allLocs)[locOK.indexOf(true)]),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [locOK]\n        );\n\n        // Hook for updating end selection when end list changed\n        useEffect(() => {\n            if (endList.length === 0) return;\n            setEnd(endList[0]);\n        }, [endList]);\n\n        // Hook for setting new pivot in case of previous one being deleted\n        useEffect(\n            () => {\n                if (!(pivot in stnList)) setPivot(tpo[0]);\n            },\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [Object.keys(stnList).toString()]\n        );\n\n        const handleClick = (action: string) => {\n            if (action === 'close') {\n                props.onClose('close');\n            } else {\n                const newId = dispatch(addStation(prep, pivot, loc as any, end));\n                props.onClose(newId);\n            }\n        };\n\n        return (\n            <Dialog open={props.open} onClose={() => handleClick('close')}>\n                <DialogTitle>{t('stations.add.title')}</DialogTitle>\n                <DialogContent className={classes.dialogContent}>\n                    <List component=\"div\" disablePadding>\n                        <ListItem>\n                            <ListItemIcon>\n                                <Icon>control_camera</Icon>\n                            </ListItemIcon>\n                            <ListItemText primary={t('stations.add.prep')} />\n                            <Select\n                                native\n                                onChange={e => setPrep(e.target.value as 'before' | 'after')}\n                                value={prep}\n                                className={classes.select}\n                            >\n                                {['before', 'after'].map(p => (\n                                    <option key={p} value={p}>\n                                        {t('stations.add.' + p)}\n                                    </option>\n                                ))}\n                            </Select>\n                        </ListItem>\n                        <Divider variant=\"middle\" />\n                        <ListItem>\n                            <ListItemIcon>\n                                <Icon>near_me</Icon>\n                            </ListItemIcon>\n                            <ListItemText primary={t('stations.add.pivot')} />\n                            <Select\n                                native\n                                onChange={e => setPivot(e.target.value as string)}\n                                value={pivot}\n                                className={classes.select}\n                            >\n                                {tpo.map(stnId => (\n                                    <option key={stnId} value={stnId}>\n                                        {formatStnName(stnList[stnId], rmgStyle)}\n                                    </option>\n                                ))}\n                            </Select>\n                        </ListItem>\n                        <Divider variant=\"middle\" />\n                        <ListItem>\n                            <ListItemIcon>\n                                <Icon>share</Icon>\n                            </ListItemIcon>\n                            <ListItemText primary={t('stations.add.loc')} />\n                            <Select\n                                native\n                                onChange={e => setLoc(e.target.value as string)}\n                                value={loc}\n                                className={classes.select}\n                            >\n                                {(Object.keys(allLocs) as (keyof typeof allLocs)[]).map((key, idx) => (\n                                    <option key={key} value={key} disabled={!locOK[idx]}>\n                                        {allLocs[key]}\n                                    </option>\n                                ))}\n                            </Select>\n                        </ListItem>\n                        <Divider\n                            variant=\"middle\"\n                            style={{ display: ['newupper', 'newlower'].includes(loc) ? 'flex' : 'none' }}\n                        />\n                        <ListItem style={{ display: ['newupper', 'newlower'].includes(loc) ? 'flex' : 'none' }}>\n                            <ListItemIcon>\n                                <Icon>undo</Icon>\n                            </ListItemIcon>\n                            <ListItemText primary={t('stations.add.end')} />\n                            <Select\n                                native\n                                onChange={e => setEnd(e.target.value as string)}\n                                value={end}\n                                className={classes.select}\n                            >\n                                {endList.map(stnId => (\n                                    <option key={stnId} value={stnId}>\n                                        {formatStnName(stnList[stnId], rmgStyle)}\n                                    </option>\n                                ))}\n                            </Select>\n                        </ListItem>\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => handleClick('close')} color=\"primary\">\n                        {t('dialog.cancel')}\n                    </Button>\n                    <Button onClick={() => handleClick('accept')} color=\"primary\" autoFocus>\n                        {t('dialog.ok')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    },\n    (prevProps, nextProps) => prevProps.open === nextProps.open\n);\n","import { AppDispatch, RootState } from '../index';\nimport { getRandomId } from './station-list-util';\nimport { BranchStyle, Facilities, Services, ShortDirection, StationDict, StationInfo } from '../../constants/constants';\nimport { getYShareMTR } from '../../methods';\nimport { setStationsBulk } from './action';\n\nexport const addStation = (\n    prep: 'before' | 'after',\n    pivotStationId: string,\n    loc: 'centre' | 'upper' | 'lower' | 'newupper' | 'newlower',\n    end: string\n) => {\n    // return new station id\n    return (dispatch: AppDispatch, getState: () => RootState): string => {\n        const stationList = getState().param.stn_list;\n        // get new id\n        let newId = getRandomId();\n        while (Object.keys(stationList).includes(newId)) {\n            newId = getRandomId();\n        }\n        let newInfo: StationInfo = {\n            name: ['未命名 ' + newId, 'Unnamed ' + newId],\n            secondaryName: false,\n            num: '00',\n            services: [Services.local],\n            parents: [],\n            children: [],\n            branch: {\n                left: [],\n                right: [],\n            },\n            transfer: {\n                info: [[]],\n                // type: 'none',\n                tick_direc: ShortDirection.right,\n                paid_area: true,\n                osi_names: [],\n            },\n            facility: Facilities.none,\n            loop_pivot: false,\n        };\n\n        let newStnList = JSON.parse(JSON.stringify(stationList)) as StationDict;\n\n        if (prep === 'before') {\n            if (loc === 'centre') {\n                newInfo.parents = stationList[pivotStationId].parents;\n                if (\n                    stationList[pivotStationId].parents.length === 0 &&\n                    getYShareMTR(pivotStationId, stationList) !== 0\n                ) {\n                    // todo: is this case really exist?\n                    newInfo.children = stationList.linestart.children;\n                } else if (getYShareMTR(pivotStationId, stationList) !== 0) {\n                    // pivot on branch\n                    newInfo.children = stationList[stationList[pivotStationId].parents[0]].children.slice();\n                    newInfo.branch.right = stationList[newInfo.parents[0]].branch.right;\n                    newStnList[newInfo.parents[0]].branch.right = [];\n                } else {\n                    // pivot on main\n                    newInfo.children = [pivotStationId];\n                    newInfo.branch.left = stationList[pivotStationId].branch.left;\n                    newStnList[pivotStationId].branch.left = [];\n                }\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n            } else if (loc === 'upper') {\n                if (stationList[pivotStationId].parents.length === 2) {\n                    if (stationList[pivotStationId].branch.left[1] === stationList[pivotStationId].parents[0]) {\n                        newStnList[pivotStationId].branch.left[1] = newId;\n                    }\n\n                    newInfo.parents = stationList[pivotStationId].parents.slice(0, 1);\n                    newInfo.children = [pivotStationId];\n                    newInfo.parents.forEach(par => {\n                        newStnList[par].children = [newId];\n                    });\n                    newStnList[pivotStationId].parents[0] = newId;\n                } else {\n                    // already on branch\n                    newInfo.parents = stationList[pivotStationId].parents;\n                    newInfo.children = [pivotStationId];\n                    newInfo.parents.forEach(par => {\n                        newStnList[par].children[0] = newId;\n\n                        if (stationList[par].branch.right[1] === pivotStationId) {\n                            newStnList[par].branch.right[1] = newId;\n                        }\n                    });\n                    newInfo.children.forEach(child => {\n                        newStnList[child].parents = [newId];\n                    });\n                }\n            } else if (loc === 'lower') {\n                if (stationList[pivotStationId].parents.length === 2) {\n                    if (stationList[pivotStationId].branch.left[1] === stationList[pivotStationId].parents[1]) {\n                        newStnList[pivotStationId].branch.left[1] = newId;\n                    }\n\n                    newInfo.parents = stationList[pivotStationId].parents.slice(1);\n                    newInfo.children = [pivotStationId];\n                    newInfo.parents.forEach(par => {\n                        newStnList[par].children = [newId];\n                    });\n                    newStnList[pivotStationId].parents[1] = newId;\n                } else {\n                    // already on branch\n                    newInfo.parents = stationList[pivotStationId].parents;\n                    newInfo.children = [pivotStationId];\n                    newInfo.parents.forEach(par => {\n                        let parChildLen = stationList[par].children.length;\n                        newStnList[par].children[parChildLen - 1] = newId;\n\n                        if (stationList[par].branch.right[1] === pivotStationId) {\n                            newStnList[par].branch.right[1] = newId;\n                        }\n                    });\n                    newInfo.children.forEach(child => {\n                        newStnList[child].parents = [newId];\n                    });\n                }\n            } else {\n                newStnList[pivotStationId].branch.left = [BranchStyle.through, newId];\n                newStnList[end].branch.right = [BranchStyle.through, newId];\n                newInfo.parents = [end];\n                newInfo.children = [pivotStationId];\n\n                if (loc === 'newupper') {\n                    newStnList[end].children.unshift(newId);\n                    newStnList[pivotStationId].parents.unshift(newId);\n                } else {\n                    newStnList[end].children.push(newId);\n                    newStnList[pivotStationId].parents.push(newId);\n                }\n            }\n        } else {\n            if (loc === 'centre') {\n                newInfo.children = stationList[pivotStationId].children;\n                if (\n                    stationList[pivotStationId].children.length === 0 &&\n                    getYShareMTR(pivotStationId, stationList) !== 0\n                ) {\n                    newInfo.parents = stationList.lineend.parents;\n                } else if (getYShareMTR(pivotStationId, stationList) !== 0) {\n                    // pivot on branch\n                    newInfo.parents = stationList[stationList[pivotStationId].children[0]].parents;\n                    newInfo.branch.left = stationList[newInfo.children[0]].branch.left;\n                    newStnList[newInfo.children[0]].branch.left = [];\n                } else {\n                    // pivot on main\n                    newInfo.parents = [pivotStationId];\n                    newInfo.branch.right = stationList[pivotStationId].branch.right;\n                    newStnList[pivotStationId].branch.right = [];\n                }\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n            } else if (loc === 'upper') {\n                if (stationList[pivotStationId].children.length === 2) {\n                    if (stationList[pivotStationId].branch.right[1] === stationList[pivotStationId].children[0]) {\n                        newStnList[pivotStationId].branch.right[1] = newId;\n                    }\n\n                    newInfo.children = stationList[pivotStationId].children.slice(0, 1);\n                    newInfo.parents = [pivotStationId];\n                    newInfo.children.forEach(child => {\n                        newStnList[child].parents = [newId];\n                    });\n                    newStnList[pivotStationId].children[0] = newId;\n                } else {\n                    // already on branch\n                    newInfo.children = stationList[pivotStationId].children;\n                    newInfo.parents = [pivotStationId];\n                    newInfo.children.forEach(child => {\n                        newStnList[child].parents[0] = newId;\n\n                        if (stationList[child].branch.left[1] === pivotStationId) {\n                            newStnList[child].branch.left[1] = newId;\n                        }\n                    });\n                    newInfo.parents.forEach(par => {\n                        newStnList[par].children = [newId];\n                    });\n                }\n            } else if (loc === 'lower') {\n                if (stationList[pivotStationId].children.length === 2) {\n                    if (stationList[pivotStationId].branch.right[1] === stationList[pivotStationId].children[1]) {\n                        newStnList[pivotStationId].branch.right[1] = newId;\n                    }\n\n                    newInfo.children = stationList[pivotStationId].children.slice(1);\n                    newInfo.parents = [pivotStationId];\n                    newInfo.children.forEach(child => {\n                        newStnList[child].parents = [newId];\n                    });\n                    newStnList[pivotStationId].children[1] = newId;\n                } else {\n                    // already on branch\n                    newInfo.children = stationList[pivotStationId].children;\n                    newInfo.parents = [pivotStationId];\n                    newInfo.children.forEach(child => {\n                        newStnList[child].parents[stationList[child].parents.length === 1 ? 0 : 1] = newId;\n\n                        if (stationList[child].branch.left[1] === pivotStationId) {\n                            newStnList[child].branch.left[1] = newId;\n                        }\n                    });\n                    newInfo.parents.forEach(par => {\n                        newStnList[par].children = [newId];\n                    });\n                }\n            } else {\n                newStnList[pivotStationId].branch.right = [BranchStyle.through, newId];\n                newStnList[end].branch.left = [BranchStyle.through, newId];\n\n                newInfo.children = [end];\n                newInfo.parents = [pivotStationId];\n\n                if (loc === 'newupper') {\n                    newStnList[end].parents.unshift(newId);\n                    newStnList[pivotStationId].children.unshift(newId);\n                } else {\n                    newStnList[end].parents.push(newId);\n                    newStnList[pivotStationId].children.push(newId);\n                }\n            }\n        }\n\n        dispatch(\n            setStationsBulk({\n                ...newStnList,\n                [newId]: newInfo,\n            })\n        );\n        return newId;\n    };\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    Tabs,\n    Tab,\n    Icon,\n    Typography,\n    CircularProgress,\n    DialogActions,\n    Button,\n    useTheme,\n    useMediaQuery,\n    makeStyles,\n    createStyles,\n    Paper,\n} from '@material-ui/core';\n\nconst NameTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsName\" */ './name-tab'));\nconst InterchangeTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsInterchange\" */ './interchange-tab'));\nconst BranchTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsBranch\" */ './branch-tab'));\nconst MoreTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsMore\" */ './more-tab'));\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        tab: {\n            padding: '6px 24px',\n            height: 48,\n            minWidth: 'calc(100% / 4)',\n            '& .MuiTab-wrapper': {\n                flexDirection: 'row',\n            },\n            '&.MuiTab-labelIcon': {\n                minHeight: 'unset',\n                '& .MuiTab-wrapper': {\n                    '& > *:first-child': {\n                        marginBottom: 0,\n                    },\n                    '& > *:not(first-child)': {\n                        paddingLeft: 8,\n                    },\n                },\n            },\n        },\n    })\n);\n\ninterface StationEditDialogProps {\n    onClose: () => void;\n    open: boolean;\n    stnId: string;\n}\n\nexport default function StationEditDialog(props: StationEditDialogProps) {\n    const { t } = useTranslation();\n\n    const [tabIndex, setTabIndex] = React.useState(0);\n\n    const classes = useStyles();\n\n    const tabNav = React.useMemo(\n        () => (\n            <Tabs\n                value={tabIndex}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                onChange={(_, val) => setTabIndex(val)}\n                variant=\"scrollable\"\n                scrollButtons=\"off\"\n            >\n                {[\n                    ['name', 'title'],\n                    ['interchange', 'transfer_within_a_station'],\n                    ['branch', 'share'],\n                    ['more', 'more_horiz'],\n                ].map((val, i) => (\n                    <Tab\n                        label={<span>{t('stations.edit.tab.' + val[0])}</span>}\n                        icon={<Icon>{val[1]}</Icon>}\n                        key={i}\n                        className={classes.tab}\n                    />\n                ))}\n            </Tabs>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [tabIndex, classes.tab]\n    );\n\n    return (\n        <DialogWrapper {...props}>\n            {tabNav}\n            <Typography component=\"div\" role=\"tabpanel\">\n                <React.Suspense fallback={<CircularProgress />}>\n                    {(idx => {\n                        switch (idx) {\n                            case 0:\n                                return <NameTab stnId={props.stnId} />;\n                            case 1:\n                                return <InterchangeTab stnId={props.stnId} />;\n                            case 2:\n                                return <BranchTab stnId={props.stnId} />;\n                            case 3:\n                                return <MoreTab stnId={props.stnId} />;\n                        }\n                    })(tabIndex)}\n                </React.Suspense>\n            </Typography>\n        </DialogWrapper>\n    );\n}\n\nconst DialogWrapper = (props: { children: React.ReactNode } & StationEditDialogProps) => {\n    const { t } = useTranslation();\n\n    const theme = useTheme();\n    const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\n    const isDialog = useMediaQuery(theme.breakpoints.down('sm'));\n\n    return isDialog ? (\n        <Dialog onClose={props.onClose} open={props.open} fullScreen={isMobile}>\n            <DialogTitle>{t('stations.edit.title')}</DialogTitle>\n            <DialogContent dividers style={{ padding: '0 16px' }}>\n                {props.children}\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose} color=\"primary\">\n                    {t('dialog.done')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    ) : (\n        <Paper>{props.children}</Paper>\n    );\n};\n","import Dialog from './dialog';\n\nexport default Dialog;\n","import React, { useState, memo } from 'react';\nimport { useTranslation, Trans } from 'react-i18next';\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core';\nimport { setCurrentStation } from '../../redux/param/action';\nimport { useAppDispatch, useAppSelector } from '../../redux';\nimport { checkStationCouldBeRemoved, removeStation } from '../../redux/param/remove-station-action';\n\ninterface Props {\n    open: boolean;\n    onClose: () => void;\n}\n\nexport default function StationDeleteDialog(props: Props & { stnId: string }) {\n    const { stnId, open, onClose } = props;\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const stnList = useAppSelector(store => store.param.stn_list);\n    const currentStationIndex = useAppSelector(store => store.param.current_stn_idx);\n\n    const [isError, setIsError] = useState(false);\n\n    const handleClick = (action: 'close' | 'accept') => () => {\n        if (action === 'accept') {\n            if (checkStationCouldBeRemoved(stnId, stnList)) {\n                dispatch(removeStation(stnId));\n                if (currentStationIndex === stnId) {\n                    let newCurrentId = Object.keys(stnList).filter(id => !['linestart', 'lineend'].includes(id))[0];\n                    dispatch(setCurrentStation(newCurrentId));\n                }\n            } else {\n                setIsError(true);\n            }\n        }\n        onClose();\n    };\n    return (\n        <>\n            <Dialog open={open} onClose={handleClick('close')}>\n                <DialogTitle>{t('stations.remove.title')}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        <Trans i18nKey=\"stations.remove.msg\">{{ name: stnList[props.stnId]?.name.join() }}</Trans>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClick('close')} color=\"primary\" autoFocus>\n                        {t('dialog.cancel')}\n                    </Button>\n                    <Button onClick={handleClick('accept')} color=\"primary\">\n                        {t('stations.remove.button')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <ErrorDialog open={isError} onClose={() => setIsError(false)} />\n        </>\n    );\n}\n\nconst ErrorDialog = memo(\n    (props: Props) => {\n        const { t } = useTranslation();\n        return (\n            <Dialog open={props.open} onClose={props.onClose}>\n                <DialogTitle>{t('stations.remove.error.title')}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>{t('stations.remove.error.msg')}</DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.onClose} color=\"primary\" autoFocus>\n                        {t('dialog.ok')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    },\n    (prevProps, nextProps) => prevProps.open === nextProps.open\n);\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    createStyles,\n    Fab,\n    Icon,\n    ListItemIcon,\n    ListItemText,\n    makeStyles,\n    Menu,\n    MenuItem,\n    Tooltip,\n} from '@material-ui/core';\nimport { useAppSelector } from '../../redux';\nimport { RmgStyle } from '../../constants/constants';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        fab: {\n            position: 'fixed',\n            right: theme.spacing(2),\n            bottom: theme.spacing(2),\n        },\n    })\n);\n\ninterface Props {\n    onAction: (action: string) => void;\n}\n\nconst StationFabs = React.memo(\n    (props: Props) => {\n        const { t } = useTranslation();\n        const rmgStyle = useAppSelector(store => store.param.style);\n        const classes = useStyles();\n        const [fabEl, setFabEl] = React.useState<null | HTMLElement>(null);\n\n        const handleAction = (action: string) => () => {\n            setFabEl(null);\n            props.onAction(action);\n        };\n\n        return (\n            <>\n                <Tooltip title={t('stations.fabs.tooltip') || ''} aria-label=\"options\">\n                    <Fab color=\"primary\" className={classes.fab} onClick={e => setFabEl(e.target as HTMLElement)}>\n                        <Icon>more_vert</Icon>\n                    </Fab>\n                </Tooltip>\n\n                <Menu anchorEl={fabEl} open={Boolean(fabEl)} onClose={() => setFabEl(null)}>\n                    <MenuItem onClick={handleAction('add')}>\n                        <ListItemIcon>\n                            <Icon>add_box</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('stations.fabs.add')} />\n                    </MenuItem>\n                    <MenuItem onClick={handleAction('reverse')}>\n                        <ListItemIcon>\n                            <Icon>cached</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('stations.fabs.reverse')} />\n                    </MenuItem>\n                    {rmgStyle === RmgStyle.GZMTR && (\n                        <MenuItem onClick={handleAction('autonum')}>\n                            <ListItemIcon>\n                                <Icon>filter_1</Icon>\n                            </ListItemIcon>\n                            <ListItemText primary={t('design.autoNum.button')} />\n                        </MenuItem>\n                    )}\n                </Menu>\n            </>\n        );\n    },\n    () => true\n);\n\nexport default StationFabs;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core';\nimport { updateStationNum } from '../../redux/param/action';\nimport { useAppDispatch, useAppSelector } from '../../redux';\n\ninterface Props {\n    open: boolean;\n    onClose: () => void;\n}\n\nconst AutoNumDialog = (props: Props) => {\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const { branches } = useAppSelector(store => store.helper);\n\n    const handleClick = (action: 'ascend' | 'descend') => {\n        let branch0 = branches[0];\n        branch0.forEach((stnId, i) => {\n            let num: string;\n            if (action === 'ascend') {\n                num = i.toString().padStart(2, '0');\n            } else {\n                num = (branch0.length - 1 - i).toString().padStart(2, '0');\n            }\n            dispatch(updateStationNum(stnId, num));\n            // (window.myLine as RMGLineGZ).updateStnNum(stnId, num);\n        });\n        // props.paramUpdate('stn_list', getParams().stn_list);\n        props.onClose();\n    };\n\n    return React.useMemo(\n        () => (\n            <Dialog onClose={props.onClose} open={props.open}>\n                <DialogTitle>{t('design.autoNum.title')}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>{t('design.autoNum.msg')}</DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.onClose} color=\"primary\" autoFocus>\n                        {t('dialog.cancel')}\n                    </Button>\n                    <Button onClick={() => handleClick('ascend')} color=\"primary\">\n                        {t('design.autoNum.ascend')}\n                    </Button>\n                    <Button onClick={() => handleClick('descend')} color=\"primary\">\n                        {t('design.autoNum.descend')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.open]\n    );\n};\n\nexport default AutoNumDialog;\n","import React, { useState } from 'react';\nimport { createStyles, Grid, makeStyles } from '@material-ui/core';\nimport StationList from './station-list';\nimport StationAddDialog from './add-diag';\nimport StationEditDialog from './edit-diag';\nimport StationDeleteDialog from './delete-diags';\nimport StationFabs from './fabs';\nimport AutoNumDialog from './auto-num-diag';\nimport { useAppDispatch, useAppSelector } from '../../redux';\nimport { RmgStyle } from '../../constants/constants';\nimport { reverseStations } from '../../redux/param/action';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        gridContainer: {\n            height: '100%',\n            overflow: 'hidden',\n        },\n        gridItem: {\n            height: '100%',\n            overflow: 'auto',\n        },\n    })\n);\n\nconst PanelStations2 = () => {\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const rmgStyle = useAppSelector(store => store.param.style);\n\n    const [stnSelected, setStnSelected] = useState('');\n    const [isOpen, setIsOpen] = useState(false);\n\n    const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n    const [isAutoNumDialogOpen, setIsAutoNumDialogOpen] = useState(false);\n\n    const [stnToRemove, setStnToRemove] = useState('');\n    const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n\n    const handleAction = (stnId: string) => (action: 'edit' | 'remove') => {\n        if (action === 'edit') {\n            setStnSelected(stnId);\n            setIsOpen(true);\n        }\n        if (action === 'remove') {\n            if (stnSelected === stnId) setStnSelected('');\n            setStnToRemove(stnId);\n            setIsDeleteDialogOpen(true);\n        }\n    };\n\n    const fabsAction = (action: string) => {\n        if (action === 'add') {\n            setIsAddDialogOpen(true);\n        }\n        if (action === 'reverse') {\n            dispatch(reverseStations());\n        }\n        if (action === 'autonum') {\n            setIsAutoNumDialogOpen(true);\n        }\n    };\n\n    const stnAddDialogClose = (action: 'close' | string) => {\n        setIsAddDialogOpen(false);\n        if (action !== 'close') {\n            setStnSelected(action);\n            setIsOpen(true);\n        }\n    };\n\n    return (\n        <>\n            <Grid container spacing={1} className={classes.gridContainer}>\n                <Grid item xs={12} md={4} className={classes.gridItem}>\n                    <StationList selectedId={stnSelected} onAction={handleAction} />\n                </Grid>\n                <Grid item xs={8} className={classes.gridItem}>\n                    {stnSelected && (\n                        <StationEditDialog open={isOpen} stnId={stnSelected} onClose={() => setIsOpen(false)} />\n                    )}\n                </Grid>\n            </Grid>\n\n            <StationFabs onAction={fabsAction} />\n\n            <StationAddDialog open={isAddDialogOpen} onClose={stnAddDialogClose} />\n            <StationDeleteDialog\n                open={isDeleteDialogOpen}\n                onClose={() => setIsDeleteDialogOpen(false)}\n                stnId={stnToRemove}\n            />\n            {rmgStyle === RmgStyle.GZMTR && (\n                <AutoNumDialog open={isAutoNumDialogOpen} onClose={() => setIsAutoNumDialogOpen(false)} />\n            )}\n        </>\n    );\n};\n\nexport default PanelStations2;\n","import Panel from './panel2';\n\nexport default Panel;\n"],"names":["useStyles","makeStyles","theme","createStyles","listItemNum","marginRight","spacing","fontSize","listItemText","display","alignItems","whiteSpace","overflow","selectedItem","background","palette","action","hover","props","tpo","useAppSelector","store","helper","Paper","List","dense","disablePadding","map","stnId","StationEntry","isSelected","selectedId","onAction","Divider","t","useTranslation","classes","dispatch","useAppDispatch","rmgStyle","param","style","stationInfo","stn_list","name","num","useState","toggleEl","setToggleEl","handleAction","ListItem","className","RmgStyle","Typography","ListItemText","primary","secondary","replace","ListItemSecondaryAction","IconButton","size","onClick","e","currentTarget","Icon","Menu","anchorEl","open","Boolean","onClose","MenuItem","setCurrentStation","getRandomId","Math","floor","random","pow","toString","padStart","dialogContent","padding","select","width","marginLeft","React","stnList","allLocs","centre","upper","lower","newupper","newlower","prep","setPrep","pivot","setPivot","Object","keys","loc","setLoc","Array","fill","locOK","setLocOK","end","setEnd","endList","setEndList","newLocs","useMemo","length","y","getYShareMTR","state","res","parents","unshift","pop","children","push","shift","newBranchPossibleEnd","newStnPossibleLoc","useEffect","p","indexOf","handleClick","newId","pivotStationId","getState","stationList","includes","newInfo","secondaryName","services","Services","branch","left","right","transfer","info","tick_direc","ShortDirection","paid_area","osi_names","facility","Facilities","loop_pivot","newStnList","JSON","parse","stringify","linestart","slice","forEach","par","child","parChildLen","BranchStyle","lineend","setStationsBulk","addStation","Dialog","DialogTitle","DialogContent","component","ListItemIcon","Select","native","onChange","target","value","variant","formatStnName","key","idx","disabled","DialogActions","Button","color","autoFocus","prevProps","nextProps","NameTab","InterchangeTab","BranchTab","MoreTab","tab","height","minWidth","flexDirection","minHeight","marginBottom","paddingLeft","DialogWrapper","useTheme","isMobile","useMediaQuery","breakpoints","down","fullScreen","dividers","tabIndex","setTabIndex","tabNav","Tabs","indicatorColor","textColor","_","val","scrollButtons","i","Tab","label","icon","role","fallback","CircularProgress","StationDeleteDialog","currentStationIndex","current_stn_idx","isError","setIsError","checkStationCouldBeRemoved","removeStation","newCurrentId","filter","id","DialogContentText","Trans","i18nKey","join","ErrorDialog","memo","fab","position","bottom","fabEl","setFabEl","Tooltip","title","Fab","branches","branch0","updateStationNum","gridContainer","gridItem","stnSelected","setStnSelected","isOpen","setIsOpen","isAddDialogOpen","setIsAddDialogOpen","isAutoNumDialogOpen","setIsAutoNumDialogOpen","stnToRemove","setStnToRemove","isDeleteDialogOpen","setIsDeleteDialogOpen","Grid","container","item","xs","md","reverseStations"],"sourceRoot":""}