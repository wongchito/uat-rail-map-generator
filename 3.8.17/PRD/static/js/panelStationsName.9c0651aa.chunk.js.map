{"version":3,"sources":["panels/stations/edit-diag/name-tab.tsx"],"names":["NameTab","props","rmgStyle","useContext","CanvasContext","component","NumInput","NameInput","SecondaryNameInput","useStyles","makeStyles","createStyles","lineNumRoot","display","alignItems","justifyContent","border","borderRightWidth","borderRadius","padding","minWidth","height","fontSize","numInput","borderLeftWidth","width","marginTop","textAlign","nameInputZH","lineHeight","nameInputEN","fontFamily","join","collapseWrapper","collapseWrapperInner","secondaryNameRoot","secondaryNameParenthesis","secondaryNameInputRoot","flexDirection","secondaryNameInputZH","classes","ParamContext","param","dispatch","style","className","line_num","fullWidth","value","stn_list","stnId","num","onChange","e","type","target","t","useTranslation","name","linestart","placeholder","autoFocus","helperText","secondaryName","primary","color","edge","checked","_","in","unmountOnExit","wrapper","wrapperInner"],"mappings":"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","file":"static/js/panelStationsName.9c0651aa.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport {\n    TextField,\n    makeStyles,\n    createStyles,\n    List,\n    ListItem,\n    ListItemSecondaryAction,\n    Switch,\n    ListItemText,\n    Collapse,\n    ListItemIcon,\n    Icon,\n} from '@material-ui/core';\nimport { ParamContext, CanvasContext } from '../../../context';\nimport { useTranslation } from 'react-i18next';\n\ninterface Props {\n    stnId: string;\n}\n\nconst NameTab = (props: Props) => {\n    const { rmgStyle } = useContext(CanvasContext);\n\n    return (\n        <List component=\"div\">\n            {rmgStyle === 'gzmtr' && <NumInput {...props} />}\n            <NameInput {...props} />\n            {rmgStyle === 'gzmtr' && <SecondaryNameInput {...props} />}\n        </List>\n    );\n};\n\nexport default NameTab;\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        lineNumRoot: {\n            display: 'inline-flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            border: 'solid 2px',\n            borderRightWidth: 1,\n            borderRadius: '32px 0 0 32px',\n            padding: '2px 5px',\n            minWidth: 32,\n            height: 32,\n            fontSize: '1.5rem',\n        },\n        numInput: {\n            display: 'inline-block',\n            border: 'solid 2px',\n            borderLeftWidth: 1,\n            borderRadius: '0 32px 32px 0',\n            padding: '2px 5px',\n            width: 32,\n            height: 32,\n            '& .MuiInputBase-root': {\n                marginTop: 1.7,\n            },\n            '& .MuiInputBase-input': {\n                fontSize: '1.5rem',\n                padding: 'unset',\n                textAlign: 'center',\n            },\n        },\n        nameInputZH: {\n            '& .MuiInputBase-input': {\n                textAlign: 'center',\n                fontSize: '3rem',\n                lineHeight: '3rem',\n            },\n        },\n        nameInputEN: {\n            '& .MuiInputBase-input': {\n                textAlign: 'center',\n                fontSize: '1.2rem',\n                lineHeight: '1.2rem',\n            },\n        },\n        'nameInputZH-mtr': {\n            '& .MuiInputBase-input': {\n                fontFamily: [\n                    'Myriad Pro',\n                    'Vegur',\n                    'Noto Serif KR',\n                    'Noto Serif JP',\n                    'Noto Serif TC',\n                    'Noto Serif SC',\n                    'HiraMinProN-W6',\n                    'serif',\n                ].join(),\n            },\n        },\n        'nameInputEN-mtr': {\n            '& .MuiInputBase-input': {\n                fontFamily: ['Myriad Pro', 'Vegur', 'Arial', 'sans-serif'].join(),\n            },\n        },\n        'nameInputZH-gzmtr': {\n            '& .MuiInputBase-input': {\n                fontFamily: ['Arial', 'STKaiti', 'KaiTi', 'sans-serif'].join(),\n            },\n        },\n        collapseWrapper: {\n            justifyContent: 'center',\n        },\n        collapseWrapperInner: {\n            width: '65%',\n        },\n        secondaryNameRoot: {\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            '& .MuiInputBase-input': {\n                textAlign: 'center',\n            },\n        },\n        secondaryNameParenthesis: {\n            fontSize: '4rem',\n        },\n        secondaryNameInputRoot: {\n            display: 'flex',\n            flexDirection: 'column',\n            width: '100%',\n        },\n        secondaryNameInputZH: {\n            '& .MuiInputBase-input': {\n                fontSize: '1.5rem',\n                lineHeight: '1.5rem',\n            },\n        },\n    })\n);\n\nconst NumInput = (props: Props) => {\n    const classes = useStyles();\n    const { param, dispatch } = useContext(ParamContext);\n    return (\n        <ListItem style={{ justifyContent: 'center' }}>\n            <div className={classes.lineNumRoot}>\n                <span>{param.line_num}</span>\n            </div>\n            <TextField\n                fullWidth\n                className={classes.numInput}\n                value={param.stn_list[props.stnId]?.num}\n                onChange={e => dispatch({ type: 'UPDATE_STATION_NUM', stnId: props.stnId, num: e.target.value })}\n            />\n        </ListItem>\n    );\n};\n\nconst NameInput = (props: Props) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const { rmgStyle } = useContext(CanvasContext);\n    const { param, dispatch } = useContext(ParamContext);\n    const { name } = param.stn_list[props.stnId] || param.stn_list.linestart;\n    return (\n        <ListItem style={{ flexDirection: 'column' }}>\n            <TextField\n                fullWidth\n                placeholder={t('editor.zh')}\n                className={`${classes.nameInputZH} ${\n                    rmgStyle === 'gzmtr'\n                        ? classes['nameInputZH-gzmtr']\n                        : rmgStyle === 'mtr'\n                        ? classes['nameInputZH-mtr']\n                        : ''\n                }`}\n                value={name[0]}\n                onChange={e =>\n                    dispatch({ type: 'UPDATE_STATION_NAME', stnId: props.stnId, name: [e.target.value, name[1]] })\n                }\n                autoFocus\n            />\n            <TextField\n                fullWidth\n                placeholder={t('editor.en')}\n                className={`${classes.nameInputEN} ${rmgStyle === 'mtr' ? classes['nameInputEN-mtr'] : ''}`}\n                value={name[1]}\n                onChange={e =>\n                    dispatch({ type: 'UPDATE_STATION_NAME', stnId: props.stnId, name: [name[0], e.target.value] })\n                }\n                helperText={t('editor.backslashToWrap')}\n            />\n        </ListItem>\n    );\n};\n\nconst SecondaryNameInput = (props: Props) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const { param, dispatch } = useContext(ParamContext);\n    const { secondaryName } = param.stn_list[props.stnId] || param.stn_list.linestart;\n    return (\n        <>\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>text_fields</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('stations.edit.name.secondary')} />\n                <ListItemSecondaryAction>\n                    <Switch\n                        color=\"primary\"\n                        edge=\"end\"\n                        checked={secondaryName !== false}\n                        onChange={(_, checked) =>\n                            dispatch({\n                                type: 'UPDATE_STATION_SECONDARY_NAME',\n                                stnId: props.stnId,\n                                name: checked ? ['', ''] : false,\n                            })\n                        }\n                    />\n                </ListItemSecondaryAction>\n            </ListItem>\n            <Collapse\n                in={secondaryName !== false}\n                unmountOnExit\n                classes={{ wrapper: classes.collapseWrapper, wrapperInner: classes.collapseWrapperInner }}\n            >\n                <div className={classes.secondaryNameRoot}>\n                    <span className={classes.secondaryNameParenthesis}>{'('}</span>\n                    <div className={classes.secondaryNameInputRoot}>\n                        <TextField\n                            fullWidth\n                            placeholder={t('editor.zh')}\n                            className={classes.secondaryNameInputZH}\n                            value={secondaryName ? secondaryName[0] : ''}\n                            onChange={e =>\n                                dispatch({\n                                    type: 'UPDATE_STATION_SECONDARY_NAME',\n                                    stnId: props.stnId,\n                                    name: [e.target.value, secondaryName ? secondaryName[1] : ''],\n                                })\n                            }\n                        />\n                        <TextField\n                            fullWidth\n                            placeholder={t('editor.en')}\n                            value={secondaryName ? secondaryName[1] : ''}\n                            onChange={e =>\n                                dispatch({\n                                    type: 'UPDATE_STATION_SECONDARY_NAME',\n                                    stnId: props.stnId,\n                                    name: [secondaryName ? secondaryName[0] : '', e.target.value],\n                                })\n                            }\n                        />\n                    </div>\n                    <span className={classes.secondaryNameParenthesis}>{')'}</span>\n                </div>\n            </Collapse>\n        </>\n    );\n};\n"],"sourceRoot":""}