{"version":3,"sources":["panels/stations/edit-diag/name-list-items.tsx","panels/stations/edit-diag/interchange-tab.tsx"],"names":["useStyles","makeStyles","createStyles","listItemIcon","width","fontSize","textAlign","NameListItems","props","t","useTranslation","classes","React","className","style","variant","label","onChange","onUpdate","value","name","autoFocus","helperText","toString","intChipSetStyles","StationEditInterchangeTab","rmgStyle","useContext","CanvasContext","ParamContext","param","dispatch","stnTrans","stn_list","stnId","transfer","useState","osiNameDialogOpened","setOsiNameDialogOpened","addClick","index","newInfo","theme","type","setIdx","info","deleteClick","i","intIdx","margin","title","aria-label","onClick","setIndex","onDelete","includes","color","lineHeight","whiteSpace","marginRight","osi_names","join","OSINameDialog","open","osiName","onClose","intChip","borderRadius","height","intChipText","display","intChipTextZH","intChipTextEN","intChipLabel","paddingLeft","paddingRight","intChipDeleteIcon","marginLeft","InterchangeChipSet","intInfos","chipSelected","setChipSelected","nameDialogOpened","setNameDialogOpened","intChips","map","intInfo","key","deleteIcon","backgroundColor","undefined","lineName","concat","Array","memo","dividers","event","newOSIName","val","target","prevProps","nextProps","InterchangeMore","tickDirecChange","direction","useMemo","primary","native","tick_direc","d","edge","_","checked","isPaid","paid_area"],"mappings":"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","file":"static/js/panelStationsInterchange.2e99b64d.chunk.js","sourcesContent":["import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ListItem, ListItemIcon, TextField, makeStyles, createStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        listItemIcon: {\n            width: '1em',\n            fontSize: '1.5rem',\n            textAlign: 'center',\n        },\n    })\n);\n\ninterface Props {\n    onUpdate: (index: number) => (event: React.ChangeEvent<HTMLInputElement>) => void;\n    name: Name;\n}\n\nconst NameListItems = (props: Props) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    return React.useMemo(\n        () => (\n            <>\n                <ListItem>\n                    <ListItemIcon>\n                        <span className={classes.listItemIcon}>文</span>\n                    </ListItemIcon>\n                    <TextField\n                        style={{ width: '100%' }}\n                        variant=\"outlined\"\n                        label={t('stations.edit.name.nameZH')}\n                        onChange={props.onUpdate(0)}\n                        value={props.name[0]}\n                        autoFocus\n                    />\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <span className={classes.listItemIcon}>A</span>\n                    </ListItemIcon>\n                    <TextField\n                        style={{ width: '100%' }}\n                        variant=\"outlined\"\n                        label={t('stations.edit.name.nameEN')}\n                        onChange={props.onUpdate(1)}\n                        value={props.name[1]}\n                        helperText={t('stations.edit.name.nameENHelper')}\n                    />\n                </ListItem>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.name.toString()]\n    );\n};\n\nexport default NameListItems;\n","import React, { useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    List,\n    ListItem,\n    ListItemText,\n    ListItemSecondaryAction,\n    IconButton,\n    Icon,\n    Divider,\n    Button,\n    ListItemIcon,\n    Switch,\n    Chip,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Tooltip,\n    makeStyles,\n    createStyles,\n    Select,\n} from '@material-ui/core';\nimport { ParamContext, CanvasContext } from '../../../context';\nimport ColourDialog from '../../colour-diag';\nimport NameListItems from './name-list-items';\n\nconst StationEditInterchangeTab = (props: { stnId: string }) => {\n    const { t } = useTranslation();\n\n    const { rmgStyle } = useContext(CanvasContext);\n    const { param, dispatch } = useContext(ParamContext);\n    const stnTrans = param.stn_list[props.stnId].transfer;\n\n    const [osiNameDialogOpened, setOsiNameDialogOpened] = React.useState(false);\n\n    const addClick = (index: number) => {\n        let newInfo = [...param.theme, '轉綫', 'Line'] as InterchangeInfo;\n        dispatch({\n            type: 'ADD_STATION_INTERCHANGE_INFO',\n            stnId: props.stnId,\n            setIdx: index,\n            info: newInfo,\n        });\n    };\n\n    const deleteClick = (index: number, i: number) => {\n        dispatch({\n            type: 'REMOVE_STATION_INTERCHANGE_INFO',\n            stnId: props.stnId,\n            setIdx: index,\n            intIdx: i,\n        });\n    };\n\n    return (\n        <List>\n            <ListItem>\n                <ListItemText>\n                    <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.within')}</h3>\n                </ListItemText>\n                <ListItemSecondaryAction>\n                    <Tooltip title={t('stations.edit.interchange.add')} aria-label=\"add\">\n                        <IconButton onClick={() => addClick(0)}>\n                            <Icon>add_circle</Icon>\n                        </IconButton>\n                    </Tooltip>\n                </ListItemSecondaryAction>\n            </ListItem>\n            <ListItem>\n                <InterchangeChipSet stnId={props.stnId} setIndex={0} onDelete={i => deleteClick(0, i)} />\n            </ListItem>\n            {['mtr', 'shmetro'].includes(rmgStyle || '') && (\n                <>\n                    <Divider />\n                    <ListItem>\n                        <ListItemText>\n                            <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.osi')}</h3>\n                        </ListItemText>\n                        <ListItemSecondaryAction>\n                            <Button\n                                variant=\"outlined\"\n                                color=\"primary\"\n                                style={{ lineHeight: '1rem', whiteSpace: 'pre', marginRight: 5 }}\n                                onClick={() => setOsiNameDialogOpened(true)}\n                            >\n                                {stnTrans.osi_names[0] ? stnTrans.osi_names[0].join('\\r\\n') : '車站名\\r\\nStn Name'}\n                            </Button>\n                            <OSINameDialog\n                                open={osiNameDialogOpened}\n                                osiName={stnTrans.osi_names[0] || ['', '']}\n                                stnId={props.stnId}\n                                onClose={() => setOsiNameDialogOpened(false)}\n                            />\n                            <Tooltip title={t('stations.edit.interchange.add')} aria-label=\"add\">\n                                <IconButton onClick={() => addClick(1)}>\n                                    <Icon>add_circle</Icon>\n                                </IconButton>\n                            </Tooltip>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                    <ListItem>\n                        <InterchangeChipSet stnId={props.stnId} setIndex={1} onDelete={i => deleteClick(1, i)} />\n                    </ListItem>\n                    <ListItem>\n                        <span>{t('stations.edit.interchange.note')}</span>\n                    </ListItem>\n                </>\n            )}\n            {rmgStyle === 'mtr' && <InterchangeMore stnId={props.stnId} />}\n        </List>\n    );\n};\n\nexport default StationEditInterchangeTab;\n\nconst intChipSetStyles = makeStyles(() =>\n    createStyles({\n        intChip: {\n            borderRadius: 4.5,\n            height: 40,\n            lineHeight: '1rem',\n            margin: 2,\n        },\n        intChipText: {\n            display: 'block',\n            textAlign: 'center' as 'center',\n        },\n        intChipTextZH: {\n            fontSize: 18,\n            lineHeight: '1.2rem',\n        },\n        intChipTextEN: {\n            fontSize: '.75rem',\n            lineHeight: '.9rem',\n            whiteSpace: 'pre-wrap' as 'pre-wrap',\n        },\n        intChipLabel: {\n            paddingLeft: 6,\n            paddingRight: 6,\n        },\n        intChipDeleteIcon: {\n            marginLeft: -3,\n        },\n    })\n);\n\ninterface InterchangeChipSetProps {\n    stnId: string;\n    setIndex: number;\n    onDelete: (i: number) => void;\n}\n\nconst InterchangeChipSet = (props: InterchangeChipSetProps) => {\n    const classes = intChipSetStyles();\n\n    const { param, dispatch } = React.useContext(ParamContext);\n    const intInfos = param.stn_list[props.stnId].transfer.info[props.setIndex];\n\n    const [chipSelected, setChipSelected] = React.useState(-1);\n    const [nameDialogOpened, setNameDialogOpened] = React.useState(false);\n\n    const handleClick = (index: number) => {\n        setChipSelected(index);\n        setNameDialogOpened(true);\n    };\n\n    const nameDialogUpdate = (key: string, value: any) => {\n        if (key === 'theme') {\n            dispatch({\n                type: 'UPDATE_STATION_INTERCHANGE_INFO',\n                stnId: props.stnId,\n                setIdx: props.setIndex,\n                intIdx: chipSelected,\n                info: (value as string[]).concat(Array(2)) as InterchangeInfo,\n            });\n        }\n        if (key === 'name') {\n            dispatch({\n                type: 'UPDATE_STATION_INTERCHANGE_INFO',\n                stnId: props.stnId,\n                setIdx: props.setIndex,\n                intIdx: chipSelected,\n                info: Array(4).concat(value) as InterchangeInfo,\n            });\n        }\n    };\n\n    const intChips = intInfos?.map((intInfo, i) => {\n        let label = (\n            <span style={{ color: intInfo[3] }}>\n                <span className={`${classes.intChipText} ${classes.intChipTextZH}`}>{intInfo[4]}</span>\n                <span className={`${classes.intChipText} ${classes.intChipTextEN}`}>{intInfo[5]}</span>\n            </span>\n        );\n        return (\n            <Chip\n                key={i}\n                label={label}\n                className={classes.intChip}\n                classes={{\n                    label: classes.intChipLabel,\n                    deleteIcon: classes.intChipDeleteIcon,\n                }}\n                style={{ backgroundColor: intInfo[2] }}\n                onDelete={() => props.onDelete(i)}\n                onClick={() => handleClick(i)}\n            />\n        );\n    });\n\n    return (\n        <div>\n            {intChips}\n\n            <ColourDialog\n                open={nameDialogOpened}\n                theme={\n                    intInfos?.[chipSelected] === undefined\n                        ? (([] as any) as Theme)\n                        : [\n                              intInfos[chipSelected][0],\n                              intInfos[chipSelected][1],\n                              intInfos[chipSelected][2],\n                              intInfos[chipSelected][3] as '#fff' | '#000',\n                          ]\n                }\n                lineName={\n                    intInfos?.[chipSelected] === undefined\n                        ? ['', '']\n                        : [intInfos[chipSelected][4], intInfos[chipSelected][5]]\n                }\n                onUpdate={nameDialogUpdate}\n                onClose={() => setNameDialogOpened(false)}\n            />\n        </div>\n    );\n};\n\ninterface OSINameDialogProps {\n    open: boolean;\n    stnId: string;\n    osiName: Name;\n    onClose: () => void;\n}\n\nconst OSINameDialog = React.memo(\n    (props: OSINameDialogProps) => {\n        const { t } = useTranslation();\n\n        const { dispatch } = useContext(ParamContext);\n\n        const handleUpdate = (index: number) => (event: React.ChangeEvent<HTMLInputElement>) => {\n            let newOSIName = props.osiName.map((val, i) => (i === index ? event.target.value : val)) as Name;\n            dispatch({ type: 'UPDATE_STATION_OSI_NAME', stnId: props.stnId, name: newOSIName });\n        };\n\n        return (\n            <Dialog open={props.open} onClose={props.onClose}>\n                <DialogTitle>{t('stations.edit.interchange.osiName')}</DialogTitle>\n                <DialogContent dividers>\n                    <List>\n                        <NameListItems onUpdate={handleUpdate} name={props.osiName} />\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.onClose} color=\"primary\" autoFocus>\n                        {t('dialog.done')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.open === nextProps.open && prevProps.osiName.toString() === nextProps.osiName.toString()\n);\n\nconst InterchangeMore = (props: { stnId: string }) => {\n    const { t } = useTranslation();\n\n    const { param, dispatch } = React.useContext(ParamContext);\n    const stnTrans = param.stn_list[props.stnId].transfer;\n\n    const tickDirecChange = (event: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n        let direction = event.target.value;\n        if (direction === 'l' || direction === 'r')\n            dispatch({\n                type: 'UPDATE_STATION_TICK_DIREC',\n                stnId: props.stnId,\n                direction,\n            });\n    };\n\n    return React.useMemo(\n        () => (\n            <>\n                <Divider />\n                <ListItem>\n                    <ListItemText>\n                        <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.settings')}</h3>\n                    </ListItemText>\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>format_textdirection_l_to_r</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('stations.edit.interchange.tickDirec.label')} />\n                    <ListItemSecondaryAction>\n                        <Select native value={stnTrans.tick_direc} onChange={tickDirecChange}>\n                            {['l', 'r'].map(d => (\n                                <option key={d} value={d}>\n                                    {t('stations.edit.interchange.tickDirec.' + d)}\n                                </option>\n                            ))}\n                        </Select>\n                    </ListItemSecondaryAction>\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>attach_money</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('stations.edit.interchange.paidArea')} />\n                    <ListItemSecondaryAction>\n                        <Switch\n                            color=\"primary\"\n                            edge=\"end\"\n                            onChange={(_, checked) =>\n                                dispatch({\n                                    type: 'UPDATE_STATION_PAID_AREA',\n                                    stnId: props.stnId,\n                                    isPaid: checked,\n                                })\n                            }\n                            checked={stnTrans.paid_area}\n                        />\n                    </ListItemSecondaryAction>\n                </ListItem>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.stnId, stnTrans.tick_direc, stnTrans.paid_area]\n    );\n};\n"],"sourceRoot":""}