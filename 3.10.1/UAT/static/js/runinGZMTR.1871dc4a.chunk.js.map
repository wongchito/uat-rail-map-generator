{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","svgs/strip/strip-gzmtr.tsx","svgs/gzmtr/station-number.tsx","svgs/runin/info-gzmtr.tsx","svgs/runin/runin-gzmtr.tsx"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","StripGZMTR","props","stripHeight","variant","indicatorLight","React","useMemo","cy","r","fill","rx","ry","x","y","height","width","transform","id","style","isShowLight","isShowPSD","PSD","memo","isInStrip","includes","psdDy","textAnchor","MonoColour","black","className","fontSize","dy","prevProps","nextProps","StationNumber","lineNum","stnNum","others","lineNumEl","useRef","stnNumEl","useState","lineNumBBox","setLineNumBBox","stnNumBBox","setStnNumBBox","useEffect","current","getBBox","lineNumScale","Math","max","stnNumScale","ref","InfoGZMTR","svgHeight","useAppSelector","store","param","svg_height","svgWidths","svgWidth","direction","infoPanelType","info_panel_type","lineNumber","line_num","currentStationIndex","current_stn_idx","curStnInfo","stn_list","curNameEl","nameBBox","setNameBBox","name","nextStnId","ShortDirection","left","otisTransforms","CanvasType","RunIn","next","PanelTypeGZMTR","gz2otis","BigName","curName","curSecName","secondaryName","split","num","nextId","nextIds","forwardRef","map","txt","secName","BigSecName","nameEl","bBox","setBBox","toString","BigStnNum","d","BigNext","nextInfo","nextBBox","setNextBBox","nextNameEl","nextNameZHCount","nameBcrX","BigNextSec","BigNext2","routes","helper","stationList","nextNames","nextNameEls","prevBBox","forEach","el","validEnds","stnId","reduce","acc","route","concat","filter","s","slice","names","Fragment","j","join","replace","PlatformNum","RunInGZMTR","platformNumber","platform_num","psdNumber","psd_num","platform","cx","OtisFrame","strokeWidth","stroke","y2","x2"],"mappings":"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","file":"static/js/runinGZMTR.1871dc4a.chunk.js","sourcesContent":["import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React from 'react';\nimport { MonoColour, PanelTypeGZMTR, PanelTypeShmetro } from '../../constants/constants';\n\ninterface Props {\n    variant: PanelTypeGZMTR | PanelTypeShmetro;\n    isShowLight: boolean;\n    isShowPSD: false | string;\n}\n\nconst StripGZMTR = (props: Props) => {\n    const stripHeight = (variant => {\n        switch (variant) {\n            case 'gz28':\n            case 'gz2otis':\n            case 'gz6':\n            case 'gzgf':\n                return 60;\n            case 'gz1':\n            case 'gz3':\n                return 40;\n            case 'gz4':\n            case 'gz5':\n            case 'gz1421':\n                return 20;\n            default:\n                return 0;\n        }\n    })(props.variant);\n\n    const indicatorLight = React.useMemo(() => {\n        switch (props.variant) {\n            case 'gz1':\n                return <circle cy={-58} r={16} fill=\"red\" />;\n            case 'gz28':\n            case 'gz2otis':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz3':\n                return <rect x={-15} y={-55} height={30} width={30} fill=\"red\" />;\n            case 'gz6':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"white\" />;\n            case 'gz1421':\n                return <ellipse cy={-38} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz5':\n                return <rect x={-30} y={-70} height={30} width={60} fill=\"orange\" />;\n            case 'gz4':\n                return <rect x={-50} y={-50} height={25} width={100} fill=\"whitesmoke\" />;\n            case 'gzgf':\n                return <rect x={-30} y={-58} height={30} width={60} fill=\"orange\" />;\n            default:\n                return <></>;\n        }\n    }, [props.variant]);\n\n    const stripDy = -20;\n\n    return (\n        <g transform={`translate(0,${props.variant === 'gz4' ? stripDy : 0})`}>\n            <rect\n                id=\"strip_gz\"\n                style={{\n                    ['--height' as any]: `${stripHeight}px`,\n                }}\n            />\n            <g\n                style={{\n                    transform: 'translate(calc(var(--rmg-svg-width) / 2),var(--rmg-svg-height))',\n                }}\n            >\n                {props.isShowLight && indicatorLight}\n            </g>\n            {props.isShowPSD !== false && <PSD {...props} />}\n        </g>\n    );\n};\n\nexport default StripGZMTR;\n\nconst PSD = React.memo(\n    (props: Props) => {\n        /**\n         * Flag of whether PSD number is stick within the strip area. If `true`, should fill with white, otherwise, fill with theme colour.\n         */\n        const isInStrip = ['gz28', 'gz2otis', 'gz6', 'gzgf'].includes(props.variant);\n        const psdDy = ((variant: PanelTypeGZMTR | PanelTypeShmetro) => {\n            switch (variant) {\n                case 'gz1':\n                case 'gz3':\n                    return '82px';\n                case 'gz4':\n                    return '65px';\n                case 'gz5':\n                    return '80px';\n                case 'gz1421':\n                    return '62px';\n                default:\n                    return '58px';\n            }\n        })(props.variant);\n\n        return (\n            <g\n                textAnchor=\"middle\"\n                fill={isInStrip ? MonoColour.black : 'var(--rmg-theme-fg)'}\n                style={{\n                    ['--psd-dy' as any]: psdDy,\n                    transform: 'translate(var(--translate-x), var(--translate-y))',\n                    ['--translate-x' as any]: 'calc(var(--rmg-svg-width) / 2 + 80px)',\n                    ['--translate-y' as any]: 'calc(var(--rmg-svg-height) - var(--psd-dy, 58px))',\n                }}\n            >\n                <rect height={40} width={40} rx={4} x={-20} fill={isInStrip ? '#fff' : 'var(--rmg-theme-colour)'} />\n                <text className=\"rmg-name__en\" fontSize={20} dy={12}>\n                    {props.isShowPSD}\n                </text>\n                <text className=\"rmg-name__zh\" fontSize={12} dy={26}>\n                    屏蔽门\n                </text>\n                <text className=\"rmg-name__en\" fontSize={6.5} dy={36}>\n                    Screen Door\n                </text>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.variant === nextProps.variant && prevProps.isShowPSD === nextProps.isShowPSD\n);\n","import React, { SVGProps, useEffect, useRef, useState } from 'react';\n\nconst TEXT_MAX_WIDTH = 15;\n\ninterface StationNumberProps extends SVGProps<SVGGElement> {\n    lineNum: string;\n    stnNum: string;\n}\n\nexport default function StationNumber(props: StationNumberProps) {\n    const { lineNum, stnNum, ...others } = props;\n\n    const lineNumEl = useRef<SVGTextElement | null>(null);\n    const stnNumEl = useRef<SVGTextElement | null>(null);\n\n    const [lineNumBBox, setLineNumBBox] = useState({ width: 0 } as DOMRect);\n    const [stnNumBBox, setStnNumBBox] = useState({ width: 0 } as DOMRect);\n\n    useEffect(() => {\n        setLineNumBBox(lineNumEl.current!.getBBox());\n        setStnNumBBox(stnNumEl.current!.getBBox());\n    }, [lineNum, stnNum]);\n\n    const lineNumScale = TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, lineNumBBox.width);\n    const stnNumScale =\n        lineNum.length === 2 && stnNum.length === 2\n            ? lineNumScale\n            : TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, stnNumBBox.width);\n\n    return (\n        <g textAnchor=\"middle\" fontSize={13.5} {...others}>\n            <g transform={`translate(-9.25,0)scale(${lineNumScale})`}>\n                <text ref={lineNumEl} className=\"rmg-name__zh\">\n                    {lineNum}\n                </text>\n            </g>\n            <g transform={`translate(9.25,0)scale(${stnNumScale})`}>\n                <text ref={stnNumEl} className=\"rmg-name__zh\">\n                    {stnNum}\n                </text>\n            </g>\n        </g>\n    );\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport StationNumber from '../gzmtr/station-number';\nimport { CanvasType, Name, PanelTypeGZMTR, ShortDirection } from '../../constants/constants';\nimport { useAppSelector } from '../../redux';\n\nconst InfoGZMTR = () => {\n    const svgHeight = useAppSelector(store => store.param.svg_height);\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const direction = useAppSelector(store => store.param.direction);\n    const infoPanelType = useAppSelector(store => store.param.info_panel_type);\n    const lineNumber = useAppSelector(store => store.param.line_num);\n    const currentStationIndex = useAppSelector(store => store.param.current_stn_idx);\n    const curStnInfo = useAppSelector(store => store.param.stn_list[currentStationIndex]);\n\n    const curNameEl = React.useRef<SVGGElement | null>(null);\n    const [nameBBox, setNameBBox] = useState({ width: 0 } as DOMRect);\n    useEffect(\n        () => setNameBBox(curNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [curStnInfo.name[0], curStnInfo.name[1]]\n    );\n\n    const nextStnId = curStnInfo[direction === ShortDirection.left ? 'parents' : 'children'];\n\n    const otisTransforms = {\n        name: `translate(${((direction === ShortDirection.left ? 1 : -1) * svgWidths[CanvasType.RunIn]) / 4},45)`,\n        next: `translate(${((direction === ShortDirection.left ? 1 : -1) * svgWidths[CanvasType.RunIn]) / 10},45)`,\n    };\n\n    return (\n        <g>\n            <g transform={infoPanelType === PanelTypeGZMTR.gz2otis ? otisTransforms.name : ''}>\n                <BigName\n                    ref={curNameEl}\n                    curName={curStnInfo.name}\n                    curSecName={curStnInfo.secondaryName}\n                    style={{\n                        ['--translate-y' as any]: `${\n                            0.5 * svgHeight -\n                            50 -\n                            (curStnInfo.name[1].split('\\\\').length - 1) * 18 -\n                            (curStnInfo.secondaryName ? 58 / 2 : 0)\n                        }px`,\n                    }}\n                />\n\n                <BigStnNum\n                    lineNum={lineNumber}\n                    stnNum={curStnInfo.num}\n                    style={{\n                        ['--translate-x' as any]: `${(svgWidths[CanvasType.RunIn] + nameBBox.width) / 2 + 55}px`,\n                        ['--translate-y' as any]: `${\n                            0.5 * svgHeight -\n                            30 -\n                            (curStnInfo.name[1].split('\\\\').length - 1) * 18 -\n                            (curStnInfo.secondaryName ? 58 / 2 : 0)\n                        }px`,\n                    }}\n                />\n            </g>\n\n            <g transform={infoPanelType === PanelTypeGZMTR.gz2otis ? otisTransforms.next : ''}>\n                {nextStnId.includes('linestart') || nextStnId.includes('lineend') ? (\n                    <></>\n                ) : nextStnId.length === 1 ? (\n                    <BigNext nextId={nextStnId[0]} nameBBox={nameBBox} />\n                ) : (\n                    <BigNext2 nextIds={nextStnId} nameBBox={nameBBox} />\n                )}\n            </g>\n        </g>\n    );\n};\n\nexport default InfoGZMTR;\n\nconst BigName = React.forwardRef(\n    (props: { curName: Name; curSecName: false | Name } & React.SVGProps<SVGGElement>, ref: React.Ref<SVGGElement>) => {\n        const { curName, curSecName, ...others } = props;\n\n        return (\n            <g id=\"big_name\" {...others}>\n                {React.useMemo(\n                    () => (\n                        <g ref={ref}>\n                            <text className=\"rmg-name__zh\" fontSize={90}>\n                                {curName[0]}\n                            </text>\n                            <g fontSize={36} className=\"rmg-name__en\">\n                                {curName[1].split('\\\\').map((txt, i) => (\n                                    <text key={i} dy={70 + i * 36}>\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </g>\n                    ),\n                    // eslint-disable-next-line react-hooks/exhaustive-deps\n                    [curName]\n                )}\n\n                {curSecName && (\n                    <BigSecName\n                        secName={curSecName}\n                        transform={`translate(0,${70 + curName[1].split('\\\\').length * 36})`}\n                    />\n                )}\n            </g>\n        );\n    }\n);\n\nconst BigSecName = (props: { secName: Name } & React.SVGProps<SVGGElement>) => {\n    const { secName, ...others } = props;\n    const nameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as DOMRect);\n    useEffect(\n        () => setBBox(nameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.secName.toString()]\n    );\n\n    return (\n        <g {...others}>\n            <g transform=\"translate(0,4.5)\" fontSize={36}>\n                <text textAnchor=\"end\" x={bBox.x - 3} className=\"rmg-name__zh\">\n                    {'('}\n                </text>\n                <text textAnchor=\"start\" x={bBox.width + bBox.x + 3} className=\"rmg-name__zh\">\n                    {')'}\n                </text>\n            </g>\n            <g ref={nameEl} textAnchor=\"middle\">\n                <text className=\"rmg-name__zh\" fontSize={26}>\n                    {secName[0]}\n                </text>\n                <text dy={22} className=\"rmg-name__en\" fontSize={14}>\n                    {secName[1]}\n                </text>\n            </g>\n        </g>\n    );\n};\n\nconst BigStnNum = (props: { lineNum: string; stnNum: string } & React.SVGProps<SVGGElement>) => {\n    const { lineNum, stnNum, ...others } = props;\n\n    return (\n        <g id=\"big_stn_num\" {...others}>\n            {React.useMemo(\n                () => (\n                    <>\n                        <path\n                            className=\"rmg-stn rmg-stn--future\"\n                            d=\"M 0,12.95 V -12.95 H -12.95 a 12.95,12.95 0 0,0 0,25.9 h 25.9 a 12.95,12.95 0 0,0 0,-25.9 H 0 \"\n                        />\n                        <StationNumber transform=\"scale(1.4)\" {...{ lineNum, stnNum }} />\n                    </>\n                ),\n                [lineNum, stnNum]\n            )}\n        </g>\n    );\n};\n\nconst BigNext = (props: { nextId: string; nameBBox: DOMRect }) => {\n    const { nextId, nameBBox } = props;\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const direction = useAppSelector(store => store.param.direction);\n    const nextInfo = useAppSelector(store => store.param.stn_list[nextId]);\n    const { name, secondaryName } = nextInfo;\n\n    const [nextBBox, setNextBBox] = useState({ width: 0 } as DOMRect);\n    const nextNameEl = React.useRef<SVGGElement | null>(null);\n    useEffect(\n        () => setNextBBox(nextNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [name.toString()]\n    );\n\n    const nextNameZHCount = name[0].length;\n    const nameBcrX = (svgWidths[CanvasType.RunIn] - nameBBox.width) / 2;\n\n    return (\n        <>\n            <g id=\"big_next\">\n                <g\n                    textAnchor=\"middle\"\n                    style={{\n                        ['--translate-x' as any]:\n                            direction === ShortDirection.left\n                                ? '80px'\n                                : nextNameZHCount <= 2\n                                ? `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width - 70}px`\n                                : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width - 35 * 1.5}px`,\n                    }}\n                >\n                    <text className=\"rmg-name__zh\" fontSize={35}>\n                        下站\n                    </text>\n                    <text className=\"rmg-name__en\" fontSize={17} dy={30}>\n                        Next\n                    </text>\n                </g>\n                <g\n                    textAnchor=\"start\"\n                    ref={nextNameEl}\n                    style={{\n                        ['--translate-x' as any]:\n                            direction === ShortDirection.left\n                                ? nextNameZHCount <= 2\n                                    ? `${115 + 35}px`\n                                    : `${115 + 35 / 2}px`\n                                : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width}px`,\n                    }}\n                >\n                    <text className=\"rmg-name__zh\" fontSize={35}>\n                        {name[0]}\n                    </text>\n                    <g fontSize={17}>\n                        {name[1].split('\\\\').map((txt: string, i: number) => (\n                            <text className=\"rmg-name__en\" dy={30 + i * 17} key={i}>\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n                </g>\n                {secondaryName && (\n                    <g\n                        textAnchor=\"middle\"\n                        style={{\n                            ['--translate-x' as any]:\n                                direction === ShortDirection.left\n                                    ? nextNameZHCount <= 2\n                                        ? `${115 + 35}px`\n                                        : `${115 + 35 / 2}px`\n                                    : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width}px`,\n                        }}\n                    >\n                        <BigNextSec\n                            secName={secondaryName}\n                            transform={`translate(${nextBBox.width / 2},${30 + name[1].split('\\\\').length * 17 + 5})`}\n                        />\n                    </g>\n                )}\n            </g>\n            <path\n                id=\"arrow\"\n                d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\"\n                fill=\"black\"\n                style={{\n                    ['--translate-x' as any]:\n                        direction === ShortDirection.left\n                            ? `${\n                                  (115 + 35 * ((nextNameZHCount <= 2 ? 1 : 0.5) + nextNameZHCount) + nameBcrX) / 2 - 20\n                              }px`\n                            : `${\n                                  (svgWidths[CanvasType.RunIn] -\n                                      45 -\n                                      nextBBox.width -\n                                      (nextNameZHCount <= 2 ? 70 + 35 : 35 * 2.5) +\n                                      nameBcrX +\n                                      props.nameBBox.width +\n                                      55 +\n                                      18.5 * 1.4) /\n                                      2 +\n                                  20\n                              }px`,\n                    ['--rotate' as any]: direction === ShortDirection.left ? '0deg' : '180deg',\n                }}\n            />\n        </>\n    );\n};\n\nconst BigNextSec = (props: { secName: Name } & React.SVGProps<SVGGElement>) => {\n    const { secName, ...others } = props;\n\n    const nameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as DOMRect);\n    useEffect(\n        () => setBBox(nameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.secName.toString()]\n    );\n\n    return (\n        <g {...others}>\n            <g transform=\"translate(0,2.5)\" fontSize={25}>\n                <text textAnchor=\"end\" x={bBox.x - 3} className=\"rmg-name__zh\">\n                    {'('}\n                </text>\n                <text textAnchor=\"start\" x={bBox.width + bBox.x + 3} className=\"rmg-name__zh\">\n                    {')'}\n                </text>\n            </g>\n            <g ref={nameEl}>\n                <text className=\"rmg-name__zh\" fontSize={18}>\n                    {secName[0]}\n                </text>\n                <text className=\"rmg-name__en\" fontSize={10} dy={15}>\n                    {secName[1]}\n                </text>\n            </g>\n        </g>\n    );\n};\n\nconst BigNext2 = (props: { nextIds: string[]; nameBBox: DOMRect }) => {\n    const { nextIds, nameBBox } = props;\n    const { routes } = useAppSelector(store => store.helper);\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const direction = useAppSelector(store => store.param.direction);\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    const nextNames = nextIds.map(id => stationList[id].name);\n    const [nextBBox, setNextBBox] = useState({ width: 0 } as DOMRect);\n    const nextNameEls = useRef<(SVGGElement | null)[]>([]);\n    useEffect(\n        () => {\n            setNextBBox(prevBBox => ({ ...prevBBox, width: 0 }));\n            nextNameEls.current.forEach(el => {\n                let nextBBox = el?.getBBox();\n                setNextBBox(prevBBox => {\n                    if (nextBBox) {\n                        return prevBBox.width > nextBBox.width ? prevBBox : nextBBox;\n                    } else {\n                        return prevBBox;\n                    }\n                });\n            });\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [nextNames.toString()]\n    );\n\n    const validEnds = props.nextIds.map(stnId =>\n        routes.reduce(\n            (acc, route) =>\n                // filter routes not containing next station's id\n                route.includes(stnId)\n                    ? acc.concat(\n                          route\n                              .filter(s => !['linestart', 'lineend'].includes(s))\n                              // select first/last station's id\n                              .slice(direction === ShortDirection.left ? 0 : -1)[0]\n                      )\n                    : acc,\n            [] as string[]\n        )\n    );\n\n    const nextNameZHCount = Math.max(...nextNames.map(names => names[0].length));\n    const nameBcrX = (svgWidths[CanvasType.RunIn] - nameBBox.width) / 2;\n\n    return (\n        <>\n            <g id=\"big_next_2\">\n                {nextNames.map((name, i) => {\n                    return (\n                        <React.Fragment key={i}>\n                            <g\n                                textAnchor=\"middle\"\n                                style={{\n                                    ['--translate-x' as any]:\n                                        direction === ShortDirection.left\n                                            ? '72px'\n                                            : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width - 41}px`,\n                                }}\n                            >\n                                <text className=\"rmg-name__zh\">下站</text>\n                                <text className=\"rmg-name__en\" y={22}>\n                                    Next\n                                </text>\n                            </g>\n                            <g\n                                ref={el => (nextNameEls.current[i] = el)}\n                                textAnchor=\"start\"\n                                style={{\n                                    ['--translate-x' as any]:\n                                        direction === ShortDirection.left\n                                            ? '113px'\n                                            : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width}px`,\n                                }}\n                            >\n                                <text className=\"rmg-name__zh\">{name[0]}</text>\n                                {name[1].split('\\\\').map((txt, j) => (\n                                    <text key={j} className=\"rmg-name__en\" y={22 + j * 13}>\n                                        {txt}\n                                    </text>\n                                ))}\n                                <text className=\"rmg-name__zh\" y={-35}>\n                                    {validEnds[i].map(s => stationList[s].name[0]).join('/') + '方向'}\n                                </text>\n                                <text className=\"rmg-name__en rmg-name__gzmtr--next2-dest\" y={-20}>\n                                    {'Towards ' +\n                                        validEnds[i]\n                                            .map(s => stationList[s].name[1])\n                                            .join('/')\n                                            .replace('\\\\', ' ')}\n                                </text>\n                            </g>\n                        </React.Fragment>\n                    );\n                })}\n            </g>\n            <path\n                id=\"arrow\"\n                d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\"\n                fill=\"black\"\n                style={{\n                    ['--translate-x' as any]:\n                        direction === ShortDirection.left\n                            ? `${(99 + 27 * (1 + nextNameZHCount) + nameBcrX) / 2 - 20}px`\n                            : `${\n                                  (svgWidths[CanvasType.RunIn] -\n                                      45 -\n                                      nextBBox.width -\n                                      41 -\n                                      27 +\n                                      nameBcrX +\n                                      props.nameBBox.width +\n                                      55 +\n                                      18.5 * 1.4) /\n                                      2 +\n                                  20\n                              }px`,\n                    ['--rotate' as any]: direction === ShortDirection.left ? '0deg' : '180deg',\n                }}\n            />\n        </>\n    );\n};\n","import React from 'react';\nimport StripGZMTR from '../strip/strip-gzmtr';\nimport InfoGZMTR from './info-gzmtr';\nimport { useAppSelector } from '../../redux';\nimport { CanvasType, PanelTypeGZMTR, ShortDirection } from '../../constants/constants';\n\nconst RunInGZMTR = () => {\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const direction = useAppSelector(store => store.param.direction);\n    const infoPanelType = useAppSelector(store => store.param.info_panel_type);\n    const platformNumber = useAppSelector(store => store.param.platform_num);\n    const psdNumber = useAppSelector(store => store.param.psd_num);\n\n    const otisTransforms = {\n        platform: `translate(${direction === ShortDirection.left ? 50 : -50},45)`,\n    };\n    return (\n        <>\n            <StripGZMTR\n                variant={infoPanelType}\n                isShowLight={infoPanelType !== PanelTypeGZMTR.gz2otis}\n                isShowPSD={infoPanelType !== PanelTypeGZMTR.gz2otis && psdNumber}\n            />\n\n            <g transform={infoPanelType === PanelTypeGZMTR.gz2otis ? otisTransforms.platform : ''}>\n                <PlatformNum\n                    num={platformNumber}\n                    style={{\n                        ['--translate-x' as any]: `${\n                            direction === ShortDirection.left ? svgWidths[CanvasType.RunIn] - 100 : 100\n                        }px`,\n                    }}\n                />\n            </g>\n\n            <InfoGZMTR />\n\n            {infoPanelType === PanelTypeGZMTR.gz2otis && <OtisFrame />}\n        </>\n    );\n};\n\nexport default RunInGZMTR;\n\nconst PlatformNum = (props: { num: string | false } & React.SVGProps<SVGGElement>) => {\n    const { num, ...others } = props;\n\n    return (\n        <g id=\"platform\" {...others}>\n            {React.useMemo(\n                () => (\n                    <>\n                        <circle cx={0} cy={0} r={30} fill=\"var(--rmg-theme-colour)\" />\n                        <text className=\"rmg-name__en\" fontSize={38} dy={-9.5}>\n                            {num}\n                        </text>\n                        <text className=\"rmg-name__zh\" fontSize={13} dy={10}>\n                            站台\n                        </text>\n                        <text className=\"rmg-name__en\" fontSize={9} dy={21}>\n                            Platform\n                        </text>\n                    </>\n                ),\n                [num]\n            )}\n        </g>\n    );\n};\n\nconst OtisFrame = () => {\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const svgHeight = useAppSelector(store => store.param.svg_height);\n    return (\n        <g id=\"otis_frame\" strokeWidth={3} stroke=\"black\">\n            <line y2={svgHeight} transform={`translate(${svgWidths[CanvasType.RunIn] / 2},0)`} />\n            <line x2={svgWidths[CanvasType.RunIn]} transform=\"translate(0,90)\" />\n        </g>\n    );\n};\n"],"sourceRoot":""}