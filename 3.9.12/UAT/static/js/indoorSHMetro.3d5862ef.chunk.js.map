{"version":3,"sources":["svgs/indoor/station-shmetro.tsx","svgs/indoor/indoor-shmetro.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","svgs/railmap/methods/share.ts","svgs/railmap/methods/mtr.ts"],"names":["StationSHMetro","props","param","useContext","ParamContext","stnInfo","stn_list","stnId","stationIconStyle","transfer","info","reduce","acc","cur","length","name","infos","stnState","direction","nameDirection","xlinkHref","stroke","StationNameGElement","transform","x1","x2","y1","y2","sum","intInfos","concat","arrowDirection","StationName","stnName","fill","osiInfos","React","forwardRef","ref","others","split","nameENLn","textAnchor","useMemo","map","txt","i","array","className","dy","fontSize","IntBoxGroup","intNameId","intInfo","color","lineNames","filter","match","replace","join","lineNamesEn","trim","id","Fragment","offset","stopColor","OSIText","DefsSHMetro","memo","strokeWidth","r","d","leftWideFactor","stnList","res","parents","children","rightWideFactor","IndoorSHMetro","routes","branches","deps","adjMat","adjacencyList","criticalPath","criticalPathMethod","realCP","nodes","slice","xShares","console","log","Object","keys","getXShareMTR","toString","JSON","stringify","lineXs","svgWidth","indoor","padding","xs","len","yShares","StationsMTR","getYShares","ys","branch_spacing","stnStates","getStnState","current_stn_idx","linePaths","drawLine","svg_height","Lines","paths","main","path","pass","prevProps","nextProps","StationGroup","includes","branch","indexOf","InfoElements","line_name","dx","x","y","width","height","rx","_objectWithoutProperties","source","excluded","key","target","sourceKeys","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","leftW","rightW","a","c","from","to","allLengths","criticalPaths","forEach","child","cp","push","unshift","maxLength","Math","max","branchOfStn","partSource","partSink","leftOpenJaw","lens","currentId","Set","ShortDirection","right","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","namePoss","pathWeight","Infinity","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","stnPred","getYShare","stnIds","realXs","realYs","e","prevId","prevY","prevX","stnDX","stnExtraH","stnSpareH","warn","stations","lineMainStns","linePassStns","_linePath","ls","val","tick_direc"],"mappings":"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","file":"static/js/indoorSHMetro.3d5862ef.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport { ParamContext } from '../../context';\nimport { InterchangeInfo, Name } from \"../../constants/constants\";\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n    nameDirection: 'upward' | 'downward';\n}\n\nconst StationSHMetro = (props: Props) => {\n    const { param } = useContext(ParamContext);\n    const stnInfo = param.stn_list[props.stnId];\n\n    let stationIconStyle = '';\n    if (stnInfo.transfer.info.reduce((acc, cur) => acc + cur.length, 0)) stationIconStyle = 'int2_indoor_sh';\n    else stationIconStyle = 'stn_indoor_sh';\n\n    return (\n        <>\n            <StationNameGElement\n                name={stnInfo.name}\n                infos={stnInfo.transfer.info}\n                stnState={props.stnState}\n                direction={param.direction}\n                nameDirection={props.nameDirection}\n            />\n            <use\n                xlinkHref={`#${stationIconStyle}`}\n                stroke='var(--rmg-theme-colour)'\n            />\n        </>\n    );\n};\n\nexport default StationSHMetro;\n\ninterface StationNameGElementProps {\n    name: Name;\n    infos: InterchangeInfo[][];\n    stnState: -1 | 0 | 1;\n    direction: 'l' | 'r';\n    nameDirection: 'upward' | 'downward';\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    return (\n        <g transform={`translate(0,${props.nameDirection === 'upward' ? 60 : -30})`}>\n            <line\n                x1={-30}\n                x2={30}\n                y1={props.nameDirection === 'upward' ? -23 : -10}\n                y2={props.nameDirection === 'upward' ? -23 : -10}\n                stroke='black'\n            />\n            <line\n                y1={props.nameDirection === 'upward' ? -23 : -10}\n                y2={props.nameDirection === 'upward' ? -23 - 25 : 20}\n                stroke='black'\n            />\n\n            {props.infos.reduce((sum, infos) => sum + infos.length, 0) && (<IntBoxGroup\n                intInfos={props.infos[1] ? ([] as InterchangeInfo[]).concat(...props.infos) : props.infos[0]}\n                arrowDirection={props.nameDirection}\n            />)}\n\n            <StationName\n                stnName={props.name}\n                nameDirection={props.nameDirection}\n                fill='black'\n            />\n\n            {props.infos[1]?.length && (\n                <g transform={`translate(0,${props.nameDirection === 'upward' ? -185 : 150})`}>\n                    <OSIText osiInfos={props.infos[1]} />\n                </g>\n            )}\n        </g>\n    );\n};\n\nconst StationName = React.forwardRef(\n    (props: { stnName: Name, nameDirection: 'upward' | 'downward' } & React.SVGProps<SVGGElement>, ref: React.Ref<SVGGElement>) => {\n        const { stnName, nameDirection, ...others } = props\n        const name = stnName[0].split('\\\\')\n        const nameENLn = stnName[1].split('\\\\').length\n\n        return (\n            <g ref={ref} {...others} textAnchor='middle'\n                transform={`translate(0,${nameDirection === 'upward' ? -2 : -30 - 12 * (nameENLn - 1)})`}>\n                {React.useMemo(\n                    () => (\n                        <>\n                            {name.map((txt, i, array) => (<text key={i} className=\"rmg-name__zh\"\n                                dy={nameDirection === 'upward' ? 16 * i : (array.length - 1 - i) * -16}>\n                                {txt}\n                            </text>))}\n                            <g fontSize={9.6}>\n                                {stnName[1].split('\\\\').map((txt, i) => (\n                                    <text key={i} className=\"rmg-name__en\"\n                                        dy={12 * (i + 1) + (nameDirection === 'upward' ? name.length > 1 ? name.length * 7.5 : 0 : 0)}>\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </>\n                    ),\n                    // eslint-disable-next-line react-hooks/exhaustive-deps\n                    [...stnName]\n                )}\n            </g>\n        );\n    }\n);\n\nconst IntBoxGroup = (props: { intInfos: InterchangeInfo[]; arrowDirection: 'upward' | 'downward' } & React.SVGProps<SVGGElement>) => {\n    const { intInfos, arrowDirection } = props\n\n    // name each different linearGradient that will fill the arrow \n    const intNameId = intInfos\n        .map(intInfo => intInfo[2])\n        .reduce((name, color) => name + color, \"\")\n\n    // get the interchange line names\n    // TODO: support out-of-system transfer InterchangeInfo[2][] (e.g. maglev)\n    const lineNames = [intInfos\n        .filter(intInfo => intInfo[4].match(/^\\d+.*$/))\n        .map(intInfo => intInfo[4].replace(/^(\\d+)(.*)$/, \"$1\"))\n        .join('，')\n        .concat('号线'), intInfos\n            .filter(intInfo => !intInfo[4].match(/^\\d+.*$/))\n            .map(intInfo => intInfo[4])\n            .join('，')].filter(name => name && name !== '号线').join('，')\n    const lineNamesEn = intInfos\n        .map(intInfo => intInfo[5].replace('Line', '')\n            .replace('line', '').trim())\n        .join(',')\n\n    return (<g>\n        <use\n            xlinkHref=\"#int_indoor_arrow_sh\"\n            transform={`translate(0,${arrowDirection === 'upward' ? -74 : 44})rotate(${arrowDirection === 'upward' ? 0 : 180})`}\n            fill={intInfos.length === 1 ? intInfos[0][2] : `url(#grad${intNameId})`} />\n\n        {intInfos.length > 1 && (<>\n            <linearGradient id={`grad${intNameId}`} y1=\"0\" y2=\"0\"\n                x1={arrowDirection === 'upward' ? '25%' : '75%'}\n                x2={arrowDirection === 'upward' ? '75%' : '25%'}>\n                {intInfos.map((intInfo, i) => (<React.Fragment key={i}>\n                    {/* more about React.Fragment on https://stackoverflow.com/a/59390967 */}\n                    <stop  // start from\n                        offset={`${(100 / intInfos.length) * (i + 0)}%`}\n                        stopColor={intInfo[2]} />\n                    <stop  // to\n                        offset={`${(100 / intInfos.length) * (i + 1)}%`}\n                        stopColor={intInfo[2]} />\n                </React.Fragment>))}\n            </linearGradient>\n\n            {/* a range inplementation [0, 1, 2 ... intInfos.length - 1] */}\n            {/* {[...Array(intInfos.length - 1).keys()].map(i => (<line\n                x1={-7.5 + (15 / intInfos.length) * (i + 1)}\n                x2={-7.5 + (15 / intInfos.length) * (i + 1)}\n                y1=\"-74\"\n                y2={-104 - 7.5 - 7.5 / (intInfos.length - 1) * (i+1)}\n                stroke=\"black\"\n            />))} */}\n\n        </>)}\n\n        <g transform={`translate(0,${arrowDirection === 'upward' ? -145 : 125})`} textAnchor=\"middle\">\n            <text className=\"rmg-name__zh\" dy={-7}>\n                {`换乘${lineNames}`}\n            </text>\n            <text className=\"rmg-name__en\" dy={5} fontSize={9.6}>\n                {`Interchange Line ${lineNamesEn}`}\n            </text>\n        </g>\n    </g>)\n};\n\nconst OSIText = (props: { osiInfos: InterchangeInfo[] }) => {\n    // get the all names from the out of station changes\n    const lineNames = props.osiInfos.map(info => info[4]).join('，');\n    return React.useMemo(\n        () => (\n            <g textAnchor=\"middle\" fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {'换乘' + lineNames}\n                </text>\n                <text className=\"rmg-name__zh\" dy={5}>\n                    仅限公共交通卡\n                </text>\n                <text className=\"rmg-name__en\" dy={12.5} fontSize=\"75%\">\n                    Only for Public Transportation Card\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [lineNames]\n    );\n};\n","import React, { memo, useContext, useMemo } from 'react';\nimport { ParamContext } from '../../context';\nimport { adjacencyList, getXShareMTR, criticalPathMethod, getStnState } from '../railmap/methods/share';\nimport StationSHMetro from './station-shmetro';\nimport { StationsMTR } from '../railmap/methods/mtr';\nimport { StationDict } from \"../../constants/constants\";\n\nexport default memo(function IndoorWrapperSHMetro() {\n    return (\n        <>\n            <DefsSHMetro />\n            <IndoorSHMetro />\n        </>\n    );\n});\n\nexport const DefsSHMetro = React.memo(() => (\n    <defs>\n        <circle id=\"stn_indoor_sh\" fill=\"white\" strokeWidth={5} stroke=\"var(--rmg-theme-colour)\"\n            r={8} transform=\"scale(1.5)\" />\n        <path id=\"int2_indoor_sh\" fill=\"white\" strokeWidth={4} d=\"M -5,0 a 5,5 0 1 1 10,0 V10 a 5,5 0 1 1 -10,0Z\"\n            stroke=\"black\" transform=\"translate(0, -10)scale(2)\" />\n        <path id=\"int_indoor_arrow_sh\" stroke=\"black\" strokeWidth={1} d=\"M -7.5,0 v -40 h -7.5 l 15,-15 l 15,15 h -7.5 v 40 Z \" />\n    </defs>\n));\n\nconst leftWideFactor = (stnList: StationDict, stnId: string) => {\n    let res = 0\n    if (stnList[stnId].parents.length === 2) res += 0.4\n    if (stnList[stnList[stnId].parents[0]].children.length === 2) res += 0.4\n    return res\n}\n\nconst rightWideFactor = (stnList: StationDict, stnId: string) => {\n    let res = 0\n    if (stnList[stnId].children.length === 2) res += 0.4\n    if (stnList[stnList[stnId].children[0]].parents.length === 2) res += 0.4\n    return res\n}\n\nconst IndoorSHMetro = () => {\n    const { param, routes, branches, deps } = useContext(ParamContext);\n\n    const adjMat = adjacencyList(\n        param.stn_list,\n        leftWideFactor,\n        rightWideFactor\n    );\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const xShares = React.useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShareMTR(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n    const lineXs: [number, number] = [\n        (param.svgWidth.indoor * param.padding) / 100,\n        param.svgWidth.indoor * (1 - param.padding / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = useMemo(\n        () => StationsMTR.getYShares(param.stn_list, branches),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: yShares[cur] * param.branch_spacing }),\n        {} as typeof yShares\n    );\n\n    const stnStates = React.useMemo(\n        () => getStnState(param.current_stn_idx, routes, param.direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.current_stn_idx, param.direction, routes.toString()]\n    );\n\n    const linePaths = StationsMTR.drawLine(\n        branches,\n        stnStates,\n        param.stn_list,\n        lineXs,\n        xs,\n        ys,\n        param.branch_spacing,\n        criticalPath,\n        0\n    );\n\n    return (\n        <>\n            <g id=\"main\" transform={`translate(0,${param.svg_height / 2})`}>\n                <Lines paths={linePaths} />\n                <StationGroup xs={xs} ys={ys} xShares={xShares} stnStates={stnStates} />\n            </g>\n            <InfoElements />\n        </>\n    );\n}\n\nconst Lines = React.memo(\n    (props: { paths: { main: string[]; pass: string[] } }) => {\n        return (\n            <g fill=\"none\" strokeWidth={12}>\n                <g stroke=\"var(--rmg-theme-colour)\">\n                    {props.paths.main.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                    {props.paths.pass.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => JSON.stringify(prevProps.paths) === JSON.stringify(nextProps.paths)\n);\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    xShares: { [stnId: string]: number };  // Used as stn order\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { param, branches } = useContext(ParamContext);\n\n    return (\n        <g>\n            {Object.keys(param.stn_list)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (<g key={stnId} transform={`translate(${props.xs[stnId]},${props.ys[stnId]})`}>\n                    <StationSHMetro\n                        stnId={stnId}\n                        stnState={props.stnStates[stnId]}\n                        nameDirection={branches\n                            .filter(branch => branch.includes(stnId))\n                            .map(branch => branch.indexOf(stnId) % 2 === 0 ?\n                                'downward' : 'upward')[0] as 'upward' | 'downward'} />\n                </g>)\n                )\n            }\n        </g>\n    );\n};\n\nconst InfoElements = () => {\n    const { param } = useContext(ParamContext);\n\n    return React.useMemo(() => (\n        <>\n            <g transform={`translate(${param.svgWidth.indoor / 2},50)`}>\n                <text textAnchor=\"middle\" fontSize=\"30\" className=\"rmg-name__zh\">\n                    轨道交通{param.line_name[0]}运营线路示意图\n                </text>\n            </g>\n            <g transform={`translate(${param.svgWidth.indoor / 2},${param.svg_height - 300})`}>\n                <text textAnchor=\"middle\" fontSize=\"18\" className=\"rmg-name__zh\" dx=\"-30\" dy=\"230\">\n                    友情提示：请留意您需要换乘线路的首末班时间，以免耽误您的出行，末班车进站前三分钟停售该末班车车票。\n                </text>\n                <text textAnchor=\"middle\" fontSize=\"12\" className=\"rmg-name__en\" dx=\"10\" dy=\"250\">\n                    Please pay attention to the interchange schedule if you want to transfer to other lines. Stop selling tickets 3 minutes before the last train services.\n                </text>\n                <g transform=\"translate(-600,215)\">\n                    <rect x=\"-5\" y=\"-25\" width=\"100\" height=\"70\" fill=\"none\" stroke=\"black\" rx=\"5\"></rect>\n                    <line x1=\"30\" x2=\"30\" y1=\"-20\" y2=\"40\" stroke=\"black\"></line>\n                    <text className=\"rmg-name__zh\" dx=\"3\" fontSize=\"18\">图</text>\n                    <text className=\"rmg-name__zh\" dx=\"3\" dy=\"18\" fontSize=\"18\">例</text>\n                    <text className=\"rmg-name__en\" dy=\"35\" fontSize=\"8\">legend</text>\n                    <use\n                        transform=\"translate(45,10)\"\n                        xlinkHref=\"#int2_indoor_sh\"\n                        stroke=\"var(--rmg-theme-colour)\"\n                    />\n                    <text className=\"rmg-name__zh\" dx=\"60\" dy=\"10\" fontSize=\"10\">换乘站</text>\n                    <text className=\"rmg-name__en\" dx=\"60\" dy=\"20\" fontSize=\"6\">Interchange</text>\n                    <text className=\"rmg-name__en\" dx=\"60\" dy=\"30\" fontSize=\"6\">Station</text>\n                </g>\n            </g>\n        </>\n    ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.svgWidth.indoor, param.svg_height]);\n};\n\n/* Some unused functions to split branches from the main line.\n * Note the branches here has a slightly different meaning.\n * It refers to all the line sections that have a parallel line\n * rather than the upper or the bottom branch section.\n *\n * Currently these functions only can be used on a line that\n * branches in the middle and ends at the linestart, which also\n * means that linestart has two children in the adjMat.\n*/\n/*\nconst getPathLength = (adjMat: ReturnType<typeof adjacencyList>, from: string, to: string): number => {\n    let cnt = 0, cur = from\n    while (Object.keys(adjMat[cur]).length > 0) {\n        cnt += 1\n        // we choose the first for all the cases so that the length for different branches will end in the same node\n        cur = Object.keys(adjMat[cur])[0]\n    }\n    return cnt\n}\nconst getIntersectionStn = (adjMat: ReturnType<typeof adjacencyList>) => {\n    const start = Object.keys(adjMat['linestart'])\n\n    let a = start[0], b = start[1]\n    const lenA = getPathLength(adjMat, a, 'lineend')\n    const lenB = getPathLength(adjMat, b, 'lineend')\n    if (lenA < lenB) {\n        for (let i = 0; i < lenB - lenA; i++) b = Object.keys(adjMat[b])[0]\n    } else {\n        for (let i = 0; i < lenA - lenB; i++) a = Object.keys(adjMat[a])[0]\n    }\n    while (a !== b) {\n        a = Object.keys(adjMat[a])[0]\n        b = Object.keys(adjMat[b])[0]\n    }\n    return a\n}\nconst getBranchesAndMainLine = (adjMat: ReturnType<typeof adjacencyList>) => {\n    const start = Object.keys(adjMat['linestart'])\n    const intersection = getIntersectionStn(adjMat)\n    return {\n        'branches': [\n            criticalPathMethod(start[0], intersection, adjMat).nodes,\n            criticalPathMethod(start[1], intersection, adjMat).nodes\n        ],\n        'main': criticalPathMethod(intersection, 'lineend', adjMat).nodes\n    }\n}\nconst getYShares = (adjMat: ReturnType<typeof adjacencyList>,\n    branchesAndMainLine: ReturnType<typeof getBranchesAndMainLine>,\n    stnId: string) => {\n    const branches = branchesAndMainLine.branches\n    const main = branchesAndMainLine.main\n\n    if (main.includes(stnId)) {\n        return 3\n    } else if (branches[0].includes(stnId)) {\n        return 0\n    } else {\n        return 6\n    }\n}\n*/\n","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import * as Global from '../../../methods';\nimport { RMGParam, ShortDirection, StationDict, StationInfo } from '../../../constants/constants';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (\n                          direction === ShortDirection.right\n                              ? _isSuccessor(currentId, cur, routes)\n                              : _isPredecessor(currentId, cur, routes)\n                      )\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as StationDict;\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number\n    ) {\n        var [prevId, prevY, prevX] = [] as unknown as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 0.8;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + e}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - e}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number = 9.68\n    ) {\n        let linePaths = { main: [] as string[], pass: [] as string[] };\n        branches.forEach((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branches: string[][], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    let linePaths = { main: [] as string[][], pass: [] as string[][] };\n    branches.forEach(branch => {\n        branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n        var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n        var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n        if (lineMainStns.length === 1) {\n            linePassStns = branch;\n        }\n\n        if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n            // if two set disjoint\n            if (linePassStns[0] === branch[0]) {\n                // -1 -1 1 1\n                linePassStns.push(lineMainStns[0]);\n            } else if (\n                lineMainStns[0] === branch[0] &&\n                lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                linePassStns.length\n            ) {\n                linePassStns = branch;\n                lineMainStns = [];\n            } else {\n                // 1 1 -1 -1\n                linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n            }\n        }\n\n        linePaths.main.push(lineMainStns);\n        linePaths.pass.push(linePassStns);\n    });\n\n    return linePaths;\n};\n","import { Stations } from './share';\n\nexport class StationsMTR extends Stations {\n    protected leftWideFactor = (stnId: string) => {\n        var res = 0;\n        let { transfer } = this.stnList[stnId];\n        let ls = transfer.info.map(val => val.length);\n        if (transfer.tick_direc === 'l') {\n            // int3 or above\n            if (!ls[1] && ls[0] > 1) res += 0.8;\n            // osi except osi22\n            if (ls[1] && (ls[0] !== 1 || ls[1] !== 2)) res += 0.8;\n        }\n        if (ls[0] === 1 && ls[1] === 2) {\n            // osi22 not end\n            if (this.stnList[stnId].parents[0] !== 'linestart' && this.stnList[stnId].children[0] !== 'lineend')\n                res += 0.8;\n        }\n        if (this.stnList[stnId].parents.length === 2) res += 0.4;\n        if (this.stnList[this.stnList[stnId].parents[0]].children.length === 2) res += 0.4;\n        return res;\n    };\n\n    protected rightWideFactor = (stnId: string) => {\n        var res = 0;\n        let { transfer } = this.stnList[stnId];\n        let ls = transfer.info.map(val => val.length);\n        if (transfer.tick_direc === 'r') {\n            // int3 or above\n            if (!ls[1] && ls[0] > 1) res += 0.8;\n            // osi except osi22\n            if (ls[1] && (ls[0] !== 1 || ls[1] !== 2)) res += 0.8;\n        }\n        if (ls[0] === 1 && ls[1] === 2) {\n            // osi22 not end\n            if (this.stnList[stnId].parents[0] !== 'linestart' && this.stnList[stnId].children[0] !== 'lineend')\n                res += 0.8;\n        }\n        if (this.stnList[stnId].children.length === 2) res += 0.4;\n        if (this.stnList[this.stnList[stnId].children[0]].parents.length === 2) res += 0.4;\n        return res;\n    };\n}\n"],"sourceRoot":""}