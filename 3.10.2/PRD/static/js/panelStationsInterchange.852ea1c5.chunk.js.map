{"version":3,"sources":["constants/colours lazy /^/.//.*$/ groupOptions: {} namespace object","panels/colour-diag/theme-items.tsx","panels/colour-diag/dialog.tsx","panels/colour-diag/index.ts","panels/stations/edit-diag/name-list-items.tsx","panels/stations/edit-diag/interchange-tab.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","useStyles","makeStyles","createStyles","cityItem","display","flexDirection","alignItems","menuItemSpan","padding","button","borderRadius","height","width","minWidth","marginRight","inputColour","position","left","top","buttonContainer","flexShrink","PalettePanel","props","useTranslation","t","i18n","classes","lineList","theme","React","useState","list","setList","listPromise","default","useEffect","a","data","CityCode","Other","colour","fg","MonoColour","white","toString","useLineList","length","filter","l","newTheme","onUpdate","List","component","disablePadding","value","onChange","event","target","slice","Divider","variant","ListItem","ListItemText","primary","TextField","select","style","line","disabled","MenuItem","className","backgroundColor","color","getTransText2","name","languages","CustomPanel","hexTemp","setHexTemp","type","rgb","opacity","htmlFor","Tooltip","title","Button","borderColor","error","match","hex","val","idx","toUpperCase","Select","native","label","CitySelectItem","items","useMemo","cityList","c","CountryFlag","country","useEmojiStyles","img","codePoints","split","char","codePointAt","concat","LanguageCode","ChineseCN","ChineseSimp","includes","language","navigator","platform","indexOf","src","process","join","alt","String","fromCodePoint","cp","parseInt","contentWrapper","overflow","paddingTop","spacing","paddingBottom","paddingLeft","paddingRight","breakpoints","down","contentLeft","maxWidth","contentControl","flexGrow","paperRoot","listItemPaper","justifyContent","iconRoot","palette","action","active","inputBaseRoot","inputBaseInputZH","textAlign","fontSize","inputBaseInputEN","chipWrapper","overflowX","chipRoot","lineHeight","margin","chipLabel","Dialog2","Dialog","open","onClose","DialogTitle","DialogContent","lineName","DialogActions","onClick","LineNameInput","nameChange","index","newName","Paper","Icon","InputBase","root","input","autoFocus","RecentChipSet","useAppSelector","store","param","line_name","stationList","stn_list","allInfos","Set","values","reduce","acc","info","transfer","JSON","stringify","reverse","chips","x","i","parse","txt","Chip","secondary","secondaryTypographyProps","ColourControl","tabIndex","setTabIndex","tabNav","Tabs","indicatorColor","textColor","_","scrollButtons","Tab","panel","ColourDialog","listItemIcon","NameListItems","ListItemIcon","helperText","intChipSetStyles","StationEditInterchangeTab","stnId","dispatch","useAppDispatch","rmgStyle","osiNameDialog0Opened","setOsiNameDialog0Opened","osiNameDialog1Opened","setOsiNameDialog1Opened","addClick","newInfo","addInterchange","deleteClick","setIdx","intIdx","removeInterchange","ListItemSecondaryAction","IconButton","setIndex","onDelete","RmgStyle","MTR","SHMetro","Fragment","whiteSpace","osi_names","intChip","intChipText","intChipTextZH","intChipTextEN","intChipLabel","intChipDeleteIcon","marginLeft","InterchangeChipSet","intInfos","chipSelected","setChipSelected","nameDialogOpened","setNameDialogOpened","intChips","intInfo","deleteIcon","undefined","key","Array","updateInterchange","OSINameDialog","osiName","dividers","newOSIName","updateStationOsiName","InterchangeMore","tick_direc","direction","ShortDirection","right","updateStationTickDirection","d","Switch","edge","checked","updateStationPaidArea","paid_area"],"mappings":"qHAAA,IAAIA,EAAM,CACT,cAAe,CACd,IACA,IAED,SAAU,CACT,IACA,GAED,YAAa,CACZ,IACA,GAED,cAAe,CACd,IACA,IAED,iBAAkB,CACjB,IACA,IAED,YAAa,CACZ,IACA,IAED,eAAgB,CACf,IACA,IAED,aAAc,CACb,IACA,IAED,gBAAiB,CAChB,IACA,IAED,YAAa,CACZ,IACA,IAED,eAAgB,CACf,IACA,IAED,cAAe,CACd,IACA,GAED,iBAAkB,CACjB,IACA,GAED,UAAW,CACV,IACA,GAED,aAAc,CACb,IACA,GAED,aAAc,CACb,IACA,GAED,gBAAiB,CAChB,IACA,GAED,aAAc,CACb,IACA,GAED,gBAAiB,CAChB,IACA,GAED,cAAe,CACd,IACA,GAED,iBAAkB,CACjB,IACA,GAED,WAAY,CACX,IACA,IAED,cAAe,CACd,IACA,IAED,YAAa,CACZ,IACA,IAED,eAAgB,CACf,IACA,IAED,cAAe,CACd,IACA,IAED,iBAAkB,CACjB,IACA,IAED,aAAc,CACb,IACA,IAED,gBAAiB,CAChB,IACA,IAED,aAAc,CACb,IACA,IAED,gBAAiB,CAChB,IACA,IAED,aAAc,CACb,IACA,IAED,gBAAiB,CAChB,IACA,IAED,WAAY,CACX,IACA,IAED,cAAe,CACd,IACA,IAED,cAAe,CACd,IACA,IAED,iBAAkB,CACjB,IACA,IAED,WAAY,CACX,IACA,IAED,cAAe,CACd,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,WAAY,CACX,IACA,IAED,cAAe,CACd,IACA,IAED,YAAa,CACZ,IACA,IAED,eAAgB,CACf,IACA,IAED,cAAe,CACd,IACA,IAED,iBAAkB,CACjB,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,SAAU,CACT,IACA,IAED,YAAa,CACZ,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,YAAa,CACZ,IACA,IAED,eAAgB,CACf,IACA,IA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","file":"static/js/panelStationsInterchange.852ea1c5.chunk.js","sourcesContent":["var map = {\n\t\"./README.md\": [\n\t\t248,\n\t\t97\n\t],\n\t\"./baku\": [\n\t\t187,\n\t\t4\n\t],\n\t\"./baku.ts\": [\n\t\t187,\n\t\t4\n\t],\n\t\"./barcelona\": [\n\t\t188,\n\t\t15\n\t],\n\t\"./barcelona.ts\": [\n\t\t188,\n\t\t15\n\t],\n\t\"./beijing\": [\n\t\t189,\n\t\t26\n\t],\n\t\"./beijing.ts\": [\n\t\t189,\n\t\t26\n\t],\n\t\"./changsha\": [\n\t\t190,\n\t\t37\n\t],\n\t\"./changsha.ts\": [\n\t\t190,\n\t\t37\n\t],\n\t\"./chengdu\": [\n\t\t191,\n\t\t47\n\t],\n\t\"./chengdu.ts\": [\n\t\t191,\n\t\t47\n\t],\n\t\"./chongqing\": [\n\t\t192,\n\t\t5\n\t],\n\t\"./chongqing.ts\": [\n\t\t192,\n\t\t5\n\t],\n\t\"./delhi\": [\n\t\t193,\n\t\t6\n\t],\n\t\"./delhi.ts\": [\n\t\t193,\n\t\t6\n\t],\n\t\"./dongguan\": [\n\t\t194,\n\t\t7\n\t],\n\t\"./dongguan.ts\": [\n\t\t194,\n\t\t7\n\t],\n\t\"./dortmund\": [\n\t\t195,\n\t\t8\n\t],\n\t\"./dortmund.ts\": [\n\t\t195,\n\t\t8\n\t],\n\t\"./edinburgh\": [\n\t\t196,\n\t\t9\n\t],\n\t\"./edinburgh.ts\": [\n\t\t196,\n\t\t9\n\t],\n\t\"./foshan\": [\n\t\t197,\n\t\t10\n\t],\n\t\"./foshan.ts\": [\n\t\t197,\n\t\t10\n\t],\n\t\"./glasgow\": [\n\t\t198,\n\t\t11\n\t],\n\t\"./glasgow.ts\": [\n\t\t198,\n\t\t11\n\t],\n\t\"./guangzhou\": [\n\t\t199,\n\t\t12\n\t],\n\t\"./guangzhou.ts\": [\n\t\t199,\n\t\t12\n\t],\n\t\"./hangzhou\": [\n\t\t200,\n\t\t13\n\t],\n\t\"./hangzhou.ts\": [\n\t\t200,\n\t\t13\n\t],\n\t\"./hongkong\": [\n\t\t201,\n\t\t14\n\t],\n\t\"./hongkong.ts\": [\n\t\t201,\n\t\t14\n\t],\n\t\"./istanbul\": [\n\t\t202,\n\t\t16\n\t],\n\t\"./istanbul.ts\": [\n\t\t202,\n\t\t16\n\t],\n\t\"./kansai\": [\n\t\t203,\n\t\t17\n\t],\n\t\"./kansai.ts\": [\n\t\t203,\n\t\t17\n\t],\n\t\"./kaohsiung\": [\n\t\t204,\n\t\t18\n\t],\n\t\"./kaohsiung.ts\": [\n\t\t204,\n\t\t18\n\t],\n\t\"./london\": [\n\t\t205,\n\t\t19\n\t],\n\t\"./london.ts\": [\n\t\t205,\n\t\t19\n\t],\n\t\"./macao\": [\n\t\t206,\n\t\t20\n\t],\n\t\"./macao.ts\": [\n\t\t206,\n\t\t20\n\t],\n\t\"./madrid\": [\n\t\t207,\n\t\t21\n\t],\n\t\"./madrid.ts\": [\n\t\t207,\n\t\t21\n\t],\n\t\"./nanjing\": [\n\t\t208,\n\t\t22\n\t],\n\t\"./nanjing.ts\": [\n\t\t208,\n\t\t22\n\t],\n\t\"./newtaipei\": [\n\t\t209,\n\t\t23\n\t],\n\t\"./newtaipei.ts\": [\n\t\t209,\n\t\t23\n\t],\n\t\"./osaka\": [\n\t\t210,\n\t\t24\n\t],\n\t\"./osaka.ts\": [\n\t\t210,\n\t\t24\n\t],\n\t\"./oslo\": [\n\t\t211,\n\t\t25\n\t],\n\t\"./oslo.ts\": [\n\t\t211,\n\t\t25\n\t],\n\t\"./other\": [\n\t\t212,\n\t\t27\n\t],\n\t\"./other.ts\": [\n\t\t212,\n\t\t27\n\t],\n\t\"./paris\": [\n\t\t213,\n\t\t28\n\t],\n\t\"./paris.ts\": [\n\t\t213,\n\t\t28\n\t],\n\t\"./qingdao\": [\n\t\t214,\n\t\t29\n\t],\n\t\"./qingdao.ts\": [\n\t\t214,\n\t\t29\n\t],\n\t\"./sanfrancisco\": [\n\t\t215,\n\t\t30\n\t],\n\t\"./sanfrancisco.ts\": [\n\t\t215,\n\t\t30\n\t],\n\t\"./sanktpeterburg\": [\n\t\t216,\n\t\t31\n\t],\n\t\"./sanktpeterburg.ts\": [\n\t\t216,\n\t\t31\n\t],\n\t\"./saopaulo\": [\n\t\t217,\n\t\t32\n\t],\n\t\"./saopaulo.ts\": [\n\t\t217,\n\t\t32\n\t],\n\t\"./seoul\": [\n\t\t218,\n\t\t33\n\t],\n\t\"./seoul.ts\": [\n\t\t218,\n\t\t33\n\t],\n\t\"./shanghai\": [\n\t\t219,\n\t\t34\n\t],\n\t\"./shanghai.ts\": [\n\t\t219,\n\t\t34\n\t],\n\t\"./shenzhen\": [\n\t\t220,\n\t\t35\n\t],\n\t\"./shenzhen.ts\": [\n\t\t220,\n\t\t35\n\t],\n\t\"./singapore\": [\n\t\t221,\n\t\t36\n\t],\n\t\"./singapore.ts\": [\n\t\t221,\n\t\t36\n\t],\n\t\"./stockholm\": [\n\t\t222,\n\t\t38\n\t],\n\t\"./stockholm.ts\": [\n\t\t222,\n\t\t38\n\t],\n\t\"./taipei\": [\n\t\t223,\n\t\t39\n\t],\n\t\"./taipei.ts\": [\n\t\t223,\n\t\t39\n\t],\n\t\"./tehran\": [\n\t\t224,\n\t\t40\n\t],\n\t\"./tehran.ts\": [\n\t\t224,\n\t\t40\n\t],\n\t\"./tianjin\": [\n\t\t225,\n\t\t41\n\t],\n\t\"./tianjin.ts\": [\n\t\t225,\n\t\t41\n\t],\n\t\"./tokyo\": [\n\t\t226,\n\t\t42\n\t],\n\t\"./tokyo.ts\": [\n\t\t226,\n\t\t42\n\t],\n\t\"./toronto\": [\n\t\t227,\n\t\t43\n\t],\n\t\"./toronto.ts\": [\n\t\t227,\n\t\t43\n\t],\n\t\"./tyneandwear\": [\n\t\t228,\n\t\t44\n\t],\n\t\"./tyneandwear.ts\": [\n\t\t228,\n\t\t44\n\t],\n\t\"./xiamen\": [\n\t\t229,\n\t\t45\n\t],\n\t\"./xiamen.ts\": [\n\t\t229,\n\t\t45\n\t],\n\t\"./xian\": [\n\t\t230,\n\t\t46\n\t],\n\t\"./xian.ts\": [\n\t\t230,\n\t\t46\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 235;\nmodule.exports = webpackAsyncContext;","import React, { useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    createStyles,\n    Divider,\n    List,\n    ListItem,\n    ListItemText,\n    makeStyles,\n    MenuItem,\n    Select,\n    TextField,\n    Tooltip,\n} from '@material-ui/core';\nimport { getTransText2 } from '../../utils';\nimport { CityCode, cityList } from '../../constants/city-config';\nimport { ColourHex, LanguageCode, MonoColour, PaletteEntry, Theme } from '../../constants/constants';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        cityItem: {\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n        },\n        menuItemSpan: {\n            padding: '0 .3rem',\n        },\n        button: {\n            borderRadius: '50%',\n            height: 24,\n            width: 24,\n            minWidth: 0,\n            marginRight: 8,\n            // border: 'solid',\n            padding: 0,\n        },\n        inputColour: {\n            position: 'absolute',\n            width: 0,\n            height: 0,\n            left: 27,\n            top: 32,\n        },\n        buttonContainer: {\n            display: 'flex',\n            flexShrink: 1,\n        },\n    })\n);\n\nconst useLineList = (theme: Theme) => {\n    const [list, setList] = React.useState([] as PaletteEntry[]);\n\n    const listPromise = theme[0]\n        ? import(/* webpackChunkName: \"colours\" */ `../../constants/colours/${theme[0]}`).then(\n              module => module.default as PaletteEntry[]\n          )\n        : Promise.resolve([] as PaletteEntry[]);\n\n    useEffect(\n        () => {\n            if (typeof theme[0] === 'undefined') {\n                return;\n            }\n            (async () => {\n                const data = await listPromise;\n                setList(\n                    theme[0] === CityCode.Other\n                        ? [{ ...data[0], colour: theme[2], fg: theme[3] || MonoColour.white }]\n                        : data\n                );\n            })();\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [theme.toString()]\n    );\n\n    return list;\n};\n\ninterface ColourDialogProps {\n    theme: Theme;\n    onUpdate: (key: string, value: any) => void;\n}\n\nexport const PalettePanel = (props: ColourDialogProps) => {\n    const { t, i18n } = useTranslation();\n    const classes = useStyles();\n\n    const cityChange = (event: React.ChangeEvent<HTMLInputElement>) =>\n        props.onUpdate('theme', [event.target.value, ...props.theme.slice(1)]);\n\n    // Hook for fetching line list of current city\n    const lineList = useLineList(props.theme);\n\n    // Hook for updating props.theme when lineList changed\n    useEffect(\n        () => {\n            if (lineList.length === 0) return; // initialising, ignore\n            if (lineList.filter(l => l.id === props.theme[1]).length) return; // current city, ignore\n            let { id, colour, fg } = lineList[0];\n            let newTheme = [props.theme[0], id, colour, fg || MonoColour.white];\n            props.onUpdate('theme', newTheme);\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [lineList]\n    );\n\n    const lineChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let line = event.target.value;\n        let { colour, fg } = lineList.filter(l => l.id === line)[0];\n        let newTheme = [props.theme[0], line, colour, fg || MonoColour.white];\n        props.onUpdate('theme', newTheme);\n    };\n\n    return (\n        <List component=\"div\" disablePadding>\n            <CitySelectItem value={props.theme[0]} onChange={cityChange} />\n            <Divider variant=\"middle\" />\n            <ListItem>\n                <ListItemText primary={t('colour.line')} />\n                <TextField\n                    select\n                    style={{ width: 166 }}\n                    onChange={lineChange}\n                    value={props.theme[1]}\n                    disabled={props.theme[0] === 'other'}\n                >\n                    {lineList.map(l => (\n                        <MenuItem key={l.id} value={l.id}>\n                            <span\n                                className={classes.menuItemSpan}\n                                style={{\n                                    backgroundColor: l.colour,\n                                    color: l.fg || MonoColour.white,\n                                }}\n                            >\n                                {getTransText2(l.name, i18n.languages as LanguageCode[])}\n                            </span>\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </ListItem>\n        </List>\n    );\n};\n\nexport const CustomPanel = (props: ColourDialogProps) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const [hexTemp, setHexTemp] = useState(props.theme[2]);\n\n    useEffect(\n        () => setHexTemp(props.theme[2]),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.theme[2]]\n    );\n\n    const colourChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let rgb = event.target.value;\n        // setHexTemp(rgb);\n        props.onUpdate('theme', [CityCode.Other, 'other', rgb, props.theme[3]]);\n    };\n\n    const hexChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let hex = event.target.value;\n        if (hex.match(/^#[0-9a-fA-F]{0,6}$/) === null) return;\n        setHexTemp(hex as ColourHex);\n\n        if (props.theme[0] !== 'other') {\n            if (hex.match(/^#[0-9a-fA-f]{6}$/) !== null) {\n                // if hex valid, modify theme city and props.hex\n                let newTheme = [CityCode.Other, 'other', hex, props.theme[3]];\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (along with selection)\n                // then line will be updated by hook\n            } else {\n                // if hex not valid, modify theme city only\n                let newTheme = [CityCode.Other, 'other', ...props.theme.slice(2)];\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (along with selection)\n                // then line will be updated by hook\n            }\n        } else {\n            if (hex.match(/^#[0-9a-fA-F]{6}$/) !== null) {\n                // if hex valid, modify props.hex\n                let newTheme = props.theme.map((val, idx) => (idx === 2 ? hex : val));\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (actually only hex is changed)\n            } else {\n                // if hex not valid, do nothing\n            }\n        }\n    };\n\n    const fgChange = (event: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n        let newTheme = [CityCode.Other, 'other', props.theme[2], event.target.value];\n        props.onUpdate('theme', newTheme);\n    };\n\n    return (\n        <List component=\"div\" disablePadding>\n            <ListItem>\n                <ListItemText primary={t('colour.colour')} />\n                <div className={classes.buttonContainer}>\n                    <input\n                        type=\"color\"\n                        id=\"input-color\"\n                        value={props.theme[2]}\n                        onChange={colourChange}\n                        className={classes.inputColour}\n                        style={{ opacity: 0 }}\n                    />\n                    <label htmlFor=\"input-color\">\n                        <Tooltip title={t('colour.tooltip') || ''} aria-label=\"colour picker\">\n                            <Button\n                                className={classes.button}\n                                style={{\n                                    backgroundColor: props.theme[2],\n                                    borderColor: props.theme[3] || MonoColour.white,\n                                }}\n                                variant=\"contained\"\n                                component=\"span\"\n                            >\n                                {' '}\n                            </Button>\n                        </Tooltip>\n                    </label>\n                </div>\n                <TextField\n                    error={!hexTemp?.match(/^#[0-9a-fA-F]{6}$/g)}\n                    style={{ width: 85 }}\n                    onChange={hexChange}\n                    value={hexTemp?.toUpperCase()}\n                />\n            </ListItem>\n            <Divider variant=\"middle\" />\n            <ListItem>\n                <ListItemText primary={t('colour.fg')} />\n                <Select\n                    native\n                    style={{ width: 85 }}\n                    label={t('colour.fg')}\n                    onChange={fgChange}\n                    value={props.theme[3] || MonoColour.white}\n                >\n                    <option value=\"#fff\">{t('colour.fgWhite')}</option>\n                    <option value=\"#000\">{t('colour.fgBlack')}</option>\n                </Select>\n            </ListItem>\n        </List>\n    );\n};\n\nconst CitySelectItem = (props: { value: string; onChange: (event: React.ChangeEvent<HTMLInputElement>) => void }) => {\n    const { t, i18n } = useTranslation();\n    const classes = useStyles();\n\n    const items = useMemo(\n        () =>\n            cityList.map(c => (\n                <MenuItem key={c.id} value={c.id}>\n                    <span className={classes.cityItem}>\n                        <CountryFlag code={c.country} />\n                        <span>{getTransText2(c.name, i18n.languages as LanguageCode[])}</span>\n                    </span>\n                </MenuItem>\n            )),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n    return (\n        <ListItem>\n            <ListItemText primary={t('colour.city')} />\n            <TextField select style={{ width: 166 }} value={props.value} onChange={props.onChange}>\n                {items}\n            </TextField>\n        </ListItem>\n    );\n};\n\nconst useEmojiStyles = makeStyles(() =>\n    createStyles({\n        img: {\n            height: 20,\n            marginRight: '0.2rem',\n        },\n    })\n);\n\n/**\n * Convert ISO 3166 alpha-2 country code (followed by BS 6879 UK subdivision code, if applicable) to flag Emoji. For Windows platform, an `img` element with image source from OpenMoji is returned.\n */\nfunction CountryFlag(props: { code: string }) {\n    const { i18n } = useTranslation();\n    const classes = useEmojiStyles();\n\n    let codePoints = [] as string[];\n\n    if (props.code.length === 2) {\n        codePoints = props.code\n            .toUpperCase()\n            .split('')\n            .map(char => ((char.codePointAt(0) || 0) + 127397).toString(16).toUpperCase());\n    } else {\n        codePoints = ['1F3F4'].concat(\n            props.code\n                .toUpperCase()\n                .split('')\n                .map(char => ((char.codePointAt(0) || 0) + 917536).toString(16).toUpperCase()),\n            'E007F'\n        );\n    }\n\n    // special case for simplified Chinese\n    if (\n        [LanguageCode.ChineseCN, LanguageCode.ChineseSimp].includes(i18n.language as LanguageCode) &&\n        props.code === 'TW'\n    )\n        codePoints = ['1F3F4'];\n\n    return navigator.platform.indexOf('Win32') !== -1 || navigator.platform.indexOf('Win64') !== -1 ? (\n        <img\n            src={process.env.PUBLIC_URL + `/images/flags/${codePoints.join('-')}.svg`}\n            className={classes.img}\n            alt={`Flag of ${props.code}`}\n        />\n    ) : (\n        // <img src={process.env.PUBLIC_URL + `/images/flags/${codePoints.join('-')}.svg`} className={classes.img} />\n        <span>{String.fromCodePoint(...codePoints.map(cp => parseInt(cp, 16)))}</span>\n    );\n}\n","import React, { useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    Chip,\n    createStyles,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Divider,\n    Icon,\n    InputBase,\n    List,\n    ListItem,\n    ListItemText,\n    makeStyles,\n    Paper,\n    Tab,\n    Tabs,\n} from '@material-ui/core';\nimport { CustomPanel, PalettePanel } from './theme-items';\nimport { InterchangeInfo, MonoColour, Name, Theme } from '../../constants/constants';\nimport { useAppSelector } from '../../redux';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        contentWrapper: {\n            display: 'flex',\n            overflow: 'hidden',\n            paddingTop: theme.spacing(1),\n            paddingBottom: theme.spacing(1),\n            paddingLeft: theme.spacing(3),\n            paddingRight: theme.spacing(3),\n            [theme.breakpoints.down('xs')]: {\n                flexDirection: 'column',\n            },\n        },\n        contentLeft: {\n            maxWidth: 280,\n        },\n        contentControl: {\n            flexGrow: 0,\n            flexShrink: 0,\n            display: 'flex',\n            flexDirection: 'column',\n            width: 270,\n        },\n\n        paperRoot: {\n            maxWidth: 250,\n        },\n        listItemPaper: {\n            justifyContent: 'center',\n        },\n        iconRoot: {\n            position: 'absolute',\n            color: theme.palette.action.active,\n        },\n        inputBaseRoot: {\n            display: 'block',\n        },\n        inputBaseInputZH: {\n            textAlign: 'center',\n            fontSize: 36,\n            padding: 0,\n            paddingTop: 6,\n            height: 45,\n        },\n        inputBaseInputEN: {\n            textAlign: 'center',\n            fontSize: 18,\n            padding: 0,\n            paddingBottom: 6,\n            height: 'auto',\n        },\n\n        chipWrapper: {\n            overflowX: 'auto',\n            display: 'flex',\n        },\n        chipRoot: {\n            borderRadius: 4.5,\n            height: 32,\n            lineHeight: '1rem',\n            margin: 2,\n        },\n        chipLabel: {\n            padding: '0 6px',\n            '& > span': {\n                display: 'block',\n                textAlign: 'center',\n            },\n            '& > span:first-child': {\n                fontSize: '1rem',\n            },\n            '& > span:last-child': {\n                lineHeight: '0.8rem',\n            },\n        },\n    })\n);\n\ninterface Props {\n    open: boolean;\n    theme: Theme;\n    lineName: Name;\n    onUpdate: (key: string, value: any) => void;\n    onClose: () => void;\n}\n\nconst Dialog2 = (props: Props) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    return (\n        <Dialog open={props.open} onClose={props.onClose}>\n            <DialogTitle>{t('colour.title')}</DialogTitle>\n            <DialogContent className={classes.contentWrapper}>\n                <List component=\"div\" disablePadding className={classes.contentLeft}>\n                    <LineNameInput theme={props.theme} lineName={props.lineName} onUpdate={props.onUpdate} />\n                    <Divider />\n                    <RecentChipSet onUpdate={props.onUpdate} />\n                </List>\n                <div className={classes.contentControl}>\n                    <ColourControl theme={props.theme} onUpdate={props.onUpdate} />\n                </div>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose} color=\"primary\">\n                    {t('dialog.done')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default Dialog2;\n\nconst LineNameInput = (props: { lineName: Name; theme: Theme; onUpdate: Props['onUpdate'] }) => {\n    const classes = useStyles();\n\n    const nameChange = (value: string, index: number) => {\n        let newName = props.lineName.map((val, idx) => (idx === index ? value : val));\n        props.onUpdate('name', newName);\n    };\n\n    return (\n        <ListItem style={{ justifyContent: 'center' }}>\n            <Paper className={classes.paperRoot} style={{ backgroundColor: props.theme[2] }}>\n                <Icon className={classes.iconRoot}>edit</Icon>\n                <InputBase\n                    value={props.lineName[0]}\n                    classes={{\n                        root: classes.inputBaseRoot,\n                        input: classes.inputBaseInputZH,\n                    }}\n                    style={{ color: props.theme[3] || MonoColour.white }}\n                    onChange={e => nameChange(e.target.value, 0)}\n                    autoFocus\n                />\n                <InputBase\n                    value={props.lineName[1]}\n                    classes={{\n                        root: classes.inputBaseRoot,\n                        input: classes.inputBaseInputEN,\n                    }}\n                    style={{ color: props.theme[3] || MonoColour.white }}\n                    onChange={e => nameChange(e.target.value, 1)}\n                />\n            </Paper>\n        </ListItem>\n    );\n};\n\nconst RecentChipSet = (props: { onUpdate: Props['onUpdate'] }) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const theme = useAppSelector(store => store.param.theme);\n    const lineName = useAppSelector(store => store.param.line_name);\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    const allInfos = useMemo(\n        () =>\n            new Set(\n                Object.values(stationList)\n                    .reduce(\n                        (acc, { transfer }) => {\n                            const { info } = transfer;\n                            return acc.concat(...info);\n                        },\n                        [[...theme, ...lineName]]\n                    )\n                    .map(val => JSON.stringify(val))\n                    .reverse()\n            ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n\n    const chips = useMemo(\n        () =>\n            [...allInfos].map((x, i) => {\n                const info: InterchangeInfo = JSON.parse(x);\n                const label = info.slice(4).map((txt, i) => (\n                    <span key={i} style={{ color: info[3] }}>\n                        {txt}\n                    </span>\n                ));\n\n                return (\n                    <Chip\n                        key={i}\n                        onClick={() => {\n                            props.onUpdate('theme', info.slice(0, 4));\n                            props.onUpdate('name', info.slice(4));\n                        }}\n                        style={{ backgroundColor: info[2] }}\n                        className={classes.chipRoot}\n                        classes={{ label: classes.chipLabel }}\n                        {...{ label }}\n                    />\n                );\n            }),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n\n    return (\n        <ListItem>\n            <ListItemText\n                primary={t('colour.recent')}\n                secondary={chips}\n                secondaryTypographyProps={{ component: 'div' }}\n                classes={{ secondary: classes.chipWrapper }}\n            />\n        </ListItem>\n    );\n};\n\nconst ColourControl = (props: { theme: Theme; onUpdate: Props['onUpdate'] }) => {\n    const { t } = useTranslation();\n    const [tabIndex, setTabIndex] = useState(props.theme[0] === 'other' ? 1 : 0);\n\n    const tabNav = (\n        <Tabs\n            value={tabIndex}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            onChange={(_, val) => setTabIndex(val)}\n            variant=\"fullWidth\"\n            scrollButtons=\"off\"\n        >\n            <Tab label={t('colour.palette')} style={{ minWidth: 'unset' }} />\n            <Tab label={t('colour.custom')} style={{ minWidth: 'unset' }} />\n        </Tabs>\n    );\n\n    const panel = (idx => {\n        switch (idx) {\n            case 0:\n                return <PalettePanel {...props} />;\n            case 1:\n                return <CustomPanel {...props} />;\n            default:\n                return <></>;\n        }\n    })(tabIndex);\n\n    return (\n        <>\n            {tabNav}\n            {panel}\n        </>\n    );\n};\n","import ColourDialog from './dialog';\n\nexport default ColourDialog;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ListItem, ListItemIcon, TextField, makeStyles, createStyles } from '@material-ui/core';\nimport { Name } from '../../../constants/constants';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        listItemIcon: {\n            width: '1em',\n            fontSize: '1.5rem',\n            textAlign: 'center',\n        },\n    })\n);\n\ninterface Props {\n    onUpdate: (index: number) => (event: React.ChangeEvent<HTMLInputElement>) => void;\n    name: Name;\n}\n\nconst NameListItems = (props: Props) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    return React.useMemo(\n        () => (\n            <>\n                <ListItem>\n                    <ListItemIcon>\n                        <span className={classes.listItemIcon}>文</span>\n                    </ListItemIcon>\n                    <TextField\n                        style={{ width: '100%' }}\n                        variant=\"outlined\"\n                        label={t('stations.edit.name.nameZH')}\n                        onChange={props.onUpdate(0)}\n                        value={props.name[0]}\n                        autoFocus\n                    />\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <span className={classes.listItemIcon}>A</span>\n                    </ListItemIcon>\n                    <TextField\n                        style={{ width: '100%' }}\n                        variant=\"outlined\"\n                        label={t('stations.edit.name.nameEN')}\n                        onChange={props.onUpdate(1)}\n                        value={props.name[1]}\n                        helperText={t('stations.edit.name.nameENHelper')}\n                    />\n                </ListItem>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.name?.toString() || '']\n    );\n};\n\nexport default NameListItems;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    Chip,\n    createStyles,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Divider,\n    Icon,\n    IconButton,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    makeStyles,\n    Select,\n    Switch,\n    Tooltip,\n} from '@material-ui/core';\nimport ColourDialog from '../../colour-diag';\nimport NameListItems from './name-list-items';\nimport { useAppDispatch, useAppSelector } from '../../../redux';\nimport { InterchangeInfo, MonoColour, Name, RmgStyle, ShortDirection, Theme } from '../../../constants/constants';\nimport {\n    addInterchange,\n    removeInterchange,\n    updateInterchange,\n    updateStationOsiName,\n    updateStationPaidArea,\n    updateStationTickDirection,\n} from '../../../redux/param/action';\n\nconst StationEditInterchangeTab = (props: { stnId: string }) => {\n    const { stnId } = props;\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const rmgStyle = useAppSelector(store => store.param.style);\n    const theme = useAppSelector(store => store.param.theme);\n    const { transfer } = useAppSelector(store => store.param.stn_list[stnId]);\n\n    const [osiNameDialog0Opened, setOsiNameDialog0Opened] = React.useState(false);\n    const [osiNameDialog1Opened, setOsiNameDialog1Opened] = React.useState(false);\n\n    const addClick = (index: number) => {\n        let newInfo: InterchangeInfo = [...theme, '轉綫', 'Line'];\n        dispatch(addInterchange(stnId, index, newInfo));\n    };\n\n    const deleteClick = (setIdx: number, intIdx: number) => {\n        dispatch(removeInterchange(stnId, setIdx, intIdx));\n    };\n\n    return (\n        <List>\n            <ListItem>\n                <ListItemText>\n                    <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.within')}</h3>\n                </ListItemText>\n                <ListItemSecondaryAction>\n                    <Tooltip title={t('stations.edit.interchange.add') || ''} aria-label=\"add\">\n                        <IconButton onClick={() => addClick(0)}>\n                            <Icon>add_circle</Icon>\n                        </IconButton>\n                    </Tooltip>\n                </ListItemSecondaryAction>\n            </ListItem>\n            <ListItem>\n                <InterchangeChipSet stnId={stnId} setIndex={0} onDelete={i => deleteClick(0, i)} />\n            </ListItem>\n\n            {/* Out of station transfer */}\n            {[RmgStyle.MTR, RmgStyle.SHMetro].includes(rmgStyle) && (\n                <>\n                    <Divider />\n                    <ListItem>\n                        <ListItemText>\n                            <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.osi')}</h3>\n                        </ListItemText>\n                        <ListItemSecondaryAction>\n                            {[RmgStyle.MTR].includes(rmgStyle) && (\n                                <React.Fragment>\n                                    <Button\n                                        variant=\"outlined\"\n                                        color=\"primary\"\n                                        style={{ lineHeight: '1rem', whiteSpace: 'pre', marginRight: 5 }}\n                                        onClick={() => setOsiNameDialog0Opened(true)}\n                                    >\n                                        {transfer.osi_names[0]\n                                            ? transfer.osi_names[0].join('\\r\\n')\n                                            : '車站名\\r\\nStn Name'}\n                                    </Button>\n                                    <OSINameDialog\n                                        open={osiNameDialog0Opened}\n                                        stnId={stnId}\n                                        setIndex={0}\n                                        onClose={() => setOsiNameDialog0Opened(false)}\n                                    />\n                                </React.Fragment>\n                            )}\n                            <Tooltip title={t('stations.edit.interchange.add') || ''} aria-label=\"add\">\n                                <IconButton onClick={() => addClick(1)}>\n                                    <Icon>add_circle</Icon>\n                                </IconButton>\n                            </Tooltip>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                    <ListItem>\n                        <InterchangeChipSet stnId={stnId} setIndex={1} onDelete={i => deleteClick(1, i)} />\n                    </ListItem>\n                </>\n            )}\n\n            {/* Out of system transfer */}\n            {[RmgStyle.SHMetro].includes(rmgStyle || '') && (\n                <>\n                    <Divider />\n                    <ListItem>\n                        <ListItemText>\n                            <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.osysi')}</h3>\n                        </ListItemText>\n                        <ListItemSecondaryAction>\n                            {[RmgStyle.MTR].includes(rmgStyle) && (\n                                <React.Fragment>\n                                    <Button\n                                        variant=\"outlined\"\n                                        color=\"primary\"\n                                        style={{ lineHeight: '1rem', whiteSpace: 'pre', marginRight: 5 }}\n                                        onClick={() => setOsiNameDialog1Opened(true)}\n                                    >\n                                        {transfer.osi_names[1]\n                                            ? transfer.osi_names[1].join('\\r\\n')\n                                            : '車站名\\r\\nStn Name'}\n                                    </Button>\n                                    <OSINameDialog\n                                        open={osiNameDialog1Opened}\n                                        stnId={stnId}\n                                        setIndex={1}\n                                        onClose={() => setOsiNameDialog1Opened(false)}\n                                    />\n                                </React.Fragment>\n                            )}\n                            <Tooltip title={t('stations.edit.interchange.add') || ''} aria-label=\"add\">\n                                <IconButton onClick={() => addClick(2)}>\n                                    <Icon>add_circle</Icon>\n                                </IconButton>\n                            </Tooltip>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                    <ListItem>\n                        <InterchangeChipSet stnId={stnId} setIndex={2} onDelete={i => deleteClick(2, i)} />\n                    </ListItem>\n                </>\n            )}\n            {[RmgStyle.MTR, RmgStyle.SHMetro].includes(rmgStyle) && (\n                <ListItem>\n                    <span>{t('stations.edit.interchange.note')}</span>\n                </ListItem>\n            )}\n            {/* MTR more settings */ rmgStyle === RmgStyle.MTR && <InterchangeMore stnId={props.stnId} />}\n        </List>\n    );\n};\n\nexport default StationEditInterchangeTab;\n\nconst intChipSetStyles = makeStyles(() =>\n    createStyles({\n        intChip: {\n            borderRadius: 4.5,\n            height: 40,\n            lineHeight: '1rem',\n            margin: 2,\n        },\n        intChipText: {\n            display: 'block',\n            textAlign: 'center' as 'center',\n        },\n        intChipTextZH: {\n            fontSize: 18,\n            lineHeight: '1.2rem',\n        },\n        intChipTextEN: {\n            fontSize: '.75rem',\n            lineHeight: '.9rem',\n            whiteSpace: 'pre-wrap' as 'pre-wrap',\n        },\n        intChipLabel: {\n            paddingLeft: 6,\n            paddingRight: 6,\n        },\n        intChipDeleteIcon: {\n            marginLeft: -3,\n        },\n    })\n);\n\ninterface InterchangeChipSetProps {\n    stnId: string;\n    setIndex: number;\n    onDelete: (i: number) => void;\n}\n\nconst InterchangeChipSet = (props: InterchangeChipSetProps) => {\n    const { stnId, setIndex, onDelete } = props;\n    const classes = intChipSetStyles();\n    const dispatch = useAppDispatch();\n\n    const intInfos = useAppSelector(store => store.param.stn_list[stnId].transfer.info[setIndex]);\n\n    const [chipSelected, setChipSelected] = React.useState(-1);\n    const [nameDialogOpened, setNameDialogOpened] = React.useState(false);\n\n    const handleClick = (index: number) => {\n        setChipSelected(index);\n        setNameDialogOpened(true);\n    };\n\n    const nameDialogUpdate = (key: string, value: any) => {\n        if (key === 'theme') {\n            const newInfo = (value as string[]).concat(Array(2)) as InterchangeInfo;\n            dispatch(updateInterchange(stnId, setIndex, chipSelected, newInfo));\n        }\n        if (key === 'name') {\n            const newInfo = Array(4).concat(value) as InterchangeInfo;\n            dispatch(updateInterchange(stnId, setIndex, chipSelected, newInfo));\n        }\n    };\n\n    const intChips = intInfos?.map((intInfo, i) => {\n        let label = (\n            <span style={{ color: intInfo[3] }}>\n                <span className={`${classes.intChipText} ${classes.intChipTextZH}`}>{intInfo[4]}</span>\n                <span className={`${classes.intChipText} ${classes.intChipTextEN}`}>{intInfo[5]}</span>\n            </span>\n        );\n        return (\n            <Chip\n                key={i}\n                label={label}\n                className={classes.intChip}\n                classes={{\n                    label: classes.intChipLabel,\n                    deleteIcon: classes.intChipDeleteIcon,\n                }}\n                style={{ backgroundColor: intInfo[2] }}\n                onDelete={() => onDelete(i)}\n                onClick={() => handleClick(i)}\n            />\n        );\n    });\n\n    return (\n        <div>\n            {intChips}\n\n            <ColourDialog\n                open={nameDialogOpened}\n                theme={\n                    intInfos?.[chipSelected] === undefined\n                        ? ([] as any as Theme)\n                        : [\n                              intInfos[chipSelected][0],\n                              intInfos[chipSelected][1],\n                              intInfos[chipSelected][2],\n                              intInfos[chipSelected][3] as MonoColour,\n                          ]\n                }\n                lineName={\n                    intInfos?.[chipSelected] === undefined\n                        ? ['', '']\n                        : [intInfos[chipSelected][4], intInfos[chipSelected][5]]\n                }\n                onUpdate={nameDialogUpdate}\n                onClose={() => setNameDialogOpened(false)}\n            />\n        </div>\n    );\n};\n\ninterface OSINameDialogProps {\n    open: boolean;\n    stnId: string;\n    setIndex: number;\n    onClose: () => void;\n}\n\nconst OSINameDialog = (props: OSINameDialogProps) => {\n    const { open, stnId, setIndex, onClose } = props;\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const osiName = useAppSelector(store => store.param.stn_list[stnId].transfer.osi_names[setIndex]) || [\n        '車站名',\n        'Stn Name',\n    ];\n\n    const handleUpdate =\n        (index: number) =>\n        ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\n            let newOSIName = osiName.map((val, i) => (i === index ? value : val)) as Name;\n            dispatch(updateStationOsiName(stnId, setIndex, newOSIName));\n        };\n\n    return (\n        <Dialog open={open} onClose={onClose}>\n            <DialogTitle>{t('stations.edit.interchange.osiName')}</DialogTitle>\n            <DialogContent dividers>\n                <List>\n                    <NameListItems onUpdate={handleUpdate} name={osiName} />\n                </List>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose} color=\"primary\" autoFocus>\n                    {t('dialog.done')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nconst InterchangeMore = (props: { stnId: string }) => {\n    const { stnId } = props;\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const { transfer } = useAppSelector(store => store.param.stn_list[stnId]);\n\n    return React.useMemo(() => {\n        const tickDirecChange = ({ target: { value } }: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n            let direction = value;\n            if (direction === ShortDirection.left || direction === ShortDirection.right) {\n                dispatch(updateStationTickDirection(stnId, direction as ShortDirection));\n            }\n        };\n\n        return (\n            <>\n                <Divider />\n                <ListItem>\n                    <ListItemText>\n                        <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.settings')}</h3>\n                    </ListItemText>\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>format_textdirection_l_to_r</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('stations.edit.interchange.tickDirec.label')} />\n                    <ListItemSecondaryAction>\n                        <Select native value={transfer.tick_direc} onChange={tickDirecChange}>\n                            {Object.values(ShortDirection).map(d => (\n                                <option key={d} value={d}>\n                                    {t('stations.edit.interchange.tickDirec.' + d)}\n                                </option>\n                            ))}\n                        </Select>\n                    </ListItemSecondaryAction>\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>attach_money</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('stations.edit.interchange.paidArea')} />\n                    <ListItemSecondaryAction>\n                        <Switch\n                            color=\"primary\"\n                            edge=\"end\"\n                            onChange={(_, checked) => {\n                                dispatch(updateStationPaidArea(stnId, checked));\n                            }}\n                            checked={transfer.paid_area}\n                        />\n                    </ListItemSecondaryAction>\n                </ListItem>\n            </>\n        );\n    }, [stnId, t, dispatch, transfer.paid_area, transfer.tick_direc]);\n};\n"],"sourceRoot":""}