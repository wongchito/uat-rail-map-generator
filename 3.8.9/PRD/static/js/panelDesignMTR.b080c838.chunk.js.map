{"version":3,"sources":["panels/design/list-mtr.tsx"],"names":["useStyles","makeStyles","theme","createStyles","divider","margin","spacing","nested","paddingLeft","grid","paddingBottom","paddingRight","width","memo","NamePosLi","CustomiseDest","t","useTranslation","classes","useContext","ParamContext","param","dispatch","useMemo","primary","edge","color","checked","namePosMTR","isStagger","onChange","_","type","component","disablePadding","className","orientation","flexItem","variant","onClick","React","useState","customiseMTRDest","isLegacy","terminal","open","setOpen","handleChange","index","event","map","val","i","target","value","button","prevOpen","in","unmountOnExit","container","justify","alignItems","item","xs","sm","label","JSON","stringify"],"mappings":"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","file":"static/js/panelDesignMTR.b080c838.chunk.js","sourcesContent":["import React, { useContext, memo, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ParamContext } from '../../context';\nimport {\n    Divider,\n    List,\n    ListItem,\n    ListItemIcon,\n    Icon,\n    ListItemText,\n    ListItemSecondaryAction,\n    Switch,\n    Collapse,\n    makeStyles,\n    createStyles,\n    TextField,\n    Grid,\n    Button,\n} from '@material-ui/core';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        divider: {\n            margin: theme.spacing(0, 2),\n        },\n        nested: {\n            paddingLeft: theme.spacing(5),\n        },\n        grid: {\n            paddingLeft: theme.spacing(8),\n            paddingBottom: theme.spacing(1),\n            paddingRight: theme.spacing(2),\n            '& .MuiFormControl-root': {\n                width: '100%',\n            },\n        },\n    })\n);\n\nexport default memo(function DesignListMTR() {\n    return (\n        <>\n            <NamePosLi />\n            <Divider />\n            <CustomiseDest />\n        </>\n    );\n});\n\nconst NamePosLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const { param, dispatch } = useContext(ParamContext);\n\n    return useMemo(\n        () => (\n            <>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>text_rotation_none</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('design.txtFlip.text')} />\n                    <ListItemSecondaryAction>\n                        <Switch\n                            edge=\"end\"\n                            color=\"primary\"\n                            checked={param.namePosMTR.isStagger}\n                            onChange={(_, checked) => dispatch({ type: 'SET_TEXT_STAGGER', checked })}\n                        />\n                    </ListItemSecondaryAction>\n                </ListItem>\n\n                <List component=\"div\" disablePadding>\n                    <ListItem className={classes.nested}>\n                        <ListItemText primary={t('design.txtFlip.flipText')} />\n                        <Divider orientation=\"vertical\" flexItem className={classes.divider} />\n                        <Button variant=\"outlined\" color=\"primary\" onClick={() => dispatch({ type: 'SET_TEXT_FLIP' })}>\n                            {t('design.txtFlip.flip')}\n                        </Button>\n                    </ListItem>\n                </List>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.namePosMTR.isStagger, classes.nested, classes.divider]\n    );\n};\n\nconst CustomiseDest = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const { param, dispatch } = React.useContext(ParamContext);\n    const [open, setOpen] = React.useState(\n        param.customiseMTRDest.isLegacy || param.customiseMTRDest.terminal !== false\n    );\n\n    const handleChange = (index: number) => (event: React.ChangeEvent<HTMLInputElement>) => {\n        let terminal =\n            param.customiseMTRDest.terminal !== false\n                ? (param.customiseMTRDest.terminal.map((val, i) => (i === index ? event.target.value : val)) as Name)\n                : false;\n        dispatch({ type: 'SET_TERMINAL_OVERRIDE', terminal });\n    };\n\n    return useMemo(\n        () => (\n            <>\n                <ListItem button onClick={() => setOpen(prevOpen => !prevOpen)}>\n                    <ListItemIcon>\n                        <Icon>text_fields</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('design.MTRDest.button')} />\n                    {open ? <Icon color=\"action\">expand_less</Icon> : <Icon color=\"action\">expand_more</Icon>}\n                </ListItem>\n                <Collapse in={open}>\n                    <List component=\"div\" disablePadding>\n                        <ListItem className={classes.nested}>\n                            <ListItemText primary={t('design.MTRDest.legacy')} />\n                            <ListItemSecondaryAction>\n                                <Switch\n                                    color=\"primary\"\n                                    edge=\"end\"\n                                    onChange={(_, checked) => dispatch({ type: 'SET_DEST_LEGACY', isLegacy: checked })}\n                                    checked={param.customiseMTRDest.isLegacy}\n                                />\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                        <ListItem className={classes.nested}>\n                            <ListItemText primary={t('design.MTRDest.terminal')} />\n                            <ListItemSecondaryAction>\n                                <Switch\n                                    color=\"primary\"\n                                    edge=\"end\"\n                                    checked={param.customiseMTRDest.terminal !== false}\n                                    onChange={(_, checked) =>\n                                        dispatch({\n                                            type: 'SET_TERMINAL_OVERRIDE',\n                                            terminal: checked ? ['', ''] : false,\n                                        })\n                                    }\n                                />\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                        <Collapse in={param.customiseMTRDest.terminal !== false} unmountOnExit>\n                            <Grid\n                                container\n                                spacing={1}\n                                justify=\"center\"\n                                alignItems=\"flex-start\"\n                                className={classes.grid}\n                            >\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        label={t('design.MTRDest.zh')}\n                                        value={\n                                            param.customiseMTRDest.terminal ? param.customiseMTRDest.terminal[0] : ''\n                                        }\n                                        onChange={handleChange(0)}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        label={t('design.MTRDest.en')}\n                                        value={\n                                            param.customiseMTRDest.terminal ? param.customiseMTRDest.terminal[1] : ''\n                                        }\n                                        onChange={handleChange(1)}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </Collapse>\n                    </List>\n                </Collapse>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [JSON.stringify(param.customiseMTRDest), open, classes.nested, classes.grid]\n    );\n};\n"],"sourceRoot":""}