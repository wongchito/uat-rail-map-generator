{"version":3,"sources":["panels/design/list-common.tsx","panels/design/panel.tsx","panels/design/index.ts"],"names":["useStyles","makeStyles","theme","createStyles","dividerVertical","margin","spacing","nestedList","paddingLeft","DesignList","t","useTranslation","rmgStyle","useContext","CanvasContext","React","ParamContext","param","dispatch","useState","isCDiagOpen","setIsCDiagOpen","button","onClick","primary","secondary","style","backgroundColor","color","padding","Object","values","line_name","join","open","lineName","onUpdate","key","value","type","name","onClose","DirectionLi","classes","useMemo","direction","orientation","flexItem","className","variant","PlatformNumLi","platform_num","onChange","e","platform","target","PlatformNumSHMetroLi","handleSwitch","_","checked","in","unmountOnExit","component","disablePadding","placeholder","DesignMTR","lazy","DesignGZMTR","DesignPanel","container","justify","alignItems","item","xs","sm","md","lg","Suspense","fallback","Panel"],"mappings":"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","file":"static/js/panelDesign.bc7a40a2.chunk.js","sourcesContent":["import React, { useContext, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    ListItem,\n    ListItemIcon,\n    Icon,\n    ListItemText,\n    TextField,\n    Divider,\n    makeStyles,\n    createStyles,\n    Button,\n    ListItemSecondaryAction,\n    Switch,\n    Collapse,\n    List,\n} from '@material-ui/core';\nimport ColourDialog from '../colour-diag';\nimport { ParamContext, CanvasContext } from '../../context';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        dividerVertical: {\n            margin: theme.spacing(0, 2),\n        },\n        nestedList: {\n            paddingLeft: theme.spacing(5),\n        },\n    })\n);\n\nconst DesignList = () => {\n    const { t } = useTranslation();\n\n    const { rmgStyle } = useContext(CanvasContext);\n    const { param, dispatch } = React.useContext(ParamContext);\n\n    const [isCDiagOpen, setIsCDiagOpen] = React.useState(false);\n\n    const nameDialogUpdate = (key: string, value: any) => {\n        if (key === 'name') {\n            dispatch({ type: 'SET_LINE_NAME', name: Object.values(value) as Name });\n        }\n        if (key === 'theme') {\n            dispatch({ type: 'SET_THEME', theme: value });\n        }\n    };\n\n    return (\n        <>\n            <ListItem button onClick={() => setIsCDiagOpen(true)}>\n                <ListItemIcon>\n                    <Icon>color_lens</Icon>\n                </ListItemIcon>\n                <ListItemText\n                    primary={t('design.theme')}\n                    secondary={\n                        <span\n                            style={{\n                                backgroundColor: param.theme[2],\n                                color: param.theme[3],\n                                padding: '.1rem .3rem',\n                            }}\n                        >\n                            {Object.values(param.line_name).join()}\n                        </span>\n                    }\n                />\n                <Icon color=\"action\">arrow_right</Icon>\n            </ListItem>\n            <ColourDialog\n                open={isCDiagOpen}\n                theme={param.theme}\n                lineName={param.line_name}\n                onUpdate={nameDialogUpdate}\n                onClose={() => setIsCDiagOpen(false)}\n            />\n            <Divider />\n            <DirectionLi />\n            <Divider />\n            {rmgStyle === 'shmetro' ? <PlatformNumSHMetroLi /> : <PlatformNumLi />}\n        </>\n    );\n};\n\nexport default DesignList;\n\nconst DirectionLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const { param, dispatch } = React.useContext(ParamContext);\n\n    return React.useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>directions</Icon>\n                </ListItemIcon>\n                <ListItemText\n                    primary={t('design.direction.button')}\n                    secondary={t('design.direction.' + param.direction)}\n                />\n                <Divider orientation=\"vertical\" flexItem className={classes.dividerVertical} />\n                <Button variant=\"outlined\" color=\"primary\" onClick={() => dispatch({ type: 'SET_DIRECTION' })}>\n                    {t('design.direction.switch')}\n                </Button>\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [classes.dividerVertical, param.direction]\n    );\n};\n\nconst PlatformNumLi = () => {\n    const { t } = useTranslation();\n    const { param, dispatch } = React.useContext(ParamContext);\n\n    return React.useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>looks_one</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('design.platform')} />\n                <TextField\n                    value={param.platform_num}\n                    onChange={e => dispatch({ type: 'SET_PLATFORM', platform: e.target.value })}\n                />\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.platform_num]\n    );\n};\n\nconst PlatformNumSHMetroLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const { param, dispatch } = useContext(ParamContext);\n\n    const handleSwitch = (_: React.ChangeEvent<HTMLInputElement>, checked: boolean) => {\n        if (checked) {\n            dispatch({ type: 'SET_PLATFORM', platform: '' });\n        } else {\n            dispatch({ type: 'SET_PLATFORM', platform: false });\n        }\n    };\n\n    return useMemo(\n        () => (\n            <>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>looks_one</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('design.platform')} />\n                    <ListItemSecondaryAction>\n                        <Switch color=\"primary\" checked={param.platform_num !== false} onChange={handleSwitch} />\n                    </ListItemSecondaryAction>\n                </ListItem>\n                <Collapse in={param.platform_num !== false} unmountOnExit>\n                    <List component=\"div\" disablePadding className={classes.nestedList}>\n                        <ListItem>\n                            <TextField\n                                placeholder={t('design.platform')}\n                                value={param.platform_num}\n                                onChange={e => dispatch({ type: 'SET_PLATFORM', platform: e.target.value })}\n                            />\n                        </ListItem>\n                    </List>\n                </Collapse>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.platform_num, classes.nestedList]\n    );\n};\n","import React, { useContext } from 'react';\n\nimport { Grid, Paper, List, Divider, LinearProgress } from '@material-ui/core';\n\nimport DesignCommon from './list-common';\nimport { CanvasContext } from '../../context';\nconst DesignMTR = React.lazy(() => import(/* webpackChunkName: \"panelDesignMTR\" */ './list-mtr'));\nconst DesignGZMTR = React.lazy(() => import(/* webpackChunkName: \"panelDesignGZMTR\" */ './list-gzmtr'));\n\nconst DesignPanel = () => {\n    const { rmgStyle } = useContext(CanvasContext);\n    return (\n        <Grid container spacing={3} justify=\"center\" alignItems=\"flex-start\">\n            <Grid item xs={12} sm={10} md={7} lg={5}>\n                <Paper>\n                    <List component=\"div\" disablePadding>\n                        <DesignCommon />\n                        {rmgStyle === 'mtr' && (\n                            <React.Suspense fallback={<LinearProgress />}>\n                                <Divider />\n                                <DesignMTR />\n                            </React.Suspense>\n                        )}\n                        {rmgStyle === 'gzmtr' && (\n                            <React.Suspense fallback={<LinearProgress />}>\n                                <Divider />\n                                <DesignGZMTR />\n                            </React.Suspense>\n                        )}\n                    </List>\n                </Paper>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default DesignPanel;\n","import Panel from './panel';\n\nexport default Panel;\n"],"sourceRoot":""}