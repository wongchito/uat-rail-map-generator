{"version":3,"file":"static/js/panelSaveTemplateDialog.d061900a.chunk.js","mappings":"+dAiCMA,GAAYC,EAAAA,EAAAA,IAAW,SAAAC,GAAK,eAC9BC,EAAAA,EAAAA,GAAa,CACTC,MAAI,GACAC,QAAS,OACTC,cAAe,QAFf,SAGCJ,EAAMK,YAAYC,KAAK,MAAQ,CAC5BF,cAAe,SACfG,WAAY,EACZC,YAAaR,EAAMS,QAAQ,GAC3BC,aAAcV,EAAMS,QAAQ,MAPhC,SASCT,EAAMK,YAAYM,GAAG,MAAQ,CAC1BC,OAAQ,MAVZ,GAaJC,KAAG,GACCC,SAAU,EACVC,UAAW,OACX,oBAAqB,CACjBX,cAAe,SAJpB,SAMEJ,EAAMK,YAAYC,KAAK,MAAQ,CAC5BQ,SAAU,oBAPf,SASEd,EAAMK,YAAYM,GAAG,MAAQ,CAC1B,oBAAqB,CACjBK,eAAgB,gBAXzB,GAeHC,SAAU,CACNC,KAAM,EACNC,SAAU,OACVL,SAAU,UChEtB,EDqEkB,SAACM,GACf,OAAoBC,EAAAA,EAAAA,KAAZC,EAAR,EAAQA,EAAGC,EAAX,EAAWA,KACLC,EAAU1B,IACV2B,GAAWC,EAAAA,EAAAA,MAETC,GAAiBC,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMC,OAA/CH,aAEF3B,GAAQ+B,EAAAA,EAAAA,KACRC,GAAWC,EAAAA,EAAAA,GAAcjC,EAAMK,YAAYC,KAAK,OAEtD,EAAgC4B,EAAAA,SAAe,GAA/C,eAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAAkBC,EAAAA,EAAUH,GAAUI,GAmB5C,OAAOL,EAAAA,SACH,kBACI,UAACM,EAAA,EAAD,CAAQC,KAAMrB,EAAMqB,KAAMC,QAAS,kBAAMtB,EAAMsB,WAA/C,WACI,SAACC,EAAA,EAAD,UAAcrB,EAAE,qBAChB,UAACsB,EAAA,EAAD,CAAeC,UAAQ,EAACC,UAAWtB,EAAQtB,KAA3C,WACI,SAAC6C,EAAA,EAAD,CACIC,MAAOb,EACPc,YAAajB,EAAW,aAAe,WACvCkB,QAAQ,aACRC,cAAc,MACdC,UAAU,UACVC,eAAe,UACfC,SAAU,SAACC,EAAGP,GAAJ,OAAcZ,EAAYY,IAPxC,SASKV,EAAAA,EAAAA,KAAc,SAAAkB,GAAC,OACZ,SAACC,EAAA,EAAD,CAEIC,OAAOC,EAAAA,EAAAA,IAAcH,EAAEI,KAAMrC,EAAKsC,WAClCf,UAAWtB,EAAQX,KAFd2C,EAAEjB,UAMnB,SAACuB,EAAA,EAAD,CAAYC,UAAU,MAAMC,KAAK,WAAWlB,UAAWtB,EAAQP,SAA/D,UACI,SAACgD,EAAA,EAAD,CAAMC,gBAAc,EAApB,SACKC,EAAAA,aAAa7B,EAAAA,EAAUH,GAAUI,IAAI6B,KAAI,SAAAC,GAAI,OAC1C,SAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,SA1CxBC,EA0C6CJ,EAAKI,UA1CnD,iBAAsB,iHAEb,oBACmDpC,EADnD,YACsEoC,IAHzD,cAE5BC,EAF4B,OAK5BC,GAAeC,EAAAA,EAAAA,IAAYF,EAAOG,SALN,SAM5BC,OAAOC,WAAWC,UAAU,WAAYC,KAAKC,UAAUP,IAN3B,OAS5BQ,EAASC,EAAAA,GAAaT,EAAaU,OAAOC,MAAK,SAAA9B,GAAC,OAAIA,IAAM7B,KAAgBA,EAAe4D,EAAAA,GAC/F9D,GAAS+D,EAAAA,EAAAA,IAAaL,KACtBM,EAAAA,EAAAA,GAAYd,GAXsB,kDAalCe,QAAQC,MAAR,MAbkC,2DA0Cd,UACI,SAACC,EAAA,EAAD,CACIC,SAASlC,EAAAA,EAAAA,IAAcU,EAAKT,KAAMrC,EAAKsC,cAFYQ,EAAKI,UA1CxE,IAACA,aAmDT,SAACqB,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,CAAQ7C,QAAQ,WAAWsB,QAAS,kBAAMpD,EAAMsB,WAAWsD,MAAM,UAAUC,WAAS,EAApF,SACK3E,EAAE,0BAMnB,CAACF,EAAMqB,KAAMN,EAAUH,EAAUT,EAAK2E,SAAUjB,KAAKC,UAAU1D","sources":["panels/save/template-diag/dialog.tsx","panels/save/template-diag/index.ts"],"sourcesContent":["import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    ListItem,\n    ListItemText,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    List,\n    DialogActions,\n    Button,\n    createStyles,\n    makeStyles,\n    Tabs,\n    Tab,\n    Typography,\n    useTheme,\n    useMediaQuery,\n} from '@material-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { getTransText2, updateParam } from '../../../utils';\nimport { templateList } from '../../../constants/templates/data';\nimport { companies } from '../../../constants/company-config';\nimport { LanguageCode, RMGParam, canvasConfig, AllCanvas } from '../../../constants/constants';\nimport { selectCanvas } from '../../../redux/app/action';\nimport { useAppSelector } from '../../../redux';\nimport { reRenderApp } from '../../../index';\n\ninterface TemplateDialogProps {\n    open: boolean;\n    onClose: () => void;\n}\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        root: {\n            display: 'flex',\n            flexDirection: 'row',\n            [theme.breakpoints.down('xs')]: {\n                flexDirection: 'column',\n                paddingTop: 0,\n                paddingLeft: theme.spacing(2),\n                paddingRight: theme.spacing(2),\n            },\n            [theme.breakpoints.up('sm')]: {\n                height: 350,\n            },\n        },\n        tab: {\n            minWidth: 0,\n            textAlign: 'left',\n            '& .MuiTab-wrapper': {\n                flexDirection: 'row',\n            },\n            [theme.breakpoints.down('xs')]: {\n                minWidth: 'calc(100% / 3)',\n            },\n            [theme.breakpoints.up('sm')]: {\n                '& .MuiTab-wrapper': {\n                    justifyContent: 'flex-start',\n                },\n            },\n        },\n        tabpanel: {\n            flex: 1,\n            overflow: 'auto',\n            minWidth: 220,\n        },\n    })\n);\n\nconst NewDialog = (props: TemplateDialogProps) => {\n    const { t, i18n } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    const { canvasToShow } = useAppSelector(state => state.app);\n\n    const theme = useTheme();\n    const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\n\n    const [tabValue, setTabValue] = React.useState(0);\n    const selectedCompany = companies[tabValue].id;\n\n    const handleClick = (filename: string) => async () => {\n        try {\n            const module = await import(\n                /* webpackChunkName: \"templates\" */ `../../../constants/templates/${selectedCompany}/${filename}`\n            );\n            const updatedParam = updateParam(module.default) as RMGParam;\n            await window.rmgStorage.writeFile('rmgParam', JSON.stringify(updatedParam));\n\n            // reset to AllCanvas if current canvas is not supported in the new style\n            const canvas = canvasConfig[updatedParam.style].some(c => c === canvasToShow) ? canvasToShow : AllCanvas;\n            dispatch(selectCanvas(canvas));\n            reRenderApp(updatedParam);\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    return React.useMemo(\n        () => (\n            <Dialog open={props.open} onClose={() => props.onClose()}>\n                <DialogTitle>{t('file.new.title')}</DialogTitle>\n                <DialogContent dividers className={classes.root}>\n                    <Tabs\n                        value={tabValue}\n                        orientation={isMobile ? 'horizontal' : 'vertical'}\n                        variant=\"scrollable\"\n                        scrollButtons=\"off\"\n                        textColor=\"primary\"\n                        indicatorColor=\"primary\"\n                        onChange={(_, value) => setTabValue(value)}\n                    >\n                        {companies.map(c => (\n                            <Tab\n                                key={c.id}\n                                label={getTransText2(c.name, i18n.languages as LanguageCode[])}\n                                className={classes.tab}\n                            />\n                        ))}\n                    </Tabs>\n                    <Typography component=\"div\" role=\"tabpanel\" className={classes.tabpanel}>\n                        <List disablePadding>\n                            {templateList[companies[tabValue].id].map(temp => (\n                                <ListItem button onClick={handleClick(temp.filename)} key={temp.filename}>\n                                    <ListItemText\n                                        primary={getTransText2(temp.name, i18n.languages as LanguageCode[])}\n                                    />\n                                </ListItem>\n                            ))}\n                        </List>\n                    </Typography>\n                </DialogContent>\n                <DialogActions>\n                    <Button variant=\"outlined\" onClick={() => props.onClose()} color=\"primary\" autoFocus>\n                        {t('dialog.cancel')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.open, tabValue, isMobile, i18n.language, JSON.stringify(classes)]\n    );\n};\n\nexport default NewDialog;\n","import Dialog from './dialog';\n\nexport default Dialog;\n"],"names":["useStyles","makeStyles","theme","createStyles","root","display","flexDirection","breakpoints","down","paddingTop","paddingLeft","spacing","paddingRight","up","height","tab","minWidth","textAlign","justifyContent","tabpanel","flex","overflow","props","useTranslation","t","i18n","classes","dispatch","useDispatch","canvasToShow","useAppSelector","state","app","useTheme","isMobile","useMediaQuery","React","tabValue","setTabValue","selectedCompany","companies","id","Dialog","open","onClose","DialogTitle","DialogContent","dividers","className","Tabs","value","orientation","variant","scrollButtons","textColor","indicatorColor","onChange","_","c","Tab","label","getTransText2","name","languages","Typography","component","role","List","disablePadding","templateList","map","temp","ListItem","button","onClick","filename","module","updatedParam","updateParam","default","window","rmgStorage","writeFile","JSON","stringify","canvas","canvasConfig","style","some","AllCanvas","selectCanvas","reRenderApp","console","error","ListItemText","primary","DialogActions","Button","color","autoFocus","language"],"sourceRoot":""}