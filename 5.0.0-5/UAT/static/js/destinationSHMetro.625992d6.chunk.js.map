{"version":3,"file":"static/js/destinationSHMetro.625992d6.chunk.js","mappings":"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","sources":["svgs/destination/destination-shmetro.tsx"],"sourcesContent":["import React, { memo, useMemo, forwardRef, useRef, useState, useEffect } from 'react';\nimport { useAppSelector } from '../../redux';\nimport { Name } from '../../constants/constants';\n\nexport default memo(function DestinationSHMetro() {\n    return (\n        <>\n            <DefsSHMetro />\n            <InfoSHMetro />\n        </>\n    );\n});\n\nconst DefsSHMetro = memo(() => (\n    <defs>\n        {/* An extension of the line/path. Remember to minus the stroke-width.  */}\n        <marker id=\"slope\" viewBox=\"-1.5 0 3 1.5\" refY={0.5}>\n            <path d=\"M0,0L1,1H-1z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n    </defs>\n));\n\nconst InfoSHMetro = () => {\n    const { routes, branches } = useAppSelector(store => store.helper);\n    const {\n        line_name,\n        current_stn_idx: current_stn_id,\n        direction,\n        stn_list,\n        platform_num,\n        info_panel_type,\n        svgWidth,\n        svg_height,\n        loop,\n    } = useAppSelector(store => store.param);\n\n    const validDests = !loop\n        ? [\n              // get valid destination of each branch\n              ...new Set(\n                  routes\n                      .filter(route => route.includes(current_stn_id))\n                      .map(route => {\n                          let res = route.filter(stn_id => !['linestart', 'lineend'].includes(stn_id));\n                          return direction === 'l' ? res[0] : res.reverse()[0];\n                      })\n              ),\n          ]\n        : (() => {\n              // get pivot stations from the loop line\n              const loop_line = branches[0].filter(stn_id => !['linestart', 'lineend'].includes(stn_id));\n              const non_undefined_loop_line = [\n                  ...(direction === 'l' ? loop_line : loop_line.reverse()),\n                  ...(direction === 'l' ? loop_line : loop_line.reverse()),\n                  ...(direction === 'l' ? loop_line : loop_line.reverse()),\n              ];\n              const current_stn_idx = non_undefined_loop_line.findIndex(stn_id => current_stn_id === stn_id);\n              return non_undefined_loop_line\n                  .slice(current_stn_idx + 1)\n                  .filter(stn_id => stn_list[stn_id].loop_pivot)\n                  .slice(undefined, 2)\n                  .reverse();\n          })();\n    // get the name from stn_id[]\n    const destNames: Name[] = loop\n        ? // loop line will always be two lines\n          validDests.map(id => stn_list[id].name.map(s => s.replace('\\\\', ' ')) as Name)\n        : info_panel_type === 'sh2020'\n        ? // `sh2020` type will always be two lines\n          validDests.map(id => stn_list[id].name.map(s => s.replace('\\\\', ' ')) as Name)\n        : [\n              // only one line in `sh` type\n              [\n                  validDests.map(id => stn_list[id].name[0]).join('，'),\n                  validDests\n                      .map(id => stn_list[id].name[1])\n                      .join(', ')\n                      .replace('\\\\', ' '),\n              ],\n          ];\n\n    const terminalEl = useRef<SVGGElement | null>(null);\n    const [terminalBBox, setTerminalBBox] = useState({ width: 0 } as SVGRect);\n    useEffect(\n        () => setTerminalBBox(terminalEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [JSON.stringify(destNames), JSON.stringify(current_stn_id)]\n    );\n\n    const [middle, MARGIN, PADDING, LINEBOX_WIDTH, PLATFORM_WIDTH] = [svgWidth.destination / 2, 10, 36, 264, 325];\n    // Alignment Priority:\n    // 1. Centre of canvas\n    // 2. Centre of remaining\n    const platformX =\n        middle - MARGIN - PADDING - terminalBBox.width >= PLATFORM_WIDTH / 2 &&\n        middle - MARGIN - PADDING - LINEBOX_WIDTH >= PLATFORM_WIDTH / 2\n            ? middle\n            : direction === 'l'\n            ? (svgWidth.destination + terminalBBox.width - LINEBOX_WIDTH) / 2\n            : (svgWidth.destination - terminalBBox.width + LINEBOX_WIDTH) / 2;\n\n    // the platform screen doors flash light\n    // #20\n    // $('g#station_info_shmetro > rect').attr({ transform: `translate(${this._svgDestWidth / 2},${250 + dh})` })\n\n    return (\n        <g transform={`translate(0,${svg_height - 300})`}>\n            <path\n                stroke=\"var(--rmg-theme-colour)\"\n                strokeWidth={12}\n                d={\n                    direction === 'l'\n                        ? `M${svgWidth.destination - 24},16 H 36`\n                        : `M24,16 H ${svgWidth.destination - 36}`\n                }\n                transform=\"translate(0,220)\"\n                markerEnd=\"url(#slope)\"\n            />\n\n            <Terminal ref={terminalEl} destNames={destNames} />\n            {platform_num !== false && (\n                <g transform={`translate(${platformX},0)`}>\n                    <PlatformNum />\n                </g>\n            )}\n            {/* <!-- Todo: fix this absolute position --> */}\n            {/* Todo: fix svgWidth.destination*0.8, this has only been tested on 1000 width */}\n\n            {line_name[0].match(/^[\\w\\d]+/) ? <LineNameBoxNumber /> : <LineNameBoxText />}\n        </g>\n    );\n};\n\nconst Terminal = forwardRef((props: { destNames: Name[] }, ref: React.Ref<SVGGElement>) => {\n    const { destNames } = props;\n    const { direction, svgWidth } = useAppSelector(store => store.param);\n\n    return (\n        <g ref={ref} transform={`translate(${direction === 'l' ? 36 : svgWidth.destination - 36},145)`}>\n            {/* this is not a generalized implementation, only dest length of 1 and 2 are supported */}\n            <g transform={`translate(0,${destNames.length === 2 ? -20 : 20})`}>\n                <path\n                    d=\"M60,60L0,0L60-60H100L55-15H160V15H55L100,60z\"\n                    fill=\"black\"\n                    transform={`rotate(${direction === 'l' ? 0 : 180})scale(0.8)`}\n                />\n            </g>\n            <g\n                textAnchor={direction === 'l' ? 'start' : 'end'}\n                transform={`translate(${direction === 'l' ? 128 + 20 : -128 - 20},25)`}\n            >\n                {destNames.map((name, i) => (\n                    <React.Fragment key={i}>\n                        <text className=\"rmg-name__zh\" fontSize={70} dy={i * -100 + 7} key={`zh${i}`}>\n                            {'往' + name[0]}\n                        </text>\n                        <text className=\"rmg-name__en\" fontSize={25} dy={i * -100 + 40} key={`en${i}`}>\n                            {'To ' + name[1]}\n                        </text>\n                    </React.Fragment>\n                ))}\n            </g>\n        </g>\n    );\n});\n\nconst PlatformNum = () => {\n    const param = useAppSelector(store => store.param);\n\n    // Total width: 325\n    return useMemo(\n        () => (\n            <g transform={`translate(${-325 / 2 + 60},150)`}>\n                <circle r={60} fill=\"none\" stroke=\"black\" strokeWidth={2} />\n                <text className=\"rmg-name__en\" dominantBaseline=\"central\" fontSize={120} textAnchor=\"middle\">\n                    {param.platform_num}\n                </text>\n                <text className=\"rmg-name__zh\" fontSize={100} dominantBaseline=\"central\" x={65}>\n                    站台\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.platform_num]\n    );\n};\n\nconst LineNameBoxText = () => {\n    const { line_name, direction, svgWidth } = useAppSelector(store => store.param);\n\n    const boxX = direction === 'l' ? svgWidth.destination - 42 : 42;\n\n    // get the exact station name width so that the\n    // line color rectangle can be the right width.\n    const stnNameEl = useRef<SVGGElement | null>(null);\n    // the original name position\n    const [bBox, setBBox] = React.useState({ width: 0 } as DOMRect);\n    React.useEffect(\n        () => setBBox(stnNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [...line_name]\n    );\n\n    const rectDx = (direction === 'l' ? -bBox.width : 0) - 6;\n    const stnNameEnDx = ((direction === 'l' ? -1 : 1) * bBox.width) / 2;\n\n    return useMemo(\n        () => (\n            <g transform={`translate(${boxX},92)`}>\n                <rect fill=\"var(--rmg-theme-colour)\" x={rectDx} width={bBox.width + 10} height={120} />\n                <g\n                    textAnchor={direction === 'r' ? 'start' : 'end'}\n                    transform=\"translate(0,68)\"\n                    fill=\"var(--rmg-theme-fg)\"\n                >\n                    <g ref={stnNameEl}>\n                        <text className=\"rmg-name__zh\" fontSize={68}>\n                            {line_name[0]}\n                        </text>\n                    </g>\n                    <text className=\"rmg-name__en\" fontSize={30} textAnchor=\"middle\" x={stnNameEnDx} dy={42}>\n                        {line_name[1]}\n                    </text>\n                </g>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [bBox, boxX, direction, line_name]\n    );\n};\n\nconst LineNameBoxNumber = () => {\n    const param = useAppSelector(store => store.param);\n\n    const [lineNumber, lineNameRes] = param.line_name[0].match(/^[\\w\\d]+|.+/g) as string[];\n\n    // Number width: 108\n    // Text width: 136\n    // Gap: 20\n    // Left: 108/2 + 20 + 136 = 210\n    // Right: 108/2 = 54\n    const boxX = param.direction === 'l' ? param.svgWidth.destination - 36 - 210 : 36 + 54;\n\n    // Total width: 264\n    return useMemo(\n        () => (\n            <g transform={`translate(${boxX},92)`}>\n                <rect fill=\"var(--rmg-theme-colour)\" x={-54} width={108} height={120} />\n                <text\n                    className=\"rmg-name__zh\"\n                    fill=\"var(--rmg-theme-fg)\"\n                    fontSize={96}\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    transform=\"translate(0,60)\"\n                    letterSpacing={-5}\n                >\n                    {lineNumber}\n                </text>\n                <g textAnchor=\"start\" transform=\"translate(74,68)\">\n                    <text className=\"rmg-name__zh\" fontSize={68}>\n                        {lineNameRes}\n                    </text>\n                    <text className=\"rmg-name__en\" fontSize={30} dy={42}>\n                        {param.line_name[1]}\n                    </text>\n                </g>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [boxX, ...param.line_name]\n    );\n};\n"],"names":["memo","DefsSHMetro","InfoSHMetro","id","viewBox","refY","d","fill","useAppSelector","store","helper","routes","branches","param","line_name","current_stn_id","current_stn_idx","direction","stn_list","platform_num","info_panel_type","svgWidth","svg_height","loop","validDests","loop_line","filter","stn_id","includes","non_undefined_loop_line","reverse","findIndex","slice","loop_pivot","undefined","Set","route","map","res","destNames","name","s","replace","join","terminalEl","useRef","useState","width","terminalBBox","setTerminalBBox","useEffect","current","getBBox","JSON","stringify","middle","destination","platformX","PLATFORM_WIDTH","transform","stroke","strokeWidth","markerEnd","Terminal","ref","PlatformNum","match","LineNameBoxNumber","LineNameBoxText","forwardRef","props","length","textAnchor","i","className","fontSize","dy","useMemo","r","dominantBaseline","x","boxX","stnNameEl","React","bBox","setBBox","rectDx","stnNameEnDx","height","lineNumber","lineNameRes","letterSpacing"],"sourceRoot":""}