{"version":3,"file":"static/js/indoorSHMetro.8c619ff6.chunk.js","mappings":"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","sources":["svgs/indoor/indoor-shmetro.tsx","svgs/railmap/methods/mtr.ts"],"sourcesContent":["import React, { memo, useMemo } from 'react';\nimport { adjacencyList, getXShareMTR, criticalPathMethod, getStnState } from '../railmap/methods/share';\nimport StationSHMetro from './station-shmetro';\nimport { StationsMTR } from '../railmap/methods/mtr';\nimport { StationDict, Services } from '../../constants/constants';\nimport { useAppSelector } from '../../redux';\nimport LoopSHMetro from '../railmap/main/loop-shmetro';\n\nexport default memo(function IndoorWrapperSHMetro() {\n    const { loop } = useAppSelector(store => store.param);\n    return (\n        <>\n            <DefsSHMetro />\n            {loop ? <LoopSHMetro bank_angle={false} /> : <IndoorSHMetro />}\n            <InfoElements />\n        </>\n    );\n});\n\nexport const DefsSHMetro = React.memo(() => (\n    <defs>\n        <circle\n            id=\"stn_indoor_sh\"\n            fill=\"var(--rmg-white)\"\n            strokeWidth={5}\n            stroke=\"var(--rmg-theme-colour)\"\n            r={8}\n            transform=\"scale(1.5)\"\n        />\n        <path\n            id=\"int2_indoor_sh\"\n            fill=\"var(--rmg-white)\"\n            stroke=\"black\"\n            transform=\"translate(0, -10)scale(2)\"\n            strokeWidth={4}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V10 a 5,5 0 1 1 -10,0Z\"\n        />\n        <path\n            id=\"express_indoor_sh\"\n            fill=\"var(--rmg-white)\"\n            stroke=\"black\"\n            transform=\"translate(0, -10)scale(2)\"\n            strokeWidth={4}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V25 a 5,5 0 1 1 -10,0Z\"\n        />\n        <path\n            id=\"direct_indoor_sh\"\n            fill=\"var(--rmg-white)\"\n            stroke=\"black\"\n            transform=\"translate(0, -10)scale(2)\"\n            strokeWidth={4}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V40 a 5,5 0 1 1 -10,0Z\"\n        />\n    </defs>\n));\n\nconst leftWideFactor = (stnList: StationDict, stnId: string) => {\n    let res = 0;\n    if (stnList[stnId].parents.length === 2) res += 1;\n    if (stnList[stnList[stnId].parents[0]].children.length === 2) res += 1;\n    return res;\n};\n\nconst rightWideFactor = (stnList: StationDict, stnId: string) => {\n    let res = 0;\n    if (stnList[stnId].children.length === 2) res += 1;\n    if (stnList[stnList[stnId].children[0]].parents.length === 2) res += 1;\n    return res;\n};\n\nconst IndoorSHMetro = () => {\n    const { routes, branches, depsStr: deps } = useAppSelector(store => store.helper);\n    const param = useAppSelector(store => store.param);\n\n    const adjMat = adjacencyList(param.stn_list, leftWideFactor, rightWideFactor);\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const xShares = React.useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShareMTR(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n    const lineXs: [number, number] = [\n        (param.svgWidth.indoor * param.padding) / 100,\n        param.svgWidth.indoor * (1 - param.padding / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = useMemo(\n        () => StationsMTR.getYShares(param.stn_list, branches),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: yShares[cur] * param.branch_spacing * 2 }),\n        {} as typeof yShares\n    );\n\n    const stnStates = React.useMemo(\n        () => getStnState(param.current_stn_idx, routes, param.direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.current_stn_idx, param.direction, routes.toString()]\n    );\n\n    const servicesAll = Object.values(Services);\n    const servicesPresent = Object.values(param.stn_list)\n        .map(stationInfo => stationInfo.services)\n        .flat() // all services in all stations\n        .reduce(\n            (acc, cur) => {\n                acc[servicesAll.indexOf(cur)] = true;\n                return acc;\n            },\n            [false, false, false] as [boolean, boolean, boolean]\n        ) // set the flag in order\n        .map((bool, i) => [servicesAll[i], bool] as [Services, boolean]) // zip\n        .filter(s => s[1]) // get the existing service\n        .map(s => s[0]); // maintain the services' order\n\n    const linePaths = StationsMTR.drawLine(\n        branches,\n        stnStates,\n        param.stn_list,\n        lineXs,\n        xs,\n        ys,\n        param.branch_spacing * 2,\n        criticalPath,\n        0\n    );\n\n    return (\n        <g id=\"main\" transform={`translate(0,${param.svg_height / 2})`}>\n            <Lines paths={linePaths} services={servicesPresent} />\n            <StationGroup xs={xs} ys={ys} services={servicesPresent} />\n        </g>\n    );\n};\n\nconst Lines = (props: { paths: { main: string[]; pass: string[] }; services: Services[] }) => {\n    return (\n        <g fill=\"none\" strokeWidth={12} stroke=\"var(--rmg-theme-colour)\">\n            {props.services.map((service, i) => (\n                <g key={`indoor_line_${i}`} transform={`translate(0, ${i * 30})`}>\n                    {props.paths.main.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                    {props.paths.pass.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                </g>\n            ))}\n        </g>\n    );\n};\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    services: Services[]; // determine if all station text should be upward\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { branches } = useAppSelector(store => store.helper);\n    const param = useAppSelector(store => store.param);\n    const { xs, ys, services } = props;\n\n    return (\n        <g>\n            {Object.keys(param.stn_list)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .filter(stnId => param.stn_list[stnId].services.length !== 0)\n                .map(stnId => (\n                    <g key={stnId} transform={`translate(${xs[stnId]},${ys[stnId]})`}>\n                        <StationSHMetro\n                            stnId={stnId}\n                            nameDirection={\n                                branches\n                                    .filter(branch => branch.includes(stnId))\n                                    .map(branch =>\n                                        branch.indexOf(stnId) % 2 === 0 || services.length > 1 ? 'downward' : 'upward'\n                                    )[0] as 'upward' | 'downward'\n                            }\n                            services={services}\n                        />\n                    </g>\n                ))}\n        </g>\n    );\n};\n\nconst InfoElements = () => {\n    const param = useAppSelector(store => store.param);\n\n    return React.useMemo(\n        () => (\n            <>\n                <g transform={`translate(${param.svgWidth.indoor / 2},50)`}>\n                    <text textAnchor=\"middle\" fontSize=\"30\" className=\"rmg-name__zh\">\n                        轨道交通{param.line_name[0]}运营线路示意图\n                    </text>\n                </g>\n                <g transform={`translate(${param.svgWidth.indoor / 2},${param.svg_height - 270})`}>\n                    <text textAnchor=\"middle\" fontSize=\"18\" className=\"rmg-name__zh\" dx=\"-30\" dy=\"230\">\n                        友情提示：请留意您需要换乘线路的首末班时间，以免耽误您的出行，末班车进站前三分钟停售该末班车车票。\n                    </text>\n                    <text textAnchor=\"middle\" fontSize=\"12\" className=\"rmg-name__en\" dx=\"10\" dy=\"250\">\n                        Please pay attention to the interchange schedule if you want to transfer to other lines. Stop\n                        selling tickets 3 minutes before the last train services.\n                    </text>\n                    <g transform=\"translate(-600,215)\">\n                        <rect x=\"-5\" y=\"-25\" width=\"100\" height=\"70\" fill=\"none\" stroke=\"black\" rx=\"5\"></rect>\n                        <line x1=\"28\" x2=\"28\" y1=\"-20\" y2=\"40\" stroke=\"black\"></line>\n                        <text className=\"rmg-name__zh\" dx=\"3\" fontSize=\"18\">\n                            图\n                        </text>\n                        <text className=\"rmg-name__zh\" dx=\"3\" dy=\"18\" fontSize=\"18\">\n                            例\n                        </text>\n                        <text className=\"rmg-name__en\" dy=\"35\" fontSize=\"8\">\n                            legend\n                        </text>\n                        <use\n                            transform=\"translate(45,10)\"\n                            xlinkHref=\"#int2_indoor_sh\"\n                            stroke=\"var(--rmg-theme-colour)\"\n                        />\n                        <text className=\"rmg-name__zh\" dx=\"60\" dy=\"10\" fontSize=\"10\">\n                            换乘站\n                        </text>\n                        <text className=\"rmg-name__en\" dx=\"60\" dy=\"20\" fontSize=\"6\">\n                            Interchange\n                        </text>\n                        <text className=\"rmg-name__en\" dx=\"60\" dy=\"30\" fontSize=\"6\">\n                            Station\n                        </text>\n                    </g>\n                </g>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.svgWidth.indoor, param.svg_height, param.line_name]\n    );\n};\n\n/* Some unused functions to split branches from the main line.\n * Note the branches here has a slightly different meaning.\n * It refers to all the line sections that have a parallel line\n * rather than the upper or the bottom branch section.\n *\n * Currently these functions only can be used on a line that\n * branches in the middle and ends at the linestart, which also\n * means that linestart has two children in the adjMat.\n */\n/*\nconst getPathLength = (adjMat: ReturnType<typeof adjacencyList>, from: string, to: string): number => {\n    let cnt = 0, cur = from\n    while (Object.keys(adjMat[cur]).length > 0) {\n        cnt += 1\n        // we choose the first for all the cases so that the length for different branches will end in the same node\n        cur = Object.keys(adjMat[cur])[0]\n    }\n    return cnt\n}\nconst getIntersectionStn = (adjMat: ReturnType<typeof adjacencyList>) => {\n    const start = Object.keys(adjMat['linestart'])\n\n    let a = start[0], b = start[1]\n    const lenA = getPathLength(adjMat, a, 'lineend')\n    const lenB = getPathLength(adjMat, b, 'lineend')\n    if (lenA < lenB) {\n        for (let i = 0; i < lenB - lenA; i++) b = Object.keys(adjMat[b])[0]\n    } else {\n        for (let i = 0; i < lenA - lenB; i++) a = Object.keys(adjMat[a])[0]\n    }\n    while (a !== b) {\n        a = Object.keys(adjMat[a])[0]\n        b = Object.keys(adjMat[b])[0]\n    }\n    return a\n}\nconst getBranchesAndMainLine = (adjMat: ReturnType<typeof adjacencyList>) => {\n    const start = Object.keys(adjMat['linestart'])\n    const intersection = getIntersectionStn(adjMat)\n    return {\n        'branches': [\n            criticalPathMethod(start[0], intersection, adjMat).nodes,\n            criticalPathMethod(start[1], intersection, adjMat).nodes\n        ],\n        'main': criticalPathMethod(intersection, 'lineend', adjMat).nodes\n    }\n}\nconst getYShares = (adjMat: ReturnType<typeof adjacencyList>,\n    branchesAndMainLine: ReturnType<typeof getBranchesAndMainLine>,\n    stnId: string) => {\n    const branches = branchesAndMainLine.branches\n    const main = branchesAndMainLine.main\n\n    if (main.includes(stnId)) {\n        return 3\n    } else if (branches[0].includes(stnId)) {\n        return 0\n    } else {\n        return 6\n    }\n}\n*/\n","import { Stations } from './share';\n\nexport class StationsMTR extends Stations {\n    protected leftWideFactor = (stnId: string) => {\n        var res = 0;\n        let { transfer } = this.stnList[stnId];\n        let ls = transfer.info.map(val => val.length);\n        if (transfer.tick_direc === 'l') {\n            // int3 or above\n            if (!ls[1] && ls[0] > 1) res += 0.8;\n            // osi except osi22\n            if (ls[1] && (ls[0] !== 1 || ls[1] !== 2)) res += 0.8;\n        }\n        if (ls[0] === 1 && ls[1] === 2) {\n            // osi22 not end\n            if (this.stnList[stnId].parents[0] !== 'linestart' && this.stnList[stnId].children[0] !== 'lineend')\n                res += 0.8;\n        }\n        if (this.stnList[stnId].parents.length === 2) res += 0.4;\n        if (this.stnList[this.stnList[stnId].parents[0]].children.length === 2) res += 0.4;\n        return res;\n    };\n\n    protected rightWideFactor = (stnId: string) => {\n        var res = 0;\n        let { transfer } = this.stnList[stnId];\n        let ls = transfer.info.map(val => val.length);\n        if (transfer.tick_direc === 'r') {\n            // int3 or above\n            if (!ls[1] && ls[0] > 1) res += 0.8;\n            // osi except osi22\n            if (ls[1] && (ls[0] !== 1 || ls[1] !== 2)) res += 0.8;\n        }\n        if (ls[0] === 1 && ls[1] === 2) {\n            // osi22 not end\n            if (this.stnList[stnId].parents[0] !== 'linestart' && this.stnList[stnId].children[0] !== 'lineend')\n                res += 0.8;\n        }\n        if (this.stnList[stnId].children.length === 2) res += 0.4;\n        if (this.stnList[this.stnList[stnId].children[0]].parents.length === 2) res += 0.4;\n        return res;\n    };\n}\n"],"names":["memo","loop","useAppSelector","store","param","DefsSHMetro","bank_angle","IndoorSHMetro","InfoElements","React","id","fill","strokeWidth","stroke","r","transform","d","leftWideFactor","stnList","stnId","res","parents","length","children","rightWideFactor","helper","routes","branches","deps","depsStr","adjMat","adjacencyList","stn_list","criticalPath","criticalPathMethod","realCP","nodes","slice","xShares","console","log","Object","keys","reduce","acc","cur","getXShareMTR","toString","JSON","stringify","lineXs","svgWidth","indoor","padding","xs","len","yShares","useMemo","StationsMTR","ys","branch_spacing","stnStates","getStnState","current_stn_idx","direction","servicesAll","values","Services","servicesPresent","map","stationInfo","services","flat","indexOf","bool","i","filter","s","linePaths","svg_height","Lines","paths","StationGroup","props","service","main","path","pass","includes","nameDirection","branch","textAnchor","fontSize","className","line_name","dx","dy","x","y","width","height","rx","x1","x2","y1","y2","xlinkHref","transfer","ls","info","val","tick_direc","Stations"],"sourceRoot":""}