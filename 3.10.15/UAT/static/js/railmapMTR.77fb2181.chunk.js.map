{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","methods.ts","svgs/railmap/methods/share.ts","svgs/strip/strip-mtr.tsx","svgs/railmap/methods/mtr.ts","svgs/mtr/station-name/station-name.tsx","svgs/mtr/station-name/station-name-wrapper.tsx","svgs/railmap/main/station/station-mtr.tsx","svgs/railmap/main/main-mtr.tsx","svgs/railmap/railmap-mtr.tsx"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","getYShareMTR","stnId","stnList","includes","parents","children","stnPred","adjacencyList","leftW","rightW","reduce","acc","cur","a","c","criticalPathMethod","from","to","adjMat","len","nodes","allLengths","criticalPaths","forEach","child","cp","push","unshift","maxLength","Math","max","getXShareMTR","branches","criticalPath","branchOfStn","filter","branch","partSource","partSink","leftOpenJaw","lens","slice","getStnState","currentId","routes","direction","console","log","Set","concat","ShortDirection","right","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","yShares","xShares","namePoss","leftWideFactor","rightWideFactor","pathWeight","Infinity","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","res","getYShare","stnIds","lineXs","realXs","realYs","e","prevId","prevY","prevX","path","stnDX","stnExtraH","stnSpareH","warn","x","y","join","replace","stations","stnStates","xs","ys","linePaths","main","pass","lineMainStns","linePassStns","_linePath","drawLine","memo","props","fill","height","style","width","stripPc","StationsMTR","transfer","ls","info","map","val","tick_direc","stnName","onUpdate","align","nameEl","useRef","useEffect","document","fonts","ready","then","current","getBBox","toString","ref","textAnchor","Direction","left","getTextAnchor","className","split","txt","dy","index","prevProps","nextProps","StationNameWrapper","stationName","stationState","lower","facility","others","useState","bBox","setBBox","nameEnRows","transforms","g","STN_NAME_LINE_GAP","rect","Facilities","none","NAME_ZH_TOP","NAME_FULL_HEIGHT","use","StationName","state","StationState","PASSED","CURRENT","FUTURE","getFill","transform","xlinkHref","StationMTR","stnState","namePos","stnInfo","useAppSelector","store","param","stn_list","branchPos","useMemo","pos","JSON","stringify","branchAffix","branchDy","branchElDy","stnIcon","l","fallback","n","variant","stnTrans","end","undefined","name","osi_names","tickDirec","stroke","paid_area","IntTickGroup","intInfo","rotation","nameDX","IntTick","nameZHLns","nameENLns","OSIName","MainMTR","helper","deps","depsStr","svgWidths","svgWidth","yPercentage","y_pc","paddingPercentage","padding","branch_spacing","namePosition","namePosMTR","currentStationIndex","current_stn_idx","stationList","realCP","CanvasType","RailMap","getYShares","id","isStagger","isFlip","getNamePos","Lines","paths","React","strokeWidth","d","StationGroup","DefsMTR","clipPath","points","r","h","Fragment","strokeLinecap"],"mappings":"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","file":"static/js/railmapMTR.77fb2181.chunk.js","sourcesContent":["import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { StationDict } from './constants/constants';\n\n/**\n * Vertical position (in shares) of station icon if using MTR style (for consistency of method `RMGLine.newStnPossibleLoc()`).\n */\nexport const getYShareMTR = (stnId: string, stnList: StationDict): -1 | 0 | 1 => {\n    if (\n        ['linestart', 'lineend'].includes(stnId) ||\n        stnList[stnId].parents.length > 1 ||\n        stnList[stnId].children.length > 1\n    ) {\n        return 0;\n    }\n    var stnPred = stnList[stnId].parents[0];\n    if (stnPred) {\n        // parent exist\n        if (stnList[stnPred].children.length === 1) {\n            // no sibling, then y same as parent\n            return getYShareMTR(stnPred, stnList);\n        } else {\n            // sibling exists, then y depends on its idx of being children\n            return stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n        }\n    } else {\n        // no parent, must be linestart\n        return 0;\n    }\n};\n","import * as Global from '../../../methods';\nimport { RMGParam, ShortDirection, StationDict, StationInfo } from '../../../constants/constants';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (\n                          direction === ShortDirection.right\n                              ? _isSuccessor(currentId, cur, routes)\n                              : _isPredecessor(currentId, cur, routes)\n                      )\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as StationDict;\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number\n    ) {\n        var [prevId, prevY, prevX] = [] as unknown as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 2;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + e}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - e}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number = 9.68\n    ) {\n        let linePaths = { main: [] as string[], pass: [] as string[] };\n        branches.forEach((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branches: string[][], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    let linePaths = { main: [] as string[][], pass: [] as string[][] };\n    branches.forEach(branch => {\n        branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n        var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n        var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n        if (lineMainStns.length === 1) {\n            linePassStns = branch;\n        }\n\n        if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n            // if two set disjoint\n            if (linePassStns[0] === branch[0]) {\n                // -1 -1 1 1\n                linePassStns.push(lineMainStns[0]);\n            } else if (\n                lineMainStns[0] === branch[0] &&\n                lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                linePassStns.length\n            ) {\n                linePassStns = branch;\n                lineMainStns = [];\n            } else {\n                // 1 1 -1 -1\n                linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n            }\n        }\n\n        linePaths.main.push(lineMainStns);\n        linePaths.pass.push(linePassStns);\n    });\n\n    return linePaths;\n};\n","import React, { memo } from 'react';\n\nexport default memo(function StripMTR(props: { stripPc: number }) {\n    return (\n        <rect\n            fill=\"var(--rmg-theme-colour)\"\n            height={20}\n            style={{\n                width: 'var(--rmg-svg-width)',\n                ['--strip-percentage' as any]: props.stripPc,\n                transform: `translateY(calc(var(--strip-percentage, 95) * var(--rmg-svg-height) / 100 - 10px))`,\n            }}\n        />\n    );\n});\n","import { Stations } from './share';\n\nexport class StationsMTR extends Stations {\n    protected leftWideFactor = (stnId: string) => {\n        var res = 0;\n        let { transfer } = this.stnList[stnId];\n        let ls = transfer.info.map(val => val.length);\n        if (transfer.tick_direc === 'l') {\n            // int3 or above\n            if (!ls[1] && ls[0] > 1) res += 0.8;\n            // osi except osi22\n            if (ls[1] && (ls[0] !== 1 || ls[1] !== 2)) res += 0.8;\n        }\n        if (ls[0] === 1 && ls[1] === 2) {\n            // osi22 not end\n            if (this.stnList[stnId].parents[0] !== 'linestart' && this.stnList[stnId].children[0] !== 'lineend')\n                res += 0.8;\n        }\n        if (this.stnList[stnId].parents.length === 2) res += 0.4;\n        if (this.stnList[this.stnList[stnId].parents[0]].children.length === 2) res += 0.4;\n        return res;\n    };\n\n    protected rightWideFactor = (stnId: string) => {\n        var res = 0;\n        let { transfer } = this.stnList[stnId];\n        let ls = transfer.info.map(val => val.length);\n        if (transfer.tick_direc === 'r') {\n            // int3 or above\n            if (!ls[1] && ls[0] > 1) res += 0.8;\n            // osi except osi22\n            if (ls[1] && (ls[0] !== 1 || ls[1] !== 2)) res += 0.8;\n        }\n        if (ls[0] === 1 && ls[1] === 2) {\n            // osi22 not end\n            if (this.stnList[stnId].parents[0] !== 'linestart' && this.stnList[stnId].children[0] !== 'lineend')\n                res += 0.8;\n        }\n        if (this.stnList[stnId].children.length === 2) res += 0.4;\n        if (this.stnList[this.stnList[stnId].children[0]].parents.length === 2) res += 0.4;\n        return res;\n    };\n}\n","import React, { memo, useEffect, useRef } from 'react';\nimport { Direction, Name } from '../../../constants/constants';\n\ninterface StationNameProps {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n    align?: Direction;\n}\n\nexport default memo(\n    function StationName(props: StationNameProps) {\n        const { stnName, onUpdate, align } = props;\n\n        const nameEl = useRef<SVGGElement>(null);\n\n        useEffect(() => {\n            document.fonts.ready.then(() => onUpdate?.(nameEl.current!.getBBox()));\n        }, [stnName.toString(), align]);\n\n        const getTextAnchor = (direction?: Direction) => {\n            switch (direction) {\n                case Direction.left:\n                    return 'start';\n                case Direction.right:\n                    return 'end';\n                default:\n                    return 'middle';\n            }\n        };\n\n        const getDy = (index: number) => 17 + 11 * index;\n\n        return (\n            <g ref={nameEl} textAnchor={getTextAnchor(align)}>\n                <text className=\"rmg-name__zh rmg-name__mtr--station\">{stnName[0]}</text>\n\n                {stnName[1].split('\\\\').map((txt, i) => (\n                    <text key={i} className=\"rmg-name__en rmg-name__mtr--station\" dy={getDy(i)}>\n                        {txt}\n                    </text>\n                ))}\n            </g>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.stnName.toString() === nextProps.stnName.toString() && prevProps.align === nextProps.align\n);\n","import React, { SVGProps, useState } from 'react';\nimport { Direction, Facilities, Name, StationState } from '../../../constants/constants';\nimport StationName from './station-name';\n\n/**\n * Top (in pixels) of station's Chinese name.\n */\nconst NAME_ZH_TOP = -10.8125;\n/**\n * Height (in pixels) of station's Chinese name.\n */\n// const NAME_ZH_HEIGHT = 21.625;\n/**\n * Top (in pixels) of station's English name (1 line).\n */\nconst NAME_EN_TOP = -8;\n/**\n * Height (in pixels) of station's English name (1 line).\n */\nconst NAME_EN_HEIGHT = 13.21875;\n/**\n * Difference of `y`s of station's Chinese name and English name (1 line). (This number should used as the `dy` of the English `text` element after Chinese `text` elements. )\n */\nconst NAME_ZH_EN_GAP = 17;\n/**\n * Height (in pixels) from the top of station's Chinese name to the bottom of English name (1 line).\n */\nexport const NAME_FULL_HEIGHT = -NAME_ZH_TOP + NAME_ZH_EN_GAP + NAME_EN_HEIGHT + NAME_EN_TOP;\n/**\n * Height (in pixels) of the gap between the centre of the line and the top of station's Chinese name.\n */\nconst STN_NAME_LINE_GAP = 14;\n\ninterface StationNameWrapperProps extends SVGProps<SVGGElement> {\n    stationName: Name;\n    stationState: StationState;\n    facility: Facilities;\n    lower?: boolean;\n    align?: Direction;\n}\n\nexport default function StationNameWrapper(props: StationNameWrapperProps) {\n    const { stationName, stationState, lower, align, facility, ...others } = props;\n\n    /**\n     * align = undefined: { x: -40, width: 80 }\n     * align = left: { x: 0, width: 80 }\n     * align = right: { x: -80, width: 80 }\n     */\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as SVGRect);\n\n    const getFill = (state: StationState) => {\n        switch (state) {\n            case StationState.PASSED:\n                return 'var(--rmg-grey)';\n            case StationState.CURRENT:\n                return '#fff';\n            case StationState.FUTURE:\n                return 'var(--rmg-black)';\n        }\n    };\n\n    const nameEnRows = stationName[1].split('\\\\').length;\n    const transforms = {\n        g: {\n            x: align ? (align === Direction.right ? -3 : 3) : 0,\n            y:\n                (lower\n                    ? STN_NAME_LINE_GAP - NAME_ZH_TOP\n                    : -STN_NAME_LINE_GAP - NAME_ZH_TOP - NAME_FULL_HEIGHT - 11 * (nameEnRows - 1)) +\n                (align ? (lower ? 10 : -10) : 0),\n        },\n        rect: {\n            x:\n                bBox.x -\n                3 +\n                (facility === Facilities.none\n                    ? 0\n                    : align\n                    ? align === Direction.right\n                        ? -3 - NAME_FULL_HEIGHT\n                        : 0\n                    : (NAME_FULL_HEIGHT + 5) / 2 - 3 - NAME_FULL_HEIGHT),\n            y: NAME_ZH_TOP - 1,\n            width: bBox.width + 6 + (facility === Facilities.none ? 0 : NAME_FULL_HEIGHT + 3),\n            height: NAME_FULL_HEIGHT + 2 + 11 * (nameEnRows - 1),\n        },\n        use: {\n            x: align\n                ? align === Direction.right\n                    ? -(NAME_FULL_HEIGHT + 2) / 2 - bBox.width - 3\n                    : (NAME_FULL_HEIGHT + 2) / 2 - 2\n                : -(bBox.width + 3) / 2,\n            y: NAME_ZH_TOP - 1 + 5.5 * (nameEnRows - 1),\n        },\n        StationName: {\n            x:\n                facility === Facilities.none\n                    ? 0\n                    : align\n                    ? align === Direction.right\n                        ? 0\n                        : NAME_FULL_HEIGHT + 3\n                    : (NAME_FULL_HEIGHT + 5) / 2,\n            y: 0,\n        },\n    };\n\n    return (\n        <g {...others}>\n            <g fill={getFill(stationState)} transform={`translate(${transforms.g.x},${transforms.g.y})`}>\n                {stationState === StationState.CURRENT && (\n                    <rect\n                        x={transforms.rect.x}\n                        y={transforms.rect.y}\n                        width={transforms.rect.width}\n                        height={transforms.rect.height}\n                        fill=\"var(--rmg-black)\"\n                    />\n                )}\n\n                {facility !== Facilities.none && (\n                    <use\n                        xlinkHref={`#${facility}`}\n                        fill={stationState === StationState.PASSED ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n                        x={transforms.use.x}\n                        y={transforms.use.y}\n                    />\n                )}\n\n                <g transform={`translate(${transforms.StationName.x},${transforms.StationName.y})`}>\n                    <StationName stnName={stationName} onUpdate={setBBox} align={align} />\n                </g>\n            </g>\n        </g>\n    );\n}\n","import React, { useMemo } from 'react';\nimport {\n    Direction,\n    InterchangeInfo,\n    Name,\n    ShortDirection,\n    StationTransfer,\n} from '../../../../constants/constants';\nimport { useAppSelector } from '../../../../redux';\nimport StationNameWrapper from '../../../mtr/station-name/station-name-wrapper';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n    namePos: boolean;\n    stnY?: number;\n}\n\nconst StationMTR = (props: Props) => {\n    const { stnId, stnState, namePos } = props;\n    const stnInfo = useAppSelector(store => store.param.stn_list[stnId]);\n\n    /**\n     * Arrays of directions of the branches a station has.\n     */\n    const branchPos = useMemo(\n        () => {\n            let pos: ('SE' | 'NE' | 'SW' | 'NW')[] = [];\n            if (stnInfo.branch.right.length) {\n                pos.push(stnInfo.children.indexOf(stnInfo.branch.right[1]) === 1 ? 'SE' : 'NE');\n            }\n            if (stnInfo.branch.left.length) {\n                pos.push(stnInfo.parents.indexOf(stnInfo.branch.left[1]) === 1 ? 'SW' : 'NW');\n            }\n            return pos;\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [stnInfo.parents.toString(), stnInfo.children.toString(), JSON.stringify(stnInfo.branch)]\n    );\n\n    /**\n     * Affix added to station icon's `href`.\n     */\n    const branchAffix = useMemo(\n        () => {\n            let pos = branchPos;\n            if (pos.length === 0) {\n                return '';\n            }\n            if (pos.includes('NW') && pos.includes('SE')) {\n                return '_bb';\n            }\n            if (pos.includes('NE') && pos.includes('SW')) {\n                return '_bb';\n            }\n            return '_b';\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branchPos.toString()]\n    );\n\n    /**\n     * Changes of vertical position of station icon due to branching shift (11px/line width). Icon rotation should also be applied when using this property.\n     */\n    const branchDy = useMemo(\n        () => {\n            let affix = branchAffix;\n            if (affix === '') {\n                return 0;\n            } else if (affix === '_bb') {\n                return namePos ? 9.68 : -9.68;\n            } else {\n                let pos = branchPos;\n                if (pos.includes('SE') || pos.includes('SW')) {\n                    return namePos ? 9.68 : 0;\n                }\n                if (pos.includes('NE') || pos.includes('NW')) {\n                    return namePos ? 0 : -9.68;\n                }\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branchPos.toString(), branchAffix, namePos]\n    );\n\n    /**\n     * Changes of vertical position of other elements such as intTick or intName. The result of the ternary operator is the opposite of `this._branchDy`\n     */\n    const branchElDy = useMemo(() => {\n        let affix = branchAffix;\n        if (affix === '') {\n            return 0;\n        } else if (affix === '_bb') {\n            return namePos ? -9.68 : 9.68;\n        } else {\n            let pos = branchPos;\n            if (pos.includes('SE') || pos.includes('SW')) {\n                return namePos ? 0 : 9.68;\n            }\n            if (pos.includes('NE') || pos.includes('NW')) {\n                return namePos ? -9.68 : 0;\n            }\n        }\n    }, [branchAffix, namePos, branchPos]);\n\n    const stnIcon = ((l: number[]) => {\n        const fallback = (n: number) => (n < 11 ? 'int' + (n + 1) : 'int12');\n        if (!l[1]) {\n            if (!l[0]) {\n                return 'stn';\n            } else if (l[0] === 1) {\n                return 'int';\n            } else {\n                return fallback(l[0]);\n            }\n        } else if (l[1] === 1) {\n            return l[0] <= 1 ? 'osi11' : fallback(l[0]);\n        } else if (l[1] === 2) {\n            if (l[0] === 0) {\n                return 'osi12';\n            } else if (l[0] === 1) {\n                if (stnInfo.parents[0] === 'linestart' || stnInfo.children[0] === 'lineend') {\n                    return 'osi22end';\n                } else {\n                    return 'osi22';\n                }\n            } else {\n                return fallback(l[0]);\n            }\n        } else {\n            if (!l[0] || l[0] === 1) {\n                return 'osi12';\n            } else {\n                return fallback(l[0]);\n            }\n        }\n    })(stnInfo.transfer.info.map(val => val.length));\n\n    return (\n        <>\n            <g transform={`translate(0,${branchElDy})`}>\n                <IntTickGroup\n                    variant={stnIcon}\n                    stnTrans={stnInfo.transfer}\n                    stnState={stnState}\n                    namePos={namePos}\n                    end={\n                        stnIcon === 'osi22end'\n                            ? stnInfo.parents[0] === 'linestart'\n                                ? Direction.left\n                                : Direction.right\n                            : undefined\n                    }\n                />\n                {stnIcon.includes('osi') && (\n                    <OSIName\n                        name={stnInfo.transfer.osi_names[0]}\n                        stnState={stnState}\n                        variant={stnIcon}\n                        tickDirec={stnInfo.transfer.tick_direc}\n                        namePos={namePos}\n                        end={\n                            stnIcon === 'osi22end'\n                                ? stnInfo.parents[0] === 'linestart'\n                                    ? Direction.left\n                                    : Direction.right\n                                : undefined\n                        }\n                    />\n                )}\n            </g>\n            <use\n                xlinkHref={'#' + stnIcon + branchAffix}\n                stroke={stnState === -1 ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n                className={stnInfo.transfer.paid_area ? 'rmg-stn__mtr--paid-osi' : 'rmg-stn__mtr--unpaid-osi'}\n                transform={\n                    `translate(0,${branchDy})` +\n                    `scale(${stnInfo.children[0] === 'lineend' ? 1 : -1},${namePos ? -1 : 1})`\n                }\n            />\n            <StationNameWrapper\n                stationName={stnInfo.name}\n                stationState={stnState}\n                facility={stnInfo.facility}\n                lower={namePos}\n                align={\n                    stnIcon === 'osi22'\n                        ? stnInfo.transfer.tick_direc === ShortDirection.left\n                            ? Direction.left\n                            : Direction.right\n                        : undefined\n                }\n                transform={`translate(0,${branchDy})`}\n            />\n        </>\n    );\n};\n\nexport default StationMTR;\n\ninterface IntTickGroupProps {\n    variant: string;\n    stnTrans: StationTransfer;\n    stnState: -1 | 0 | 1;\n    namePos: boolean;\n    end?: Direction;\n}\n\nconst IntTickGroup = (props: IntTickGroupProps) => {\n    const { variant, stnTrans, stnState, namePos, end } = props;\n    switch (variant) {\n        case 'int':\n            return (\n                <g>\n                    <IntTick intInfo={stnTrans.info[0][0]} stnState={stnState} rotation={namePos ? 180 : 0} />\n                </g>\n            );\n\n        case 'osi11':\n            return (\n                <g transform={`translate(0,${namePos ? -26 : 26})`}>\n                    <IntTick intInfo={stnTrans.info[1][0]} stnState={stnState} rotation={namePos ? 180 : 0} />\n                </g>\n            );\n        case 'osi12':\n            return (\n                <>\n                    {stnTrans.info[1].map((intInfo, i) => (\n                        <g\n                            key={i}\n                            transform={`translate(0,${\n                                !namePos ? 8 + 18 * (i + 1) : -8 - 18 * (stnTrans.info[1].length - i)\n                            })`}\n                        >\n                            <IntTick\n                                intInfo={intInfo}\n                                stnState={stnState}\n                                rotation={stnTrans.tick_direc === ShortDirection.right ? -90 : 90}\n                            />\n                        </g>\n                    ))}\n                </>\n            );\n        case 'osi22':\n            return (\n                <>\n                    <g>\n                        <IntTick\n                            intInfo={stnTrans.info[0][0]}\n                            stnState={stnState}\n                            rotation={namePos ? 0 : 180}\n                            nameDX={stnTrans.tick_direc === ShortDirection.right ? 3 : -3}\n                        />\n                    </g>\n                    {stnTrans.info[1].map((intInfo, i) => (\n                        <g\n                            key={i}\n                            transform={`translate(0,${\n                                !namePos ? 8 + 18 * (i + 1) : -8 - 18 * (stnTrans.info[1].length - i)\n                            })`}\n                        >\n                            <IntTick\n                                intInfo={intInfo}\n                                stnState={stnState}\n                                rotation={stnTrans.tick_direc === ShortDirection.right ? -90 : 90}\n                            />\n                        </g>\n                    ))}\n                </>\n            );\n        case 'osi22end':\n            return (\n                <>\n                    <g>\n                        <IntTick intInfo={stnTrans.info[0][0]} stnState={stnState} rotation={namePos ? 180 : 0} />\n                    </g>\n                    {stnTrans.info[1].map((intInfo, i) => (\n                        <g\n                            key={i}\n                            transform={`translate(${end === Direction.left ? -41 : 41},${\n                                namePos ? 18 * i : -18 * (stnTrans.info[1].length - 1 - i)\n                            })`}\n                        >\n                            <IntTick\n                                intInfo={intInfo}\n                                stnState={stnState}\n                                rotation={end === Direction.left ? 90 : -90}\n                            />\n                        </g>\n                    ))}\n                </>\n            );\n        default:\n            if (variant.includes('int')) {\n                return (\n                    <>\n                        {stnTrans.info[0].map((intInfo, i) => (\n                            <g\n                                key={i}\n                                style={{\n                                    transform: `translateY(${\n                                        !namePos ? 18 * (i + 1) : -18 * (stnTrans.info[0].length - i)\n                                    }px)`,\n                                }}\n                            >\n                                <IntTick\n                                    intInfo={intInfo}\n                                    stnState={stnState}\n                                    rotation={stnTrans.tick_direc === ShortDirection.right ? -90 : 90}\n                                />\n                            </g>\n                        ))}\n                    </>\n                );\n            } else {\n                return <></>;\n            }\n    }\n};\n\ninterface IntTickProps {\n    intInfo: InterchangeInfo;\n    stnState: -1 | 0 | 1;\n    rotation: 0 | 90 | 180 | -90;\n    nameDX?: number;\n}\n\nconst IntTick = (props: IntTickProps) => {\n    const { intInfo, stnState, rotation, nameDX } = props;\n\n    const nameZHLns = intInfo[4].split('\\\\').length;\n    const nameENLns = intInfo[5].split('\\\\').length;\n\n    const x = (rotation => {\n        switch (rotation) {\n            case 90:\n                return -24;\n            case -90:\n                return 24;\n            default:\n                return 0;\n        }\n    })(rotation);\n\n    const y = (rotation => {\n        switch (rotation) {\n            case 0:\n                return 25 + 5.953125;\n            case 180:\n                return -25 + 5.953125 - 18.65625 - 10 * (nameZHLns - 1) - 7 * (nameENLns - 1);\n            default:\n                return 5.953125 - (19.65625 + 10 * (nameZHLns - 1) + 7 * (nameENLns - 1) - 1) / 2;\n        }\n    })(rotation);\n\n    const textAnchor = (rotation => {\n        switch (rotation) {\n            case 90:\n                return 'end';\n            case -90:\n                return 'start';\n            default:\n                if (!nameDX) {\n                    return 'middle';\n                } else if (nameDX > 0) {\n                    return 'start';\n                } else {\n                    return 'end';\n                }\n        }\n    })(rotation);\n\n    return useMemo(\n        () => (\n            <>\n                <use\n                    xlinkHref=\"#inttick\"\n                    stroke={intInfo[2]}\n                    transform={`rotate(${rotation})`}\n                    className={'rmg-line rmg-line__mtr rmg-line__change' + (stnState === -1 ? ' rmg-line__pass' : '')}\n                />\n                <g\n                    textAnchor={textAnchor}\n                    transform={`translate(${x + (nameDX || 0)},${y})`}\n                    className={`Name ${stnState === -1 ? 'Pass' : 'Future'}`}\n                >\n                    {intInfo[4].split('\\\\').map((txt, i) => (\n                        <text key={i} className=\"rmg-name__zh IntName\" dy={10 * i}>\n                            {txt}\n                        </text>\n                    ))}\n                    {intInfo[5].split('\\\\').map((txt, i) => (\n                        <text key={nameZHLns + i} className=\"rmg-name__en IntName\" dy={nameZHLns * 10 - 1 + 7 * i}>\n                            {txt}\n                        </text>\n                    ))}\n                </g>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [intInfo.toString(), rotation, stnState]\n    );\n};\n\ninterface OSINameProps {\n    name: Name;\n    stnState: -1 | 0 | 1;\n    variant: string;\n    tickDirec: ShortDirection;\n    namePos: boolean;\n    end?: Direction;\n}\n\nconst OSIName = (props: OSINameProps) => {\n    const { name, stnState, variant, tickDirec, namePos, end } = props;\n\n    const textAnchor = (variant => {\n        switch (variant) {\n            case 'osi11':\n                return tickDirec === ShortDirection.left ? 'end' : 'start';\n            case 'osi22':\n                return tickDirec === ShortDirection.left ? 'start' : 'end';\n            default:\n                return 'middle';\n        }\n    })(variant);\n\n    const x = (variant => {\n        switch (variant) {\n            case 'osi11':\n                return tickDirec === ShortDirection.left ? -13 : 13;\n            case 'osi22':\n                return tickDirec === ShortDirection.left ? 13 : -13;\n            case 'osi22end':\n                return end === Direction.left ? -41 : 41;\n            default:\n                return 0;\n        }\n    })(variant);\n\n    const y = (variant => {\n        switch (variant) {\n            case 'osi11':\n                return (\n                    (!namePos ? 26 : -26) +\n                    8.34375 -\n                    25.03125 / 2 -\n                    (!namePos ? 0 : 10 * (name?.[1]?.split('\\\\').length - 1))\n                );\n            case 'osi12':\n                return !namePos\n                    ? 26 + 18 + 10 + 8.34375\n                    : -(26 + 18 + 10) + 8.34375 - 25.03125 - 10 * (name?.[1]?.split('\\\\').length - 1);\n            case 'osi22':\n                return (\n                    (!namePos ? 26 - 18 : -8) -\n                    (namePos ? 18 + 9 : -27) +\n                    8.34375 -\n                    25.03125 / 2 -\n                    5 * (name?.[1]?.split('\\\\').length - 1)\n                );\n            case 'osi22end':\n                return !namePos ? 10 + 8.34375 : -10 + 8.34375 - 25.03125 - 10 * (name?.[1]?.split('\\\\').length - 1);\n            default:\n                return 0;\n        }\n    })(variant);\n\n    return (\n        <g\n            textAnchor={textAnchor}\n            transform={`translate(${x},${y})`}\n            className={`Name ${stnState === -1 ? 'Pass' : 'Future'}`}\n        >\n            <text className=\"rmg-name__zh rmg-name__mtr--osi\">{name?.[0]}</text>\n            {name?.[1]?.split('\\\\').map((txt, i) => (\n                <text key={i} className=\"rmg-name__en rmg-name__mtr--osi\" dy={12 + 10 * i}>\n                    {txt}\n                </text>\n            ))}\n        </g>\n    );\n};\n","import React, { useMemo } from 'react';\nimport { adjacencyList, criticalPathMethod, getXShareMTR, getStnState } from '../methods/share';\nimport { StationsMTR } from '../methods/mtr';\nimport StationMTR from './station/station-mtr';\nimport { CanvasType, RMGParam, StationDict } from '../../../constants/constants';\nimport { useAppSelector } from '../../../redux';\n\nconst leftWideFactor = (stnList: StationDict, stnId: string) => {\n    var res = 0;\n    let { transfer } = stnList[stnId];\n    let ls = transfer.info.map(val => val.length);\n    if (transfer.tick_direc === 'l') {\n        // int3 or above\n        if (!ls[1] && ls[0] > 1) res += 0.8;\n        // osi except osi22\n        if (ls[1] && (ls[0] !== 1 || ls[1] !== 2)) res += 0.8;\n    }\n    if (ls[0] === 1 && ls[1] === 2) {\n        // osi22 not end\n        if (stnList[stnId].parents[0] !== 'linestart' && stnList[stnId].children[0] !== 'lineend') res += 0.8;\n    }\n    // let { type, tick_direc } = stnList[stnId].transfer;\n    // if (tick_direc === 'l' && ['int3', 'osi11', 'osi12', 'osi21', 'osi31'].includes(type)) res += 0.8;\n    // if (type === 'osi22') res += 0.8;\n    if (stnList[stnId].parents.length === 2) res += 0.4;\n    if (stnList[stnList[stnId].parents[0]].children.length === 2) res += 0.4;\n    return res * 2;\n};\n\nconst rightWideFactor = (stnList: StationDict, stnId: string) => {\n    var res = 0;\n    let { transfer } = stnList[stnId];\n    let ls = transfer.info.map(val => val.length);\n    if (transfer.tick_direc === 'r') {\n        // int3 or above\n        if (!ls[1] && ls[0] > 1) res += 0.8;\n        // osi except osi22\n        if (ls[1] && (ls[0] !== 1 || ls[1] !== 2)) res += 0.8;\n    }\n    if (ls[0] === 1 && ls[1] === 2) {\n        if (stnList[stnId].parents[0] !== 'linestart' && stnList[stnId].children[0] !== 'lineend') res += 0.8;\n    }\n    // let { type, tick_direc } = stnList[stnId].transfer;\n    // if (tick_direc === 'r' && ['int3', 'osi11', 'osi12', 'osi21', 'osi31'].includes(type)) res += 0.8;\n    // if (type === 'osi22') res += 0.8;\n    if (stnList[stnId].children.length === 2) res += 0.4;\n    if (stnList[stnList[stnId].children[0]].parents.length === 2) res += 0.4;\n    return res;\n};\n\nconst getNamePos = (stnId: string, branches: string[][], { isStagger, isFlip }: RMGParam['namePosMTR']) => {\n    if (!isStagger) return isFlip;\n    let res: number;\n    if (branches[0].includes(stnId)) {\n        res = branches[0].indexOf(stnId) % 2;\n    } else {\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n        res = (branches[0].indexOf(branchOfStn[0]) + branchOfStn.indexOf(stnId) + 1) % 2;\n    }\n    return res === 0 ? isFlip : !isFlip;\n};\n\nconst MainMTR = () => {\n    const { branches, routes, depsStr: deps } = useAppSelector(store => store.helper);\n\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const yPercentage = useAppSelector(store => store.param.y_pc);\n    const paddingPercentage = useAppSelector(store => store.param.padding);\n    const branchSpacing = useAppSelector(store => store.param.branch_spacing);\n    const direction = useAppSelector(store => store.param.direction);\n    const namePosition = useAppSelector(store => store.param.namePosMTR);\n\n    const currentStationIndex = useAppSelector(store => store.param.current_stn_idx);\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    const adjMat = adjacencyList(stationList, leftWideFactor, rightWideFactor);\n\n    const criticalPath = useMemo(\n        () => criticalPathMethod('linestart', 'lineend', adjMat),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [JSON.stringify(adjMat)]\n    );\n    const realCP = useMemo(\n        () => criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [JSON.stringify(adjMat)]\n    );\n\n    const xShares = useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(stationList).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShareMTR(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n    const lineXs: [number, number] = [\n        (svgWidths[CanvasType.RailMap] * paddingPercentage) / 100,\n        svgWidths[CanvasType.RailMap] * (1 - paddingPercentage / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = useMemo(\n        () => StationsMTR.getYShares(stationList, branches),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: -yShares[cur] * branchSpacing + (branches[0].includes(cur) ? 0 : yShares[cur] > 0 ? -9.68 : 9.68),\n        }),\n        {} as typeof yShares\n    );\n\n    const stnStates = useMemo(\n        () => getStnState(currentStationIndex, routes, direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [currentStationIndex, direction, routes.toString()]\n    );\n\n    const namePoss = Object.keys(stationList).reduce<{ [stnId: string]: boolean }>(\n        (acc, id) => ({ ...acc, [id]: getNamePos(id, branches, namePosition) }),\n        {}\n    );\n\n    const linePaths = StationsMTR.drawLine(\n        branches,\n        stnStates,\n        stationList,\n        lineXs,\n        xs,\n        ys,\n        branchSpacing,\n        criticalPath\n    );\n\n    return (\n        <g\n            id=\"main\"\n            style={{\n                ['--y-percentage' as any]: yPercentage,\n                transform: 'translateY(calc(var(--y-percentage) * var(--rmg-svg-height) / 100))',\n            }}\n        >\n            <Lines paths={linePaths} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} namePoss={namePoss} />\n        </g>\n    );\n};\n\nexport default MainMTR;\n\nconst Lines = React.memo(\n    (props: { paths: { main: string[]; pass: string[] } }) => {\n        return (\n            <g fill=\"none\" strokeWidth={9.68}>\n                <g stroke=\"var(--rmg-grey)\">\n                    {props.paths.pass.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                </g>\n                <g stroke=\"var(--rmg-theme-colour)\">\n                    {props.paths.main.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => JSON.stringify(prevProps.paths) === JSON.stringify(nextProps.paths)\n);\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n    namePoss: { [stnId: string]: boolean };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { xs, ys, stnStates, namePoss } = props;\n\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    return (\n        <g id=\"stn_icons\">\n            {Object.keys(stationList)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (\n                    <g\n                        key={stnId}\n                        style={{\n                            transform: `translate(${xs[stnId]}px,${ys[stnId]}px)`,\n                        }}\n                    >\n                        <StationMTR stnId={stnId} stnState={stnStates[stnId]} namePos={namePoss[stnId]} />\n                    </g>\n                ))}\n        </g>\n    );\n};\n","import React, { memo } from 'react';\n\nimport StripMTR from '../strip/strip-mtr';\nimport MainMTR from './main/main-mtr';\n\nexport default memo(function RailMapMTR() {\n    return (\n        <>\n            <DefsMTR />\n\n            <StripMTR stripPc={90} />\n            <MainMTR />\n        </>\n    );\n});\n\nconst DefsMTR = React.memo(() => {\n    return (\n        <defs>\n            <g id=\"airport\" transform=\"scale(0.5970084519)\">\n                <rect x={-29.33899} height={58.67798} width={58.67798} />\n                <path\n                    id=\"airport\"\n                    d=\"M28.9769,6.60134c1.711.013,3.111,2.53205,3.111,4.241v10.337s17.106,15.435,17.358,15.666a1.145,1.145,0,0,1,.488,1.152v2.833c0,.651-.451.61-.695.467-.334-.119-17.151-8.863-17.151-8.863-.004,1.458-.797,9.006-1.326,13.304,0,0,4.61,2.457,4.699,2.521.334.268.352.359.352.852v2.001c0,.477-.352.428-.51.324-.183-.062-5.693-1.921-5.693-1.921a2.56018,2.56018,0,0,0-.633-.127,2.31654,2.31654,0,0,0-.666.127s-5.477,1.859-5.672,1.921c-.185.104-.523.153-.523-.324v-2.001c0-.493.029-.584.367-.852.086-.064,4.678-2.521,4.678-2.521-.524-4.298-1.307-11.846-1.325-13.304,0,0-16.822,8.744-17.148,8.863-.217.143-.69.184-.69-.467v-2.833a1.16206,1.16206,0,0,1,.473-1.152c.276-.231,17.365-15.666,17.365-15.666v-10.337c0-1.709,1.403-4.228,3.14105-4.241\"\n                    transform=\"translate(-28.9697,0.14347)\"\n                    fill=\"white\"\n                />\n            </g>\n            <g id=\"disney\" transform=\"scale(0.5970084519)\">\n                <rect x={-29.33899} width={58.67798} height={58.67798} />\n                <path\n                    fill=\"white\"\n                    d=\"M45.6152,7.85015a9.80248,9.80248,0,0,0-9.79907,9.801,9.70059,9.70059,0,0,0,.342,2.582c.002.026.002.055.002.093a.31815.31815,0,0,1-.31494.318.67741.67741,0,0,1-.12806-.02,15.71521,15.71521,0,0,0-13.498,0,.61.61,0,0,1-.122.02.31841.31841,0,0,1-.322-.318v-.067a9.62553,9.62553,0,0,0,.35608-2.608,9.803,9.803,0,1,0-9.797,9.8,10.10364,10.10364,0,0,0,2.308-.271h.05493a.31113.31113,0,0,1,.31409.318.32433.32433,0,0,1-.019.12,15.72588,15.72588,0,1,0,29.703,7.216,15.83676,15.83676,0,0,0-1.746-7.23.18417.18417,0,0,1-.0271-.106.31612.31612,0,0,1,.32007-.318h.057a10.15953,10.15953,0,0,0,2.316.271,9.80051,9.80051,0,0,0,0-19.601\"\n                    transform=\"translate(-28.9697 0.13398)\"\n                />\n            </g>\n            <clipPath id=\"hsr-clip-path\" transform=\"translate(-0.00057 0.01643)\">\n                <path\n                    fill=\"none\"\n                    d=\"M5.1606.89861a3.67176,3.67176,0,0,0-3.676,3.667v48.966a3.67842,3.67842,0,0,0,3.676,3.692h48.443a3.67892,3.67892,0,0,0,3.678-3.692V4.5656a3.67227,3.67227,0,0,0-3.678-3.667Z\"\n                />\n            </clipPath>\n            <g id=\"hsr\" transform=\"scale(0.5970084519)\">\n                <rect x={-29.33899} width={58.67798} height={58.67798} />\n                <g clipPath=\"url(#hsr-clip-path)\" transform=\"translate(-29.33899,0)\">\n                    <rect\n                        x={-3.25242}\n                        y={24.74141}\n                        width={61.75879}\n                        height={0.98008}\n                        transform=\"translate(-8.93747 17.31321) rotate(-30.16134)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M5.77169,48.97289c-2.17407-3.89294,2.56994-10.525,4.85-13.724l.173-.248a83.00826,83.00826,0,0,1,7.39294-9.285,97.384,97.384,0,0,1,11.082-9.958c7.051-6.045,15.832-5.876,16.447-5.894l11.785-.957.276,17.42-11.5271,10.586c-.36.39405-5.553,5.863-18.10193,11.035-6.752,2.783-11.877,4.146-15.66,4.146-3.301,0-5.561-1.049-6.71692-3.121\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <polygon\n                        points=\"57.453 29.614 32.426 58.31 35.582 58.509 57.584 30.433 57.453 29.614\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M49.04708,11.61364a.94277.94277,0,0,0-.17407-.227c-.752-.93695-2.988-1.259-5.933-.793a25.98382,25.98382,0,0,0-9.99695,3.032A98.52916,98.52916,0,0,0,20.723,23.69768c-3.1759,3.487-4.645,6.388-3.62292,7.584,1.84,2.166,13.7539.716,22.00793-6.066,9.035-7.42,10.718-11.577,9.93909-13.602\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                    <path\n                        d=\"M34.65255,13.81182c5.65991-2.842,11.28088-2.856,12.1499-1.213.88306,1.652-2.99792,5.303-8.656,8.128-5.648,2.837-10.9469,3.805-11.81994,2.15-.873-1.641,2.668-6.237,8.326-9.065\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M58.10958,25.03454c-16.832,20.708-40.7301,26.038-40.7301,26.038,11-6.73,12.769-8.111,18.968-18.01,8.364-13.351,21.77808-21.549,21.912-21.63,0,0-.068,13.5-.1499,13.602\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                    <path\n                        d=\"M27.1877,26.69561l9.705-2.814a6.22768,6.22768,0,0,1-1.994,2.759,25.57277,25.57277,0,0,1-6.697,3.405,11.78221,11.78221,0,0,1-5.5.783Z\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M19.59005,25.97692a18.37656,18.37656,0,0,1,3.891-3.976,6.66452,6.66452,0,0,0-.30908,2.213l-4.391,4.829a6.18212,6.18212,0,0,1,.80908-3.066\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <polygon\n                        points=\"23.156 58.311 57.463 26.746 57.396 25.857 21.582 58.607 23.156 58.311\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M60.15645,12.35973a68.6782,68.6782,0,0,0-12.602,9.542c-8.15,7.745-12.109,15.259-9.855,16.091,2.24793.816,10.678-4.782,18.83594-12.543,1.828-1.74,3.48-3.424,4.926-5.024Z\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M63.07638,11.82653a40.86955,40.86955,0,0,0-10,7.096c-5.90406,5.437-9.48609,11.105-7.848,11.742,1.657.631,8.28894-3.955,14.188-9.401a61.76591,61.76591,0,0,0,4.61694-4.705Z\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                    <path\n                        d=\"M12.67989,42.93969a9.87,9.87,0,0,0-5.754-1.895c-.113.22-.223.439-.33008.662a9.45046,9.45046,0,0,1,5.69507,1.749,6.27885,6.27885,0,0,1,2.61,6.305,10.16524,10.16524,0,0,1-.598,2.228c.238-.023.481-.053.725-.087.78308-2.249,1.394-6.184-2.3479-8.962\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                </g>\n            </g>\n\n            <circle id=\"stn\" r={8} className=\"rmg-stn__mtr\" />\n            <path\n                id=\"stn_b\"\n                className=\"rmg-stn__mtr\"\n                d=\"M-6.369803765,4.84a8,8,0,1,1,12.73960753,0a8,8,0,1,1-12.73960758,0Z\"\n            />\n            <path\n                id=\"stn_bb\"\n                d=\"M-6.369803765,4.84a8,8,0,1,1,12.73960753,0a8,8,0,0,1,0,9.68a8,8,0,1,1-12.73960753,0a8,8,0,0,1,0,-9.68Z\"\n                className=\"rmg-stn__mtr\"\n            />\n            <use id=\"int\" xlinkHref=\"#stn\" />\n            <use id=\"int_b\" xlinkHref=\"#stn_b\" />\n            <use id=\"int_bb\" xlinkHref=\"#stn_bb\" />\n            <path id=\"int2\" d=\"M -8,0 v 18 a 8,8 0 0,0 16,0 v -18 a 8,8 0 0,0 -16,0 Z\" className=\"rmg-stn__mtr\" />\n\n            {[3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map(n => {\n                let h = 18 * (n - 1);\n                return (\n                    <React.Fragment key={n}>\n                        <path\n                            id={`int${n}`}\n                            d={`M-8,0v${h}a8,8,0,0,0,16,0v-${h}a8,8,0,0,0-16,0Z`}\n                            className=\"rmg-stn__mtr\"\n                        />\n                        <path\n                            id={`int${n}_b`}\n                            className=\"rmg-stn__mtr\"\n                            d={`M-8,9.68v${h}a8,8,0,0,0,16,0v-${h}a8,8,0,0,0-1.630196235-4.84a8,8,0,1,0-12.73960758,0a8,8,0,0,0-1.630196235,4.84Z`}\n                        />\n                        <path\n                            id={`int${n}_bb`}\n                            className=\"rmg-stn__mtr\"\n                            d={`M-8,19.36v${h}a8,8,0,0,0,16,0v-${h}a8,8,0,0,0-1.630196235-4.84a8,8,0,0,0,0-9.68a8,8,0,1,0-12.73960758,0a8,8,0,0,0,0,9.68a8,8,0,0,0-1.630196235,4.84Z`}\n                        />\n                    </React.Fragment>\n                );\n            })}\n\n            <g id=\"osi11\">\n                <path d=\"M0,0V26\" />\n                <use xlinkHref=\"#stn\" />\n                <use xlinkHref=\"#stn\" y={26} />\n            </g>\n            <g id=\"osi11_b\">\n                <path d=\"M0,0V35.68\" />\n                <use xlinkHref=\"#stn_b\" />\n                <use xlinkHref=\"#stn\" y={35.68} />\n            </g>\n            <g id=\"osi11_bb\">\n                <path d=\"M0,0V45.36\" />\n                <use xlinkHref=\"#stn_bb\" />\n                <use xlinkHref=\"#stn\" y={45.36} />\n            </g>\n\n            <g id=\"osi12\">\n                <path d=\"M0,0V26\" />\n                <use xlinkHref=\"#stn\" />\n                <use xlinkHref=\"#int2\" y={26} />\n            </g>\n            <g id=\"osi12_b\">\n                <path d=\"M0,11V35.68\" />\n                <use xlinkHref=\"#stn_b\" />\n                <use xlinkHref=\"#int2\" y={35.68} />\n            </g>\n            <g id=\"osi12_bb\">\n                <path d=\"M0,11V45.36\" />\n                <use xlinkHref=\"#stn_bb\" />\n                <use xlinkHref=\"#int2\" y={45.36} />\n            </g>\n            <use id=\"osi22\" xlinkHref=\"#osi12\" />\n            <use id=\"osi22_b\" xlinkHref=\"#osi12_b\" />\n            <use id=\"osi22_bb\" xlinkHref=\"#osi12_bb\" />\n\n            <g id=\"osi22end\">\n                <path d=\"M0,0H41\" />\n                <use xlinkHref=\"#stn\" />\n                <use xlinkHref=\"#int2\" x={41} y={-18} />\n            </g>\n            <g id=\"osi22end_b\">\n                <path d=\"M0,9.68H41\" />\n                <use xlinkHref=\"#stn_b\" />\n                <use xlinkHref=\"#int2\" x={41} y={-8.32} />\n            </g>\n\n            <path id=\"inttick\" d=\"M0,0v17\" strokeLinecap=\"round\" />\n        </defs>\n    );\n});\n"],"sourceRoot":""}