{"version":3,"sources":["panels/stations/edit-diag/more-tab.tsx"],"names":["memo","props","rmgStyle","useSelector","store","app","rmgStyleServices","RmgStyle","GZMTR","Services","local","express","SHMetro","direct","rmgStyleFacility","MTR","ServiceLi","stnId","providedServices","includes","FacilityLi","t","useTranslation","reduxDispatch","useDispatch","dispatch","useContext","ParamContext","facility","param","stn_list","primary","native","value","onChange","target","type","updateStationFacility","Object","values","Facilities","map","f","services","secondary","row","s","control","checked","service","serviceId","isChecked","addStationService","removeStationService","disabled","label","secondaryTypographyProps"],"mappings":"8MAoBeA,0BAAK,SAAiBC,GAA2B,IAAD,EACrDC,EAAWC,uBAAY,SAACC,GAAD,OAAsBA,EAAMC,IAAIH,YACvDI,GAAkD,mBACnDC,IAASC,MAAQ,CAACC,IAASC,MAAOD,IAASE,UADQ,cAEnDJ,IAASK,QAAU,CAACH,IAASC,MAAOD,IAASE,QAASF,IAASI,SAFZ,GAIlDC,EAA+B,CAACP,IAASQ,KAE/C,OACI,8BACI,eAAC,OAAD,WACKb,KAAYI,GACT,cAACU,EAAD,CAAWC,MAAOhB,EAAMgB,MAAOC,iBAAkBZ,EAAiBJ,KAErEY,EAAiBK,SAASjB,IAAa,cAACkB,EAAD,CAAYH,MAAOhB,EAAMgB,gBAMjF,IAAMG,EAAa,SAACnB,GAChB,IAAQgB,EAAUhB,EAAVgB,MACAI,EAAMC,2BAAND,EACFE,EAAgBC,wBACdC,EAAaC,qBAAWC,KAAxBF,SAEAG,EAAazB,uBAAY,SAACC,GAAD,OAAsBA,EAAMyB,MAAMC,SAASb,MAApEW,SACR,OACI,eAAC,WAAD,WACI,cAAC,eAAD,UACI,cAAC,OAAD,sBAEJ,cAAC,eAAD,CAAcG,QAASV,EAAE,wCACzB,cAAC,0BAAD,UACI,cAAC,SAAD,CACIW,QAAM,EACNC,MAAOL,EACPM,SAAU,YAA4B,IAAfD,EAAc,EAAxBE,OAAUF,MACnBR,EAAS,CACLW,KAAM,0BACNnB,MAAOA,EACPW,SAAUK,IAEdV,EAAcc,aAAsBpB,EAAOgB,KATnD,SAYKK,OAAOC,OAAOC,KAAYC,KAAI,SAAAC,GAAC,OAC5B,wBAAgBT,MAAOS,EAAvB,SACKrB,EAAE,gCAAwC,KAANqB,EAAW,OAASA,KADhDA,cAU/B1B,EAAY,SAACf,GACf,IAAQgB,EAA4BhB,EAA5BgB,MAAOC,EAAqBjB,EAArBiB,iBACPG,EAAMC,2BAAND,EACFE,EAAgBC,wBACdC,EAAaC,qBAAWC,KAAxBF,SAEAkB,EAAaxC,uBAAY,SAACC,GAAD,OAAsBA,EAAMyB,MAAMC,SAASb,MAApE0B,SAkBR,OACI,eAAC,WAAD,WACI,cAAC,eAAD,UACI,cAAC,OAAD,sBAEJ,cAAC,eAAD,CACIZ,QAASV,EAAE,sCACXuB,UACI,cAAC,YAAD,CAAWC,KAAG,EAAd,SACK3B,EAAiBuB,KAAI,SAAAK,GAAC,OACnB,cAAC,mBAAD,CACIC,QACI,cAAC,WAAD,CACIC,QAASL,EAASxB,SAAS2B,GAC3Bb,MAAOa,EACPZ,UA9B/Be,EA8BsDH,EA7BvD,YAAmE,IAAtDE,EAAqD,EAA/Db,OAAUa,QACLC,IAAYxC,IAASC,QACzBe,EAAS,CACLW,KAAM,0BACNnB,MAAOhB,EAAMgB,MACbiC,UAAWD,EACXE,UAAWH,IAGXzB,EADAyB,EACcI,YAAkBnD,EAAMgB,MAAOgC,GAE/BI,YAAqBpD,EAAMgB,MAAOgC,OAmBxBK,SAAUR,IAAMrC,IAASC,QAGjC6C,MAAOlC,EAAE,+BAAiCyB,IACrCA,GAnC7B,IAACG,OAwCOO,yBAAwB,eAAK,YAAqB","file":"static/js/panelStationsMore.ac227bea.chunk.js","sourcesContent":["import React, { memo, useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Checkbox,\n    FormControlLabel,\n    FormGroup,\n    Icon,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    Select,\n} from '@material-ui/core';\nimport { ParamContext } from '../../../context';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../../redux';\nimport { Facilities, RmgStyle, Services } from '../../../constants/constants';\nimport { addStationService, removeStationService, updateStationFacility } from '../../../redux/param/action';\n\nexport default memo(function MoreTab(props: { stnId: string }) {\n    const rmgStyle = useSelector((store: RootState) => store.app.rmgStyle);\n    const rmgStyleServices: { [s in RmgStyle]?: Services[] } = {\n        [RmgStyle.GZMTR]: [Services.local, Services.express],\n        [RmgStyle.SHMetro]: [Services.local, Services.express, Services.direct],\n    };\n    const rmgStyleFacility: RmgStyle[] = [RmgStyle.MTR];\n\n    return (\n        <div>\n            <List>\n                {rmgStyle in rmgStyleServices && (\n                    <ServiceLi stnId={props.stnId} providedServices={rmgStyleServices[rmgStyle] as Services[]} />\n                )}\n                {rmgStyleFacility.includes(rmgStyle) && <FacilityLi stnId={props.stnId} />}\n            </List>\n        </div>\n    );\n});\n\nconst FacilityLi = (props: { stnId: string }) => {\n    const { stnId } = props;\n    const { t } = useTranslation();\n    const reduxDispatch = useDispatch();\n    const { dispatch } = useContext(ParamContext);\n\n    const { facility } = useSelector((store: RootState) => store.param.stn_list[stnId]);\n    return (\n        <ListItem>\n            <ListItemIcon>\n                <Icon>place</Icon>\n            </ListItemIcon>\n            <ListItemText primary={t('stations.edit.more.facility.button')} />\n            <ListItemSecondaryAction>\n                <Select\n                    native\n                    value={facility}\n                    onChange={({ target: { value } }) => {\n                        dispatch({\n                            type: 'UPDATE_STATION_FACILITY',\n                            stnId: stnId,\n                            facility: value as Facilities,\n                        });\n                        reduxDispatch(updateStationFacility(stnId, value as Facilities));\n                    }}\n                >\n                    {Object.values(Facilities).map(f => (\n                        <option key={f} value={f}>\n                            {t('stations.edit.more.facility.' + (f === '' ? 'none' : f))}\n                        </option>\n                    ))}\n                </Select>\n            </ListItemSecondaryAction>\n        </ListItem>\n    );\n};\n\nconst ServiceLi = (props: { stnId: string; providedServices: Services[] }) => {\n    const { stnId, providedServices } = props;\n    const { t } = useTranslation();\n    const reduxDispatch = useDispatch();\n    const { dispatch } = useContext(ParamContext);\n\n    const { services } = useSelector((store: RootState) => store.param.stn_list[stnId]);\n\n    const handleChange =\n        (service: Services) =>\n        ({ target: { checked } }: React.ChangeEvent<HTMLInputElement>) => {\n            if (service === Services.local) return; // cannot remove local service\n            dispatch({\n                type: 'UPDATE_STATION_SERVICES',\n                stnId: props.stnId,\n                serviceId: service,\n                isChecked: checked,\n            });\n            if (checked) {\n                reduxDispatch(addStationService(props.stnId, service));\n            } else {\n                reduxDispatch(removeStationService(props.stnId, service));\n            }\n        };\n    return (\n        <ListItem>\n            <ListItemIcon>\n                <Icon>train</Icon>\n            </ListItemIcon>\n            <ListItemText\n                primary={t('stations.edit.more.services.button')}\n                secondary={\n                    <FormGroup row>\n                        {providedServices.map(s => (\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        checked={services.includes(s)}\n                                        value={s}\n                                        onChange={handleChange(s)}\n                                        disabled={s === Services.local}\n                                    />\n                                }\n                                label={t('stations.edit.more.services.' + s)}\n                                key={s}\n                            />\n                        ))}\n                    </FormGroup>\n                }\n                secondaryTypographyProps={{ ['component' as any]: 'div' }}\n            />\n        </ListItem>\n    );\n};\n"],"sourceRoot":""}