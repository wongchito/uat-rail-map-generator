{"version":3,"sources":["panels/save/upload-item.tsx","panels/save/export-diag/utils.ts","panels/save/export-diag/preview-diag.tsx","panels/save/export-diag/index.ts","panels/save/export-diag/dialog.tsx","panels/save/panel.tsx","panels/save/index.ts"],"names":["UploadLi","t","useTranslation","React","useState","open","setOpen","importedParam","setImportedParam","button","component","htmlFor","primary","type","accept","style","display","id","onChange","event","console","log","target","files","Promise","resolve","reader","FileReader","onloadend","readAsText","then","e","JSON","parse","result","param","ImportDialog","onClose","action","a","document","getElementById","value","window","rmgStorage","writeFile","stringify","location","assign","RmgStyle","MTR","error","content","props","dividers","whiteSpace","Object","keys","length","stn_list","entries","map","x","includes","name","join","trim","replace","onClick","color","autoFocus","test","svgEl","scale","svgW","viewBox","baseVal","width","svgH","height","canvas","querySelectorAll","Number","devicePixelRatio","setAttribute","toString","ctx","getContext","clearRect","forEach","el","elStyle","getComputedStyle","fontFamily","fill","dominantBaseline","textAnchor","img","Image","onload","setTimeout","drawImage","uri","filename","link","createElement","download","href","body","appendChild","click","removeChild","saveAs","toDataURL","Date","toISOString","src","btoa","unescape","encodeURIComponent","outerHTML","useStyles","makeStyles","theme","createStyles","contentWrapper","overflow","paddingTop","spacing","paddingBottom","paddingLeft","paddingRight","breakpoints","down","flexDirection","contentCanvas","flex","contentControl","flexGrow","flexShrink","minWidth","contentRoot","padding","contentControlContent","justifyContent","formControlRoot","margin","PreviewDialog","classes","rmgStyle","useAppSelector","store","setSvgEl","isLoaded","setIsLoaded","showBorder","setShowBorder","isTransparent","setIsTransparent","setScale","format","setFormat","isAccept","setIsAccept","isTermsDialogOpen","setIsTermsDialogOpen","contentEl","useRef","useEffect","key","querySelector","getPropertyValue","match","thisSVGHeight","elem","cloneNode","setProperty","tag","filter","l","sheet","cssRules","rule","cssText","txt","s","textContent","prepend","getBase64FontFace","response","all","uris","catch","err","alert","fonts","ready","handleClose","current","removeAttribute","maxWidth","className","dangerouslySetInnerHTML","__html","ref","root","disablePadding","checked","_","disabled","variant","native","nextScale","getAttribute","ratio","toFixed","size","cursor","TermsDialog","useMemo","ExportDialog","canvasToShow","app","previewDialogOpened","setPreviewDialogOpened","setCanvas","AllCanvas","canvasConfig","c","TemplateDialog","lazy","allLangs","en","SaveLists","i18n","isTempDialogOpen","setIsTempDialogOpen","isExportDialogOpen","setIsExportDialogOpen","isStyleDialogOpen","setIsStyleDialogOpen","isLangDialogOpen","setIsLangDialogOpen","saveClick","secondary","getTransText2","languages","Suspense","fallback","StyleDialog","gtag","event_category","event_label","LangDialog","dispatch","useAppDispatch","setStyle","values","to","textDecoration","lang","language","changeLanguage","title","documentElement","Panel","TranslatedSaveLists","withTranslation","container","justify","alignItems","item","xs","sm","md","lg"],"mappings":"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","file":"static/js/panelSave.7893ae88.chunk.js","sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    ListItem,\n    ListItemIcon,\n    Icon,\n    ListItemText,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogContentText,\n    DialogActions,\n    Button,\n} from '@material-ui/core';\nimport { RMGParam, RmgStyle } from '../../constants/constants';\n\nexport default function UploadLi() {\n    const { t } = useTranslation();\n\n    const [open, setOpen] = React.useState(false);\n    const [importedParam, setImportedParam] = React.useState({} as RMGParam);\n\n    const handleUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n        console.log(event.target.files![0]);\n        let filePromise = new Promise((resolve: (event: ProgressEvent<FileReader>) => void) => {\n            let reader = new FileReader();\n            reader.onloadend = resolve;\n            reader.readAsText(event.target.files![0]);\n        });\n        filePromise\n            .then(e => JSON.parse(e.target!.result as string))\n            .then(param => {\n                setImportedParam(param);\n                setOpen(true);\n            });\n    };\n\n    const handleClose = (action: string) => async () => {\n        if (action === 'close') {\n            (document.getElementById('upload-param') as HTMLInputElement).value = '';\n            setOpen(false);\n            return;\n        }\n        if (action === 'accept') {\n            try {\n                await window.rmgStorage.writeFile('rmgParam', JSON.stringify(importedParam));\n                // TODO: electron will fail here, wait for #96\n                window.location.assign(`./${importedParam.style || RmgStyle.MTR}`);\n                // So after #96 is fixed, we first need to dispatch the param\n                // and then <Link> to the importedParam.style\n            } catch (err) {\n                console.error(err);\n            }\n        }\n    };\n\n    return (\n        <>\n            <ListItem button component=\"label\" htmlFor=\"upload-param\">\n                <ListItemIcon>\n                    <Icon>folder_open</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('file.open.button')} />\n            </ListItem>\n            <input\n                type=\"file\"\n                accept=\"application/json\"\n                style={{ display: 'none' }}\n                id=\"upload-param\"\n                onChange={handleUpload}\n            />\n            <ImportDialog open={open} onClose={handleClose} content={importedParam} />\n        </>\n    );\n}\n\ninterface ImportDialogProps {\n    onClose: (action: string) => () => void;\n    open: boolean;\n    content: {} | RMGParam;\n}\n\nfunction ImportDialog(props: ImportDialogProps) {\n    const { t } = useTranslation();\n\n    const describeParams = (param: RMGParam) => {\n        return `Number of stations: ${Object.keys(param.stn_list).length - 2}\n                ${Object.entries(param.stn_list)\n                    .map(x => (['linestart', 'lineend'].includes(x[0]) ? '' : x[1].name.join(' - ')))\n                    .join('\\r\\n')\n                    .trim()\n                    .replace(/\\\\/, ' ')}`;\n    };\n\n    return (\n        <Dialog onClose={props.onClose('close')} open={props.open}>\n            <DialogTitle>Your Configuration</DialogTitle>\n            <DialogContent dividers>\n                <DialogContentText style={{ whiteSpace: 'pre-line' }}>\n                    {Object.keys(props.content).length === 0 ? 'empty' : describeParams(props.content as RMGParam)}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose('close')} color=\"primary\">\n                    {t('dialog.cancel')}\n                </Button>\n                <Button onClick={props.onClose('accept')} color=\"primary\" autoFocus>\n                    Import\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","export function test(svgEl: SVGSVGElement, scale: number) {\n    let svgW = svgEl.viewBox.baseVal.width;\n    let svgH = svgEl.viewBox.baseVal.height;\n\n    // svgEl.removeAttribute('height');\n\n    let canvas = document.querySelectorAll('canvas')[0];\n    canvas.width = Number(svgW) * window.devicePixelRatio * scale;\n    canvas.height = Number(svgH) * window.devicePixelRatio * scale;\n\n    svgEl.setAttribute('width', canvas.width.toString());\n    svgEl.setAttribute('height', canvas.height.toString());\n\n    let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // bypass Chrome min font size (to be improved)\n\n    svgEl.querySelectorAll('.rmg-name__en.rmg-name__mtr--station').forEach(el => el.setAttribute('font-size', '11px'));\n\n    svgEl.querySelectorAll('.rmg-name__zh.IntName').forEach(el => el.setAttribute('font-size', '10px'));\n\n    svgEl.querySelectorAll('.rmg-name__en.rmg-name__mtr--osi').forEach(el => el.setAttribute('font-size', '9px'));\n\n    svgEl\n        .querySelectorAll('.rmg-name__en.rmg-name__gzmtr--next2-dest')\n        .forEach(el => el.setAttribute('font-size', '8.5px'));\n\n    svgEl.querySelectorAll('.rmg-name__en.IntName').forEach(el => el.setAttribute('font-size', '7px'));\n\n    // svgEl\n    //     .querySelectorAll('text:not([font-size]), tspan:not([font-size])')\n    //     .forEach((el) => el.setAttribute('font-size', window.getComputedStyle(el).fontSize));\n\n    svgEl.querySelectorAll('text, tspan').forEach(el => {\n        let elStyle = window.getComputedStyle(el);\n        el.setAttribute('font-family', elStyle.fontFamily);\n        el.setAttribute('fill', elStyle.fill);\n        el.setAttribute('dominant-baseline', elStyle.dominantBaseline);\n        el.setAttribute('text-anchor', elStyle.textAnchor || '');\n        // el.removeAttribute('class');\n    });\n\n    var img = new Image();\n    img.onload = () => {\n        setTimeout(() => {\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n            saveAs(canvas.toDataURL('image/png'), 'rmg.' + new Date().toISOString() + '.png');\n        }, 2000);\n    };\n    img.src = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgEl.outerHTML)));\n}\n\nfunction saveAs(uri: string, filename: string) {\n    var link = document.createElement('a');\n\n    if (typeof link.download === 'string') {\n        link.href = uri;\n        link.download = filename;\n        //Firefox requires the link to be in the body\n        document.body.appendChild(link);\n        //simulate click\n        link.click();\n        //remove the link when done\n        document.body.removeChild(link);\n    } else {\n        window.open(uri);\n    }\n}\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    Checkbox,\n    createStyles,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Divider,\n    List,\n    ListItem,\n    ListItemSecondaryAction,\n    ListItemText,\n    makeStyles,\n    Select,\n    Switch,\n    Typography,\n} from '@material-ui/core';\n\nimport { test } from './utils';\nimport { useAppSelector } from '../../../redux';\nimport { RmgStyle } from '../../../constants/constants';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        contentWrapper: {\n            display: 'flex',\n            overflow: 'hidden',\n            paddingTop: theme.spacing(1),\n            paddingBottom: theme.spacing(1),\n            paddingLeft: theme.spacing(3),\n            paddingRight: theme.spacing(3),\n            [theme.breakpoints.down('xs')]: {\n                flexDirection: 'column',\n            },\n        },\n        contentCanvas: {\n            flex: 1,\n        },\n        contentControl: {\n            flexGrow: 0,\n            flexShrink: 0,\n            display: 'flex',\n            flexDirection: 'column',\n            minWidth: 250,\n        },\n        contentRoot: {\n            padding: 'unset',\n            '&:first-child': {\n                paddingTop: 'unset',\n            },\n        },\n        contentControlContent: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'space-between',\n        },\n        formControlRoot: {\n            margin: 0,\n        },\n    })\n);\n\ninterface Props {\n    onClose: (action: string) => void;\n    open: boolean;\n    canvas: string;\n}\n\nexport default function PreviewDialog(props: Props) {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const rmgStyle = useAppSelector(store => store.param.style);\n\n    const [svgEl, setSvgEl] = useState(document.createElement('svg') as Element as SVGSVGElement);\n    const [isLoaded, setIsLoaded] = useState(false);\n\n    const [showBorder, setShowBorder] = useState(false);\n    const [isTransparent, setIsTransparent] = useState(false);\n    const [scale, setScale] = useState(1);\n    const [format, setFormat] = useState('png');\n\n    const [isAccept, setIsAccept] = useState(false);\n    const [isTermsDialogOpen, setIsTermsDialogOpen] = useState(false);\n\n    const handleShowBorder = (_: React.ChangeEvent<HTMLInputElement>, checked: boolean) => {\n        svgEl.querySelector('rect#canvas-border')?.setAttribute('stroke', checked ? 'black' : 'none');\n        setShowBorder(checked);\n    };\n\n    const handleTransparent = (_: React.ChangeEvent<HTMLInputElement>, checked: boolean) => {\n        svgEl.querySelector('rect#canvas-bg')?.setAttribute('fill', checked ? 'none' : 'white');\n        setIsTransparent(checked);\n    };\n\n    const handleScaleChange = (event: React.ChangeEvent<{ name?: string | undefined; value: unknown }>) => {\n        let nextScale = event.target.value as number;\n        svgEl.setAttribute('height', ((Number(svgEl.getAttribute('height')) / scale) * nextScale).toString());\n        setScale(nextScale);\n    };\n\n    const contentEl = React.useRef<HTMLDivElement | null>(null);\n\n    useEffect(\n        () => {\n            if (props.canvas === '') {\n                setSvgEl(document.createElement('svg') as Element as SVGSVGElement);\n                setIsLoaded(false);\n                return;\n            }\n            let [, thisSVGHeight] = ['--rmg-svg-width', '--rmg-svg-height']\n                .map(\n                    key =>\n                        (document.querySelector(`svg#${props.canvas}`) as SVGSVGElement).style\n                            .getPropertyValue(key)\n                            .match(/\\d+/g)![0]\n                )\n                .map(Number);\n\n            // let MAX_WIDTH = Math.min(window.innerWidth, 1412) - 64 - 24 * 2;\n            // let MAX_HEIGHT = window.innerHeight - 64 - 64 - 52 - 8 * 2;\n            // let scaleFactor = Math.min(MAX_WIDTH / thisSVGWidth, MAX_HEIGHT / thisSVGHeight);\n\n            let elem = document.querySelector(`svg#${props.canvas}`)!.cloneNode(true) as SVGSVGElement;\n            // elem.setAttribute('width', (thisSVGWidth * scaleFactor).toString());\n            elem.setAttribute('height', (thisSVGHeight * scale).toString());\n            elem.style.setProperty('all', 'initial');\n\n            ['share', props.canvas]\n                .map(tag =>\n                    [\n                        ...(\n                            [...document.querySelectorAll('link')].filter(l => l.id === 'css_' + tag)[0]\n                                ?.sheet as CSSStyleSheet\n                        ).cssRules,\n                    ]\n                        .map(rule => rule.cssText)\n                        .join(' ')\n                )\n                .forEach(txt => {\n                    let s = document.createElement('style');\n                    s.textContent = txt;\n                    elem.prepend(s);\n                });\n\n            elem.querySelector('rect#canvas-border')?.setAttribute('stroke', showBorder ? 'black' : 'none');\n            elem.querySelector('rect#canvas-bg')?.setAttribute('fill', isTransparent ? 'none' : 'white');\n\n            if (rmgStyle === RmgStyle.MTR) {\n                import(/* webpackChunkName: \"panelPreviewMTR\" */ './mtr-helper')\n                    .then(({ getBase64FontFace }) =>\n                        getBase64FontFace(elem)\n                            .then(async response => {\n                                let uris = await Promise.all(response);\n                                let s = document.createElement('style');\n                                s.textContent = uris.join(' ');\n                                elem.prepend(s);\n                            })\n                            .catch(err => {\n                                alert('Failed to fonts. Fonts in the exported PNG will be missing.');\n                                console.error(err);\n                            })\n                    )\n                    .then(() => {\n                        setSvgEl(elem);\n                        document.fonts.ready.then(() => setIsLoaded(true));\n                    });\n            } else {\n                setSvgEl(elem);\n                setIsLoaded(true);\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.canvas]\n    );\n\n    const handleClose = (action: 'close' | 'download') => () => {\n        if (action === 'close') {\n            props.onClose('close');\n        } else {\n            let svgEl = contentEl.current!.querySelector('svg') as SVGSVGElement;\n            if (format === 'png') {\n                test(svgEl, scale);\n            } else if (format === 'svg') {\n                svgEl.removeAttribute('height');\n                var link = document.createElement('a');\n                link.href = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgEl.outerHTML)));\n                link.download = 'rmg.' + new Date().toISOString() + '.svg';\n                link.click();\n            }\n            props.onClose('close');\n        }\n    };\n\n    return (\n        <Dialog onClose={handleClose('close')} open={props.open} maxWidth={false}>\n            <DialogTitle>{t('file.preview.title')}</DialogTitle>\n            <div className={classes.contentWrapper}>\n                <DialogContent\n                    dangerouslySetInnerHTML={{ __html: svgEl.outerHTML }}\n                    ref={contentEl}\n                    className={classes.contentCanvas}\n                    classes={{ root: classes.contentRoot }}\n                />\n                <div className={classes.contentControl}>\n                    <DialogContent classes={{ root: classes.contentRoot }} className={classes.contentControlContent}>\n                        <List component=\"div\" disablePadding>\n                            <ListItem>\n                                <ListItemText primary={t('file.preview.transparent')} />\n                                <ListItemSecondaryAction>\n                                    <Switch\n                                        color=\"primary\"\n                                        checked={isTransparent}\n                                        onChange={handleTransparent}\n                                        disabled={!isLoaded}\n                                    />\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                            <Divider variant=\"middle\" />\n                            <ListItem>\n                                <ListItemText primary={t('file.preview.border')} />\n                                <ListItemSecondaryAction>\n                                    <Switch\n                                        color=\"primary\"\n                                        checked={showBorder}\n                                        onChange={handleShowBorder}\n                                        disabled={!isLoaded}\n                                    />\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                            <Divider variant=\"middle\" />\n                            <ListItem>\n                                <ListItemText primary={t('file.preview.scale')} />\n                                <ListItemSecondaryAction>\n                                    <Select native value={scale} onChange={handleScaleChange} disabled={!isLoaded}>\n                                        {[\n                                            0.25, 0.33, 0.5, 0.67, 0.75, 0.8, 0.9, 1, 1.1, 1.25, 1.5, 1.75, 2, 2.5, 3,\n                                            4, 5,\n                                        ].map(ratio => (\n                                            <option key={ratio} value={ratio}>\n                                                {(ratio * 100).toFixed(0) + '%'}\n                                            </option>\n                                        ))}\n                                    </Select>\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                            <Divider variant=\"middle\" />\n                            <ListItem>\n                                <ListItemText primary={t('file.preview.format')} />\n                                <ListItemSecondaryAction>\n                                    <Select\n                                        native\n                                        value={format}\n                                        onChange={e => setFormat(e.target.value as string)}\n                                        style={{ width: 65 }}\n                                        disabled={!isLoaded}\n                                    >\n                                        <option value=\"png\">PNG</option>\n                                        <option value=\"svg\">SVG (Web Use)</option>\n                                    </Select>\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                        </List>\n                        <ListItem style={{ padding: 0 }}>\n                            <Checkbox\n                                color=\"primary\"\n                                size=\"small\"\n                                checked={isAccept}\n                                onChange={(_, checked) => setIsAccept(checked)}\n                            />\n                            <Typography variant=\"body2\">\n                                {t('file.preview.terms.accept')}\n                                <Typography\n                                    component=\"a\"\n                                    color=\"primary\"\n                                    variant=\"body2\"\n                                    style={{ cursor: 'pointer' }}\n                                    onClick={() => setIsTermsDialogOpen(true)}\n                                >\n                                    {t('file.preview.terms.tandc')}\n                                </Typography>\n                            </Typography>\n\n                            <TermsDialog open={isTermsDialogOpen} onClose={() => setIsTermsDialogOpen(false)} />\n                        </ListItem>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button variant=\"outlined\" onClick={handleClose('close')} color=\"primary\" autoFocus>\n                            {t('dialog.cancel')}\n                        </Button>\n                        <Button\n                            variant=\"contained\"\n                            onClick={handleClose('download')}\n                            color=\"primary\"\n                            disabled={!isLoaded || !isAccept}\n                        >\n                            {t('file.preview.download')}\n                        </Button>\n                    </DialogActions>\n                </div>\n            </div>\n        </Dialog>\n    );\n}\n\nconst TermsDialog = (props: { open: boolean; onClose: () => void }) => {\n    const { t } = useTranslation();\n    return useMemo(\n        () => (\n            <Dialog open={props.open} onClose={props.onClose}>\n                <DialogTitle>{t('file.preview.terms.tandc')}</DialogTitle>\n                <DialogContent dividers>\n                    <Typography component=\"p\">\n                        The downloaded image may be modified, published, or used for other purposes, under the following\n                        conditions.\n                    </Typography>\n                    <Typography component=\"ol\">\n                        <Typography component=\"li\">\n                            The layout of the elements on the sign or rail map, is designed by{' '}\n                            <Typography component=\"a\" color=\"primary\" href=\"http://www.gzmtr.com\" target=\"_blank\">\n                                Guangzhou Metro Corporation\n                            </Typography>\n                            ,{' '}\n                            <Typography component=\"a\" color=\"primary\" href=\"http://www.mtr.com.hk\" target=\"_blank\">\n                                MTR Corporation\n                            </Typography>{' '}\n                            or{' '}\n                            <Typography component=\"a\" color=\"primary\" href=\"http://www.shmetro.com\" target=\"_blank\">\n                                Shanghai Shentong Metro Group\n                            </Typography>\n                            , depending on your selection. You shall grant appropriate permit or license from the\n                            relevant company above before using the downloaded image for commercial purposes, if it is\n                            required to do so.\n                        </Typography>\n                        <Typography component=\"li\">\n                            The elements including shapes and lines on the image are drawn by{' '}\n                            <Typography\n                                component=\"a\"\n                                color=\"primary\"\n                                href=\"https://github.com/wongchito\"\n                                target=\"_blank\"\n                            >\n                                Chito Wong\n                            </Typography>{' '}\n                            and{' '}\n                            <Typography\n                                component=\"a\"\n                                color=\"primary\"\n                                href=\"https://github.com/thekingofcity\"\n                                target=\"_blank\"\n                            >\n                                thekingofcity\n                            </Typography>\n                            , based on the design standards or rules of the companies listed above. You may use them for\n                            any purposes, but it is recommended to state the name and the link of software alongside.\n                        </Typography>\n                        <Typography component=\"li\">\n                            The fonts of the Chinese characters in MTR style are provided by{' '}\n                            <Typography\n                                component=\"a\"\n                                color=\"primary\"\n                                href=\"https://www.google.com/get/noto/help/cjk/\"\n                                target=\"_blank\"\n                            >\n                                Google Inc.\n                            </Typography>{' '}\n                            while all others fonts are rendered from local files. You shall grant appropriate permit or\n                            license from the manufacturers before using the downloaded image for commercial purposes.\n                        </Typography>\n                    </Typography>\n                    <Typography component=\"p\">\n                        We reserve the rights, without notice, to modify, add, or remove these terms.\n                    </Typography>\n                    <Typography component=\"p\">本條款及細則暫只提供英文版，敬請原諒。</Typography>\n                    <Typography component=\"p\" variant=\"body2\">\n                        Last modified: 6 Apr 2020, 12:39 UTC\n                    </Typography>\n                </DialogContent>\n                <DialogActions>\n                    <Button variant=\"outlined\" color=\"primary\" onClick={props.onClose}>\n                        {t('dialog.close')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.open]\n    );\n};\n","import ExportDialog from './dialog';\n\nexport default ExportDialog;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Dialog, DialogContent, DialogTitle, List, ListItem, ListItemText } from '@material-ui/core';\n\nimport PreviewDialog from './preview-diag';\nimport { useAppSelector } from '../../../redux';\nimport { AllCanvas, canvasConfig } from '../../../constants/constants';\n\ninterface Props {\n    onClose: (action: string) => void;\n    open: boolean;\n}\n\nexport default function ExportDialog(props: Props) {\n    const { t } = useTranslation();\n\n    const rmgStyle = useAppSelector(store => store.param.style);\n    const canvasToShow = useAppSelector(store => store.app.canvasToShow);\n\n    const [previewDialogOpened, setPreviewDialogOpened] = React.useState(false);\n    const [canvas, setCanvas] = React.useState('');\n\n    const handleClose = (action: string) => () => {\n        if (action !== 'close') {\n            setPreviewDialogOpened(true);\n            setCanvas(action);\n        }\n        props.onClose('close');\n    };\n\n    const previewDialogClose = (action: string) => {\n        if (action === 'close') {\n            setPreviewDialogOpened(false);\n            setCanvas('');\n        }\n    };\n\n    return (\n        <>\n            <Dialog onClose={handleClose('close')} open={props.open}>\n                <DialogTitle>{t('file.export.title')}</DialogTitle>\n                <DialogContent dividers>\n                    <List>\n                        {(canvasToShow === AllCanvas ? canvasConfig[rmgStyle] : [canvasToShow]).map(c => (\n                            <ListItem button key={c} onClick={handleClose(c)}>\n                                <ListItemText primary={t('file.export.' + c)} />\n                            </ListItem>\n                        ))}\n                    </List>\n                </DialogContent>\n            </Dialog>\n\n            <PreviewDialog open={previewDialogOpened} onClose={previewDialogClose} canvas={canvas} />\n        </>\n    );\n}\n","import React, { useState } from 'react';\nimport { useTranslation, withTranslation } from 'react-i18next';\nimport {\n    Grid,\n    Card,\n    List,\n    ListItem,\n    ListItemIcon,\n    Icon,\n    ListItemText,\n    Divider,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    LinearProgress,\n} from '@material-ui/core';\nimport { getTransText2 } from '../../utils';\nimport UploadListItem from './upload-item';\nimport ExportDialog from './export-diag';\nimport { Link } from 'react-router-dom';\nimport { useAppDispatch, useAppSelector } from '../../redux';\nimport { LanguageCode, RmgStyle } from '../../constants/constants';\nimport { setStyle } from '../../redux/param/action';\n\nconst TemplateDialog = React.lazy(() => import(/* webpackChunkName: \"panelSaveTemplateDialog\" */ './template-diag'));\n\nexport default function PanelSave() {\n    let TranslatedSaveLists = withTranslation()(SaveLists);\n\n    return (\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n            <Grid item xs={12} sm={8} md={6} lg={4}>\n                <TranslatedSaveLists />\n            </Grid>\n        </Grid>\n    );\n}\n\nconst allLangs = {\n    en: 'English',\n    'zh-Hans': '中文（简体）',\n    'zh-HK': '中文（香港）',\n};\n\nconst SaveLists = () => {\n    const { t, i18n } = useTranslation();\n\n    const rmgStyle = useAppSelector(store => store.param.style);\n    const param = useAppSelector(store => store.param);\n\n    const [isTempDialogOpen, setIsTempDialogOpen] = useState(false);\n    const [isExportDialogOpen, setIsExportDialogOpen] = useState(false);\n    const [isStyleDialogOpen, setIsStyleDialogOpen] = useState(false);\n    const [isLangDialogOpen, setIsLangDialogOpen] = useState(false);\n\n    const saveClick = async () => {\n        let link = document.createElement('a');\n        link.href = 'data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(param))));\n        link.download = 'rmg.param.' + new Date().toISOString() + '.json';\n        link.click();\n    };\n\n    const exportDialogClose = (action: string) => {\n        setIsExportDialogOpen(false);\n    };\n\n    const styleDialogClose = (action: 'close' | RmgStyle) => {\n        if (action === 'close' || action === rmgStyle) {\n        } else {\n            // setStyle(action);\n            // setIsStyleDialogOpen(false);\n\n            window.gtag('event', 'set', {\n                event_category: 'style',\n                event_label: action,\n            });\n            // window.location.href = process.env.PUBLIC_URL + '/' + action;\n        }\n        setIsStyleDialogOpen(false);\n\n        // TODO: how about integrity check?\n        // e.g. when user switch from guangzhou mtr to shanghai metro\n        // the info_panel_type will be invaild\n        // do we need to set info_panel_type to default or prompt up a dialog\n    };\n\n    return (\n        <div>\n            <Card>\n                <List component=\"nav\">\n                    <ListItem button onClick={() => setIsTempDialogOpen(true)}>\n                        <ListItemIcon>\n                            <Icon>note_add</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('file.new.button')} />\n                    </ListItem>\n                    <UploadListItem />\n                    <ListItem button onClick={saveClick}>\n                        <ListItemIcon>\n                            <Icon>save</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('file.save')} />\n                    </ListItem>\n                    <ListItem button onClick={() => setIsExportDialogOpen(true)}>\n                        <ListItemIcon>\n                            <Icon>cloud_download</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('file.export.button')} />\n                    </ListItem>\n                </List>\n                <Divider />\n                <List component=\"nav\">\n                    <ListItem button onClick={() => setIsStyleDialogOpen(true)}>\n                        <ListItemIcon>\n                            <Icon>style</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('file.style.button')} secondary={t('file.style.' + rmgStyle)} />\n                    </ListItem>\n                    <ListItem button onClick={() => setIsLangDialogOpen(true)}>\n                        <ListItemIcon>\n                            <Icon>translate</Icon>\n                        </ListItemIcon>\n                        <ListItemText\n                            primary={t('file.lang.button')}\n                            secondary={getTransText2(allLangs, i18n.languages as LanguageCode[])}\n                        />\n                    </ListItem>\n                </List>\n            </Card>\n\n            <React.Suspense fallback={<LinearProgress />}>\n                <TemplateDialog open={isTempDialogOpen} onClose={() => setIsTempDialogOpen(false)} />\n            </React.Suspense>\n\n            <ExportDialog open={isExportDialogOpen} onClose={exportDialogClose} />\n\n            <StyleDialog open={isStyleDialogOpen} onClose={styleDialogClose} />\n            <LangDialog open={isLangDialogOpen} onClose={() => setIsLangDialogOpen(false)} />\n        </div>\n    );\n};\n\ninterface StyleDialogProps {\n    onClose: (style: 'close' | RmgStyle) => void;\n    open: boolean;\n}\n\nfunction StyleDialog(props: StyleDialogProps) {\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const handleClose = (key: RmgStyle) => () => {\n        dispatch(setStyle(key));\n        props.onClose(key);\n    };\n\n    return (\n        <Dialog onClose={() => props.onClose('close')} open={props.open}>\n            <DialogTitle>{t('file.style.title')}</DialogTitle>\n            <DialogContent dividers>\n                <List>\n                    {Object.values(RmgStyle).map(key => (\n                        <Link to={'/' + key} key={key} style={{ textDecoration: 'none', color: 'unset' }}>\n                            <ListItem button onClick={handleClose(key)}>\n                                <ListItemText primary={t('file.style.' + key)} />\n                            </ListItem>\n                        </Link>\n                    ))}\n                </List>\n            </DialogContent>\n        </Dialog>\n    );\n}\n\ninterface LangDialogProps {\n    onClose: () => void;\n    open: boolean;\n}\n\nfunction LangDialog(props: LangDialogProps) {\n    const { t, i18n } = useTranslation();\n\n    const handleClick = (lang: string) => {\n        if (lang === i18n.language) {\n            props.onClose();\n        } else {\n            i18n.changeLanguage(lang).then(t => (document.title = t('title')));\n            // history.pushState({url:window.location.href}, null, '?' + window.urlParams.toString());\n            window.gtag('event', 'set', {\n                event_category: 'language',\n                event_label: lang,\n            });\n            document.documentElement.setAttribute('lang', lang);\n            props.onClose();\n        }\n    };\n\n    return (\n        <Dialog onClose={props.onClose} open={props.open}>\n            <DialogTitle>{t('file.lang.title')}</DialogTitle>\n            <DialogContent dividers>\n                <List>\n                    {(Object.keys(allLangs) as (keyof typeof allLangs)[]).map(key => (\n                        <ListItem button onClick={() => handleClick(key)} key={key}>\n                            <ListItemText primary={allLangs[key]} />\n                        </ListItem>\n                    ))}\n                </List>\n            </DialogContent>\n        </Dialog>\n    );\n}\n","import Panel from './panel';\n\nexport default Panel;\n"],"sourceRoot":""}