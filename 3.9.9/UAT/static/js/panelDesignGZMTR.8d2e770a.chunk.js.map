{"version":3,"sources":["panels/design/list-gzmtr.tsx"],"names":["useStyles","makeStyles","theme","createStyles","nestedList","paddingLeft","spacing","DesignListGZMTR","t","useTranslation","reduxDispatch","useDispatch","lineNum","useSelector","store","param","line_num","psdNum","psd_num","dispatch","useContext","ParamContext","primary","value","onChange","target","type","num","setLineNum","setPsdNum","PanelTypeLi","NotesLi","panelType","info_panel_type","useMemo","style","transform","native","variant","setPanelType","width","Object","values","PanelTypeGZMTR","map","classes","notes","notesGZMTR","useState","isCollapse","setIsCollapse","isDialogOpen","setIsDialogOpen","noteSelected","setNoteSelected","button","onClick","prevOpen","color","in","unmountOnExit","component","disablePadding","className","_","i","NotesEntry","idx","onEdit","disableTypography","cursor","length","addNote","NoteEditDialog","open","onClose","props","selectedNote","toggleEl","setToggleEl","handleEdit","handleSlide","_event","updatedNote","val","j","note","updateNote","handleChangeBorder","checked","handleRemove","removeNote","secondary","overflow","textOverflow","whiteSpace","size","e","currentTarget","anchorEl","Boolean","step","marks","label","marginLeft","marginRight","valueLabelDisplay","edge","toString","noteZH","setNoteZH","noteEN","setNoteEN","handleClick","margin","multiline","autoFocus","helperText"],"mappings":"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","file":"static/js/panelDesignGZMTR.8d2e770a.chunk.js","sourcesContent":["import React, { useContext, useState, useMemo, ChangeEvent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n    ListItem,\n    ListItemIcon,\n    Icon,\n    TextField,\n    ListItemText,\n    makeStyles,\n    createStyles,\n    Collapse,\n    Divider,\n    List,\n    ListItemSecondaryAction,\n    IconButton,\n    Typography,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Button,\n    Menu,\n    MenuItem,\n    Slider,\n    Switch,\n    Select,\n} from '@material-ui/core';\n\nimport { ParamContext } from '../../context';\nimport { PanelTypeGZMTR, Note } from '../../constants/constants';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../redux';\nimport { addNote, removeNote, setLineNum, setPanelType, setPsdNum, updateNote } from '../../redux/param/action';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        nestedList: {\n            paddingLeft: theme.spacing(5),\n        },\n    })\n);\n\nconst DesignListGZMTR = () => {\n    const { t } = useTranslation();\n    const reduxDispatch = useDispatch();\n\n    const lineNum = useSelector((store: RootState) => store.param.line_num);\n    const psdNum = useSelector((store: RootState) => store.param.psd_num);\n    const { dispatch } = useContext(ParamContext);\n\n    const handleLineNumChange = ({ target: { value } }: ChangeEvent<HTMLInputElement>) => {\n        dispatch({ type: 'SET_LINE_NUM', num: value });\n        reduxDispatch(setLineNum(value));\n    };\n\n    const handlePsdNumChange = ({ target: { value } }: ChangeEvent<HTMLInputElement>) => {\n        dispatch({ type: 'SET_PSD_NUM', num: value });\n        reduxDispatch(setPsdNum(value));\n    };\n\n    return (\n        <>\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>looks_one</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('design.lineNum')} />\n                <TextField value={lineNum} onChange={handleLineNumChange} />\n            </ListItem>\n            <Divider />\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>looks_one</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('design.psd')} />\n                <TextField value={psdNum} onChange={handlePsdNumChange} />\n            </ListItem>\n            <Divider />\n            <PanelTypeLi />\n            <Divider />\n            <NotesLi />\n        </>\n    );\n};\n\nexport default DesignListGZMTR;\n\nconst PanelTypeLi = () => {\n    const { t } = useTranslation();\n    const reduxDispatch = useDispatch();\n\n    const panelType = useSelector((store: RootState) => store.param.info_panel_type);\n    const { dispatch } = useContext(ParamContext);\n\n    return useMemo(() => {\n        const handleChange = ({ target: { value } }: ChangeEvent<{ name?: string; value: unknown }>) => {\n            dispatch({ type: 'SET_PANEL_TYPE', variant: value as PanelTypeGZMTR });\n            reduxDispatch(setPanelType(value as PanelTypeGZMTR));\n        };\n\n        return (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon style={{ transform: 'rotate(180deg)' }}>credit_card</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('design.panelType.button')} />\n                <Select native value={panelType} onChange={handleChange} style={{ width: 166 }}>\n                    {Object.values(PanelTypeGZMTR).map(type => (\n                        <option key={type} value={type}>\n                            {t('design.panelType.' + type)}\n                        </option>\n                    ))}\n                </Select>\n            </ListItem>\n        );\n    }, [panelType, t, dispatch, reduxDispatch]);\n};\n\nconst NotesLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const reduxDispatch = useDispatch();\n    const { dispatch } = useContext(ParamContext);\n\n    const notes = useSelector((store: RootState) => store.param.notesGZMTR);\n\n    const [isCollapse, setIsCollapse] = useState(false);\n    const [isDialogOpen, setIsDialogOpen] = useState(false);\n    const [noteSelected, setNoteSelected] = useState(0);\n\n    const handleAdd = () => {\n        setNoteSelected(notes.length);\n        dispatch({ type: 'ADD_NOTE_GZMTR' });\n        reduxDispatch(addNote());\n        setIsDialogOpen(true);\n    };\n\n    const handleUpdate = (idx: number) => () => {\n        setNoteSelected(idx);\n        setIsDialogOpen(true);\n    };\n\n    return (\n        <>\n            <ListItem button onClick={() => setIsCollapse(prevOpen => !prevOpen)}>\n                <ListItemIcon>\n                    <Icon>notes</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('design.notesGZMTR.text')} />\n                {isCollapse ? <Icon color=\"action\">expand_less</Icon> : <Icon color=\"action\">expand_more</Icon>}\n            </ListItem>\n            <Collapse in={isCollapse} unmountOnExit>\n                <List component=\"div\" disablePadding className={classes.nestedList}>\n                    {notes.map((_, i) => (\n                        <NotesEntry key={i} idx={i} onEdit={handleUpdate(i)} />\n                    ))}\n                    <ListItem>\n                        <ListItemText disableTypography>\n                            <Typography color=\"primary\" style={{ cursor: 'pointer' }} onClick={handleAdd}>\n                                {t('design.notesGZMTR.addNote')}\n                            </Typography>\n                        </ListItemText>\n                    </ListItem>\n                    {isDialogOpen && (\n                        <NoteEditDialog open={isDialogOpen} onClose={() => setIsDialogOpen(false)} idx={noteSelected} />\n                    )}\n                </List>\n            </Collapse>\n        </>\n    );\n};\n\nconst NotesEntry = (props: { idx: number; onEdit: () => void }) => {\n    const { t } = useTranslation();\n    const reduxDispatch = useDispatch();\n    const { dispatch } = useContext(ParamContext);\n\n    const notes = useSelector((store: RootState) => store.param.notesGZMTR);\n    const selectedNote = notes[props.idx];\n\n    const [toggleEl, setToggleEl] = useState<null | HTMLElement>(null);\n\n    const handleEdit = () => {\n        setToggleEl(null);\n        props.onEdit();\n    };\n\n    const handleSlide = (i: number) => (_event: React.ChangeEvent<{}>, value: number | number[]) => {\n        if (typeof value === 'number') {\n            const updatedNote = selectedNote.map((val, j) => (j === i ? value : val)) as Note;\n\n            dispatch({\n                type: 'UPDATE_NOTE_GZMTR',\n                idx: props.idx,\n                note: updatedNote,\n            });\n            reduxDispatch(updateNote(props.idx, updatedNote));\n        }\n    };\n\n    const handleChangeBorder = (_: ChangeEvent<HTMLInputElement>, checked: boolean) => {\n        const updatedNote = selectedNote.map((val, i) => (i === 4 ? checked : val)) as Note;\n\n        dispatch({\n            type: 'UPDATE_NOTE_GZMTR',\n            idx: props.idx,\n            note: updatedNote,\n        });\n        reduxDispatch(updateNote(props.idx, updatedNote));\n    };\n\n    const handleRemove = () => {\n        setToggleEl(null);\n        dispatch({ type: 'REMOVE_NOTE_GZMTR', idx: props.idx });\n        reduxDispatch(removeNote(props.idx));\n    };\n\n    return useMemo(\n        () => (\n            <>\n                <ListItem>\n                    <ListItemText\n                        primary={selectedNote[0]}\n                        secondary={selectedNote[1]}\n                        style={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}\n                    />\n                    <ListItemSecondaryAction>\n                        <IconButton size=\"small\" onClick={e => setToggleEl(e.currentTarget)}>\n                            <Icon>more_vert</Icon>\n                        </IconButton>\n                        <Menu anchorEl={toggleEl} open={Boolean(toggleEl)} onClose={() => setToggleEl(null)}>\n                            <MenuItem onClick={handleEdit}>{t('design.notesGZMTR.edit')}</MenuItem>\n\n                            <ListItem component=\"div\">\n                                <Slider\n                                    value={selectedNote[2]}\n                                    onChange={handleSlide(2)}\n                                    step={0.01}\n                                    marks={[\n                                        { value: 0, label: t('layout.directionGZ.left') },\n                                        { value: 100, label: t('layout.directionGZ.right') },\n                                    ]}\n                                    style={{ width: 200, marginLeft: 5, marginRight: 5 }}\n                                    valueLabelDisplay=\"auto\"\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <Slider\n                                    value={selectedNote[3]}\n                                    onChange={handleSlide(3)}\n                                    step={0.01}\n                                    marks={[\n                                        { value: 0, label: t('layout.directionGZ.top') },\n                                        { value: 100, label: t('layout.directionGZ.bottom') },\n                                    ]}\n                                    style={{ width: 200, marginLeft: 5, marginRight: 5 }}\n                                    valueLabelDisplay=\"auto\"\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemText primary={t('design.notesGZMTR.border')} />\n                                <ListItemSecondaryAction>\n                                    <Switch\n                                        edge=\"end\"\n                                        color=\"primary\"\n                                        checked={selectedNote[4]}\n                                        onChange={handleChangeBorder}\n                                    />\n                                </ListItemSecondaryAction>\n                            </ListItem>\n\n                            <MenuItem onClick={handleRemove}>{t('design.notesGZMTR.remove')}</MenuItem>\n                        </Menu>\n                    </ListItemSecondaryAction>\n                </ListItem>\n                <Divider variant=\"middle\" />\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [selectedNote.toString(), toggleEl]\n    );\n};\n\ninterface AddNoteDialogProps {\n    open: boolean;\n    onClose: () => void;\n    idx: number;\n}\n\nconst NoteEditDialog = (props: AddNoteDialogProps) => {\n    const { t } = useTranslation();\n    const reduxDispatch = useDispatch();\n\n    const { dispatch } = useContext(ParamContext);\n    const notes = useSelector((store: RootState) => store.param.notesGZMTR);\n    const selectedNote = notes[props.idx] || ['', '', 0, 0, false];\n\n    const [noteZH, setNoteZH] = useState(selectedNote[0] || '');\n    const [noteEN, setNoteEN] = useState(selectedNote[1] || '');\n\n    const handleClick = () => {\n        const updatedNote: Note = [noteZH, noteEN, selectedNote[2], selectedNote[3], selectedNote[4]];\n        dispatch({ type: 'UPDATE_NOTE_GZMTR', idx: props.idx, note: updatedNote });\n        reduxDispatch(updateNote(props.idx, updatedNote));\n        props.onClose();\n    };\n\n    return useMemo(\n        () => (\n            <Dialog open onClose={props.onClose}>\n                <DialogTitle>{t('design.notesGZMTR.editNote')}</DialogTitle>\n                <DialogContent>\n                    <TextField\n                        variant=\"outlined\"\n                        label={t('editor.zh')}\n                        margin=\"dense\"\n                        multiline\n                        autoFocus\n                        value={noteZH}\n                        onChange={e => setNoteZH(e.target.value)}\n                        style={{ width: '100%' }}\n                        helperText={t('editor.enterToWrap')}\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        label={t('editor.en')}\n                        margin=\"dense\"\n                        multiline\n                        value={noteEN}\n                        onChange={e => setNoteEN(e.target.value)}\n                        style={{ width: '100%' }}\n                        helperText={t('editor.enterToWrap')}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button variant=\"contained\" onClick={handleClick} color=\"primary\">\n                        {t('dialog.done')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [noteZH, noteEN]\n    );\n};\n"],"sourceRoot":""}