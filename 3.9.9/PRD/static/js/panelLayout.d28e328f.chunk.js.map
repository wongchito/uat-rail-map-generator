{"version":3,"sources":["panels/layout/common.tsx","panels/layout/panel.tsx","panels/layout/index.ts"],"names":["useStyles","makeStyles","theme","createStyles","nestedList","paddingLeft","spacing","textField","maxWidth","slider","width","marginLeft","marginRight","memo","rmgStyle","useSelector","store","app","RmgStyle","SHMetro","SizeLi","t","useTranslation","classes","reduxDispatch","useDispatch","dispatch","useContext","ParamContext","svgHeight","param","svg_height","svgWidths","svgWidth","useState","isOpen","setIsOpen","handleSvgWidthChange","canvas","value","target","isNaN","Number","type","targetId","setSvgWidth","handleSvgHeightChange","setSvgHeight","useMemo","button","onClick","prevOpen","primary","color","in","unmountOnExit","component","disablePadding","className","canvasConfig","map","Fragment","toString","onChange","InputProps","endAdornment","position","variant","JSON","stringify","YLi","yPercentage","y_pc","_","setYPercentage","step","marks","label","valueLabelDisplay","BranchSpacingLi","branchSpacing","branch_spacing","setBranchSpacing","PaddingLi","paddingPercentage","padding","setPaddingPercentage","max","LayoutGZMTR","React","lazy","container","justify","alignItems","item","xs","sm","md","lg","GZMTR","Suspense","fallback","Panel"],"mappings":"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","file":"static/js/panelLayout.d28e328f.chunk.js","sourcesContent":["import React, { ChangeEvent, memo, useContext, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    TextField,\n    Slider,\n    List,\n    ListItem,\n    ListItemIcon,\n    Icon,\n    ListItemText,\n    makeStyles,\n    createStyles,\n    Collapse,\n    Divider,\n    InputAdornment,\n} from '@material-ui/core';\nimport { ParamContext } from '../../context';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../redux';\nimport { canvasConfig, CanvasType, RmgStyle } from '../../constants/constants';\nimport {\n    setBranchSpacing,\n    setPaddingPercentage,\n    setSvgHeight,\n    setSvgWidth,\n    setYPercentage,\n} from '../../redux/param/action';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        nestedList: {\n            paddingLeft: theme.spacing(5),\n        },\n        textField: {\n            maxWidth: 168,\n        },\n        slider: {\n            width: 168,\n            marginLeft: 8,\n            marginRight: 8,\n        },\n    })\n);\n\nexport default memo(function LayoutCommon() {\n    const rmgStyle = useSelector((store: RootState) => store.app.rmgStyle);\n    return (\n        <>\n            <SizeLi />\n            <Divider />\n            {rmgStyle !== RmgStyle.SHMetro && (\n                <>\n                    <YLi />\n                    <Divider />\n                </>\n            )}\n            <BranchSpacingLi />\n            <Divider />\n            <PaddingLi />\n        </>\n    );\n});\n\nconst SizeLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const reduxDispatch = useDispatch();\n\n    const { dispatch } = useContext(ParamContext);\n\n    const rmgStyle = useSelector((store: RootState) => store.app.rmgStyle);\n    const svgHeight = useSelector((store: RootState) => store.param.svg_height);\n    const svgWidths = useSelector((store: RootState) => store.param.svgWidth);\n\n    const [isOpen, setIsOpen] = useState(false);\n\n    const handleSvgWidthChange =\n        (canvas: CanvasType) =>\n        ({ target: { value } }: ChangeEvent<HTMLInputElement>) => {\n            if (!isNaN(Number(value))) {\n                dispatch({\n                    type: 'SET_WIDTH',\n                    targetId: canvas,\n                    value: Number(value),\n                });\n                reduxDispatch(setSvgWidth(Number(value), canvas));\n            }\n        };\n\n    const handleSvgHeightChange = ({ target: { value } }: ChangeEvent<HTMLInputElement>) => {\n        if (!isNaN(Number(value))) {\n            dispatch({ type: 'SET_HEIGHT', value: Number(value) });\n            reduxDispatch(setSvgHeight(Number(value)));\n        }\n    };\n\n    return useMemo(\n        () => (\n            <>\n                <ListItem button onClick={() => setIsOpen(prevOpen => !prevOpen)}>\n                    <ListItemIcon>\n                        <Icon>panorama_horizontal</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('layout.size.title')} />\n                    {isOpen ? <Icon color=\"action\">expand_less</Icon> : <Icon color=\"action\">expand_more</Icon>}\n                </ListItem>\n                <Collapse in={isOpen} unmountOnExit>\n                    <List component=\"div\" disablePadding className={classes.nestedList}>\n                        {canvasConfig[rmgStyle].map(canvas => (\n                            <React.Fragment key={canvas}>\n                                <ListItem>\n                                    <ListItemText primary={t('layout.size.width.' + canvas)} />\n                                    <TextField\n                                        value={svgWidths[canvas].toString()}\n                                        onChange={handleSvgWidthChange(canvas)}\n                                        className={classes.textField}\n                                        InputProps={{\n                                            endAdornment: <InputAdornment position=\"end\">px</InputAdornment>,\n                                        }}\n                                    />\n                                </ListItem>\n                                <Divider variant=\"middle\" />\n                            </React.Fragment>\n                        ))}\n                        <ListItem>\n                            <ListItemText primary={t('layout.size.height')} />\n                            <TextField\n                                value={svgHeight.toString()}\n                                onChange={handleSvgHeightChange}\n                                className={classes.textField}\n                                InputProps={{\n                                    endAdornment: <InputAdornment position=\"end\">px</InputAdornment>,\n                                }}\n                            />\n                        </ListItem>\n                    </List>\n                </Collapse>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [JSON.stringify(svgWidths), svgHeight, isOpen, classes.nestedList]\n    );\n};\n\nconst YLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const reduxDispatch = useDispatch();\n    const { dispatch } = useContext(ParamContext);\n\n    const yPercentage = useSelector((store: RootState) => store.param.y_pc);\n\n    return useMemo(() => {\n        const handleSliderChange = (_: ChangeEvent<{}>, value: number | number[]) => {\n            dispatch({ type: 'SET_Y', value: value as number });\n            reduxDispatch(setYPercentage(value as number));\n        };\n\n        return (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>vertical_align_center</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('layout.y')} />\n                <Slider\n                    className={classes.slider}\n                    value={yPercentage}\n                    onChange={handleSliderChange}\n                    step={0.01}\n                    marks={[\n                        { value: 0, label: '0%' },\n                        { value: 100, label: '100%' },\n                    ]}\n                    valueLabelDisplay=\"auto\"\n                />\n            </ListItem>\n        );\n    }, [yPercentage, classes.slider, t, dispatch, reduxDispatch]);\n};\n\nconst BranchSpacingLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const reduxDispatch = useDispatch();\n    const { dispatch } = useContext(ParamContext);\n\n    const branchSpacing = useSelector((store: RootState) => store.param.branch_spacing);\n\n    return useMemo(() => {\n        const handleSliderChange = (_: ChangeEvent<{}>, value: number | number[]) => {\n            dispatch({ type: 'SET_BRANCH_SPACING', value: value as number });\n            reduxDispatch(setBranchSpacing(value as number));\n        };\n\n        return (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>format_line_spacing</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('layout.branchSpacing')} />\n                <Slider\n                    className={classes.slider}\n                    value={branchSpacing}\n                    onChange={handleSliderChange}\n                    step={0.01}\n                    marks={[\n                        { value: 0, label: '0px' },\n                        { value: 100, label: '100px' },\n                    ]}\n                    valueLabelDisplay=\"auto\"\n                />\n            </ListItem>\n        );\n    }, [branchSpacing, classes.slider, t, dispatch, reduxDispatch]);\n};\n\nconst PaddingLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const reduxDispatch = useDispatch();\n    const { dispatch } = useContext(ParamContext);\n\n    const paddingPercentage = useSelector((store: RootState) => store.param.padding);\n\n    return useMemo(() => {\n        const handleSliderChange = (_: ChangeEvent<{}>, value: number | number[]) => {\n            dispatch({ type: 'SET_PADDING', value: value as number });\n            reduxDispatch(setPaddingPercentage(value as number));\n        };\n\n        return (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>stay_current_landscape</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('layout.padding')} />\n                <Slider\n                    className={classes.slider}\n                    value={paddingPercentage}\n                    onChange={handleSliderChange}\n                    step={0.01}\n                    max={50}\n                    marks={[\n                        { value: 0, label: '0%' },\n                        { value: 50, label: '50%' },\n                    ]}\n                    valueLabelDisplay=\"auto\"\n                />\n            </ListItem>\n        );\n    }, [paddingPercentage, classes.slider, t, dispatch, reduxDispatch]);\n};\n","import React from 'react';\n\nimport { Grid, LinearProgress, List, Paper } from '@material-ui/core';\n\nimport LayoutCommon from './common';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../redux';\nimport { RmgStyle } from '../../constants/constants';\n\nconst LayoutGZMTR = React.lazy(() => import(/* webpackChunkName: \"panelLayoutGZMTR\" */ './gzmtr'));\n\nexport default React.memo(function LayoutPanel() {\n    const rmgStyle = useSelector((store: RootState) => store.app.rmgStyle);\n    return (\n        <Grid container spacing={3} justify=\"center\" alignItems=\"flex-start\">\n            <Grid item xs={12} sm={10} md={7} lg={5}>\n                <Paper>\n                    <List component=\"div\" disablePadding>\n                        <LayoutCommon />\n                        {rmgStyle === RmgStyle.GZMTR && (\n                            <React.Suspense fallback={<LinearProgress />}>\n                                <LayoutGZMTR />\n                            </React.Suspense>\n                        )}\n                    </List>\n                </Paper>\n            </Grid>\n        </Grid>\n    );\n});\n\n// export default LayoutPanel;\n","import Panel from './panel';\n\nexport default Panel;"],"sourceRoot":""}