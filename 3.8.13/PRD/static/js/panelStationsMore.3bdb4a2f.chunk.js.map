{"version":3,"sources":["panels/stations/edit-diag/more-tab.tsx"],"names":["memo","props","rmgStyle","useContext","CanvasContext","rmgStyleServices","ServiceLi","stnId","services","includes","FacilityLi","t","useTranslation","ParamContext","param","dispatch","primary","native","value","stn_list","facility","onChange","e","type","target","map","f","key","Set","secondary","row","s","control","checked","has","service","event","serviceId","isChecked","disabled","label","secondaryTypographyProps"],"mappings":"wLAgBeA,0BAAK,SAAiBC,GAA2B,IACpDC,EAAaC,qBAAWC,KAAxBF,SAIFG,EAAkE,CACpE,MAAS,CAAC,QAAS,WACnB,QAAW,CAAC,QAAS,UAAW,WAIpC,OACI,6BACI,kBAAC,OAAD,KACKH,KAAYG,GACT,kBAACC,EAAD,CAAWC,MAAON,EAAMM,MAAOC,SAAUH,EAAiBH,KAN/B,CAAC,OAOdO,SAASP,IACvB,kBAACQ,EAAD,CAAYH,MAAON,EAAMM,aAM7C,IAAMG,EAAa,SAACT,GAA8B,IACtCU,EAAMC,2BAAND,EADqC,EAEjBR,qBAAWU,KAA/BC,EAFqC,EAErCA,MAAOC,EAF8B,EAE9BA,SACf,OACI,kBAAC,WAAD,KACI,kBAAC,eAAD,KACI,kBAAC,OAAD,eAEJ,kBAAC,eAAD,CAAcC,QAASL,EAAE,wCACzB,kBAAC,0BAAD,KACI,kBAAC,SAAD,CACIM,QAAM,EACNC,MAAOJ,EAAMK,SAASlB,EAAMM,OAAOa,SACnCC,SAAU,SAAAC,GAAC,OACPP,EAAS,CACLQ,KAAM,0BACNhB,MAAON,EAAMM,MACba,SAAUE,EAAEE,OAAON,UAIzB,CAAC,GAAI,UAAW,MAAO,UAA2BO,KAAI,SAAAC,GAAC,OACrD,4BAAQC,IAAKD,EAAGR,MAAOQ,GAClBf,EAAE,gCAAwC,KAANe,EAAW,OAASA,YAS/EpB,EAAY,SAACL,GAAoD,IAC3DU,EAAMC,2BAAND,EAD0D,EAEtCR,qBAAWU,KAA/BC,EAF0D,EAE1DA,MAAOC,EAFmD,EAEnDA,SACTP,EAAW,IAAIoB,IAAId,EAAMK,SAASlB,EAAMM,OAAOC,UAWrD,OACI,kBAAC,WAAD,KACI,kBAAC,eAAD,KACI,kBAAC,OAAD,eAEJ,kBAAC,eAAD,CACIQ,QAASL,EAAE,sCACXkB,UACI,kBAAC,YAAD,CAAWC,KAAG,GACT7B,EAAMO,SAASiB,KAAI,SAAAM,GAAC,OACjB,kBAAC,mBAAD,CACIC,QACI,kBAAC,WAAD,CACIC,QAASzB,EAAS0B,IAAIH,GACtBb,MAAOa,EACPV,UAxBdc,EAwBqCJ,EAxBf,SAACK,GACzB,UAAZD,GACJpB,EAAS,CACLQ,KAAM,0BACNhB,MAAON,EAAMM,MACb8B,UAAWF,EACXG,UAAWF,EAAMZ,OAAOS,YAmBIM,SAAgB,UAANR,IAGlBS,MAAO7B,EAAE,+BAAiCoB,GAC1CJ,IAAKI,IA7BZ,IAACI,MAkCVM,yBAAwB,eAAK,YAAqB","file":"static/js/panelStationsMore.3bdb4a2f.chunk.js","sourcesContent":["import React, { useContext, memo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Icon,\n    FormControlLabel,\n    FormGroup,\n    Checkbox,\n    ListItemSecondaryAction,\n    Select,\n} from '@material-ui/core';\nimport { ParamContext, CanvasContext } from '../../../context';\n\nexport default memo(function MoreTab(props: { stnId: string }) {\n    const { rmgStyle } = useContext(CanvasContext);\n    // type hint for the following\n    // https://stackoverflow.com/a/56628792\n    // https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types\n    const rmgStyleServices: { [rmgStyle in ProvidedStyles]?: Services[] } = {\n        'gzmtr': ['local', 'express'],\n        'shmetro': ['local', 'express', 'direct'],\n    }\n    const rmgStyleFacility: ProvidedStyles[] = ['mtr',]\n\n    return (\n        <div>\n            <List>\n                {rmgStyle in rmgStyleServices &&\n                    <ServiceLi stnId={props.stnId} services={rmgStyleServices[rmgStyle] as Services[]} />}\n                {rmgStyleFacility.includes(rmgStyle) &&\n                    <FacilityLi stnId={props.stnId} />}\n            </List>\n        </div>\n    );\n});\n\nconst FacilityLi = (props: { stnId: string }) => {\n    const { t } = useTranslation();\n    const { param, dispatch } = useContext(ParamContext);\n    return (\n        <ListItem>\n            <ListItemIcon>\n                <Icon>place</Icon>\n            </ListItemIcon>\n            <ListItemText primary={t('stations.edit.more.facility.button')} />\n            <ListItemSecondaryAction>\n                <Select\n                    native\n                    value={param.stn_list[props.stnId].facility}\n                    onChange={e =>\n                        dispatch({\n                            type: 'UPDATE_STATION_FACILITY',\n                            stnId: props.stnId,\n                            facility: e.target.value as Facilities,\n                        })\n                    }\n                >\n                    {(['', 'airport', 'hsr', 'disney'] as Facilities[]).map(f => (\n                        <option key={f} value={f}>\n                            {t('stations.edit.more.facility.' + (f === '' ? 'none' : f))}\n                        </option>\n                    ))}\n                </Select>\n            </ListItemSecondaryAction>\n        </ListItem>\n    );\n};\n\nconst ServiceLi = (props: { stnId: string, services: Services[] }) => {\n    const { t } = useTranslation();\n    const { param, dispatch } = useContext(ParamContext);\n    const services = new Set(param.stn_list[props.stnId].services);\n\n    const handleChange = (service: Services) => (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (service === 'local') return;\n        dispatch({\n            type: 'UPDATE_STATION_SERVICES',\n            stnId: props.stnId,\n            serviceId: service,\n            isChecked: event.target.checked,\n        });\n    };\n    return (\n        <ListItem>\n            <ListItemIcon>\n                <Icon>train</Icon>\n            </ListItemIcon>\n            <ListItemText\n                primary={t('stations.edit.more.services.button')}\n                secondary={\n                    <FormGroup row>\n                        {props.services.map(s => (\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        checked={services.has(s)}\n                                        value={s}\n                                        onChange={handleChange(s)}\n                                        disabled={s === 'local'}\n                                    />\n                                }\n                                label={t('stations.edit.more.services.' + s)}\n                                key={s}\n                            />\n                        ))}\n                    </FormGroup>\n                }\n                secondaryTypographyProps={{ ['component' as any]: 'div' }}\n            />\n        </ListItem>\n    );\n};\n"],"sourceRoot":""}