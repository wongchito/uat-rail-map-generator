{"version":3,"sources":["svgs/runin/info-gzmtr.tsx","svgs/runin/runin-gzmtr.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","svgs/strip/strip-gzmtr.tsx","svgs/station-num-gzmtr.tsx"],"names":["InfoGZMTR","param","React","useContext","ParamContext","curStnInfo","stn_list","current_stn_idx","curNameEl","useRef","useState","width","nameBBox","setNameBBox","useEffect","current","getBBox","name","nextStnId","direction","otisTransforms","svgWidth","runin","next","transform","info_panel_type","BigName","ref","curName","curSecName","secondaryName","style","svg_height","split","length","lineNum","line_num","stnNum","num","includes","nextId","nextIds","forwardRef","props","others","id","useMemo","className","fontSize","map","txt","i","key","dy","secName","BigSecName","nameEl","x","bBox","setBBox","toString","textAnchor","BigStnNum","d","BigNext","nextInfo","nextBBox","setNextBBox","nextNameEl","nextNameZHCount","nameBcrX","fill","BigNextSec","BigNext2","routes","nextNames","nextNameEls","prevBBox","forEach","el","validEnds","stnId","reduce","acc","route","concat","filter","s","slice","Math","max","names","Fragment","y","j","join","replace","PlatformNum","RunInGZMTR","platform","variant","isShowLight","isShowPSD","psd_num","platform_num","cx","cy","r","OtisFrame","strokeWidth","stroke","y2","x2","_objectWithoutProperties","source","excluded","target","sourceKeys","Object","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","StripGZMTR","stripHeight","indicatorLight","rx","ry","height","PSD","memo","isInStrip","psdDy","prevProps","nextProps","StationNumberText","lineNumEl","lineNumScale","stnNumScale"],"mappings":"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","file":"static/js/runinGZMTR.07564784.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { ParamContext } from '../../context';\nimport StationNumberText from '../station-num-gzmtr';\n\nconst InfoGZMTR = () => {\n    const { param } = React.useContext(ParamContext);\n    const curStnInfo = param.stn_list[param.current_stn_idx];\n\n    const curNameEl = React.useRef<SVGGElement | null>(null);\n    const [nameBBox, setNameBBox] = useState({ width: 0 } as DOMRect);\n    useEffect(\n        () => setNameBBox(curNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [curStnInfo.name[0], curStnInfo.name[1]]\n    );\n\n    const nextStnId = curStnInfo[param.direction === 'l' ? 'parents' : 'children'];\n\n    const otisTransforms = {\n        name: `translate(${((param.direction === 'l' ? 1 : -1) * param.svgWidth.runin) / 4},45)`,\n        next: `translate(${((param.direction === 'l' ? 1 : -1) * param.svgWidth.runin) / 10},45)`,\n    };\n\n    return (\n        <g>\n            <g transform={param.info_panel_type === 'gz2otis' ? otisTransforms.name : ''}>\n                <BigName\n                    ref={curNameEl}\n                    curName={curStnInfo.name}\n                    curSecName={curStnInfo.secondaryName}\n                    style={{\n                        ['--translate-y' as any]: `${\n                            0.5 * param.svg_height -\n                            50 -\n                            (curStnInfo.name[1].split('\\\\').length - 1) * 18 -\n                            (curStnInfo.secondaryName ? 58 / 2 : 0)\n                        }px`,\n                    }}\n                />\n\n                <BigStnNum\n                    lineNum={param.line_num}\n                    stnNum={curStnInfo.num}\n                    style={{\n                        ['--translate-x' as any]: `${(param.svgWidth.runin + nameBBox.width) / 2 + 55}px`,\n                        ['--translate-y' as any]: `${\n                            0.5 * param.svg_height -\n                            30 -\n                            (curStnInfo.name[1].split('\\\\').length - 1) * 18 -\n                            (curStnInfo.secondaryName ? 58 / 2 : 0)\n                        }px`,\n                    }}\n                />\n            </g>\n\n            <g transform={param.info_panel_type === 'gz2otis' ? otisTransforms.next : ''}>\n                {nextStnId.includes('linestart') || nextStnId.includes('lineend') ? (\n                    <></>\n                ) : nextStnId.length === 1 ? (\n                    <BigNext nextId={nextStnId[0]} nameBBox={nameBBox} />\n                ) : (\n                    <BigNext2 nextIds={nextStnId} nameBBox={nameBBox} />\n                )}\n            </g>\n        </g>\n    );\n};\n\nexport default InfoGZMTR;\n\nconst BigName = React.forwardRef(\n    (props: { curName: Name; curSecName: false | Name } & React.SVGProps<SVGGElement>, ref: React.Ref<SVGGElement>) => {\n        const { curName, curSecName, ...others } = props;\n\n        return (\n            <g id=\"big_name\" {...others}>\n                {React.useMemo(\n                    () => (\n                        <g ref={ref}>\n                            <text className=\"rmg-name__zh\" fontSize={90}>\n                                {curName[0]}\n                            </text>\n                            <g fontSize={36} className=\"rmg-name__en\">\n                                {curName[1].split('\\\\').map((txt, i) => (\n                                    <text key={i} dy={70 + i * 36}>\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </g>\n                    ),\n                    // eslint-disable-next-line react-hooks/exhaustive-deps\n                    [curName]\n                )}\n\n                {curSecName && (\n                    <BigSecName\n                        secName={curSecName}\n                        transform={`translate(0,${70 + curName[1].split('\\\\').length * 36})`}\n                    />\n                )}\n            </g>\n        );\n    }\n);\n\nconst BigSecName = (props: { secName: Name } & React.SVGProps<SVGGElement>) => {\n    const { secName, ...others } = props;\n    const nameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as DOMRect);\n    useEffect(\n        () => setBBox(nameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.secName.toString()]\n    );\n\n    return (\n        <g {...others}>\n            <g transform=\"translate(0,4.5)\" fontSize={36}>\n                <text textAnchor=\"end\" x={bBox.x - 3} className=\"rmg-name__zh\">\n                    {'('}\n                </text>\n                <text textAnchor=\"start\" x={bBox.width + bBox.x + 3} className=\"rmg-name__zh\">\n                    {')'}\n                </text>\n            </g>\n            <g ref={nameEl} textAnchor=\"middle\">\n                <text className=\"rmg-name__zh\" fontSize={26}>\n                    {secName[0]}\n                </text>\n                <text dy={22} className=\"rmg-name__en\" fontSize={14}>\n                    {secName[1]}\n                </text>\n            </g>\n        </g>\n    );\n};\n\nconst BigStnNum = (props: { lineNum: string; stnNum: string } & React.SVGProps<SVGGElement>) => {\n    const { lineNum, stnNum, ...others } = props;\n\n    return (\n        <g id=\"big_stn_num\" {...others}>\n            {React.useMemo(\n                () => (\n                    <>\n                        <path\n                            className=\"rmg-stn rmg-stn--future\"\n                            d=\"M 0,12.95 V -12.95 H -12.95 a 12.95,12.95 0 0,0 0,25.9 h 25.9 a 12.95,12.95 0 0,0 0,-25.9 H 0 \"\n                        />\n                        <StationNumberText transform=\"scale(1.4)\" {...{ lineNum, stnNum }} />\n                    </>\n                ),\n                [lineNum, stnNum]\n            )}\n        </g>\n    );\n};\n\nconst BigNext = (props: { nextId: string; nameBBox: DOMRect }) => {\n    const { param } = React.useContext(ParamContext);\n    const nextInfo = param.stn_list[props.nextId];\n    const { name, secondaryName } = nextInfo;\n\n    const [nextBBox, setNextBBox] = useState({ width: 0 } as DOMRect);\n    const nextNameEl = React.useRef<SVGGElement | null>(null);\n    useEffect(\n        () => setNextBBox(nextNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [name.toString()]\n    );\n\n    const nextNameZHCount = param.stn_list[props.nextId].name[0].length;\n    const nameBcrX = (param.svgWidth.runin - props.nameBBox.width) / 2;\n\n    return (\n        <>\n            <g id=\"big_next\">\n                <g\n                    textAnchor=\"middle\"\n                    style={{\n                        ['--translate-x' as any]:\n                            param.direction === 'l'\n                                ? '80px'\n                                : nextNameZHCount <= 2\n                                ? `${param.svgWidth.runin - 45 - nextBBox.width - 70}px`\n                                : `${param.svgWidth.runin - 45 - nextBBox.width - 35 * 1.5}px`,\n                    }}\n                >\n                    <text className=\"rmg-name__zh\" fontSize={35}>\n                        下站\n                    </text>\n                    <text className=\"rmg-name__en\" fontSize={17} dy={30}>\n                        Next\n                    </text>\n                </g>\n                <g\n                    textAnchor=\"start\"\n                    ref={nextNameEl}\n                    style={{\n                        ['--translate-x' as any]:\n                            param.direction === 'l'\n                                ? nextNameZHCount <= 2\n                                    ? `${115 + 35}px`\n                                    : `${115 + 35 / 2}px`\n                                : `${param.svgWidth.runin - 45 - nextBBox.width}px`,\n                    }}\n                >\n                    <text className=\"rmg-name__zh\" fontSize={35}>\n                        {name[0]}\n                    </text>\n                    <g fontSize={17}>\n                        {name[1].split('\\\\').map((txt: string, i: number) => (\n                            <text className=\"rmg-name__en\" dy={30 + i * 17} key={i}>\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n                </g>\n                {secondaryName && (\n                    <g\n                        textAnchor=\"middle\"\n                        style={{\n                            ['--translate-x' as any]:\n                                param.direction === 'l'\n                                    ? nextNameZHCount <= 2\n                                        ? `${115 + 35}px`\n                                        : `${115 + 35 / 2}px`\n                                    : `${param.svgWidth.runin - 45 - nextBBox.width}px`,\n                        }}\n                    >\n                        <BigNextSec\n                            secName={secondaryName}\n                            transform={`translate(${nextBBox.width / 2},${30 + name[1].split('\\\\').length * 17 + 5})`}\n                        />\n                    </g>\n                )}\n            </g>\n            <path\n                id=\"arrow\"\n                d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\"\n                fill=\"black\"\n                style={{\n                    ['--translate-x' as any]:\n                        param.direction === 'l'\n                            ? `${\n                                  (115 + 35 * ((nextNameZHCount <= 2 ? 1 : 0.5) + nextNameZHCount) + nameBcrX) / 2 - 20\n                              }px`\n                            : `${\n                                  (param.svgWidth.runin -\n                                      45 -\n                                      nextBBox.width -\n                                      (nextNameZHCount <= 2 ? 70 + 35 : 35 * 2.5) +\n                                      nameBcrX +\n                                      props.nameBBox.width +\n                                      55 +\n                                      18.5 * 1.4) /\n                                      2 +\n                                  20\n                              }px`,\n                    ['--rotate' as any]: param.direction === 'l' ? '0deg' : '180deg',\n                }}\n            />\n        </>\n    );\n};\n\nconst BigNextSec = (props: { secName: Name } & React.SVGProps<SVGGElement>) => {\n    const { secName, ...others } = props;\n\n    const nameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as DOMRect);\n    useEffect(\n        () => setBBox(nameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.secName.toString()]\n    );\n\n    return (\n        <g {...others}>\n            <g transform=\"translate(0,2.5)\" fontSize={25}>\n                <text textAnchor=\"end\" x={bBox.x - 3} className=\"rmg-name__zh\">\n                    {'('}\n                </text>\n                <text textAnchor=\"start\" x={bBox.width + bBox.x + 3} className=\"rmg-name__zh\">\n                    {')'}\n                </text>\n            </g>\n            <g ref={nameEl}>\n                <text className=\"rmg-name__zh\" fontSize={18}>\n                    {secName[0]}\n                </text>\n                <text className=\"rmg-name__en\" fontSize={10} dy={15}>\n                    {secName[1]}\n                </text>\n            </g>\n        </g>\n    );\n};\n\nconst BigNext2 = (props: { nextIds: string[]; nameBBox: DOMRect }) => {\n    const { param, routes } = React.useContext(ParamContext);\n\n    const nextNames = props.nextIds.map((id) => param.stn_list[id].name);\n    const [nextBBox, setNextBBox] = useState({ width: 0 } as DOMRect);\n    const nextNameEls = useRef<(SVGGElement | null)[]>([]);\n    useEffect(\n        () => {\n            setNextBBox((prevBBox) => ({ ...prevBBox, width: 0 }));\n            nextNameEls.current.forEach((el) => {\n                let nextBBox = el?.getBBox();\n                setNextBBox((prevBBox) => {\n                    if (nextBBox) {\n                        return prevBBox.width > nextBBox.width ? prevBBox : nextBBox;\n                    } else {\n                        return prevBBox;\n                    }\n                });\n            });\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [nextNames.toString()]\n    );\n\n    const validEnds = props.nextIds.map((stnId) =>\n        routes.reduce(\n            (acc, route) =>\n                // filter routes not containing next station's id\n                route.includes(stnId)\n                    ? acc.concat(\n                          route\n                              .filter((s) => !['linestart', 'lineend'].includes(s))\n                              // select first/last station's id\n                              .slice(param.direction === 'l' ? 0 : -1)[0]\n                      )\n                    : acc,\n            [] as string[]\n        )\n    );\n\n    const nextNameZHCount = Math.max(...nextNames.map((names) => names[0].length));\n    const nameBcrX = (param.svgWidth.runin - props.nameBBox.width) / 2;\n\n    return (\n        <>\n            <g id=\"big_next_2\">\n                {nextNames.map((name, i) => {\n                    return (\n                        <React.Fragment key={i}>\n                            <g\n                                textAnchor=\"middle\"\n                                style={{\n                                    ['--translate-x' as any]:\n                                        param.direction === 'l'\n                                            ? '72px'\n                                            : `${param.svgWidth.runin - 45 - nextBBox.width - 41}px`,\n                                }}\n                            >\n                                <text className=\"rmg-name__zh\">下站</text>\n                                <text className=\"rmg-name__en\" y={22}>\n                                    Next\n                                </text>\n                            </g>\n                            <g\n                                ref={(el) => (nextNameEls.current[i] = el)}\n                                textAnchor=\"start\"\n                                style={{\n                                    ['--translate-x' as any]:\n                                        param.direction === 'l'\n                                            ? '113px'\n                                            : `${param.svgWidth.runin - 45 - nextBBox.width}px`,\n                                }}\n                            >\n                                <text className=\"rmg-name__zh\">{name[0]}</text>\n                                {name[1].split('\\\\').map((txt, j) => (\n                                    <text key={j} className=\"rmg-name__en\" y={22 + j * 13}>\n                                        {txt}\n                                    </text>\n                                ))}\n                                <text className=\"rmg-name__zh\" y={-35}>\n                                    {validEnds[i].map((s) => param.stn_list[s].name[0]).join('/') + '方向'}\n                                </text>\n                                <text className=\"rmg-name__en rmg-name__gzmtr--next2-dest\" y={-20}>\n                                    {'Towards ' +\n                                        validEnds[i]\n                                            .map((s) => param.stn_list[s].name[1])\n                                            .join('/')\n                                            .replace('\\\\', ' ')}\n                                </text>\n                            </g>\n                        </React.Fragment>\n                    );\n                })}\n            </g>\n            <path\n                id=\"arrow\"\n                d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\"\n                fill=\"black\"\n                style={{\n                    ['--translate-x' as any]:\n                        param.direction === 'l'\n                            ? `${(99 + 27 * (1 + nextNameZHCount) + nameBcrX) / 2 - 20}px`\n                            : `${\n                                  (param.svgWidth.runin -\n                                      45 -\n                                      nextBBox.width -\n                                      41 -\n                                      27 +\n                                      nameBcrX +\n                                      props.nameBBox.width +\n                                      55 +\n                                      18.5 * 1.4) /\n                                      2 +\n                                  20\n                              }px`,\n                    ['--rotate' as any]: param.direction === 'l' ? '0deg' : '180deg',\n                }}\n            />\n        </>\n    );\n};\n","import * as React from 'react';\n\nimport { ParamContext } from '../../context';\nimport StripGZMTR from '../strip/strip-gzmtr';\nimport InfoGZMTR from './info-gzmtr';\n\nconst RunInGZMTR = () => {\n    const { param } = React.useContext(ParamContext);\n\n    const otisTransforms = {\n        platform: `translate(${param.direction === 'l' ? 50 : -50},45)`,\n    };\n    return (\n        <>\n            <StripGZMTR\n                variant={param.info_panel_type}\n                isShowLight={param.info_panel_type !== 'gz2otis'}\n                isShowPSD={param.info_panel_type !== 'gz2otis' && param.psd_num}\n            />\n\n            <g transform={param.info_panel_type === 'gz2otis' ? otisTransforms.platform : ''}>\n                <PlatformNum\n                    num={param.platform_num}\n                    style={{\n                        ['--translate-x' as any]: `${param.direction === 'l' ? param.svgWidth.runin - 100 : 100}px`,\n                    }}\n                />\n            </g>\n\n            <InfoGZMTR />\n\n            {param.info_panel_type === 'gz2otis' && <OtisFrame />}\n        </>\n    );\n};\n\nexport default RunInGZMTR;\n\nconst PlatformNum = (props: { num: string | false } & React.SVGProps<SVGGElement>) => {\n    const { num, ...others } = props;\n\n    return (\n        <g id=\"platform\" {...others}>\n            {React.useMemo(\n                () => (\n                    <>\n                        <circle cx={0} cy={0} r={30} fill=\"var(--rmg-theme-colour)\" />\n                        <text className=\"rmg-name__en\" fontSize={38} dy={-9.5}>\n                            {num}\n                        </text>\n                        <text className=\"rmg-name__zh\" fontSize={13} dy={10}>\n                            站台\n                        </text>\n                        <text className=\"rmg-name__en\" fontSize={9} dy={21}>\n                            Platform\n                        </text>\n                    </>\n                ),\n                [num]\n            )}\n        </g>\n    );\n};\n\nconst OtisFrame = () => {\n    const { param } = React.useContext(ParamContext);\n    return (\n        <g id=\"otis_frame\" strokeWidth={3} stroke=\"black\">\n            <line y2={param.svg_height} transform={`translate(${param.svgWidth.runin / 2},0)`} />\n            <line x2={param.svgWidth.runin} transform=\"translate(0,90)\" />\n        </g>\n    );\n};\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React from 'react';\n\ninterface Props {\n    variant: PanelTypeGZMTR;\n    isShowLight: boolean;\n    isShowPSD: false | string;\n}\n\nconst StripGZMTR = (props: Props) => {\n    const stripHeight = ((variant) => {\n        switch (variant) {\n            case 'gz28':\n            case 'gz2otis':\n            case 'gz6':\n            case 'gzgf':\n                return 60;\n            case 'gz1':\n            case 'gz3':\n                return 40;\n            case 'gz4':\n            case 'gz5':\n            case 'gz1421':\n                return 20;\n            default:\n                return 0;\n        }\n    })(props.variant);\n\n    const indicatorLight = React.useMemo(() => {\n        switch (props.variant) {\n            case 'gz1':\n                return <circle cy={-58} r={16} fill=\"red\" />;\n            case 'gz28':\n            case 'gz2otis':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz3':\n                return <rect x={-15} y={-55} height={30} width={30} fill=\"red\" />;\n            case 'gz6':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"white\" />;\n            case 'gz1421':\n                return <ellipse cy={-38} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz5':\n                return <rect x={-30} y={-70} height={30} width={60} fill=\"orange\" />;\n            case 'gz4':\n                return <rect x={-50} y={-50} height={25} width={100} fill=\"whitesmoke\" />;\n            case 'gzgf':\n                return <rect x={-30} y={-58} height={30} width={60} fill=\"orange\" />;\n            default:\n                return <></>;\n        }\n    }, [props.variant]);\n\n    const stripDy = -20;\n\n    return (\n        <g transform={`translate(0,${props.variant === 'gz4' ? stripDy : 0})`}>\n            <rect\n                id=\"strip_gz\"\n                style={{\n                    ['--height' as any]: `${stripHeight}px`,\n                }}\n            />\n            <g\n                style={{\n                    transform: 'translate(calc(var(--rmg-svg-width) / 2),var(--rmg-svg-height))',\n                }}\n            >\n                {props.isShowLight && indicatorLight}\n            </g>\n            {props.isShowPSD !== false && <PSD {...props} />}\n        </g>\n    );\n};\n\nexport default StripGZMTR;\n\nconst PSD = React.memo(\n    (props: Props) => {\n        /**\n         * Flag of whether PSD number is stick within the strip area. If `true`, should fill with white, otherwise, fill with theme colour.\n         */\n        const isInStrip = ['gz28', 'gz2otis', 'gz6', 'gzgf'].includes(props.variant);\n        const psdDy = ((variant: PanelTypeGZMTR) => {\n            switch (variant) {\n                case 'gz1':\n                case 'gz3':\n                    return '82px';\n                case 'gz4':\n                    return '65px';\n                case 'gz5':\n                    return '80px';\n                case 'gz1421':\n                    return '62px';\n                default:\n                    return '58px';\n            }\n        })(props.variant);\n\n        return (\n            <g\n                textAnchor=\"middle\"\n                fill={isInStrip ? '#000' : 'var(--rmg-theme-fg)'}\n                style={{\n                    ['--psd-dy' as any]: psdDy,\n                    transform: 'translate(var(--translate-x), var(--translate-y))',\n                    ['--translate-x' as any]: 'calc(var(--rmg-svg-width) / 2 + 80px)',\n                    ['--translate-y' as any]: 'calc(var(--rmg-svg-height) - var(--psd-dy, 58px))',\n                }}\n            >\n                <rect height={40} width={40} rx={4} x={-20} fill={isInStrip ? '#fff' : 'var(--rmg-theme-colour)'} />\n                <text className=\"rmg-name__en\" fontSize={20} dy={12}>\n                    {props.isShowPSD}\n                </text>\n                <text className=\"rmg-name__zh\" fontSize={12} dy={26}>\n                    屏蔽门\n                </text>\n                <text className=\"rmg-name__en\" fontSize={6.5} dy={36}>\n                    Screen Door\n                </text>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.variant === nextProps.variant && prevProps.isShowPSD === nextProps.isShowPSD\n);\n","import React from 'react';\n\nconst StationNumberText = (props: { lineNum: string; stnNum: string } & React.SVGProps<SVGGElement>) => {\n    const { lineNum, stnNum, ...others } = props;\n\n    const LINE_NUM_MAX_WIDTH = 15.03125;\n\n    const lineNumEl = React.useRef<SVGTextElement | null>(null);\n    const [bBox, setBBox] = React.useState({ width: LINE_NUM_MAX_WIDTH } as DOMRect);\n    React.useEffect(() => setBBox(lineNumEl.current!.getBBox()), [lineNum]);\n\n    const lineNumScale = bBox.width > LINE_NUM_MAX_WIDTH ? LINE_NUM_MAX_WIDTH / bBox.width : 1;\n    const stnNumScale = lineNum.length === 2 ? lineNumScale : 1;\n\n    return (\n        <g textAnchor=\"middle\" fontSize={13.5} {...others}>\n            {React.useMemo(\n                () => (\n                    <>\n                        <g transform={`translate(-9.25,0)scale(${lineNumScale})`}>\n                            <text ref={lineNumEl} className=\"rmg-name__zh\">\n                                {lineNum}\n                            </text>\n                        </g>\n                        <g transform={`translate(9.25,0)scale(${stnNumScale})`}>\n                            <text className=\"rmg-name__zh\">{stnNum}</text>\n                        </g>\n                    </>\n                ),\n                // eslint-disable-next-line react-hooks/exhaustive-deps\n                [bBox.width, lineNum, stnNum]\n            )}\n        </g>\n    );\n};\n\nexport default StationNumberText;\n"],"sourceRoot":""}