{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","svgs/railmap/methods/share.ts","svgs/railmap/main/station/station-shmetro.tsx","svgs/railmap/main/main-shmetro.tsx","svgs/railmap/railmap-shmetro.tsx"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","adjacencyList","stnList","leftW","rightW","reduce","acc","cur","children","a","c","criticalPathMethod","from","to","adjMat","len","nodes","allLengths","criticalPaths","forEach","child","cp","push","unshift","maxLength","Math","max","getXShareMTR","stnId","branches","criticalPath","includes","branchOfStn","filter","branch","partSource","partSink","leftOpenJaw","lens","slice","getStnState","currentId","routes","direction","console","log","Set","concat","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","yShares","xShares","namePoss","leftWideFactor","rightWideFactor","pathWeight","Infinity","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","parents","stnPred","res","getYShare","stnIds","lineXs","realXs","realYs","prevId","prevY","prevX","path","stnDX","stnExtraH","stnSpareH","warn","x","y","join","replace","stations","stnStates","xs","ys","linePaths","main","pass","lineMainStns","linePassStns","_linePath","drawLine","StationSHMetro","props","param","useContext","ParamContext","stnInfo","stn_list","branchNameDX","left","right","name","split","stationIconStyle","stationIconColor","info_panel_type","services","fill","stnState","transfer","info","stroke","xlinkHref","transform","infos","StationNameGElement","nameENLn","stnNameEl","useRef","React","useState","width","bBox","setBBox","useEffect","current","getBBox","sum","x1","x2","strokeWidth","intInfos","textAnchor","StationName","ref","stnName","osiInfos","forwardRef","others","useMemo","className","fontSize","map","txt","dy","IntBoxGroup","dx","isLineNumber","Boolean","match","isMaglev","el","IntBoxMaglev","IntBoxNumber","IntBoxLetter","memo","prevProps","nextProps","toString","dominantBaseline","textCount","height","OSIText","lineNames","MainSHMetro","deps","realCP","JSON","stringify","svgWidth","railmap","padding","branch_spacing","current_stn_idx","servicesLevel","values","stationInfo","flat","bool","s","paths","stns","id","svg_height","Line","servicePath","j","d","markerStart","undefined","markerEnd","strokeLinejoin","type","servicesMax","e","servicesDelta","local","express","direct","servicesPassDelta","hasOwnProperty","xb","xm","ym","abs","h","StationGroup","ServicesElements","service","labelX","dx_hint","serviceLevel","y1","y2","DirectionElements","RailMapSHMetro","DefsSHMetro","r","viewBox","refY","refX","filterUnits","slope","intercept"],"mappings":"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","file":"static/js/railmapSHMetro.ea920549.chunk.js","sourcesContent":["import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import * as Global from '../../../methods';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (direction === 'r'\n                        ? _isSuccessor(currentId, cur, routes)\n                        : _isPredecessor(currentId, cur, routes))\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as { [stnId: string]: StationInfo };\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] }\n    ) {\n        var [prevId, prevY, prevX] = ([] as unknown) as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 0.8;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + 9.68}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - 9.68}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] }\n    ) {\n        let linePaths = { main: [] as string[], pass: [] as string[] };\n        branches.forEach((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branches: string[][], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    let linePaths = { main: [] as string[][], pass: [] as string[][] };\n    branches.forEach(branch => {\n        branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n        var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n        var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n        if (lineMainStns.length === 1) {\n            linePassStns = branch;\n        }\n\n        if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n            // if two set disjoint\n            if (linePassStns[0] === branch[0]) {\n                // -1 -1 1 1\n                linePassStns.push(lineMainStns[0]);\n            } else if (\n                lineMainStns[0] === branch[0] &&\n                lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                linePassStns.length\n            ) {\n                linePassStns = branch;\n                lineMainStns = [];\n            } else {\n                // 1 1 -1 -1\n                linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n            }\n        }\n\n        linePaths.main.push(lineMainStns);\n        linePaths.pass.push(linePassStns);\n    });\n\n    return linePaths;\n};\n","import React, { useContext, useRef, memo } from 'react';\nimport { ParamContext } from '../../../../context';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n}\n\nconst StationSHMetro = (props: Props) => {\n    const { param } = useContext(ParamContext);\n    const stnInfo = param.stn_list[props.stnId];\n\n    // shift station name if the line bifurcate here\n    const branchNameDX =\n        ([...stnInfo.branch.left, ...stnInfo.branch.right].length ? 8 + 12 * stnInfo.name[1].split('\\\\').length : 0) *\n        (param.direction === 'l' ? -1 : 1);\n\n    let stationIconStyle = '';\n    let stationIconColor: {[pos: string]: string} = {};\n    if (param.info_panel_type === 'sh2020') {\n        if (stnInfo.services.length === 3) stationIconStyle = 'stn_sh_2020_direct';\n        else if (stnInfo.services.length === 2) stationIconStyle = 'stn_sh_2020_express';\n        else stationIconStyle = 'stn_sh_2020';\n        stationIconColor.fill = props.stnState === -1 ? 'gray' : 'var(--rmg-theme-colour)';\n    } else {\n        // param.info_panel_type === 'sh' or others (from other styles)\n        if (stnInfo.services.length === 3) stationIconStyle = 'direct_sh';\n        else if (stnInfo.services.length === 2) stationIconStyle = 'express_sh';\n        else if (stnInfo.transfer.info.reduce((acc, cur) => acc + cur.length, 0)) stationIconStyle = 'int2_sh';\n        else stationIconStyle = 'stn_sh';\n        stationIconColor.stroke = props.stnState === -1 ? 'gray' : 'var(--rmg-theme-colour)';\n    }\n\n\n    return (\n        <>\n            <use\n                xlinkHref={`#${stationIconStyle}`}\n                {...stationIconColor}  // different styles use either `fill` or `stroke`\n            />\n            <g transform={`translate(${branchNameDX},0)`}>\n                <StationNameGElement\n                    name={stnInfo.name}\n                    infos={stnInfo.transfer.info}\n                    stnState={props.stnState}\n                    direction={param.direction}\n                    info_panel_type={param.info_panel_type}\n                />\n            </g>\n        </>\n    );\n};\n\nexport default StationSHMetro;\n\ninterface StationNameGElementProps {\n    name: Name;\n    infos: InterchangeInfo[][];\n    stnState: -1 | 0 | 1;\n    direction: 'l' | 'r';\n    info_panel_type: PanelTypeGZMTR | PanelTypeShmetro;\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const nameENLn = props.name[1].split('\\\\').length;\n\n    // get the exact station name width so that the\n    // interchange station icon can be right after the station name\n    const stnNameEl = useRef<SVGGElement | null>(null);\n    // the original name position\n    const [bBox, setBBox] = React.useState({ width: 0 } as DOMRect);\n    React.useEffect(\n        () => setBBox(stnNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [...props.name]\n    );\n    // the original name position's right x\n    const x = bBox.width + 5;\n\n    // rotate the station info now\n    // other wise the bcr will be inaccurate due to the rotation\n    // Chito: so, use BBox instead\n\n    return (\n        <g transform={`translate(${props.direction === 'l' ? 6 : -6},${props.info_panel_type === 'sh2020' ? -20 : -6})rotate(${props.direction === 'l' ? -45 : 45})`}>\n            {props.infos.reduce((sum, infos) => sum + infos.length, 0) && (\n                <line\n                    x1={0}\n                    x2={props.direction === 'l' ? x : -x}\n                    stroke={props.stnState === -1 ? 'gray' : 'black'}\n                    strokeWidth={0.5}\n                />\n            )}\n\n            <IntBoxGroup\n                intInfos={props.infos[1] ? ([] as InterchangeInfo[]).concat(...props.infos) : props.infos[0]}\n                transform={`translate(${x * (props.direction === 'l' ? 1 : -1)},-10.75)`}\n                direction={props.direction}\n            />\n\n            <g\n                textAnchor={props.direction === 'l' ? 'start' : 'end'}\n                transform={`translate(0,${-14.15625 - 2 - 12 * (nameENLn - 1)})`}\n            >\n                <StationName\n                    ref={stnNameEl}\n                    stnName={props.name}\n                    fill={props.stnState === -1 ? 'gray' : props.stnState === 0 ? 'red' : 'black'}\n                />\n\n                {props.infos[1]?.length && (\n                    <g\n                        transform={`translate(${\n                            (x + props.infos.reduce((sum, infos) => sum + infos.length, 0) * 15) *\n                            (props.direction === 'l' ? 1 : -1)\n                        },-22)`}\n                    >\n                        <OSIText osiInfos={props.infos[1]} />\n                    </g>\n                )}\n            </g>\n        </g>\n    );\n};\n\nconst StationName = React.forwardRef(\n    (props: { stnName: Name } & React.SVGProps<SVGGElement>, ref: React.Ref<SVGGElement>) => {\n        const { stnName, ...others } = props;\n\n        return (\n            <g ref={ref} {...others}>\n                {React.useMemo(\n                    () => (\n                        <>\n                            <text className=\"rmg-name__zh\">{stnName[0]}</text>\n                            <g fontSize={9.6}>\n                                {stnName[1].split('\\\\').map((txt, i) => (\n                                    <text key={i} className=\"rmg-name__en\" dy={12 * (i + 1)}>\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </>\n                    ),\n                    // eslint-disable-next-line react-hooks/exhaustive-deps\n                    [...stnName]\n                )}\n            </g>\n        );\n    }\n);\n\nconst IntBoxGroup = (props: { intInfos: InterchangeInfo[]; direction: 'l' | 'r' } & React.SVGProps<SVGGElement>) => {\n    const { intInfos, direction, ...others } = props;\n\n    let dx = 0;\n    return (\n        <g fontSize={14} textAnchor=\"middle\" {...others}>\n            {intInfos.map((info, i) => {\n                // start with digit\n                const isLineNumber = Boolean(info[4].match(/^\\d.*$/));\n                const isMaglev = Boolean(info[4].match(/^磁(悬)*浮/));\n\n                if (props.direction === 'r') {\n                    dx -= (isLineNumber || isMaglev ? 20 : info[4].length * 14 + 12 + 0) + (i === 0 ? 0 : 5);\n                }\n\n                let el = <g />;\n                if (isMaglev) {\n                    el = (\n                        <g transform={`translate(${dx},-16)scale(0.1428571429)`} key={i}>\n                            <IntBoxMaglev info={info} />\n                        </g>\n                    );\n                } else if (isLineNumber) {\n                    el = (\n                        <g transform={`translate(${dx},0)`} key={i}>\n                            <IntBoxNumber info={info} />\n                        </g>\n                    );\n                } else {\n                    el = (\n                        <g transform={`translate(${dx},0)`} key={i}>\n                            <IntBoxLetter info={info} />\n                        </g>\n                    );\n                }\n\n                // 20 + 5(margin) for number line\n                // 60 + 5(margin) for letter line\n                if (props.direction === 'l') {\n                    dx += isLineNumber || isMaglev ? 25 : info[4].length * 14 + 12 + 5;\n                }\n                return el;\n            })}\n        </g>\n    );\n};\n\nconst IntBoxMaglev = memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_maglev\" fill={props.info[2]} stroke={props.info[2]} />\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxNumber = memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_number\" fill={props.info[2]} />\n            <text x={10} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                {/* // line starts with numbers */}\n                {props.info[4].match(/(\\d*)\\w+/)![0]}\n            </text>\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxLetter = memo(\n    (props: { info: InterchangeInfo }) => {\n        // box width: 16 * number of characters + 12\n        const textCount = props.info[4].split('\\\\')[0].length;\n        return (\n            <>\n                <rect height={22} width={textCount * 14 + 12} y={-11} fill={props.info[2]} />\n                <text x={textCount * 7 + 6} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                    {props.info[4].split('\\\\')[0]}\n                </text>\n            </>\n        );\n    },\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst OSIText = (props: { osiInfos: InterchangeInfo[] }) => {\n    // get the all names from the out of station changes\n    const lineNames = props.osiInfos.map(info => info[4]);\n    return React.useMemo(\n        () => (\n            <g textAnchor=\"middle\" fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {'换乘' + lineNames.join('，')}\n                </text>\n                <text className=\"rmg-name__zh\" dy={5}>\n                    仅限公共交通卡\n                </text>\n                <text className=\"rmg-name__en\" dy={12.5} fontSize=\"75%\">\n                    Only for Public Transportation Card\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [lineNames.toString()]\n    );\n};\n","import React, { useContext } from 'react';\nimport { ParamContext } from '../../../context';\nimport { adjacencyList, getXShareMTR, criticalPathMethod, drawLine, getStnState } from '../methods/share';\nimport StationSHMetro from './station/station-shmetro';\n\ninterface servicesPath {\n    main: string[];\n    pass: string[];\n    service: Services;\n}\n\nconst MainSHMetro = () => {\n    const { param, routes, branches, deps } = useContext(ParamContext);\n\n    const adjMat = adjacencyList(\n        param.stn_list,\n        () => 0,\n        () => 0\n    );\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const xShares = React.useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShareMTR(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n    const lineXs: [number, number] = [\n        (param.svgWidth.railmap * param.padding) / 100,\n        param.svgWidth.railmap * (1 - param.padding / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = React.useMemo(\n        () => {\n            console.log('computing y shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: branches[0].includes(cur) ? 0 : 3 }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: -yShares[cur] * param.branch_spacing }),\n        {} as typeof yShares\n    );\n\n    const stnStates = React.useMemo(\n        () => getStnState(param.current_stn_idx, routes, param.direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.current_stn_idx, param.direction, routes.toString()]\n    );\n\n    const services: Services[] = ['local', 'express', 'direct'];\n    const servicesLevel = Object.values(param.stn_list)\n        .map(stationInfo => stationInfo.services)\n        .flat() // all services\n        .reduce(\n            (acc, cur) => {\n                acc[services.indexOf(cur)] = true;\n                return acc;\n            },\n            [false, false, false] as [boolean, boolean, boolean]\n        ) // set the flag in order\n        .map((bool, i) => [services[i], bool] as [Services, boolean]) // zip\n        .filter(s => s[1]) // get the existing service\n        .map(s => s[0]); // maintain the services' order\n\n    const linePaths = drawLine(branches, stnStates);\n\n    // paths = {'local':{'main':..., 'pass':...}, 'express':...}\n    // const paths = servicesLevel.reduce((allServicesPath, services) => ({\n    //         ...allServicesPath,\n    //         [services]: (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n    //             (acc, cur) => ({\n    //                 ...acc,\n    //                 [cur]: linePaths[cur].map(stns => _linePath(stns, cur, xs, ys, param.direction, services)).filter(path => path !== ''),\n    //             }),\n    //             {} as { [key in keyof ReturnType<typeof drawLine>]: string[] })\n    //     }), {} as {[services in Services]: { main: string[]; pass: string[] }}\n    // );\n\n    // paths = [{'main':..., 'pass':..., 'service':'local'}, ...}]\n    const paths = servicesLevel.map(services =>\n        (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n            (acc, cur) => ({\n                ...acc,\n                [cur]: linePaths[cur]\n                    .map(stns => _linePath(stns, cur, xs, ys, param.direction, services, servicesLevel.length))\n                    .filter(path => path !== ''),\n                service: services,\n            }),\n            {} as servicesPath\n        )\n    );\n\n    return (\n        <g id=\"main\" transform={`translate(0,${param.svg_height - 63})`}>\n            <Line paths={paths} direction={param.direction} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} />\n            <ServicesElements\n                servicesLevel={servicesLevel}\n                dy={-param.svg_height + 100}\n                direction={param.direction}\n                lineXs={lineXs}\n            />\n            <DirectionElements />\n        </g>\n    );\n};\n\nexport default MainSHMetro;\n\nconst Line = (props: { paths: servicesPath[]; direction: 'l' | 'r' }) => {\n    return (\n        <>\n            {props.paths.map((servicePath, i) => (\n                <g key={`servicePath${i}`} transform={`translate(0,${i * 25})`}>\n                    <g>\n                        {servicePath.pass.map((path, j) => (\n                            <path\n                                key={j}\n                                stroke=\"gray\"\n                                strokeWidth={12}\n                                fill=\"none\"\n                                d={path}\n                                markerStart={props.direction === 'l' ? 'url(#arrow_gray)' : undefined}\n                                markerEnd={props.direction === 'r' ? 'url(#arrow_gray)' : undefined}\n                                strokeLinejoin=\"round\"\n                            />\n                        ))}\n                    </g>\n                    <g>\n                        {servicePath.main.map((path, j) => (\n                            <path\n                                key={j}\n                                stroke=\"var(--rmg-theme-colour)\"\n                                strokeWidth={12}\n                                fill=\"none\"\n                                d={path}\n                                markerStart={props.direction === 'l' ? 'url(#arrow_theme_left)' : undefined}\n                                markerEnd={props.direction === 'r' ? 'url(#arrow_theme_right)' : undefined}\n                                strokeLinejoin=\"round\"\n                                filter={i === 2 ? 'url(#contrast-direct)' : i === 1 ? 'url(#contrast-express)' : ''}\n                            />\n                        ))}\n                    </g>\n                </g>\n            ))}\n        </>\n    );\n};\n\nconst _linePath = (\n    stnIds: string[],\n    type: 'main' | 'pass',\n    xs: { [stnId: string]: number },\n    ys: { [stnId: string]: number },\n    direction: 'l' | 'r',\n    services: Services,\n    servicesMax: number\n) => {\n    var [prevY, prevX] = [] as number[];\n    var path: { [key: string]: number[] } = {};\n    const e = 30;\n\n    const servicesDelta = {\n        local: 0,\n        express: 20,\n        direct: 40,\n    }[services]; // Todo: enum Services could be a better idea?\n    const servicesPassDelta = servicesMax > 1 ? 50 : 0;\n\n    stnIds.forEach(stnId => {\n        var x = xs[stnId];\n        var y = ys[stnId];\n        if (!prevY && prevY !== 0) {\n            [prevX, prevY] = [x, y];\n            path['start'] = [x, y];\n            return;\n        }\n        if (y === 0) {\n            // merge back to main line\n            if (y !== prevY) {\n                path['bifurcate'] = [prevX, prevY];\n            }\n        } else {\n            // on the branch line\n            if (y !== prevY) {\n                path['bifurcate'] = [x, y];\n            }\n        }\n        path['end'] = [x, y];\n        [prevX, prevY] = [x, y];\n    });\n\n    // generate path\n    if (!path.hasOwnProperty('start')) {\n        // no line generated\n        // keys in path: none\n        return '';\n    } else if (!path.hasOwnProperty('end')) {\n        // litte line (only beyond terminal station)\n        // keys in path: start\n        let [x, y] = path['start'];\n        if (type === 'main') {\n            // current at terminal(end) station, draw the litte main line\n            if (direction === 'l') {\n                return `M ${x - e - servicesDelta},${y} H ${x}`;\n            } else {\n                return `M ${x},${y} H ${x + e + servicesDelta}`;\n            }\n        } else {\n            // type === 'pass'\n            // current at terminal(start) station, draw the litte pass line\n            if (direction === 'l') {\n                return `M ${x},${y} L ${x + e + servicesPassDelta},${y}`;\n            } else {\n                return `M ${x - e - servicesPassDelta},${y} L ${x},${y}`;\n            }\n        }\n    } else if (!path.hasOwnProperty('bifurcate')) {\n        // general main line\n        // keys in path: start, end\n        let [x, y] = path['start'],\n            h = path['end'][0];\n        if (type === 'main') {\n            if (direction === 'l') {\n                return `M ${x - e - servicesDelta},${y} H ${h}`;\n            } else {\n                return `M ${x},${y} H ${h + e + servicesDelta}`;\n            }\n        } else {\n            // type === 'pass'\n            if (direction === 'l') {\n                return `M ${x - e},${y} H ${h + e + servicesPassDelta}`;\n            } else {\n                return `M ${x - e - servicesPassDelta},${y} H ${h}`;\n            }\n        }\n    } else {\n        // main line bifurcate here to become the branch line\n        // and path return here are only branch line\n        // keys in path: start, bifurcate, end\n\n        // Todo: disable lower branch\n        let [x, y] = path['start'];\n        let xb = path['bifurcate'][0];\n        let [xm, ym] = path['end'];\n        if (type === 'main') {\n            if (direction === 'l') {\n                if (ym > y) {\n                    // main line, left direction, center to upper\n                    return `M ${x - e},${y} H ${xb + Math.abs(xb-xm) / 2} V ${ym}`;\n                } else {\n                    // main line, left direction, upper to center\n                    return `M ${x},${y} H ${xb - Math.abs(xb-x) / 2} V ${ym} H ${xm}`; // wrong marker\n                }\n            } else {\n                if (ym > y) {\n                    // main line, right direction, upper to center\n                    return `M ${x},${y} H ${xb + Math.abs(xb - xm) / 2} V ${ym} H ${xm}`; // wrong marker\n                } else {\n                    // main line, right direction, center to upper\n                    return `M ${x + Math.abs(xb-x) / 2},${y} V ${ym} H ${xm + e}`;\n                }\n            }\n        } else {\n            // type === 'pass'\n            if (direction === 'l') {\n                if (ym > y) {\n                    // pass line, left direction, center to upper\n                    return `M ${x - e},${y} H ${xb + Math.abs(xb - xm) / 2} V ${ym}`;\n                } else {\n                    // pass line, left direction, upper to center\n                    return `M ${x},${y} H ${xb - Math.abs(xb-x) / 2} V ${ym} H ${xm + e}`;\n                }\n            } else {\n                if (ym > y) {\n                    // pass line, right direction, upper to center\n                    return `M ${x - e},${y} H ${xb + Math.abs(xb-xm) / 2} V ${ym}`;\n                } else {\n                    // pass line, right direction, center to upper\n                    return `M ${x},${y} H ${xb - Math.abs(xb-x) / 2} V ${ym} H ${xm + e}`;\n                }\n            }\n        }\n    }\n};\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { param } = useContext(ParamContext);\n\n    return (\n        <g>\n            {Object.keys(param.stn_list)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (\n                    <g key={stnId} transform={`translate(${props.xs[stnId]},${props.ys[stnId]})`}>\n                        <StationSHMetro stnId={stnId} stnState={props.stnStates[stnId]} />\n                    </g>\n                ))}\n        </g>\n    );\n};\n\nconst ServicesElements = (props: { servicesLevel: Services[]; direction: 'l' | 'r'; dy: number; lineXs: number[] }) => {\n    const { param } = useContext(ParamContext);\n\n    if (props.servicesLevel.length === 1) return <></>;\n\n    const servicesLevel = props.servicesLevel.map(\n        service =>\n            ({\n                local: '普通车',\n                express: '大站车',\n                direct: '直达车',\n            }[service])\n    );\n\n    // let dx = props.direction === 'r' ? 5 : param.svgWidth.railmap - 55;\n    const labelX = props.direction === 'r' ? props.lineXs[0] - 42 : props.lineXs[1] + 42;\n\n    let dx_hint = props.servicesLevel.length === 2 ? 350 : 500;\n\n    return (\n        <g>\n            {servicesLevel.map((service, i) => (\n                <g key={service} transform={`translate(${labelX},${i * 25})`}>\n                    <rect x={-27.5} height={10} width={55} fill={'white'} stroke={'black'} y={-5}></rect>\n                    <text className=\"rmg-name__zh\" fontSize={9} y={3} textAnchor=\"middle\">{`${service}运行线`}</text>\n                </g>\n            ))}\n            <g transform={`translate(${props.direction === 'r' ? 30 : param.svgWidth.railmap - dx_hint},${props.dy})`}>\n                <text className=\"rmg-name__zh\">图例：</text>\n                {servicesLevel.map((serviceLevel, i) => (\n                    <g key={`serviceLevel${i}`} transform={`translate(${i * 150 + 50},0)`}>\n                        <line\n                            x1=\"0\"\n                            x2=\"35\"\n                            y1=\"-5\"\n                            y2=\"-5\"\n                            stroke=\"var(--rmg-theme-colour)\"\n                            strokeWidth=\"12\"\n                            filter={i === 2 ? 'url(#contrast-direct)' : i === 1 ? 'url(#contrast-express)' : ''}\n                        />\n                        <use x=\"17.5\" y=\"-5\" xlinkHref=\"#stn_sh\" fill=\"var(--rmg-theme-colour)\" />\n                        <text x=\"40\" className=\"rmg-name__zh\">{`${serviceLevel}停靠站`}</text>\n                    </g>\n                ))}\n            </g>\n        </g>\n    );\n};\n\nconst DirectionElements = () => {\n    const { param } = useContext(ParamContext);\n\n    return (\n        <g\n            transform={`translate(${param.direction === 'l' ? 50 : param.svgWidth.railmap - 150},${\n                -param.svg_height + 100\n            })`}\n        >\n            <text className=\"rmg-name__zh\">列车前进方向</text>\n            <path\n                d=\"M60,60L0,0L60-60H100L55-15H160V15H55L100,60z\"\n                fill=\"var(--rmg-theme-colour)\"\n                transform={`translate(${param.direction === 'l' ? -30 : 125},-5)rotate(${\n                    param.direction === 'l' ? 0 : 180\n                })scale(0.15)`}\n            />\n        </g>\n    );\n};\n","import * as React from 'react';\nimport MainSHMetro from './main/main-shmetro';\n\nconst RailMapSHMetro = React.memo(() => (\n    <>\n        <DefsSHMetro />\n\n        <MainSHMetro />\n    </>\n));\n\nexport default RailMapSHMetro;\n\nconst DefsSHMetro = React.memo(() => (\n    <defs>\n        <circle id=\"stn_sh\" fill=\"#fff\" strokeWidth={2} r={5} />\n        <path id=\"int2_sh\" fill=\"#fff\" strokeWidth={2} d=\"M -5,0 a 5,5 0 1 1 10,0 V10 a 5,5 0 1 1 -10,0Z\" />\n        <path id=\"express_sh\" fill=\"#fff\" strokeWidth={2} d=\"M -5,0 a 5,5 0 1 1 10,0 V25 a 5,5 0 1 1 -10,0Z\" />\n        <path id=\"direct_sh\" fill=\"#fff\" strokeWidth={2} d=\"M -5,0 a 5,5 0 1 1 10,0 V50 a 5,5 0 1 1 -10,0Z\" />\n        <rect id=\"stn_sh_2020\" stroke=\"none\" height={24} width={10} y={-18} />\n        <rect id=\"stn_sh_2020_express\" stroke=\"none\" height={49} width={10} y={-18} />\n        <rect id=\"stn_sh_2020_direct\" stroke=\"none\" height={74} width={10} y={-18} />\n\n        <rect id=\"intbox_number\" height={22} width={20} y={-11} />\n\n        <g id=\"intbox_maglev\" transform=\"translate(-25,0)\">\n            <rect id=\"maglev_5\" height={144} width={130} y=\"40\" x=\"30\" strokeWidth={10} />\n            <path\n                id=\"maglev_3\"\n                fill=\"white\"\n                d=\"m90,55a40,5 0 0 0 -40,3a5,5 0 0 0 -5,5a5,60 0 0 0 -3,60a5,5 0 0 0 5,5l96,0a5,5 0 0 0 5,-5a5,60 0 0 0 -3,-60a5,5 0 0 0 -5,-5a40,5 0 0 0 -40,-3l-5,-10l-5,10\"\n            />\n            <path\n                id=\"maglev_4\"\n                fill=\"white\"\n                d=\"m90,140l-40,0a10,5 0 0 1 -10,-5l0,25a10,15 0 0 0 10,15l15,0l0,-10l-15,0l0,-15l90,0l0,15l-15,0l0,10l15,0a10,15 0 0 0 10,-15l0,-25a10,5 0 0 1 -10,5l-50,0\"\n            />\n            <rect id=\"maglev_1\" height=\"25\" width=\"40\" y=\"80\" x=\"50\" />\n            <rect id=\"maglev_2\" height=\"25\" width=\"40\" y=\"80\" x=\"100\" />\n        </g>\n\n        {/* An extension of the line/path. Remember to minus the stroke-width.  */}\n        <marker id=\"arrow_gray\" viewBox=\"-1.5 0 3 1.5\" refY={0.5}>\n            <path d=\"M0,0L1,1H-1z\" fill=\"gray\" />\n        </marker>\n        <marker id=\"arrow_theme_left\" refX={1} refY={0.5}>\n            <path d=\"M1,0L0,1H1z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n        <marker id=\"arrow_theme_right\" refY={0.5}>\n            <path d=\"M0,0L1,1H-1z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n\n        {/* Contrast filters for lines */}\n        <filter id=\"contrast-direct\" filterUnits=\"userSpaceOnUse\">\n            <feComponentTransfer>\n                <feFuncR type=\"linear\" slope={0.5} intercept={0.25} />\n                <feFuncG type=\"linear\" slope={0.5} intercept={0.25} />\n                <feFuncB type=\"linear\" slope={0.5} intercept={0.25} />\n            </feComponentTransfer>\n        </filter>\n        <filter id=\"contrast-express\" filterUnits=\"userSpaceOnUse\">\n            <feComponentTransfer>\n                <feFuncR type=\"linear\" slope={0.75} intercept={0.125} />\n                <feFuncG type=\"linear\" slope={0.75} intercept={0.125} />\n                <feFuncB type=\"linear\" slope={0.75} intercept={0.125} />\n            </feComponentTransfer>\n        </filter>\n    </defs>\n));\n"],"sourceRoot":""}