{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","svgs/railmap/methods/share.ts","svgs/strip/strip-gzmtr.tsx","svgs/station-num-gzmtr.tsx","svgs/railmap/main/line-box-gzmtr.tsx","svgs/railmap/main/station/station-gzmtr.tsx","svgs/railmap/main/main-gzmtr.tsx","svgs/railmap/railmap-gzmtr.tsx"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","adjacencyList","stnList","leftW","rightW","reduce","acc","cur","children","a","c","criticalPathMethod","from","to","adjMat","len","nodes","allLengths","criticalPaths","forEach","child","cp","push","unshift","maxLength","Math","max","getXShareMTR","stnId","branches","criticalPath","includes","branchOfStn","filter","branch","partSource","partSink","leftOpenJaw","lens","slice","getStnState","currentId","routes","direction","console","log","Set","concat","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","yShares","xShares","namePoss","leftWideFactor","rightWideFactor","pathWeight","Infinity","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","parents","stnPred","res","getYShare","stnIds","lineXs","realXs","realYs","prevId","prevY","prevX","path","stnDX","stnExtraH","stnSpareH","warn","x","y","join","replace","stations","stnStates","xs","ys","linePaths","main","pass","lineMainStns","linePassStns","_linePath","drawLine","StripGZMTR","props","stripHeight","variant","indicatorLight","React","useMemo","cy","r","fill","rx","ry","height","width","transform","id","style","isShowLight","isShowPSD","PSD","memo","isInStrip","psdDy","textAnchor","className","fontSize","dy","prevProps","nextProps","StationNumberText","lineNum","stnNum","others","LINE_NUM_MAX_WIDTH","lineNumEl","useRef","useState","bBox","setBBox","useEffect","current","getBBox","lineNumScale","stnNumScale","ref","stnState","info","xlinkHref","LineBoxNameSpan","name","LineBoxName","toString","nameZHEl","match","t","isNaN","Number","dominantBaseline","nameZHGroupEl","zhBBox","setZhBBox","nameZHGroupScale","nameENEl","enBBox","setEnBBox","nameENScale","navigator","userAgent","sharedText","idx","nameEl","nameScale","trim","StationGZMTR","param","useContext","ParamContext","stnInfo","stn_list","isNameShift","tickRotation","stnY","left","right","nameENLns","split","nameDX","cos","intInfos","theme","line_name","transfer","stroke","line_num","num","secondaryName","isExpress","services","StationNameGElement","nameDY","stnNameEl","secNameEl","secNameBBox","setSecNameBBox","prevBBox","StationName","StationSecondaryName","secName","ExpressTag","forwardRef","map","txt","IntGroup","strokeWidth","IntTicks","IntBoxs","other","wideFactor","MainGZMTR","deps","rightOpenJaw","getXShare","JSON","stringify","realCP","svgWidth","railmap","padding","branch_spacing","current_stn_idx","paths","stns","y_pc","Line","Array","strokeDasharray","d","StationGroup","DefsGZMTR","RailMapGZMTR","info_panel_type","psd_num","TerminusFlag","notesGZMTR","note","NoteBox","x2","strokeLinecap","DirectionIndicator","validDests","textGroupProps","destIds","direction_gz_x","direction_gz_y","DirectionIndicatorTextGroup","DirectionIndicatorTextGroup2","charCounts","minCharCounts","min","charSpacing","abs","letterSpacing","noteTextEl","textLength","lengthAdjust"],"mappings":"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","file":"static/js/railmapGZMTR.99ea60d2.chunk.js","sourcesContent":["import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import * as Global from '../../../methods';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (direction === 'r'\n                        ? _isSuccessor(currentId, cur, routes)\n                        : _isPredecessor(currentId, cur, routes))\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as { [stnId: string]: StationInfo };\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] }\n    ) {\n        var [prevId, prevY, prevX] = ([] as unknown) as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 0.8;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + 9.68}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - 9.68}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] }\n    ) {\n        let linePaths = { main: [] as string[], pass: [] as string[] };\n        branches.forEach((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branches: string[][], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    let linePaths = { main: [] as string[][], pass: [] as string[][] };\n    branches.forEach(branch => {\n        branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n        var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n        var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n        if (lineMainStns.length === 1) {\n            linePassStns = branch;\n        }\n\n        if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n            // if two set disjoint\n            if (linePassStns[0] === branch[0]) {\n                // -1 -1 1 1\n                linePassStns.push(lineMainStns[0]);\n            } else if (\n                lineMainStns[0] === branch[0] &&\n                lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                linePassStns.length\n            ) {\n                linePassStns = branch;\n                lineMainStns = [];\n            } else {\n                // 1 1 -1 -1\n                linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n            }\n        }\n\n        linePaths.main.push(lineMainStns);\n        linePaths.pass.push(linePassStns);\n    });\n\n    return linePaths;\n};\n","import React from 'react';\n\ninterface Props {\n    variant: PanelTypeGZMTR | PanelTypeShmetro;\n    isShowLight: boolean;\n    isShowPSD: false | string;\n}\n\nconst StripGZMTR = (props: Props) => {\n    const stripHeight = ((variant) => {\n        switch (variant) {\n            case 'gz28':\n            case 'gz2otis':\n            case 'gz6':\n            case 'gzgf':\n                return 60;\n            case 'gz1':\n            case 'gz3':\n                return 40;\n            case 'gz4':\n            case 'gz5':\n            case 'gz1421':\n                return 20;\n            default:\n                return 0;\n        }\n    })(props.variant);\n\n    const indicatorLight = React.useMemo(() => {\n        switch (props.variant) {\n            case 'gz1':\n                return <circle cy={-58} r={16} fill=\"red\" />;\n            case 'gz28':\n            case 'gz2otis':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz3':\n                return <rect x={-15} y={-55} height={30} width={30} fill=\"red\" />;\n            case 'gz6':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"white\" />;\n            case 'gz1421':\n                return <ellipse cy={-38} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz5':\n                return <rect x={-30} y={-70} height={30} width={60} fill=\"orange\" />;\n            case 'gz4':\n                return <rect x={-50} y={-50} height={25} width={100} fill=\"whitesmoke\" />;\n            case 'gzgf':\n                return <rect x={-30} y={-58} height={30} width={60} fill=\"orange\" />;\n            default:\n                return <></>;\n        }\n    }, [props.variant]);\n\n    const stripDy = -20;\n\n    return (\n        <g transform={`translate(0,${props.variant === 'gz4' ? stripDy : 0})`}>\n            <rect\n                id=\"strip_gz\"\n                style={{\n                    ['--height' as any]: `${stripHeight}px`,\n                }}\n            />\n            <g\n                style={{\n                    transform: 'translate(calc(var(--rmg-svg-width) / 2),var(--rmg-svg-height))',\n                }}\n            >\n                {props.isShowLight && indicatorLight}\n            </g>\n            {props.isShowPSD !== false && <PSD {...props} />}\n        </g>\n    );\n};\n\nexport default StripGZMTR;\n\nconst PSD = React.memo(\n    (props: Props) => {\n        /**\n         * Flag of whether PSD number is stick within the strip area. If `true`, should fill with white, otherwise, fill with theme colour.\n         */\n        const isInStrip = ['gz28', 'gz2otis', 'gz6', 'gzgf'].includes(props.variant);\n        const psdDy = ((variant: PanelTypeGZMTR | PanelTypeShmetro) => {\n            switch (variant) {\n                case 'gz1':\n                case 'gz3':\n                    return '82px';\n                case 'gz4':\n                    return '65px';\n                case 'gz5':\n                    return '80px';\n                case 'gz1421':\n                    return '62px';\n                default:\n                    return '58px';\n            }\n        })(props.variant);\n\n        return (\n            <g\n                textAnchor=\"middle\"\n                fill={isInStrip ? '#000' : 'var(--rmg-theme-fg)'}\n                style={{\n                    ['--psd-dy' as any]: psdDy,\n                    transform: 'translate(var(--translate-x), var(--translate-y))',\n                    ['--translate-x' as any]: 'calc(var(--rmg-svg-width) / 2 + 80px)',\n                    ['--translate-y' as any]: 'calc(var(--rmg-svg-height) - var(--psd-dy, 58px))',\n                }}\n            >\n                <rect height={40} width={40} rx={4} x={-20} fill={isInStrip ? '#fff' : 'var(--rmg-theme-colour)'} />\n                <text className=\"rmg-name__en\" fontSize={20} dy={12}>\n                    {props.isShowPSD}\n                </text>\n                <text className=\"rmg-name__zh\" fontSize={12} dy={26}>\n                    屏蔽门\n                </text>\n                <text className=\"rmg-name__en\" fontSize={6.5} dy={36}>\n                    Screen Door\n                </text>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.variant === nextProps.variant && prevProps.isShowPSD === nextProps.isShowPSD\n);\n","import React from 'react';\n\nconst StationNumberText = (props: { lineNum: string; stnNum: string } & React.SVGProps<SVGGElement>) => {\n    const { lineNum, stnNum, ...others } = props;\n\n    const LINE_NUM_MAX_WIDTH = 15.03125;\n\n    const lineNumEl = React.useRef<SVGTextElement | null>(null);\n    const [bBox, setBBox] = React.useState({ width: LINE_NUM_MAX_WIDTH } as DOMRect);\n    React.useEffect(() => setBBox(lineNumEl.current!.getBBox()), [lineNum]);\n\n    const lineNumScale = bBox.width > LINE_NUM_MAX_WIDTH ? LINE_NUM_MAX_WIDTH / bBox.width : 1;\n    const stnNumScale = lineNum.length === 2 ? lineNumScale : 1;\n\n    return (\n        <g textAnchor=\"middle\" fontSize={13.5} {...others}>\n            {React.useMemo(\n                () => (\n                    <>\n                        <g transform={`translate(-9.25,0)scale(${lineNumScale})`}>\n                            <text ref={lineNumEl} className=\"rmg-name__zh\">\n                                {lineNum}\n                            </text>\n                        </g>\n                        <g transform={`translate(9.25,0)scale(${stnNumScale})`}>\n                            <text className=\"rmg-name__zh\">{stnNum}</text>\n                        </g>\n                    </>\n                ),\n                // eslint-disable-next-line react-hooks/exhaustive-deps\n                [bBox.width, lineNum, stnNum]\n            )}\n        </g>\n    );\n};\n\nexport default StationNumberText;\n","import React, { useState, useRef, useEffect, memo } from 'react';\n\nexport default memo(\n    function LineBox(props: { info: InterchangeInfo; stnState: -1 | 0 | 1 }) {\n        return (\n            <g textAnchor=\"middle\" fill={props.stnState === -1 ? '#fff' : props.info[3]}>\n                <use xlinkHref=\"#intbox\" fill={props.stnState === -1 ? '#aaa' : props.info[2]} />\n                {props.info[4][0] === props.info[5][0] ? (\n                    <LineBoxNameSpan name={props.info.slice(-2) as Name} />\n                ) : (\n                    <LineBoxName name={props.info.slice(-2) as Name} />\n                )}\n            </g>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.info.toString() === nextProps.info.toString() && prevProps.stnState === nextProps.stnState\n);\n\nconst LineBoxName = memo(\n    (props: { name: Name }) => {\n        let nameZHEl = [] as JSX.Element[];\n        let dy = 0;\n        props.name[0].match(/\\d+|\\D+/g)?.forEach((t, i) => {\n            if (isNaN(Number(t))) {\n                // text\n                nameZHEl.push(\n                    <tspan key={i} dominantBaseline=\"hanging\" dy={1 - dy}>\n                        {t}\n                    </tspan>\n                );\n                dy += 1 - dy;\n            } else {\n                // number\n                nameZHEl.push(\n                    <tspan key={i} dominantBaseline=\"hanging\" fontSize={16} dy={-dy}>\n                        {t}\n                    </tspan>\n                );\n                dy = 0;\n            }\n        });\n\n        const nameZHGroupEl = useRef<SVGTextElement | null>(null);\n        const [zhBBox, setZhBBox] = useState({ width: 0 } as DOMRect);\n        useEffect(\n            () => setZhBBox(nameZHGroupEl.current!.getBBox()),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [props.name[0]]\n        );\n        const nameZHGroupScale = zhBBox.width > 43.5 ? 43.5 / zhBBox.width : 1;\n\n        const nameENEl = useRef<SVGTextElement | null>(null);\n        const [enBBox, setEnBBox] = useState({ width: 0 } as DOMRect);\n        useEffect(\n            () => setEnBBox(nameENEl.current!.getBBox()),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [props.name[1]]\n        );\n        const nameENScale = enBBox.width > 43.5 ? 43.5 / enBBox.width : 1;\n\n        return (\n            <>\n                <text\n                    ref={nameZHGroupEl}\n                    y={navigator.userAgent.includes('Firefox') ? -0.5 : 2}\n                    className=\"rmg-name__zh\"\n                    fontSize={12}\n                    transform={`scale(${nameZHGroupScale},1)`}\n                >\n                    {nameZHEl}\n                </text>\n                <text\n                    ref={nameENEl}\n                    y={19.5}\n                    fontSize={props.name[1].replace('\\\\', ' ').length > 10 ? 7 : 8}\n                    className=\"rmg-name__en\"\n                    transform={`scale(${nameENScale},1)`}\n                >\n                    {props.name[1]}\n                </text>\n            </>\n        );\n    },\n    (prevProps, nextProps) => prevProps.name.toString() === nextProps.name.toString()\n);\n\nconst LineBoxNameSpan = memo(\n    (props: { name: Name }) => {\n        let sharedText = '';\n        for (let idx in [...props.name[0]]) {\n            if (props.name[0][idx] === props.name[1][idx]) {\n                sharedText += props.name[0][idx];\n            } else {\n                break;\n            }\n        }\n\n        const nameEl = useRef<SVGTextElement | null>(null);\n        const [bBox, setBBox] = useState({ x: 0, width: 0 } as DOMRect);\n        useEffect(\n            () => setBBox(nameEl.current!.getBBox()),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [props.name.toString()]\n        );\n\n        const nameScale = bBox.width > 43.5 ? 43.5 / bBox.width : 1;\n\n        // unsymmetrical scaling, wrap with <g>\n        return (\n            <g transform={`scale(${nameScale},1)`}>\n                <g transform={`translate(${-bBox.x - bBox.width / 2},0)`}>\n                    <text ref={nameEl} className=\"rmg-name__zh\" fontSize={14} y={12} textAnchor=\"end\">\n                        {sharedText}\n                        <tspan className=\"rmg-name__zh\" fontSize={8} x={0} dy={-2} textAnchor=\"start\">\n                            {props.name[0].slice(sharedText.length)}\n                        </tspan>\n                        <tspan className=\"rmg-name__en\" fontSize={4} x={0} dy={6} textAnchor=\"start\">\n                            {props.name[1].slice(sharedText.length).trim()}\n                        </tspan>\n                    </text>\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.name.toString() === nextProps.name.toString()\n);\n","import React, { useContext, useState, useEffect, useRef, useMemo, forwardRef } from 'react';\nimport { ParamContext } from '../../../../context';\nimport StationNumberText from '../../../station-num-gzmtr';\nimport LineBox from '../line-box-gzmtr';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n    stnY: number;\n}\n\nconst StationGZMTR = (props: Props) => {\n    const { param } = useContext(ParamContext);\n    const stnInfo = param.stn_list[props.stnId];\n\n    const isNameShift = stnInfo.parents.length === 2 || stnInfo.children.length === 2;\n    const tickRotation =\n        props.stnY > 0\n            ? 180\n            : stnInfo.parents.indexOf(stnInfo.branch.left[1] || '') === 1 ||\n              stnInfo.children.indexOf(stnInfo.branch.right[1] || '') === 1\n            ? 180\n            : 0;\n    const nameENLns = stnInfo.name[1].split('\\\\').length;\n    const nameDX = isNameShift\n        ? tickRotation === 180\n            ? 16 + (nameENLns - 1) * 12 * Math.cos(-45)\n            : -9\n        : tickRotation === 180\n        ? -6\n        : (25 + (nameENLns - 1) * 15) * Math.cos(-45);\n\n    return (\n        <>\n            <IntGroup\n                intInfos={\n                    isNameShift\n                        ? (([\n                              [\n                                  param.theme[0],\n                                  param.theme[1],\n                                  'var(--rmg-theme-colour)',\n                                  'var(--rmg-theme-fg)',\n                                  param.line_name[0],\n                                  param.line_name[1],\n                              ],\n                          ] as any[]) as InterchangeInfo[]).concat(stnInfo.transfer.info[0])\n                        : stnInfo.transfer.info[0]\n                }\n                stnState={props.stnState}\n                tickRotation={tickRotation}\n            />\n            <g>\n                <use xlinkHref=\"#stn\" stroke={props.stnState === -1 ? '#aaa' : 'var(--rmg-theme-colour)'} />\n                <StationNumberText\n                    className={`Name ${props.stnState === -1 ? 'Pass' : 'Future'}`}\n                    lineNum={param.line_num}\n                    stnNum={stnInfo.num}\n                />\n            </g>\n            <g transform={`translate(${-nameDX},0)`}>\n                <StationNameGElement\n                    name={stnInfo.name}\n                    secondaryName={stnInfo.secondaryName}\n                    stnState={props.stnState}\n                    tickRotation={tickRotation}\n                    isExpress={stnInfo.services.includes('express')}\n                />\n            </g>\n        </>\n    );\n};\n\nexport default StationGZMTR;\n\ninterface StationNameGElementProps {\n    name: Name;\n    secondaryName: false | Name;\n    stnState: -1 | 0 | 1;\n    tickRotation: 0 | 180;\n    isExpress: boolean;\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const nameDY = props.tickRotation === 180 ? 17.5 : -20 - props.name[1].split('\\\\').length * 14 * Math.cos(-45);\n\n    const stnNameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ width: 0 } as DOMRect);\n    useEffect(\n        () => setBBox(stnNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.name.toString()]\n    );\n\n    const secNameEl = useRef<SVGGElement | null>(null);\n    const [secNameBBox, setSecNameBBox] = useState({ x: 0, width: -20 } as SVGRect);\n    useEffect(\n        () => {\n            if (secNameEl.current) {\n                setSecNameBBox(secNameEl.current.getBBox());\n            } else {\n                setSecNameBBox(prevBBox => {\n                    const { x } = prevBBox;\n                    return { x, width: -20 } as SVGRect;\n                });\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.secondaryName.toString()]\n    );\n\n    return (\n        <g\n            textAnchor={props.tickRotation === 180 ? 'end' : 'start'}\n            className={`Name ${props.stnState === -1 ? 'Pass' : props.stnState === 0 ? 'CurrentGZ' : 'Future'}`}\n            transform={`translate(0,${nameDY})rotate(-45)`}\n        >\n            <StationName ref={stnNameEl} name={props.name} />\n            {props.secondaryName && (\n                <g\n                    transform={`translate(${(bBox.width + secNameBBox.width / 2 + 10) *\n                        (props.tickRotation === 180 ? -1 : 1)},${2 + 5 * (props.name[1].split('\\\\').length - 1)})`}\n                    className={`Name ${props.stnState === -1 ? 'Pass' : 'Future'}`}\n                >\n                    <g transform=\"translate(0,3)\" fontSize={18}>\n                        <text textAnchor=\"end\" x={secNameBBox.x - 3} className=\"rmg-name__zh\">\n                            {'('}\n                        </text>\n                        <text textAnchor=\"start\" x={secNameBBox.width + secNameBBox.x + 3} className=\"rmg-name__zh\">\n                            {')'}\n                        </text>\n                    </g>\n                    <StationSecondaryName ref={secNameEl} secName={props.secondaryName} />\n                </g>\n            )}\n            {props.isExpress && (\n                <ExpressTag\n                    fill={props.stnState === -1 ? '#aaa' : 'var(--rmg-theme-colour)'}\n                    transform={`translate(${(bBox.width + secNameBBox.width + 20 + 35) *\n                        (props.tickRotation === 180 ? -1 : 1)},${2 + 5 * (props.name[1].split('\\\\').length - 1)})`}\n                />\n            )}\n        </g>\n    );\n};\n\nconst StationName = forwardRef((props: { name: Name }, ref: React.Ref<SVGGElement>) =>\n    useMemo(\n        () => (\n            <g ref={ref}>\n                <text className=\"rmg-name__zh\" fontSize={18}>\n                    {props.name[0]}\n                </text>\n                <g fontSize={10.5}>\n                    {props.name[1].split('\\\\').map((txt, i) => (\n                        <text key={i} className=\"rmg-name__en\" dy={16 + i * 11}>\n                            {txt}\n                        </text>\n                    ))}\n                </g>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.name[0], props.name[1]]\n    )\n);\n\nconst StationSecondaryName = forwardRef((props: { secName: Name }, ref: React.Ref<SVGGElement>) =>\n    useMemo(\n        () => (\n            <g ref={ref} textAnchor=\"middle\">\n                <text className=\"rmg-name__zh\" fontSize={13}>\n                    {props.secName[0]}\n                </text>\n                <text dy={10} className=\"rmg-name__en\" fontSize={6.5}>\n                    {props.secName[1]}\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.secName.toString()]\n    )\n);\n\nconst ExpressTag = React.memo((props: React.SVGProps<SVGGElement>) => (\n    <g textAnchor=\"middle\" {...props}>\n        <text className=\"rmg-name__zh\" fontSize={13}>\n            快车停靠站\n        </text>\n        <text dy={10} className=\"rmg-name__en\" fontSize={6.5}>\n            Express Station\n        </text>\n    </g>\n));\n\ninterface IntGroupProps {\n    intInfos: InterchangeInfo[];\n    stnState: -1 | 0 | 1;\n    tickRotation: 0 | 180;\n}\n\nconst IntGroup = (props: IntGroupProps) => (\n    <>\n        <IntTicks strokeWidth={4} {...props} />\n        <IntBoxs transform={`translate(0,${props.tickRotation === 180 ? -47 : 23})`} {...props} />\n    </>\n);\n\nconst IntTicks = (props: IntGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, stnState, tickRotation, ...others } = props;\n\n    return (\n        <g {...others}>\n            {intInfos.map((info, i) => (\n                <use\n                    key={i}\n                    xlinkHref=\"#inttick\"\n                    stroke={stnState === -1 ? '#aaa' : info[2]}\n                    transform={`translate(${-2 * (intInfos.length - 1) + 4 * i},0)rotate(${\n                        tickRotation === 180 ? 180 : 0\n                    })`}\n                />\n            ))}\n        </g>\n    );\n};\n\nconst IntBoxs = (props: IntGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, tickRotation, stnState, ...other } = props;\n\n    return (\n        <g {...other}>\n            {intInfos.map((info, i) => (\n                <g key={i} transform={`translate(0,${i * 28 * (tickRotation === 180 ? -1 : 1)})`}>\n                    <LineBox info={info} stnState={stnState} />\n                </g>\n            ))}\n        </g>\n    );\n};\n","import React, { useMemo } from 'react';\nimport { ParamContext } from '../../../context';\nimport StationGZMTR from './station/station-gzmtr';\nimport LineBox from './line-box-gzmtr';\nimport { adjacencyList, criticalPathMethod, drawLine, getStnState } from '../methods/share';\n\nconst wideFactor = (stnList: StationDict, stnId: string) =>\n    stnList[stnId].parents.length === 2 || stnList[stnId].children.length === 2 ? 0.25 : 0;\n\nconst getXShare = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]): number => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        if (branchOfStn.toString() === branches[0].toString()) {\n            // station on main line, expand to fit\n            let lens = [];\n            if (!leftOpenJaw && !rightOpenJaw) {\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n            } else if (leftOpenJaw) {\n                lens[0] = 0;\n                lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n                lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n            } else {\n                // right open jaw\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n            }\n            return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n        } else {\n            if (!leftOpenJaw && !rightOpenJaw) {\n                let lens = [];\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n                return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n            } else if (leftOpenJaw) {\n                return (\n                    criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len -\n                    criticalPathMethod(stnId, partSink, adjMat).len\n                );\n            } else {\n                // right open jaw\n                return (\n                    criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len +\n                    criticalPathMethod(partSource, stnId, adjMat).len\n                );\n            }\n        }\n    }\n};\n\nconst MainGZMTR = () => {\n    const { param, branches, routes, deps } = React.useContext(ParamContext);\n\n    const adjMat = adjacencyList(param.stn_list, wideFactor, wideFactor);\n\n    const xShares = useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShare(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const lineXs: [number, number] =\n        param.direction === 'r'\n            ? [\n                  (param.svgWidth.railmap * param.padding) / 100 + 65,\n                  param.svgWidth.railmap * (1 - param.padding / 100) - 20,\n              ]\n            : [(param.svgWidth.railmap * param.padding) / 100, param.svgWidth.railmap * (1 - param.padding / 100) - 65];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = useMemo(\n        () => {\n            console.log('computing y shares');\n            return Object.keys(param.stn_list).reduce((acc, cur) => {\n                if (branches[0].includes(cur)) {\n                    return { ...acc, [cur]: 0 };\n                } else {\n                    let branchOfStn = branches.slice(1).filter(branch => branch.includes(cur))[0];\n                    return { ...acc, [cur]: param.stn_list[branchOfStn[0]].children.indexOf(branchOfStn[1]) ? -2 : 2 };\n                }\n            }, {} as { [stnId: string]: number });\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: -yShares[cur] * param.branch_spacing }),\n        {} as typeof yShares\n    );\n\n    const stnStates = useMemo(\n        () => getStnState(param.current_stn_idx, routes, param.direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.current_stn_idx, param.direction, routes.toString()]\n    );\n\n    const linePaths = drawLine(branches, stnStates);\n    const paths = (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: linePaths[cur].map(stns => _linePath(stns, xs, ys)),\n        }),\n        {} as { [key in keyof ReturnType<typeof drawLine>]: string[] }\n    );\n\n    return (\n        <g\n            id=\"main\"\n            style={{\n                ['--y-percentage' as any]: param.y_pc,\n                transform: 'translateY(calc(var(--y-percentage) * var(--rmg-svg-height) / 100))',\n            }}\n        >\n            <Line paths={paths} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} />\n            <g\n                id=\"line_name\"\n                style={{\n                    ['--translate-x' as any]: param.direction === 'r' ? `${lineXs[0] - 65}px` : `${lineXs[1] + 65}px`,\n                }}\n            >\n                <LineBox\n                    info={\n                        Array(2).concat(\n                            ['var(--rmg-theme-colour)', 'var(--rmg-theme-fg)'],\n                            param.line_name\n                        ) as InterchangeInfo\n                    }\n                    stnState={1}\n                />\n            </g>\n        </g>\n    );\n};\n\nexport default MainGZMTR;\n\nconst Line = React.memo(\n    (props: { paths: { main: string[]; pass: string[] } }) => (\n        <g fill=\"none\" strokeWidth={4}>\n            <g stroke=\"#aaa\" strokeDasharray={4}>\n                {props.paths.pass.map((path, i) => (\n                    <path key={i} d={path} />\n                ))}\n            </g>\n            <g stroke=\"var(--rmg-theme-colour)\">\n                {props.paths.main.map((path, i) => (\n                    <path key={i} d={path} />\n                ))}\n            </g>\n        </g>\n    ),\n    (prevProps, nextProps) => JSON.stringify(prevProps.paths) === JSON.stringify(nextProps.paths)\n);\n\nconst _linePath = (stnIds: string[], realXs: { [stnId: string]: number }, realYs: { [stnId: string]: number }) => {\n    let prevY: number;\n    var path = [] as string[];\n\n    stnIds.forEach(stnId => {\n        let x = realXs[stnId];\n        let y = realYs[stnId];\n        if (!prevY && prevY !== 0) {\n            prevY = y;\n            path.push(`M ${x},${y}`);\n            return;\n        }\n        if (y === 0) {\n            if (y < prevY) path.push(`H ${x - 40}`, 'a 40,40 0 0,0 40,-40', `V ${y}`);\n            if (y > prevY) path.push(`H ${x - 40}`, 'a 40,40 0 0,1 40,40', `V ${y}`);\n        } else {\n            if (y < prevY) path.push(`V ${y + 40}`, 'a 40,40 0 0,1 40,-40', `H ${x}`);\n            if (y > prevY) path.push(`V ${y - 40}`, 'a 40,40 0 0,0 40,40', `H ${x}`);\n        }\n        path.push(`H ${x}`);\n        prevY = y;\n    });\n\n    // simplify path\n    return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n};\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { param } = React.useContext(ParamContext);\n\n    return (\n        <g id=\"stn_icons\">\n            {Object.keys(param.stn_list)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (\n                    <g\n                        key={stnId}\n                        style={{\n                            transform: `translate(${props.xs[stnId]}px,${props.ys[stnId]}px)`,\n                        }}\n                    >\n                        <StationGZMTR stnId={stnId} stnState={props.stnStates[stnId]} stnY={props.ys[stnId]} />\n                    </g>\n                ))}\n        </g>\n    );\n};\n","import * as React from 'react';\nimport { ParamContext } from '../../context';\nimport StripGZMTR from '../strip/strip-gzmtr';\nimport MainGZMTR from './main/main-gzmtr';\n\nconst RailMapGZMTR = () => {\n    const { param } = React.useContext(ParamContext);\n    return (\n        <>\n            <DefsGZMTR />\n\n            <StripGZMTR\n                variant={param.info_panel_type}\n                isShowLight={param.info_panel_type === 'gz2otis'}\n                isShowPSD={param.info_panel_type === 'gz2otis' && param.psd_num}\n            />\n\n            {(param.direction === 'l' && param.stn_list[param.current_stn_idx].parents.includes('linestart')) ||\n            (param.direction === 'r' && param.stn_list[param.current_stn_idx].children.includes('lineend')) ? (\n                <TerminusFlag />\n            ) : (\n                <>\n                    <MainGZMTR />\n                    <DirectionIndicator />\n                    {param.notesGZMTR.map((note, i) => (\n                        <NoteBox key={i} note={note} />\n                    ))}\n                </>\n            )}\n\n            {param.info_panel_type === 'gz2otis' && (\n                <line x2={param.svgWidth.railmap} transform=\"translate(0,90)\" strokeWidth={3} stroke=\"black\" />\n            )}\n        </>\n    );\n};\n\nexport default RailMapGZMTR;\n\nconst DefsGZMTR = React.memo(() => (\n    <defs>\n        <path\n            id=\"stn\"\n            className=\"rmg-stn\"\n            d=\"M 0,9.25 V -9.25 H -9.25 a 9.25,9.25 0 0,0 0,18.5 h 18.5 a 9.25,9.25 0 0,0 0,-18.5 H 0 \"\n        />\n        <path\n            id=\"stn_pass\"\n            stroke=\"#aaa\"\n            fill=\"#fff\"\n            strokeWidth={2}\n            d=\"M 0,9.25 V -9.25 H -9.25 a 9.25,9.25 0 0,0 0,18.5 h 18.5 a 9.25,9.25 0 0,0 0,-18.5 H 0 \"\n        />\n        <path id=\"arrow_direction\" d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\" fill=\"black\" />\n\n        <path id=\"inttick\" d=\"M 0,0 v 18\" strokeLinecap=\"square\" />\n        <rect id=\"intbox\" x={-22.5} height={24} width={45} rx={4.5} />\n    </defs>\n));\n\nconst DirectionIndicator = () => {\n    const { param, routes } = React.useContext(ParamContext);\n\n    const validDests = React.useMemo(\n        () => [\n            ...new Set(\n                routes\n                    .reduce(\n                        (acc, cur) =>\n                            cur.includes(param.current_stn_idx)\n                                ? acc.concat(\n                                      cur\n                                          .filter((stnId) => !['linestart', 'lineend'].includes(stnId))\n                                          .slice(param.direction === 'l' ? 0 : -1)[0]\n                                  )\n                                : acc,\n                        []\n                    )\n                    .filter((id) => id !== param.current_stn_idx)\n            ),\n        ],\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.current_stn_idx, param.direction, routes.toString()]\n    );\n\n    const textGroupProps: TextGroupProps = {\n        textAnchor: param.direction === 'l' ? 'start' : 'end',\n        transform: `translate(${param.direction === 'l' ? 65 : -65},-5)`,\n        destIds: validDests,\n    };\n\n    return (\n        <g\n            id=\"direction_gz\"\n            style={{ ['--x-percentage' as any]: param.direction_gz_x, ['--y-percentage' as any]: param.direction_gz_y }}\n        >\n            <use\n                xlinkHref=\"#arrow_direction\"\n                style={{ ['--rotate' as any]: param.direction === 'l' ? '0deg' : '180deg' }}\n            />\n\n            {validDests.length !== 2 ? (\n                <DirectionIndicatorTextGroup {...textGroupProps} />\n            ) : (\n                <DirectionIndicatorTextGroup2 {...textGroupProps} />\n            )}\n        </g>\n    );\n};\n\ntype TextGroupProps = {\n    destIds: string[];\n} & React.SVGProps<SVGGElement>;\n\nconst DirectionIndicatorTextGroup = (props: TextGroupProps) => {\n    const { destIds, ...others } = props;\n    const { param } = React.useContext(ParamContext);\n    return (\n        <g {...others}>\n            <text className=\"rmg-name__zh\" fontSize={28}>\n                {destIds.map((stnId) => param.stn_list[stnId].name[0]).join('/') + '方向'}\n            </text>\n            <text className=\"rmg-name__en\" fontSize={14} dy={22}>\n                {'Towards ' + destIds.map((stnId) => param.stn_list[stnId].name[1].replace('\\\\', ' ')).join('/')}\n            </text>\n        </g>\n    );\n};\n\nconst DirectionIndicatorTextGroup2 = (props: TextGroupProps) => {\n    const { destIds, ...others } = props;\n    const { param } = React.useContext(ParamContext);\n\n    const charCounts = destIds.map((stnId) => param.stn_list[stnId].name[0].length);\n    const minCharCounts = Math.min(...charCounts);\n    const charSpacing =\n        minCharCounts > 1 && charCounts[0] !== charCounts[1]\n            ? Math.abs(charCounts[0] - charCounts[1]) / (minCharCounts - 1)\n            : 0;\n\n    return (\n        <g {...others}>\n            {destIds.map((id, i) => (\n                <React.Fragment key={id}>\n                    <text\n                        className=\"rmg-name__zh\"\n                        fontSize={25}\n                        x={param.direction === 'l' ? 0 : -75}\n                        y={-21 + 42 * i}\n                        letterSpacing={charCounts[i] > charCounts[1 - i] ? '0em' : `${charSpacing}em`}\n                    >\n                        {param.stn_list[id].name[0]}\n                    </text>\n                    <text\n                        className=\"rmg-name__en\"\n                        fontSize={11.5}\n                        x={param.direction === 'l' ? 0 : -75}\n                        y={-1 + 42 * i}\n                    >\n                        {'Towards ' + param.stn_list[id].name[1].replace('\\\\', ' ')}\n                    </text>\n                </React.Fragment>\n            ))}\n            <text\n                className=\"rmg-name__zh\"\n                fontSize={28}\n                x={param.direction === 'l' ? 25 * (Math.max(...charCounts) + 1) : 0}\n                y={5}\n            >\n                方向\n            </text>\n        </g>\n    );\n};\n\nconst TerminusFlag = React.memo(() => (\n    <g id=\"terminus_gz\" textAnchor=\"middle\">\n        <text className=\"rmg-name__zh\" fontSize={90}>\n            终 点 站\n        </text>\n        <text dy={70} className=\"rmg-name__en\" fontSize={36}>\n            Terminal\n        </text>\n        <g strokeWidth={8} stroke=\"#000\">\n            <path d=\"M -160,68 h -160\" />\n            <path d=\"M 160,68 h 160\" />\n        </g>\n    </g>\n));\n\nconst NoteBox = React.memo(\n    (props: { note: Note }) => {\n        const noteTextEl = React.useRef<SVGGElement | null>(null);\n        const [bBox, setBBox] = React.useState({ width: 0, height: 0, y: 0 } as DOMRect);\n        React.useEffect(\n            () => setBBox(noteTextEl.current!.getBBox()),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [props.note[0], props.note[1]]\n        );\n\n        return (\n            <g\n                className=\"note-box\"\n                style={{ ['--x-percentage' as any]: props.note[2], ['--y-percentage' as any]: props.note[3] }}\n            >\n                {props.note[4] && (\n                    <rect\n                        height={bBox.height + 4}\n                        width={bBox.width + 4}\n                        x={-2}\n                        y={bBox.y - 2}\n                        fill=\"none\"\n                        stroke=\"black\"\n                        strokeWidth={0.5}\n                    />\n                )}\n                <g ref={noteTextEl}>\n                    <g fontSize={16} letterSpacing={1.2}>\n                        {props.note[0].split('\\n').map((txt, i) => (\n                            <text key={i} className=\"rmg-name__zh\" y={i * 18}>\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n\n                    <g\n                        fontSize={10}\n                        letterSpacing={0.33}\n                        transform={`translate(0,${18 * props.note[0].split('\\n').length})`}\n                    >\n                        {props.note[1].split('\\n').map((txt, i) => (\n                            <text\n                                key={i}\n                                className=\"rmg-name__en\"\n                                y={i * 11}\n                                textLength={\n                                    i < (props.note[1].match(/\\n/g)?.length || 0)\n                                        ? bBox.width\n                                        : navigator.userAgent.includes('Firefox')\n                                        ? -1\n                                        : 0\n                                }\n                                lengthAdjust=\"spacing\"\n                            >\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.note.toString() === nextProps.note.toString()\n);\n"],"sourceRoot":""}