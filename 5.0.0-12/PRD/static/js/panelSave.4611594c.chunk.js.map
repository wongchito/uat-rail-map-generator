{"version":3,"file":"static/js/panelSave.4611594c.chunk.js","mappings":"2cAqBe,SAASA,IACpB,IAAQC,GAAMC,EAAAA,EAAAA,KAAND,EACFE,GAAWC,EAAAA,EAAAA,MAETC,GAAiBC,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMC,OAA/CH,aAER,EAAwBI,EAAAA,UAAe,GAAvC,eAAOC,EAAP,KAAaC,EAAb,KACA,EAA0CF,EAAAA,SAAe,IAAzD,eAAOG,EAAP,KAAsBC,EAAtB,KAwCA,OACI,iCACI,UAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,UAAU,QAAQC,QAAQ,eAA3C,WACI,SAACC,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,6BAEJ,SAACC,EAAA,EAAD,CAAcC,QAASpB,EAAE,0BAE7B,kBACIqB,KAAK,OACLC,OAAO,mBACPC,MAAO,CAAEC,QAAS,QAClBC,GAAG,eACHC,SAnDS,SAACC,GAClBC,QAAQC,IAAIF,EAAMG,OAAOC,MAAO,IACd,IAAIC,SAAQ,SAACC,GAC3B,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,UAAYH,EACnBC,EAAOG,WAAWV,EAAMG,OAAOC,MAAO,OAGrCO,MAAK,SAAAC,GAAC,OAAIC,KAAKC,MAAMF,EAAET,OAAQY,WAC/BJ,MAAK,SAAAK,GACF/B,EAAiB+B,GACjBjC,GAAQ,UA0CZ,SAACkC,EAAD,CAAcnC,KAAMA,EAAMoC,QAtCd,SAACC,GAAD,wBAAoB,yFACrB,UAAXA,EADgC,uBAE/BC,SAASC,eAAe,gBAAqCC,MAAQ,GACtEvC,GAAQ,GAHwB,6BAMrB,WAAXoC,EANgC,iCAQtBI,GAAeC,EAAAA,EAAAA,IAAYxC,GARL,SAStByC,OAAOC,WAAWC,UAAU,WAAYd,KAAKe,UAAUL,IATjC,OAYtBM,EAASC,EAAAA,GAAa9C,EAAcY,OAAOmC,MAAK,SAAAC,GAAC,OAAIA,IAAMvD,KAC3DA,EACAwD,EAAAA,GACN1D,GAAS2D,EAAAA,EAAAA,IAAaL,KACtBM,EAAAA,EAAAA,GAAYZ,GAhBgB,kDAkB5BtB,QAAQmC,MAAR,MAlB4B,2DAsCgBC,QAASrD,OAWrE,SAASiC,EAAaqB,GAClB,IAEwBtB,EAFhB3C,GAAMC,EAAAA,EAAAA,KAAND,EAWR,OACI,UAACkE,EAAA,EAAD,CAAQrB,QAASoB,EAAMpB,QAAQ,SAAUpC,KAAMwD,EAAMxD,KAArD,WACI,SAAC0D,EAAA,EAAD,kCACA,SAACC,EAAA,EAAD,CAAeC,UAAQ,EAAvB,UACI,SAACC,EAAA,EAAD,CAAmB/C,MAAO,CAAEgD,WAAY,YAAxC,SAC2C,IAAtCC,OAAOC,KAAKR,EAAMD,SAASU,OAAe,SAdnC/B,EAc4DsB,EAAMD,QAbhF,uBAAN,OAA8BQ,OAAOC,KAAK9B,EAAMgC,UAAUD,OAAS,EAAnE,6BACUF,OAAOI,QAAQjC,EAAMgC,UAClBE,KAAI,SAAAC,GAAC,MAAK,CAAC,YAAa,WAAWC,SAASD,EAAE,IAAM,GAAKA,EAAE,GAAGE,KAAKC,KAAK,UACxEA,KAAK,QACLC,OACAC,QAAQ,KAAM,YAWvB,UAACC,EAAA,EAAD,YACI,SAACC,EAAA,EAAD,CAAQC,QAASrB,EAAMpB,QAAQ,SAAU0C,MAAM,UAA/C,SACKvF,EAAE,oBAEP,SAACqF,EAAA,EAAD,CAAQC,QAASrB,EAAMpB,QAAQ,UAAW0C,MAAM,UAAUC,WAAS,EAAnE,0B,wJC3FVC,GAAYC,EAAAA,EAAAA,IAAW,SAAAC,GAAK,OAC9BC,EAAAA,EAAAA,GAAa,CACTC,gBAAe,QACXrE,QAAS,OACTsE,SAAU,SACVC,WAAYJ,EAAMK,QAAQ,GAC1BC,cAAeN,EAAMK,QAAQ,GAC7BE,YAAaP,EAAMK,QAAQ,GAC3BG,aAAcR,EAAMK,QAAQ,IAC3BL,EAAMS,YAAYC,KAAK,MAAQ,CAC5BC,cAAe,WAGvBC,cAAe,CACXC,KAAM,GAEVC,eAAgB,CACZC,SAAU,EACVC,WAAY,EACZnF,QAAS,OACT8E,cAAe,SACfM,SAAU,KAEdC,cAAe,CACXrF,QAAS,OACTsF,UAAW,OAEfC,YAAa,CACTC,QAAS,QACT,gBAAiB,CACbjB,WAAY,UAGpBkB,sBAAuB,CACnBzF,QAAS,OACT8E,cAAe,SACfY,eAAgB,iBAEpBC,gBAAiB,CACbC,OAAQ,QAWL,SAASC,EAAcpD,GAClC,IAAQjE,GAAMC,EAAAA,EAAAA,KAAND,EACFsH,EAAU7B,IACVvF,GAAWqH,EAAAA,EAAAA,MAEX5C,GAAWtE,EAAAA,EAAAA,KAAe,SAAAmH,GAAK,OAAIA,EAAM7E,MAAMgC,YAC/C8C,GAAYpH,EAAAA,EAAAA,KAAe,SAAAmH,GAAK,OAAIA,EAAM7E,MAAM8E,aAChDC,GAAsBrH,EAAAA,EAAAA,KAAe,SAAAmH,GAAK,OAAIA,EAAM7E,MAAMgF,mBAC1DC,GAAWvH,EAAAA,EAAAA,KAAe,SAAAmH,GAAK,OAAIA,EAAM7E,MAAMpB,SAErD,GAA0BsG,EAAAA,EAAAA,UAAS9E,SAAS+E,cAAc,QAA1D,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCH,EAAAA,EAAAA,WAAS,GAAzC,eAAOI,EAAP,KAAiBC,EAAjB,KAEA,GAAoCL,EAAAA,EAAAA,WAAS,GAA7C,eAAOM,EAAP,KAAmBC,EAAnB,KACA,GAA0CP,EAAAA,EAAAA,WAAS,GAAnD,eAAOQ,EAAP,KAAsBC,GAAtB,KACA,IAA0BT,EAAAA,EAAAA,UAAS,GAAnC,iBAAOU,GAAP,MAAcC,GAAd,MACA,IAA4BX,EAAAA,EAAAA,UAAS,OAArC,iBAAOY,GAAP,MAAeC,GAAf,MAEA,IAAgCb,EAAAA,EAAAA,WAAS,GAAzC,iBAAOc,GAAP,MAAiBC,GAAjB,MACA,IAAkDf,EAAAA,EAAAA,WAAS,GAA3D,iBAAOgB,GAAP,MAA0BC,GAA1B,MAkBMC,GAAYvI,EAAAA,OAAoC,OAGtDwI,EAAAA,EAAAA,YACI,WACI,GAAqB,KAAjB/E,EAAMT,OAGN,OAFAwE,EAASjF,SAAS+E,cAAc,aAChCI,GAAY,GAIhBe,KAAe3G,MAAK,SAAA4G,GAChBlB,EAASkB,GACThB,GAAY,QAIpB,CAACjE,EAAMT,SAQX,IAAMyF,GAAY,mCAAG,2GACO,CAAC,kBAAmB,oBACvCpE,KACG,SAAAsE,GAAG,OACEpG,SAASqG,cAAT,cAA8BnF,EAAMT,SAA4BjC,MAC5D8H,iBAAiBF,GACjBG,MAAM,QAAS,MAE3BzE,IAAI0E,QARQ,eACVC,EADU,MAcXN,EAAOnG,SAASqG,cAAT,cAA8BnF,EAAMT,SAAWiG,WAAU,IAEjEC,aAAa,UAAWF,EAAgBjB,IAAOoB,YACpDT,EAAK3H,MAAMqI,YAAY,MAAO,WAE9B,CAAC,QAAS3F,EAAMT,QACXqB,KAAI,SAAAgF,GAAG,aACJ,QACO,WACC,OAAI9G,SAAS+G,iBAAiB,SAASC,QAAO,SAAAC,GAAC,OAAIA,EAAEvI,KAAO,OAASoI,KAAK,UAD3E,aACC,EACMI,OACRC,UAEDrF,KAAI,SAAAsF,GAAI,OAAIA,EAAKC,WACjBnF,KAAK,QAEboF,SAAQ,SAAAC,GACL,IAAIC,EAAIxH,SAAS+E,cAAc,SAC/ByC,EAAEC,YAAcF,EAChBpB,EAAKuB,QAAQF,MAGrB,UAAArB,EAAKE,cAAc,6BAAnB,SAA0CM,aAAa,SAAUvB,EAAa,QAAU,QACxF,UAAAe,EAAKE,cAAc,yBAAnB,SAAsCM,aAAa,OAAQrB,EAAgB,OAAS,SAEhFT,IAAa8C,EAAAA,GAAAA,IAvCA,2CAyC2B,8BAzC3B,wBAyCDC,EAzCC,EAyCDA,kBAzCC,UA0CUA,EAAkBzB,GA1C5B,QA0CH0B,EA1CG,QA2CHL,EAAIxH,SAAS+E,cAAc,UAC/B0C,YAAcI,EAAK3F,KAAK,MAC1BiE,EAAKuB,QAAQF,GA7CJ,kDA+CTM,MAAM,+DACNjJ,QAAQmC,MAAR,MAhDS,iCAoDVmF,GApDU,0DAAH,qDA6DZ4B,GAAW,mCAAG,WAAOC,GAAP,yFACVC,EAAM,IAAIC,KADA,UAGIF,GAHJ,gEAGLG,EAHK,iBAKNhL,GAASiL,EAAAA,EAAAA,IAAkBD,IALrB,wBAOOjC,KAPP,WAONC,EAPM,OAWZnG,SAASqI,KAAKC,YAAYnC,GAEpBoC,EAAW,cAAOJ,EAAP,YAAgBvG,EAASuG,GAAOlG,KAAK,GAArC,YAA2CL,EAASuG,GAAOlG,KAAK,IAAKuG,WAAW,IAAK,KACvF,QAAX9C,GAdQ,mCAeW+C,EAAAA,EAAAA,IAAKtC,EAAMX,IAftB,WAeFkD,EAfE,QAgBJC,UAAUC,UAAU5G,SAAS,WAAc2G,UAAUC,UAAU5G,SAAS,UAhBpE,kCAiBE,IAAI/C,SAAc,SAAAC,GACpB2J,YAAW,WACPhK,QAAQC,IAAI,6BACZI,MACD,QArBH,QAyBJ8I,EAAcrG,OAAS,EAGvBsG,EAAIa,KAAJ,UAAYP,EAAZ,QAA4BG,IAE5BK,EAAAA,EAAAA,IAAe,GAAD,OAAIR,EAAJ,QAAoBG,GA9B9B,wBAgCU,QAAXhD,KACPS,EAAK6C,gBAAgB,UACfC,EAAO,6BAA+BC,KAAKC,SAASC,mBAAmBjD,EAAKkD,aAE9ErB,EAAcrG,OAAS,EACvBsG,EAAIa,KAAJ,UAAYP,EAAZ,QAA4BU,EAAKK,MAAM,WAAW,GAAI,CAAEC,QAAQ,KAEhEC,EAAAA,EAAAA,IAAW,GAAD,OAAIjB,EAAJ,QAAoB,gBAAiBpC,EAAKkD,YAvChD,QA4CZrJ,SAASqI,KAAKoB,YAAYtD,GA5Cd,oJAgDZ6B,EAAcrG,OAAS,GAhDX,kCAiDUsG,EAAIyB,cAAc,CAAEpL,KAAM,SAjDpC,QAiDNqL,EAjDM,OAkDNpB,EAAW,cAAO7D,EAAU,GAAjB,YAAuBA,EAAU,GAAjC,QAA0C8D,WAAW,IAAK,MAC3EO,EAAAA,EAAAA,IAAeR,EAAUoB,GAnDb,yBAuDVxM,GAASiL,EAAAA,EAAAA,IAAkBzD,IAvDjB,gEAAH,sDA0DXiF,GAAc,SAAC7J,GAAD,OAAuE,WACvF,GAAe,2BAAXA,EAEAgI,GADsB,CAACpD,SAEpB,GAAe,uBAAX5E,EAAiC,CACxC,IAAMiI,EAAgBvG,OAAOC,KAAKE,GAAUoF,QAAO,SAAAmB,GAAK,OAAK,CAAC,YAAa,WAAWnG,SAASmG,MAC/FJ,GAAYC,GAGhB9G,EAAMpB,QAAQ,WAGlB,OACI,UAACqB,EAAA,EAAD,CAAQrB,QAAS8J,GAAY,SAAUlM,KAAMwD,EAAMxD,KAAMmM,UAAU,EAAnE,WACI,SAACzI,EAAA,EAAD,UAAcnE,EAAE,yBAChB,iBAAK6M,UAAWvF,EAAQzB,eAAxB,WACI,SAACzB,EAAA,EAAD,CACI0I,wBAAyB,CAAEC,OAAQhF,EAAMqE,WACzCY,IAAKjE,GACL8D,UAAWvF,EAAQf,cACnBe,QAAS,CAAE2F,KAAM3F,EAAQP,gBAE7B,gBAAK8F,UAAWvF,EAAQb,eAAxB,UACI,UAACrC,EAAA,EAAD,CAAekD,QAAS,CAAE2F,KAAM3F,EAAQP,aAAe8F,UAAWvF,EAAQL,sBAA1E,WACI,UAACiG,EAAA,EAAD,CAAMnM,UAAU,MAAMoM,gBAAc,EAApC,WACI,UAACtM,EAAA,EAAD,YACI,SAACM,EAAA,EAAD,CAAcC,QAASpB,EAAE,+BACzB,SAACoN,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,CACI9H,MAAM,UACN+H,QAASjF,EACT3G,SA1LV,SAAC6L,EAAwCD,GAAsB,IAAD,EACpF,UAAAvF,EAAMqB,cAAc,yBAApB,SAAuCM,aAAa,OAAQ4D,EAAU,OAAS,SAC/EhF,GAAiBgF,IAyLeE,UAAWvF,UAIvB,SAACwF,EAAA,EAAD,CAASC,QAAQ,YACjB,UAAC7M,EAAA,EAAD,YACI,SAACM,EAAA,EAAD,CAAcC,QAASpB,EAAE,0BACzB,SAACoN,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,CACI9H,MAAM,UACN+H,QAASnF,EACTzG,SA3MX,SAAC6L,EAAwCD,GAAsB,IAAD,EACnF,UAAAvF,EAAMqB,cAAc,6BAApB,SAA2CM,aAAa,SAAU4D,EAAU,QAAU,QACtFlF,EAAckF,IA0MkBE,UAAWvF,UAIvB,SAACwF,EAAA,EAAD,CAASC,QAAQ,YACjB,UAAC7M,EAAA,EAAD,YACI,SAACM,EAAA,EAAD,CAAcC,QAASpB,EAAE,yBACzB,SAACoN,EAAA,EAAD,WACI,SAACO,EAAA,EAAD,CAAQC,QAAM,EAAC3K,MAAOsF,GAAO7G,SA1MnC,SAACC,GACvB,IAAIkM,EAAYlM,EAAMG,OAAOmB,MAC7B8E,EAAM2B,aAAa,UAAYH,OAAOxB,EAAM+F,aAAa,WAAavF,GAASsF,GAAWlE,YAC1FnB,GAASqF,IAuM6EL,UAAWvF,EAArE,SACK,CACG,IAAM,IAAM,GAAK,IAAM,IAAM,GAAK,GAAK,EAAG,IAAK,KAAM,IAAK,KAAM,EAAG,IAAK,EACxE,EAAG,GACLpD,KAAI,SAAAkJ,GAAK,OACP,mBAAoB9K,MAAO8K,EAA3B,UACc,IAARA,GAAaC,QAAQ,GAAK,KADnBD,cAO7B,SAACN,EAAA,EAAD,CAASC,QAAQ,YACjB,UAAC7M,EAAA,EAAD,YACI,SAACM,EAAA,EAAD,CAAcC,QAASpB,EAAE,0BACzB,SAACoN,EAAA,EAAD,WACI,UAACO,EAAA,EAAD,CACIC,QAAM,EACN3K,MAAOwF,GACP/G,SAAU,SAAAa,GAAC,OAAImG,GAAUnG,EAAET,OAAOmB,QAClC1B,MAAO,CAAE0M,MAAO,IAChBT,UAAWvF,EALf,WAOI,mBAAQhF,MAAM,MAAd,kBACA,mBAAQA,MAAM,MAAd,uCAKhB,UAACpC,EAAA,EAAD,CAAUU,MAAO,CAAEyF,QAAS,GAA5B,WACI,SAACkH,EAAA,EAAD,CACI3I,MAAM,UACN4I,KAAK,QACLb,QAAS3E,GACTjH,SAAU,SAAC6L,EAAGD,GAAJ,OAAgB1E,GAAY0E,OAE1C,UAACc,EAAA,EAAD,CAAYV,QAAQ,QAApB,UACK1N,EAAE,8BACH,SAACoO,EAAA,EAAD,CACIrN,UAAU,IACVwE,MAAM,UACNmI,QAAQ,QACRnM,MAAO,CAAE8M,OAAQ,WACjB/I,QAAS,kBAAMwD,IAAqB,IALxC,SAOK9I,EAAE,kCAIX,SAACsO,EAAD,CAAa7N,KAAMoI,GAAmBhG,QAAS,kBAAMiG,IAAqB,kBAK1F,gBAAK+D,UAAWvF,EAAQT,cAAxB,UACI,UAACzB,EAAA,EAAD,YACI,SAACC,EAAA,EAAD,CACIqI,QAAQ,YACRpI,QAASqH,GAAY,0BACrBpH,MAAM,UACNiI,UAAWvF,IAAaU,GAJ5B,SAMK3I,EAAE,0CAEP,SAACqF,EAAA,EAAD,CACIqI,QAAQ,YACRpI,QAASqH,GAAY,sBACrBpH,MAAM,UACNiI,UAAWvF,IAAaU,IAAYf,IAAa8C,EAAAA,GAAAA,MAJrD,SAMK1K,EAAE,uCAEP,SAACqF,EAAA,EAAD,CAAQqI,QAAQ,WAAWpI,QAASqH,GAAY,SAAUpH,MAAM,UAAUC,WAAS,EAAnF,SACKxF,EAAE,2BAQ3B,IAAMsO,EAAc,SAACrK,GACjB,IAAQjE,GAAMC,EAAAA,EAAAA,KAAND,EACR,OAAOuO,EAAAA,EAAAA,UACH,kBACI,UAACrK,EAAA,EAAD,CAAQzD,KAAMwD,EAAMxD,KAAMoC,QAASoB,EAAMpB,QAAzC,WACI,SAACsB,EAAA,EAAD,UAAcnE,EAAE,+BAChB,UAACoE,EAAA,EAAD,CAAeC,UAAQ,EAAvB,WACI,SAAC+J,EAAA,EAAD,CAAYrN,UAAU,IAAtB,2HAIA,UAACqN,EAAA,EAAD,CAAYrN,UAAU,KAAtB,WACI,UAACqN,EAAA,EAAD,CAAYrN,UAAU,KAAtB,+EACuE,KACnE,SAACqN,EAAA,EAAD,CAAYrN,UAAU,IAAIwE,MAAM,UAAUiJ,KAAK,uBAAuB1M,OAAO,SAA7E,yCAFJ,IAKM,KACF,SAACsM,EAAA,EAAD,CAAYrN,UAAU,IAAIwE,MAAM,UAAUiJ,KAAK,wBAAwB1M,OAAO,SAA9E,6BAEc,IARlB,KASO,KACH,SAACsM,EAAA,EAAD,CAAYrN,UAAU,IAAIwE,MAAM,UAAUiJ,KAAK,yBAAyB1M,OAAO,SAA/E,2CAVJ,0MAiBA,UAACsM,EAAA,EAAD,CAAYrN,UAAU,KAAtB,8EACsE,KAClE,SAACqN,EAAA,EAAD,CACIrN,UAAU,IACVwE,MAAM,UACNiJ,KAAK,+BACL1M,OAAO,SAJX,wBAOc,IATlB,MAUQ,KACJ,SAACsM,EAAA,EAAD,CACIrN,UAAU,IACVwE,MAAM,UACNiJ,KAAK,mCACL1M,OAAO,SAJX,2BAXJ,6LAsBA,UAACsM,EAAA,EAAD,CAAYrN,UAAU,KAAtB,6EACqE,KACjE,SAACqN,EAAA,EAAD,CACIrN,UAAU,IACVwE,MAAM,UACNiJ,KAAK,0CACL1M,OAAO,SAJX,uBAOc,IATlB,+LAcJ,SAACsM,EAAA,EAAD,CAAYrN,UAAU,IAAtB,4FAGA,SAACqN,EAAA,EAAD,CAAYrN,UAAU,IAAtB,iIACA,SAACqN,EAAA,EAAD,CAAYrN,UAAU,IAAI2M,QAAQ,QAAlC,uDAIJ,SAACtI,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,CAAQqI,QAAQ,WAAWnI,MAAM,UAAUD,QAASrB,EAAMpB,QAA1D,SACK7C,EAAE,yBAMnB,CAACiE,EAAMxD,QCtdf,MCWe,SAAsBwD,GACjC,IAAQjE,GAAMC,EAAAA,EAAAA,KAAND,EAEF4H,GAAWvH,EAAAA,EAAAA,KAAe,SAAAmH,GAAK,OAAIA,EAAM7E,MAAMpB,SAC/CnB,GAAeC,EAAAA,EAAAA,KAAe,SAAAmH,GAAK,OAAIA,EAAMjH,IAAIH,gBAEvD,EAAsDI,EAAAA,UAAe,GAArE,eAAOiO,EAAP,KAA4BC,EAA5B,KACA,EAA4BlO,EAAAA,SAAe,IAA3C,eAAOgD,EAAP,KAAemL,EAAf,KAEMhC,EAAc,SAAC7J,GAAD,OAAoB,WACrB,UAAXA,IACA4L,GAAuB,GACvBC,EAAU7L,IAEdmB,EAAMpB,QAAQ,WAUlB,OACI,iCACI,UAACqB,EAAA,EAAD,CAAQrB,QAAS8J,EAAY,SAAUlM,KAAMwD,EAAMxD,KAAnD,WACI,SAAC0D,EAAA,EAAD,UAAcnE,EAAE,wBAChB,SAACoE,EAAA,EAAD,CAAeC,UAAQ,EAAvB,UACI,SAAC6I,EAAA,EAAD,WACM9M,IAAiBwD,EAAAA,GAAYH,EAAAA,GAAamE,GAAY,CAACxH,IAAeyE,KAAI,SAAAlB,GAAC,OACzE,SAAC9C,EAAA,EAAD,CAAUC,QAAM,EAASwE,QAASqH,EAAYhJ,GAA9C,UACI,SAACxC,EAAA,EAAD,CAAcC,QAASpB,EAAE,eAAiB2D,MADxBA,cAQtC,SAAC0D,EAAD,CAAe5G,KAAMgO,EAAqB5L,QAtBvB,SAACC,GACT,UAAXA,IACA4L,GAAuB,GACvBC,EAAU,MAmB6DnL,OAAQA,Q,UC5BrFoL,GAAiBpO,EAAAA,MAAW,kBAAM,kCAcxC,IAAMqO,GAAW,CACbC,GAAI,UACJ,UAAW,uCACX,QAAS,wCAGPC,GAAY,WACd,OAAoB9O,EAAAA,EAAAA,KAAZD,EAAR,EAAQA,EAAGgP,EAAX,EAAWA,KAELpH,GAAWvH,EAAAA,EAAAA,KAAe,SAAAmH,GAAK,OAAIA,EAAM7E,MAAMpB,SAC/CoB,GAAQtC,EAAAA,EAAAA,KAAe,SAAAmH,GAAK,OAAIA,EAAM7E,SAE5C,GAAgDkF,EAAAA,EAAAA,WAAS,GAAzD,eAAOoH,EAAP,KAAyBC,EAAzB,KACA,GAAoDrH,EAAAA,EAAAA,WAAS,GAA7D,eAAOsH,EAAP,KAA2BC,EAA3B,KACA,GAAkDvH,EAAAA,EAAAA,WAAS,GAA3D,eAAOwH,EAAP,KAA0BC,EAA1B,KACA,GAAgDzH,EAAAA,EAAAA,WAAS,GAAzD,eAAO0H,EAAP,KAAyBC,EAAzB,KAEMC,EAAS,mCAAG,qFACVC,EAAO3M,SAAS+E,cAAc,MAC7B0G,KAAO,uCAAyCrC,mBAAmB3J,KAAKe,UAAUZ,IACvF+M,EAAKC,SAAW,cAAe,IAAIC,MAAOC,cAAgB,QAC1DH,EAAKI,QAJS,2CAAH,qDA+Bf,OACI,4BACI,UAACC,EAAA,EAAD,YACI,UAAC7C,EAAA,EAAD,CAAMnM,UAAU,MAAhB,WACI,UAACF,EAAA,EAAD,CAAUC,QAAM,EAACwE,QAAS,kBAAM4J,GAAoB,IAApD,WACI,SAACjO,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,0BAEJ,SAACC,EAAA,EAAD,CAAcC,QAASpB,EAAE,yBAE7B,SAACD,EAAD,KACA,UAACc,EAAA,EAAD,CAAUC,QAAM,EAACwE,QAASmK,EAA1B,WACI,SAACxO,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,sBAEJ,SAACC,EAAA,EAAD,CAAcC,QAASpB,EAAE,mBAE7B,UAACa,EAAA,EAAD,CAAUC,QAAM,EAACwE,QAAS,kBAAM8J,GAAsB,IAAtD,WACI,SAACnO,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,gCAEJ,SAACC,EAAA,EAAD,CAAcC,QAASpB,EAAE,+BAGjC,SAACyN,EAAA,EAAD,KACA,UAACP,EAAA,EAAD,CAAMnM,UAAU,MAAhB,WACI,UAACF,EAAA,EAAD,CAAUC,QAAM,EAACwE,QAAS,kBAAMgK,GAAqB,IAArD,WACI,SAACrO,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,uBAEJ,SAACC,EAAA,EAAD,CAAcC,QAASpB,EAAE,qBAAsBgQ,UAAWhQ,EAAE,cAAgB4H,SAEhF,UAAC/G,EAAA,EAAD,CAAUC,QAAM,EAACwE,QAAS,kBAAMkK,GAAoB,IAApD,WACI,SAACvO,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,2BAEJ,SAACC,EAAA,EAAD,CACIC,QAASpB,EAAE,oBACXgQ,WAAWC,EAAAA,EAAAA,IAAcpB,GAAUG,EAAKkB,uBAMxD,SAAC,WAAD,CAAgBC,UAAU,SAACC,EAAA,EAAD,IAA1B,UACI,SAACxB,GAAD,CAAgBnO,KAAMwO,EAAkBpM,QAAS,kBAAMqM,GAAoB,SAG/E,SAAC,EAAD,CAAczO,KAAM0O,EAAoBtM,QAxEtB,SAACC,GACvBsM,GAAsB,OAyElB,SAACiB,GAAD,CAAa5P,KAAM4O,EAAmBxM,QAtErB,SAACC,GACP,UAAXA,GAAsBA,IAAW8E,GAKjCxE,OAAOkN,KAAK,QAAS,MAAO,CACxBC,eAAgB,QAChBC,YAAa1N,IAIrBwM,GAAqB,OA2DjB,SAACmB,GAAD,CAAYhQ,KAAM8O,EAAkB1M,QAAS,kBAAM2M,GAAoB,UAUnF,SAASa,GAAYpM,GACjB,IAAQjE,GAAMC,EAAAA,EAAAA,KAAND,EACFE,GAAWqH,EAAAA,EAAAA,MAEXoF,EAAc,SAACxD,GAAD,OAAmB,WACnCjJ,GAASwQ,EAAAA,EAAAA,IAASvH,IAClBlF,EAAMpB,QAAQsG,KAGlB,OACI,UAACjF,EAAA,EAAD,CAAQrB,QAAS,kBAAMoB,EAAMpB,QAAQ,UAAUpC,KAAMwD,EAAMxD,KAA3D,WACI,SAAC0D,EAAA,EAAD,UAAcnE,EAAE,uBAChB,SAACoE,EAAA,EAAD,CAAeC,UAAQ,EAAvB,UACI,SAAC6I,EAAA,EAAD,UACK1I,OAAOmM,OAAOjG,EAAAA,IAAU7F,KAAI,SAAAsE,GAAG,OAC5B,SAAC,KAAD,CAAMyH,GAAI,IAAMzH,EAAe5H,MAAO,CAAEsP,eAAgB,OAAQtL,MAAO,SAAvE,UACI,SAAC1E,EAAA,EAAD,CAAUC,QAAM,EAACwE,QAASqH,EAAYxD,GAAtC,UACI,SAAChI,EAAA,EAAD,CAAcC,QAASpB,EAAE,cAAgBmJ,QAFvBA,aAiBlD,SAASsH,GAAWxM,GAChB,OAAoBhE,EAAAA,EAAAA,KAAZD,EAAR,EAAQA,EAAGgP,EAAX,EAAWA,KAiBX,OACI,UAAC9K,EAAA,EAAD,CAAQrB,QAASoB,EAAMpB,QAASpC,KAAMwD,EAAMxD,KAA5C,WACI,SAAC0D,EAAA,EAAD,UAAcnE,EAAE,sBAChB,SAACoE,EAAA,EAAD,CAAeC,UAAQ,EAAvB,UACI,SAAC6I,EAAA,EAAD,UACM1I,OAAOC,KAAKoK,IAAwChK,KAAI,SAAAsE,GAAG,OACzD,SAACtI,EAAA,EAAD,CAAUC,QAAM,EAACwE,QAAS,kBArBzBwL,EAqB2C3H,KApB/C6F,EAAK+B,WAGd/B,EAAKgC,eAAeF,GAAMxO,MAAK,SAAAtC,GAAC,OAAK+C,SAASkO,MAAQjR,EAAE,YAExDoD,OAAOkN,KAAK,QAAS,MAAO,CACxBC,eAAgB,WAChBC,YAAaM,IAEjB/N,SAASmO,gBAAgBxH,aAAa,OAAQoH,SAR9C7M,EAAMpB,UAFM,IAACiO,GAqBD,UACI,SAAC3P,EAAA,EAAD,CAAcC,QAASyN,GAAS1F,MADmBA,aCzM/E,ODwBe,WACX,IAAIgI,GAAsBC,EAAAA,EAAAA,IAAAA,CAAkBrC,IAE5C,OACI,SAACsC,EAAA,EAAD,CAAMC,WAAS,EAACtL,QAAS,EAAGkB,eAAe,SAASqK,WAAW,SAA/D,UACI,SAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAArC,UACI,SAACT,EAAD","sources":["panels/save/upload-item.tsx","panels/save/export-diag/preview-diag.tsx","panels/save/export-diag/index.ts","panels/save/export-diag/dialog.tsx","panels/save/panel.tsx","panels/save/index.ts"],"sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    ListItem,\n    ListItemIcon,\n    Icon,\n    ListItemText,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogContentText,\n    DialogActions,\n    Button,\n} from '@material-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { RMGParam, canvasConfig, AllCanvas } from '../../constants/constants';\nimport { useAppSelector } from '../../redux';\nimport { selectCanvas } from '../../redux/app/action';\nimport { updateParam } from '../../utils';\nimport { reRenderApp } from '../../index';\n\nexport default function UploadLi() {\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n\n    const { canvasToShow } = useAppSelector(state => state.app);\n\n    const [open, setOpen] = React.useState(false);\n    const [importedParam, setImportedParam] = React.useState({} as RMGParam);\n\n    const handleUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n        console.log(event.target.files![0]);\n        let filePromise = new Promise((resolve: (event: ProgressEvent<FileReader>) => void) => {\n            let reader = new FileReader();\n            reader.onloadend = resolve;\n            reader.readAsText(event.target.files![0]);\n        });\n        filePromise\n            .then(e => JSON.parse(e.target!.result as string))\n            .then(param => {\n                setImportedParam(param);\n                setOpen(true);\n            });\n    };\n\n    const handleClose = (action: string) => async () => {\n        if (action === 'close') {\n            (document.getElementById('upload-param') as HTMLInputElement).value = '';\n            setOpen(false);\n            return;\n        }\n        if (action === 'accept') {\n            try {\n                const updatedParam = updateParam(importedParam) as RMGParam;\n                await window.rmgStorage.writeFile('rmgParam', JSON.stringify(updatedParam));\n\n                // reset to AllCanvas if current canvas is not supported in the new style\n                const canvas = canvasConfig[importedParam.style].some(c => c === canvasToShow)\n                    ? canvasToShow\n                    : AllCanvas;\n                dispatch(selectCanvas(canvas));\n                reRenderApp(updatedParam);\n            } catch (err) {\n                console.error(err);\n            }\n        }\n    };\n\n    return (\n        <>\n            <ListItem button component=\"label\" htmlFor=\"upload-param\">\n                <ListItemIcon>\n                    <Icon>folder_open</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('file.open.button')} />\n            </ListItem>\n            <input\n                type=\"file\"\n                accept=\"application/json\"\n                style={{ display: 'none' }}\n                id=\"upload-param\"\n                onChange={handleUpload}\n            />\n            <ImportDialog open={open} onClose={handleClose} content={importedParam} />\n        </>\n    );\n}\n\ninterface ImportDialogProps {\n    onClose: (action: string) => () => void;\n    open: boolean;\n    content: {} | RMGParam;\n}\n\nfunction ImportDialog(props: ImportDialogProps) {\n    const { t } = useTranslation();\n\n    const describeParams = (param: RMGParam) => {\n        return `Number of stations: ${Object.keys(param.stn_list).length - 2}\n                ${Object.entries(param.stn_list)\n                    .map(x => (['linestart', 'lineend'].includes(x[0]) ? '' : x[1].name.join(' - ')))\n                    .join('\\r\\n')\n                    .trim()\n                    .replace(/\\\\/, ' ')}`;\n    };\n\n    return (\n        <Dialog onClose={props.onClose('close')} open={props.open}>\n            <DialogTitle>Your Configuration</DialogTitle>\n            <DialogContent dividers>\n                <DialogContentText style={{ whiteSpace: 'pre-line' }}>\n                    {Object.keys(props.content).length === 0 ? 'empty' : describeParams(props.content as RMGParam)}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose('close')} color=\"primary\">\n                    {t('dialog.cancel')}\n                </Button>\n                <Button onClick={props.onClose('accept')} color=\"primary\" autoFocus>\n                    Import\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport JSZip from 'jszip';\nimport {\n    Button,\n    Checkbox,\n    createStyles,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Divider,\n    List,\n    ListItem,\n    ListItemSecondaryAction,\n    ListItemText,\n    makeStyles,\n    Select,\n    Switch,\n    Typography,\n} from '@material-ui/core';\nimport { useAppDispatch, useAppSelector } from '../../../redux';\nimport { RmgStyle } from '../../../constants/constants';\nimport { setCurrentStation } from '../../../redux/param/action';\nimport { test } from '../../../util/export-utils';\nimport { downloadAs, downloadBlobAs } from '../../../util/utils';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        contentWrapper: {\n            display: 'flex',\n            overflow: 'hidden',\n            paddingTop: theme.spacing(1),\n            paddingBottom: theme.spacing(1),\n            paddingLeft: theme.spacing(3),\n            paddingRight: theme.spacing(3),\n            [theme.breakpoints.down('xs')]: {\n                flexDirection: 'column',\n            },\n        },\n        contentCanvas: {\n            flex: 1,\n        },\n        contentControl: {\n            flexGrow: 0,\n            flexShrink: 0,\n            display: 'flex',\n            flexDirection: 'column',\n            minWidth: 250,\n        },\n        contentAction: {\n            display: 'flex',\n            alignSelf: 'end',\n        },\n        contentRoot: {\n            padding: 'unset',\n            '&:first-child': {\n                paddingTop: 'unset',\n            },\n        },\n        contentControlContent: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'space-between',\n        },\n        formControlRoot: {\n            margin: 0,\n        },\n    })\n);\n\ninterface Props {\n    onClose: (action: string) => void;\n    open: boolean;\n    canvas: string;\n}\n\nexport default function PreviewDialog(props: Props) {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const stn_list = useAppSelector(store => store.param.stn_list);\n    const line_name = useAppSelector(store => store.param.line_name);\n    const currentStationIndex = useAppSelector(store => store.param.current_stn_idx);\n    const rmgStyle = useAppSelector(store => store.param.style);\n\n    const [svgEl, setSvgEl] = useState(document.createElement('svg') as Element as SVGSVGElement);\n    const [isLoaded, setIsLoaded] = useState(false);\n\n    const [showBorder, setShowBorder] = useState(false);\n    const [isTransparent, setIsTransparent] = useState(false);\n    const [scale, setScale] = useState(1);\n    const [format, setFormat] = useState('png');\n\n    const [isAccept, setIsAccept] = useState(false);\n    const [isTermsDialogOpen, setIsTermsDialogOpen] = useState(false);\n\n    const handleShowBorder = (_: React.ChangeEvent<HTMLInputElement>, checked: boolean) => {\n        svgEl.querySelector('rect#canvas-border')?.setAttribute('stroke', checked ? 'black' : 'none');\n        setShowBorder(checked);\n    };\n\n    const handleTransparent = (_: React.ChangeEvent<HTMLInputElement>, checked: boolean) => {\n        svgEl.querySelector('rect#canvas-bg')?.setAttribute('fill', checked ? 'none' : 'white');\n        setIsTransparent(checked);\n    };\n\n    const handleScaleChange = (event: React.ChangeEvent<{ name?: string | undefined; value: unknown }>) => {\n        let nextScale = event.target.value as number;\n        svgEl.setAttribute('height', ((Number(svgEl.getAttribute('height')) / scale) * nextScale).toString());\n        setScale(nextScale);\n    };\n\n    const contentEl = React.useRef<HTMLDivElement | null>(null);\n\n    // wait for svg canvas and fonts to be fully loaded\n    useEffect(\n        () => {\n            if (props.canvas === '') {\n                setSvgEl(document.createElement('svg') as Element as SVGSVGElement);\n                setIsLoaded(false);\n                return;\n            }\n\n            cloneSvgNode().then(elem => {\n                setSvgEl(elem);\n                setIsLoaded(true);\n            });\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.canvas]\n    );\n\n    /**\n     * Clone the svg canvas and adjust its properties like heights and border.\n     *\n     * @returns The cloned svg canvas\n     */\n    const cloneSvgNode = async (): Promise<SVGSVGElement> => {\n        let [, thisSVGHeight] = ['--rmg-svg-width', '--rmg-svg-height']\n            .map(\n                key =>\n                    (document.querySelector(`svg#${props.canvas}`) as SVGSVGElement).style\n                        .getPropertyValue(key)\n                        .match(/\\d+/g)![0]\n            )\n            .map(Number);\n\n        // let MAX_WIDTH = Math.min(window.innerWidth, 1412) - 64 - 24 * 2;\n        // let MAX_HEIGHT = window.innerHeight - 64 - 64 - 52 - 8 * 2;\n        // let scaleFactor = Math.min(MAX_WIDTH / thisSVGWidth, MAX_HEIGHT / thisSVGHeight);\n\n        const elem = document.querySelector(`svg#${props.canvas}`)!.cloneNode(true) as SVGSVGElement;\n        // elem.setAttribute('width', (thisSVGWidth * scaleFactor).toString());\n        elem.setAttribute('height', (thisSVGHeight * scale).toString());\n        elem.style.setProperty('all', 'initial');\n\n        ['share', props.canvas]\n            .map(tag =>\n                [\n                    ...(\n                        [...document.querySelectorAll('link')].filter(l => l.id === 'css_' + tag)[0]\n                            ?.sheet as CSSStyleSheet\n                    ).cssRules,\n                ]\n                    .map(rule => rule.cssText)\n                    .join(' ')\n            )\n            .forEach(txt => {\n                let s = document.createElement('style');\n                s.textContent = txt;\n                elem.prepend(s);\n            });\n\n        elem.querySelector('rect#canvas-border')?.setAttribute('stroke', showBorder ? 'black' : 'none');\n        elem.querySelector('rect#canvas-bg')?.setAttribute('fill', isTransparent ? 'none' : 'white');\n\n        if (rmgStyle === RmgStyle.MTR) {\n            try {\n                const { getBase64FontFace } = await import(/* webpackChunkName: \"panelPreviewMTR\" */ './mtr-helper');\n                const uris = await getBase64FontFace(elem);\n                const s = document.createElement('style');\n                s.textContent = uris.join('\\n');\n                elem.prepend(s);\n            } catch (err) {\n                alert('Failed to fonts. Fonts in the exported PNG will be missing.');\n                console.error(err);\n            }\n        }\n\n        return elem;\n    };\n\n    /**\n     * Download svg here.\n     *\n     * @param stn_list_keys Stations that need to be download\n     * @returns Nothing\n     */\n    const downloadSvg = async (stn_list_keys: string[]) => {\n        const zip = new JSZip();\n\n        for (const stnId of stn_list_keys) {\n            // wait for svg elements updated for station A before we dispatch the current station to B.\n            await dispatch(setCurrentStation(stnId));\n\n            const elem = await cloneSvgNode();\n\n            // append svg to the document so the bbox will be loaded correctly\n            // (but not for gzmtr and have no idea why)\n            document.body.appendChild(elem);\n\n            const filename = `rmg.${stnId}.${stn_list[stnId].name[0]}.${stn_list[stnId].name[1]}`.replaceAll(' ', '_');\n            if (format === 'png') {\n                const blob = await test(elem, scale);\n                if (navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome')) {\n                    await new Promise<void>(resolve => {\n                        setTimeout(() => {\n                            console.log('Sleep 1 second for Safari');\n                            resolve();\n                        }, 1000);\n                    });\n                }\n\n                if (stn_list_keys.length > 1) {\n                    // batch download and split base64 for this\n                    // https://stackoverflow.com/questions/31305485/export-resized-image-in-canvas-to-new-jszip-package\n                    zip.file(`${filename}.png`, blob);\n                } else {\n                    downloadBlobAs(`${filename}.png`, blob);\n                }\n            } else if (format === 'svg') {\n                elem.removeAttribute('height');\n                const data = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(elem.outerHTML)));\n\n                if (stn_list_keys.length > 1) {\n                    zip.file(`${filename}.svg`, data.split('base64,')[1], { base64: true });\n                } else {\n                    downloadAs(`${filename}.svg`, 'image/svg+xml', elem.outerHTML);\n                }\n            }\n\n            // don't forget to release it after use\n            document.body.removeChild(elem);\n        }\n\n        // generate the zip for batch download\n        if (stn_list_keys.length > 1) {\n            const zipData = await zip.generateAsync({ type: 'blob' });\n            const filename = `rmg.${line_name[0]}.${line_name[1]}.zip`.replaceAll(' ', '_');\n            downloadBlobAs(filename, zipData);\n        }\n\n        // revert to original station\n        await dispatch(setCurrentStation(currentStationIndex));\n    };\n\n    const handleClose = (action: 'close' | 'downloadCurrentStation' | 'downloadAllStation') => () => {\n        if (action === 'downloadCurrentStation') {\n            const stn_list_keys = [currentStationIndex];\n            downloadSvg(stn_list_keys);\n        } else if (action === 'downloadAllStation') {\n            const stn_list_keys = Object.keys(stn_list).filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            downloadSvg(stn_list_keys);\n        }\n\n        props.onClose('close');\n    };\n\n    return (\n        <Dialog onClose={handleClose('close')} open={props.open} maxWidth={false}>\n            <DialogTitle>{t('file.preview.title')}</DialogTitle>\n            <div className={classes.contentWrapper}>\n                <DialogContent\n                    dangerouslySetInnerHTML={{ __html: svgEl.outerHTML }}\n                    ref={contentEl}\n                    className={classes.contentCanvas}\n                    classes={{ root: classes.contentRoot }}\n                />\n                <div className={classes.contentControl}>\n                    <DialogContent classes={{ root: classes.contentRoot }} className={classes.contentControlContent}>\n                        <List component=\"div\" disablePadding>\n                            <ListItem>\n                                <ListItemText primary={t('file.preview.transparent')} />\n                                <ListItemSecondaryAction>\n                                    <Switch\n                                        color=\"primary\"\n                                        checked={isTransparent}\n                                        onChange={handleTransparent}\n                                        disabled={!isLoaded}\n                                    />\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                            <Divider variant=\"middle\" />\n                            <ListItem>\n                                <ListItemText primary={t('file.preview.border')} />\n                                <ListItemSecondaryAction>\n                                    <Switch\n                                        color=\"primary\"\n                                        checked={showBorder}\n                                        onChange={handleShowBorder}\n                                        disabled={!isLoaded}\n                                    />\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                            <Divider variant=\"middle\" />\n                            <ListItem>\n                                <ListItemText primary={t('file.preview.scale')} />\n                                <ListItemSecondaryAction>\n                                    <Select native value={scale} onChange={handleScaleChange} disabled={!isLoaded}>\n                                        {[\n                                            0.25, 0.33, 0.5, 0.67, 0.75, 0.8, 0.9, 1, 1.1, 1.25, 1.5, 1.75, 2, 2.5, 3,\n                                            4, 5,\n                                        ].map(ratio => (\n                                            <option key={ratio} value={ratio}>\n                                                {(ratio * 100).toFixed(0) + '%'}\n                                            </option>\n                                        ))}\n                                    </Select>\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                            <Divider variant=\"middle\" />\n                            <ListItem>\n                                <ListItemText primary={t('file.preview.format')} />\n                                <ListItemSecondaryAction>\n                                    <Select\n                                        native\n                                        value={format}\n                                        onChange={e => setFormat(e.target.value as string)}\n                                        style={{ width: 65 }}\n                                        disabled={!isLoaded}\n                                    >\n                                        <option value=\"png\">PNG</option>\n                                        <option value=\"svg\">SVG (Web Use)</option>\n                                    </Select>\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                        </List>\n                        <ListItem style={{ padding: 0 }}>\n                            <Checkbox\n                                color=\"primary\"\n                                size=\"small\"\n                                checked={isAccept}\n                                onChange={(_, checked) => setIsAccept(checked)}\n                            />\n                            <Typography variant=\"body2\">\n                                {t('file.preview.terms.accept')}\n                                <Typography\n                                    component=\"a\"\n                                    color=\"primary\"\n                                    variant=\"body2\"\n                                    style={{ cursor: 'pointer' }}\n                                    onClick={() => setIsTermsDialogOpen(true)}\n                                >\n                                    {t('file.preview.terms.tandc')}\n                                </Typography>\n                            </Typography>\n\n                            <TermsDialog open={isTermsDialogOpen} onClose={() => setIsTermsDialogOpen(false)} />\n                        </ListItem>\n                    </DialogContent>\n                </div>\n            </div>\n            <div className={classes.contentAction}>\n                <DialogActions>\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleClose('downloadCurrentStation')}\n                        color=\"primary\"\n                        disabled={!isLoaded || !isAccept}\n                    >\n                        {t('file.preview.downloadCurrentStation')}\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleClose('downloadAllStation')}\n                        color=\"primary\"\n                        disabled={!isLoaded || !isAccept || rmgStyle === RmgStyle.GZMTR}\n                    >\n                        {t('file.preview.downloadAllStations')}\n                    </Button>\n                    <Button variant=\"outlined\" onClick={handleClose('close')} color=\"primary\" autoFocus>\n                        {t('dialog.cancel')}\n                    </Button>\n                </DialogActions>\n            </div>\n        </Dialog>\n    );\n}\n\nconst TermsDialog = (props: { open: boolean; onClose: () => void }) => {\n    const { t } = useTranslation();\n    return useMemo(\n        () => (\n            <Dialog open={props.open} onClose={props.onClose}>\n                <DialogTitle>{t('file.preview.terms.tandc')}</DialogTitle>\n                <DialogContent dividers>\n                    <Typography component=\"p\">\n                        The downloaded image may be modified, published, or used for other purposes, under the following\n                        conditions.\n                    </Typography>\n                    <Typography component=\"ol\">\n                        <Typography component=\"li\">\n                            The layout of the elements on the sign or rail map, is designed by{' '}\n                            <Typography component=\"a\" color=\"primary\" href=\"http://www.gzmtr.com\" target=\"_blank\">\n                                Guangzhou Metro Corporation\n                            </Typography>\n                            ,{' '}\n                            <Typography component=\"a\" color=\"primary\" href=\"http://www.mtr.com.hk\" target=\"_blank\">\n                                MTR Corporation\n                            </Typography>{' '}\n                            or{' '}\n                            <Typography component=\"a\" color=\"primary\" href=\"http://www.shmetro.com\" target=\"_blank\">\n                                Shanghai Shentong Metro Group\n                            </Typography>\n                            , depending on your selection. You shall grant appropriate permit or license from the\n                            relevant company above before using the downloaded image for commercial purposes, if it is\n                            required to do so.\n                        </Typography>\n                        <Typography component=\"li\">\n                            The elements including shapes and lines on the image are drawn by{' '}\n                            <Typography\n                                component=\"a\"\n                                color=\"primary\"\n                                href=\"https://github.com/wongchito\"\n                                target=\"_blank\"\n                            >\n                                Chito Wong\n                            </Typography>{' '}\n                            and{' '}\n                            <Typography\n                                component=\"a\"\n                                color=\"primary\"\n                                href=\"https://github.com/thekingofcity\"\n                                target=\"_blank\"\n                            >\n                                thekingofcity\n                            </Typography>\n                            , based on the design standards or rules of the companies listed above. You may use them for\n                            any purposes, but it is recommended to state the name and the link of software alongside.\n                        </Typography>\n                        <Typography component=\"li\">\n                            The fonts of the Chinese characters in MTR style are provided by{' '}\n                            <Typography\n                                component=\"a\"\n                                color=\"primary\"\n                                href=\"https://github.com/ButTaiwan/genyo-font\"\n                                target=\"_blank\"\n                            >\n                                ButTaiwan\n                            </Typography>{' '}\n                            while all others fonts are rendered from local files. You shall grant appropriate permit or\n                            license from the manufacturers before using the downloaded image for commercial purposes.\n                        </Typography>\n                    </Typography>\n                    <Typography component=\"p\">\n                        We reserve the rights, without notice, to modify, add, or remove these terms.\n                    </Typography>\n                    <Typography component=\"p\">本條款及細則暫只提供英文版，敬請原諒。</Typography>\n                    <Typography component=\"p\" variant=\"body2\">\n                        Last modified: 30 Nov 2021, 18:30 UTC\n                    </Typography>\n                </DialogContent>\n                <DialogActions>\n                    <Button variant=\"outlined\" color=\"primary\" onClick={props.onClose}>\n                        {t('dialog.close')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.open]\n    );\n};\n","import ExportDialog from './dialog';\n\nexport default ExportDialog;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Dialog, DialogContent, DialogTitle, List, ListItem, ListItemText } from '@material-ui/core';\n\nimport PreviewDialog from './preview-diag';\nimport { useAppSelector } from '../../../redux';\nimport { AllCanvas, canvasConfig } from '../../../constants/constants';\n\ninterface Props {\n    onClose: (action: string) => void;\n    open: boolean;\n}\n\nexport default function ExportDialog(props: Props) {\n    const { t } = useTranslation();\n\n    const rmgStyle = useAppSelector(store => store.param.style);\n    const canvasToShow = useAppSelector(store => store.app.canvasToShow);\n\n    const [previewDialogOpened, setPreviewDialogOpened] = React.useState(false);\n    const [canvas, setCanvas] = React.useState('');\n\n    const handleClose = (action: string) => () => {\n        if (action !== 'close') {\n            setPreviewDialogOpened(true);\n            setCanvas(action);\n        }\n        props.onClose('close');\n    };\n\n    const previewDialogClose = (action: string) => {\n        if (action === 'close') {\n            setPreviewDialogOpened(false);\n            setCanvas('');\n        }\n    };\n\n    return (\n        <>\n            <Dialog onClose={handleClose('close')} open={props.open}>\n                <DialogTitle>{t('file.export.title')}</DialogTitle>\n                <DialogContent dividers>\n                    <List>\n                        {(canvasToShow === AllCanvas ? canvasConfig[rmgStyle] : [canvasToShow]).map(c => (\n                            <ListItem button key={c} onClick={handleClose(c)}>\n                                <ListItemText primary={t('file.export.' + c)} />\n                            </ListItem>\n                        ))}\n                    </List>\n                </DialogContent>\n            </Dialog>\n\n            <PreviewDialog open={previewDialogOpened} onClose={previewDialogClose} canvas={canvas} />\n        </>\n    );\n}\n","import React, { useState } from 'react';\nimport { useTranslation, withTranslation } from 'react-i18next';\nimport {\n    Grid,\n    Card,\n    List,\n    ListItem,\n    ListItemIcon,\n    Icon,\n    ListItemText,\n    Divider,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    LinearProgress,\n} from '@material-ui/core';\nimport { getTransText2 } from '../../utils';\nimport UploadListItem from './upload-item';\nimport ExportDialog from './export-diag';\nimport { Link } from 'react-router-dom';\nimport { useAppDispatch, useAppSelector } from '../../redux';\nimport { LanguageCode, RmgStyle } from '../../constants/constants';\nimport { setStyle } from '../../redux/param/action';\n\nconst TemplateDialog = React.lazy(() => import(/* webpackChunkName: \"panelSaveTemplateDialog\" */ './template-diag'));\n\nexport default function PanelSave() {\n    let TranslatedSaveLists = withTranslation()(SaveLists);\n\n    return (\n        <Grid container spacing={3} justifyContent=\"center\" alignItems=\"center\">\n            <Grid item xs={12} sm={8} md={6} lg={4}>\n                <TranslatedSaveLists />\n            </Grid>\n        </Grid>\n    );\n}\n\nconst allLangs = {\n    en: 'English',\n    'zh-Hans': '中文（简体）',\n    'zh-HK': '中文（香港）',\n};\n\nconst SaveLists = () => {\n    const { t, i18n } = useTranslation();\n\n    const rmgStyle = useAppSelector(store => store.param.style);\n    const param = useAppSelector(store => store.param);\n\n    const [isTempDialogOpen, setIsTempDialogOpen] = useState(false);\n    const [isExportDialogOpen, setIsExportDialogOpen] = useState(false);\n    const [isStyleDialogOpen, setIsStyleDialogOpen] = useState(false);\n    const [isLangDialogOpen, setIsLangDialogOpen] = useState(false);\n\n    const saveClick = async () => {\n        let link = document.createElement('a');\n        link.href = 'data:application/json;charset=uft-8,' + encodeURIComponent(JSON.stringify(param));\n        link.download = 'rmg.param.' + new Date().toISOString() + '.json';\n        link.click();\n    };\n\n    const exportDialogClose = (action: string) => {\n        setIsExportDialogOpen(false);\n    };\n\n    const styleDialogClose = (action: 'close' | RmgStyle) => {\n        if (action === 'close' || action === rmgStyle) {\n        } else {\n            // setStyle(action);\n            // setIsStyleDialogOpen(false);\n\n            window.gtag('event', 'set', {\n                event_category: 'style',\n                event_label: action,\n            });\n            // window.location.href = process.env.PUBLIC_URL + '/' + action;\n        }\n        setIsStyleDialogOpen(false);\n\n        // TODO: how about integrity check?\n        // e.g. when user switch from guangzhou mtr to shanghai metro\n        // the info_panel_type will be invaild\n        // do we need to set info_panel_type to default or prompt up a dialog\n    };\n\n    return (\n        <div>\n            <Card>\n                <List component=\"nav\">\n                    <ListItem button onClick={() => setIsTempDialogOpen(true)}>\n                        <ListItemIcon>\n                            <Icon>note_add</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('file.new.button')} />\n                    </ListItem>\n                    <UploadListItem />\n                    <ListItem button onClick={saveClick}>\n                        <ListItemIcon>\n                            <Icon>save</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('file.save')} />\n                    </ListItem>\n                    <ListItem button onClick={() => setIsExportDialogOpen(true)}>\n                        <ListItemIcon>\n                            <Icon>cloud_download</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('file.export.button')} />\n                    </ListItem>\n                </List>\n                <Divider />\n                <List component=\"nav\">\n                    <ListItem button onClick={() => setIsStyleDialogOpen(true)}>\n                        <ListItemIcon>\n                            <Icon>style</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('file.style.button')} secondary={t('file.style.' + rmgStyle)} />\n                    </ListItem>\n                    <ListItem button onClick={() => setIsLangDialogOpen(true)}>\n                        <ListItemIcon>\n                            <Icon>translate</Icon>\n                        </ListItemIcon>\n                        <ListItemText\n                            primary={t('file.lang.button')}\n                            secondary={getTransText2(allLangs, i18n.languages as LanguageCode[])}\n                        />\n                    </ListItem>\n                </List>\n            </Card>\n\n            <React.Suspense fallback={<LinearProgress />}>\n                <TemplateDialog open={isTempDialogOpen} onClose={() => setIsTempDialogOpen(false)} />\n            </React.Suspense>\n\n            <ExportDialog open={isExportDialogOpen} onClose={exportDialogClose} />\n\n            <StyleDialog open={isStyleDialogOpen} onClose={styleDialogClose} />\n            <LangDialog open={isLangDialogOpen} onClose={() => setIsLangDialogOpen(false)} />\n        </div>\n    );\n};\n\ninterface StyleDialogProps {\n    onClose: (style: 'close' | RmgStyle) => void;\n    open: boolean;\n}\n\nfunction StyleDialog(props: StyleDialogProps) {\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const handleClose = (key: RmgStyle) => () => {\n        dispatch(setStyle(key));\n        props.onClose(key);\n    };\n\n    return (\n        <Dialog onClose={() => props.onClose('close')} open={props.open}>\n            <DialogTitle>{t('file.style.title')}</DialogTitle>\n            <DialogContent dividers>\n                <List>\n                    {Object.values(RmgStyle).map(key => (\n                        <Link to={'/' + key} key={key} style={{ textDecoration: 'none', color: 'unset' }}>\n                            <ListItem button onClick={handleClose(key)}>\n                                <ListItemText primary={t('file.style.' + key)} />\n                            </ListItem>\n                        </Link>\n                    ))}\n                </List>\n            </DialogContent>\n        </Dialog>\n    );\n}\n\ninterface LangDialogProps {\n    onClose: () => void;\n    open: boolean;\n}\n\nfunction LangDialog(props: LangDialogProps) {\n    const { t, i18n } = useTranslation();\n\n    const handleClick = (lang: string) => {\n        if (lang === i18n.language) {\n            props.onClose();\n        } else {\n            i18n.changeLanguage(lang).then(t => (document.title = t('title')));\n            // history.pushState({url:window.location.href}, null, '?' + window.urlParams.toString());\n            window.gtag('event', 'set', {\n                event_category: 'language',\n                event_label: lang,\n            });\n            document.documentElement.setAttribute('lang', lang);\n            props.onClose();\n        }\n    };\n\n    return (\n        <Dialog onClose={props.onClose} open={props.open}>\n            <DialogTitle>{t('file.lang.title')}</DialogTitle>\n            <DialogContent dividers>\n                <List>\n                    {(Object.keys(allLangs) as (keyof typeof allLangs)[]).map(key => (\n                        <ListItem button onClick={() => handleClick(key)} key={key}>\n                            <ListItemText primary={allLangs[key]} />\n                        </ListItem>\n                    ))}\n                </List>\n            </DialogContent>\n        </Dialog>\n    );\n}\n","import Panel from './panel';\n\nexport default Panel;\n"],"names":["UploadLi","t","useTranslation","dispatch","useDispatch","canvasToShow","useAppSelector","state","app","React","open","setOpen","importedParam","setImportedParam","ListItem","button","component","htmlFor","ListItemIcon","Icon","ListItemText","primary","type","accept","style","display","id","onChange","event","console","log","target","files","Promise","resolve","reader","FileReader","onloadend","readAsText","then","e","JSON","parse","result","param","ImportDialog","onClose","action","document","getElementById","value","updatedParam","updateParam","window","rmgStorage","writeFile","stringify","canvas","canvasConfig","some","c","AllCanvas","selectCanvas","reRenderApp","error","content","props","Dialog","DialogTitle","DialogContent","dividers","DialogContentText","whiteSpace","Object","keys","length","stn_list","entries","map","x","includes","name","join","trim","replace","DialogActions","Button","onClick","color","autoFocus","useStyles","makeStyles","theme","createStyles","contentWrapper","overflow","paddingTop","spacing","paddingBottom","paddingLeft","paddingRight","breakpoints","down","flexDirection","contentCanvas","flex","contentControl","flexGrow","flexShrink","minWidth","contentAction","alignSelf","contentRoot","padding","contentControlContent","justifyContent","formControlRoot","margin","PreviewDialog","classes","useAppDispatch","store","line_name","currentStationIndex","current_stn_idx","rmgStyle","useState","createElement","svgEl","setSvgEl","isLoaded","setIsLoaded","showBorder","setShowBorder","isTransparent","setIsTransparent","scale","setScale","format","setFormat","isAccept","setIsAccept","isTermsDialogOpen","setIsTermsDialogOpen","contentEl","useEffect","cloneSvgNode","elem","key","querySelector","getPropertyValue","match","Number","thisSVGHeight","cloneNode","setAttribute","toString","setProperty","tag","querySelectorAll","filter","l","sheet","cssRules","rule","cssText","forEach","txt","s","textContent","prepend","RmgStyle","getBase64FontFace","uris","alert","downloadSvg","stn_list_keys","zip","JSZip","stnId","setCurrentStation","body","appendChild","filename","replaceAll","test","blob","navigator","userAgent","setTimeout","file","downloadBlobAs","removeAttribute","data","btoa","unescape","encodeURIComponent","outerHTML","split","base64","downloadAs","removeChild","generateAsync","zipData","handleClose","maxWidth","className","dangerouslySetInnerHTML","__html","ref","root","List","disablePadding","ListItemSecondaryAction","Switch","checked","_","disabled","Divider","variant","Select","native","nextScale","getAttribute","ratio","toFixed","width","Checkbox","size","Typography","cursor","TermsDialog","useMemo","href","previewDialogOpened","setPreviewDialogOpened","setCanvas","TemplateDialog","allLangs","en","SaveLists","i18n","isTempDialogOpen","setIsTempDialogOpen","isExportDialogOpen","setIsExportDialogOpen","isStyleDialogOpen","setIsStyleDialogOpen","isLangDialogOpen","setIsLangDialogOpen","saveClick","link","download","Date","toISOString","click","Card","secondary","getTransText2","languages","fallback","LinearProgress","StyleDialog","gtag","event_category","event_label","LangDialog","setStyle","values","to","textDecoration","lang","language","changeLanguage","title","documentElement","TranslatedSaveLists","withTranslation","Grid","container","alignItems","item","xs","sm","md","lg"],"sourceRoot":""}