{"version":3,"sources":["panels/stations/edit-diag/more-tab.tsx"],"names":["memo","props","rmgStyle","useSelector","store","app","rmgStyleServices","RmgStyle","GZMTR","Services","local","express","SHMetro","direct","rmgStyleFacility","MTR","ServiceLi","stnId","services","includes","FacilityLi","t","useTranslation","useContext","ParamContext","param","dispatch","primary","native","value","stn_list","facility","onChange","e","type","target","Object","values","Facilities","map","f","Set","secondary","row","s","control","checked","has","service","event","serviceId","isChecked","disabled","label","secondaryTypographyProps"],"mappings":"uMAmBeA,0BAAK,SAAiBC,GAA2B,IAAD,EACrDC,EAAWC,uBAAY,SAACC,GAAD,OAAsBA,EAAMC,IAAIH,YACvDI,GAAkD,mBACnDC,IAASC,MAAQ,CAACC,IAASC,MAAOD,IAASE,UADQ,cAEnDJ,IAASK,QAAU,CAACH,IAASC,MAAOD,IAASE,QAASF,IAASI,SAFZ,GAIlDC,EAA+B,CAACP,IAASQ,KAE/C,OACI,8BACI,eAAC,OAAD,WACKb,KAAYI,GACT,cAACU,EAAD,CAAWC,MAAOhB,EAAMgB,MAAOC,SAAUZ,EAAiBJ,KAE7DY,EAAiBK,SAASjB,IAAa,cAACkB,EAAD,CAAYH,MAAOhB,EAAMgB,gBAMjF,IAAMG,EAAa,SAACnB,GAChB,IAAQoB,EAAMC,2BAAND,EACR,EAA4BE,qBAAWC,KAA/BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SACf,OACI,eAAC,WAAD,WACI,cAAC,eAAD,UACI,cAAC,OAAD,sBAEJ,cAAC,eAAD,CAAcC,QAASN,EAAE,wCACzB,cAAC,0BAAD,UACI,cAAC,SAAD,CACIO,QAAM,EACNC,MAAOJ,EAAMK,SAAS7B,EAAMgB,OAAOc,SACnCC,SAAU,SAAAC,GAAC,OACPP,EAAS,CACLQ,KAAM,0BACNjB,MAAOhB,EAAMgB,MACbc,SAAUE,EAAEE,OAAON,SAP/B,SAWKO,OAAOC,OAAOC,KAAYC,KAAI,SAAAC,GAAC,OAC5B,wBAAgBX,MAAOW,EAAvB,SACKnB,EAAE,gCAAwC,KAANmB,EAAW,OAASA,KADhDA,cAU/BxB,EAAY,SAACf,GACf,IAAQoB,EAAMC,2BAAND,EACR,EAA4BE,qBAAWC,KAA/BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SACTR,EAAW,IAAIuB,IAAIhB,EAAMK,SAAS7B,EAAMgB,OAAOC,UAWrD,OACI,eAAC,WAAD,WACI,cAAC,eAAD,UACI,cAAC,OAAD,sBAEJ,cAAC,eAAD,CACIS,QAASN,EAAE,sCACXqB,UACI,cAAC,YAAD,CAAWC,KAAG,EAAd,SACK1C,EAAMiB,SAASqB,KAAI,SAAAK,GAAC,OACjB,cAAC,mBAAD,CACIC,QACI,cAAC,WAAD,CACIC,QAAS5B,EAAS6B,IAAIH,GACtBf,MAAOe,EACPZ,UAxBdgB,EAwBqCJ,EAxBf,SAACK,GACzB,UAAZD,GACJtB,EAAS,CACLQ,KAAM,0BACNjB,MAAOhB,EAAMgB,MACbiC,UAAWF,EACXG,UAAWF,EAAMd,OAAOW,YAmBIM,SAAgB,UAANR,IAGlBS,MAAOhC,EAAE,+BAAiCuB,IACrCA,GA7BZ,IAACI,OAkCVM,yBAAwB,eAAK,YAAqB","file":"static/js/panelStationsMore.a5936b93.chunk.js","sourcesContent":["import React, { memo, useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Checkbox,\n    FormControlLabel,\n    FormGroup,\n    Icon,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    Select,\n} from '@material-ui/core';\nimport { ParamContext } from '../../../context';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../../redux';\nimport { Facilities, RmgStyle, Services } from \"../../../constants/constants\";\n\nexport default memo(function MoreTab(props: { stnId: string }) {\n    const rmgStyle = useSelector((store: RootState) => store.app.rmgStyle);\n    const rmgStyleServices: { [s in RmgStyle]?: Services[] } = {\n        [RmgStyle.GZMTR]: [Services.local, Services.express],\n        [RmgStyle.SHMetro]: [Services.local, Services.express, Services.direct],\n    };\n    const rmgStyleFacility: RmgStyle[] = [RmgStyle.MTR];\n\n    return (\n        <div>\n            <List>\n                {rmgStyle in rmgStyleServices && (\n                    <ServiceLi stnId={props.stnId} services={rmgStyleServices[rmgStyle] as Services[]} />\n                )}\n                {rmgStyleFacility.includes(rmgStyle) && <FacilityLi stnId={props.stnId} />}\n            </List>\n        </div>\n    );\n});\n\nconst FacilityLi = (props: { stnId: string }) => {\n    const { t } = useTranslation();\n    const { param, dispatch } = useContext(ParamContext);\n    return (\n        <ListItem>\n            <ListItemIcon>\n                <Icon>place</Icon>\n            </ListItemIcon>\n            <ListItemText primary={t('stations.edit.more.facility.button')} />\n            <ListItemSecondaryAction>\n                <Select\n                    native\n                    value={param.stn_list[props.stnId].facility}\n                    onChange={e =>\n                        dispatch({\n                            type: 'UPDATE_STATION_FACILITY',\n                            stnId: props.stnId,\n                            facility: e.target.value as Facilities,\n                        })\n                    }\n                >\n                    {Object.values(Facilities).map(f => (\n                        <option key={f} value={f}>\n                            {t('stations.edit.more.facility.' + (f === '' ? 'none' : f))}\n                        </option>\n                    ))}\n                </Select>\n            </ListItemSecondaryAction>\n        </ListItem>\n    );\n};\n\nconst ServiceLi = (props: { stnId: string, services: Services[] }) => {\n    const { t } = useTranslation();\n    const { param, dispatch } = useContext(ParamContext);\n    const services = new Set(param.stn_list[props.stnId].services);\n\n    const handleChange = (service: Services) => (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (service === 'local') return;\n        dispatch({\n            type: 'UPDATE_STATION_SERVICES',\n            stnId: props.stnId,\n            serviceId: service,\n            isChecked: event.target.checked,\n        });\n    };\n    return (\n        <ListItem>\n            <ListItemIcon>\n                <Icon>train</Icon>\n            </ListItemIcon>\n            <ListItemText\n                primary={t('stations.edit.more.services.button')}\n                secondary={\n                    <FormGroup row>\n                        {props.services.map(s => (\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        checked={services.has(s)}\n                                        value={s}\n                                        onChange={handleChange(s)}\n                                        disabled={s === 'local'}\n                                    />\n                                }\n                                label={t('stations.edit.more.services.' + s)}\n                                key={s}\n                            />\n                        ))}\n                    </FormGroup>\n                }\n                secondaryTypographyProps={{ ['component' as any]: 'div' }}\n            />\n        </ListItem>\n    );\n};\n"],"sourceRoot":""}