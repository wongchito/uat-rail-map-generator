{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","svgs/strip/strip-gzmtr.tsx","svgs/station-num-gzmtr.tsx","svgs/runin/info-gzmtr.tsx","svgs/runin/runin-gzmtr.tsx"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","StripGZMTR","props","stripHeight","variant","indicatorLight","React","useMemo","cy","r","fill","rx","ry","x","y","height","width","transform","id","style","isShowLight","isShowPSD","PSD","memo","isInStrip","includes","psdDy","textAnchor","className","fontSize","dy","prevProps","nextProps","StationNumberText","lineNum","stnNum","others","LINE_NUM_MAX_WIDTH","lineNumEl","useRef","useState","bBox","setBBox","useEffect","current","getBBox","lineNumScale","stnNumScale","ref","InfoGZMTR","param","useContext","ParamContext","curStnInfo","stn_list","current_stn_idx","curNameEl","nameBBox","setNameBBox","name","nextStnId","direction","otisTransforms","svgWidth","runin","next","info_panel_type","BigName","curName","curSecName","secondaryName","svg_height","split","line_num","num","nextId","nextIds","forwardRef","map","txt","secName","BigSecName","nameEl","toString","BigStnNum","d","BigNext","nextInfo","nextBBox","setNextBBox","nextNameEl","nextNameZHCount","nameBcrX","BigNextSec","BigNext2","routes","nextNames","nextNameEls","prevBBox","forEach","el","validEnds","stnId","reduce","acc","route","concat","filter","s","slice","Math","max","names","Fragment","j","join","replace","PlatformNum","RunInGZMTR","platform","psd_num","platform_num","cx","OtisFrame","strokeWidth","stroke","y2","x2"],"mappings":"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","file":"static/js/runinGZMTR.d4de6de3.chunk.js","sourcesContent":["import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React from 'react';\n\ninterface Props {\n    variant: PanelTypeGZMTR | PanelTypeShmetro;\n    isShowLight: boolean;\n    isShowPSD: false | string;\n}\n\nconst StripGZMTR = (props: Props) => {\n    const stripHeight = ((variant) => {\n        switch (variant) {\n            case 'gz28':\n            case 'gz2otis':\n            case 'gz6':\n            case 'gzgf':\n                return 60;\n            case 'gz1':\n            case 'gz3':\n                return 40;\n            case 'gz4':\n            case 'gz5':\n            case 'gz1421':\n                return 20;\n            default:\n                return 0;\n        }\n    })(props.variant);\n\n    const indicatorLight = React.useMemo(() => {\n        switch (props.variant) {\n            case 'gz1':\n                return <circle cy={-58} r={16} fill=\"red\" />;\n            case 'gz28':\n            case 'gz2otis':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz3':\n                return <rect x={-15} y={-55} height={30} width={30} fill=\"red\" />;\n            case 'gz6':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"white\" />;\n            case 'gz1421':\n                return <ellipse cy={-38} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz5':\n                return <rect x={-30} y={-70} height={30} width={60} fill=\"orange\" />;\n            case 'gz4':\n                return <rect x={-50} y={-50} height={25} width={100} fill=\"whitesmoke\" />;\n            case 'gzgf':\n                return <rect x={-30} y={-58} height={30} width={60} fill=\"orange\" />;\n            default:\n                return <></>;\n        }\n    }, [props.variant]);\n\n    const stripDy = -20;\n\n    return (\n        <g transform={`translate(0,${props.variant === 'gz4' ? stripDy : 0})`}>\n            <rect\n                id=\"strip_gz\"\n                style={{\n                    ['--height' as any]: `${stripHeight}px`,\n                }}\n            />\n            <g\n                style={{\n                    transform: 'translate(calc(var(--rmg-svg-width) / 2),var(--rmg-svg-height))',\n                }}\n            >\n                {props.isShowLight && indicatorLight}\n            </g>\n            {props.isShowPSD !== false && <PSD {...props} />}\n        </g>\n    );\n};\n\nexport default StripGZMTR;\n\nconst PSD = React.memo(\n    (props: Props) => {\n        /**\n         * Flag of whether PSD number is stick within the strip area. If `true`, should fill with white, otherwise, fill with theme colour.\n         */\n        const isInStrip = ['gz28', 'gz2otis', 'gz6', 'gzgf'].includes(props.variant);\n        const psdDy = ((variant: PanelTypeGZMTR | PanelTypeShmetro) => {\n            switch (variant) {\n                case 'gz1':\n                case 'gz3':\n                    return '82px';\n                case 'gz4':\n                    return '65px';\n                case 'gz5':\n                    return '80px';\n                case 'gz1421':\n                    return '62px';\n                default:\n                    return '58px';\n            }\n        })(props.variant);\n\n        return (\n            <g\n                textAnchor=\"middle\"\n                fill={isInStrip ? '#000' : 'var(--rmg-theme-fg)'}\n                style={{\n                    ['--psd-dy' as any]: psdDy,\n                    transform: 'translate(var(--translate-x), var(--translate-y))',\n                    ['--translate-x' as any]: 'calc(var(--rmg-svg-width) / 2 + 80px)',\n                    ['--translate-y' as any]: 'calc(var(--rmg-svg-height) - var(--psd-dy, 58px))',\n                }}\n            >\n                <rect height={40} width={40} rx={4} x={-20} fill={isInStrip ? '#fff' : 'var(--rmg-theme-colour)'} />\n                <text className=\"rmg-name__en\" fontSize={20} dy={12}>\n                    {props.isShowPSD}\n                </text>\n                <text className=\"rmg-name__zh\" fontSize={12} dy={26}>\n                    屏蔽门\n                </text>\n                <text className=\"rmg-name__en\" fontSize={6.5} dy={36}>\n                    Screen Door\n                </text>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.variant === nextProps.variant && prevProps.isShowPSD === nextProps.isShowPSD\n);\n","import React from 'react';\n\nconst StationNumberText = (props: { lineNum: string; stnNum: string } & React.SVGProps<SVGGElement>) => {\n    const { lineNum, stnNum, ...others } = props;\n\n    const LINE_NUM_MAX_WIDTH = 15.03125;\n\n    const lineNumEl = React.useRef<SVGTextElement | null>(null);\n    const [bBox, setBBox] = React.useState({ width: LINE_NUM_MAX_WIDTH } as DOMRect);\n    React.useEffect(() => setBBox(lineNumEl.current!.getBBox()), [lineNum]);\n\n    const lineNumScale = bBox.width > LINE_NUM_MAX_WIDTH ? LINE_NUM_MAX_WIDTH / bBox.width : 1;\n    const stnNumScale = lineNum.length === 2 ? lineNumScale : 1;\n\n    return (\n        <g textAnchor=\"middle\" fontSize={13.5} {...others}>\n            {React.useMemo(\n                () => (\n                    <>\n                        <g transform={`translate(-9.25,0)scale(${lineNumScale})`}>\n                            <text ref={lineNumEl} className=\"rmg-name__zh\">\n                                {lineNum}\n                            </text>\n                        </g>\n                        <g transform={`translate(9.25,0)scale(${stnNumScale})`}>\n                            <text className=\"rmg-name__zh\">{stnNum}</text>\n                        </g>\n                    </>\n                ),\n                // eslint-disable-next-line react-hooks/exhaustive-deps\n                [bBox.width, lineNum, stnNum]\n            )}\n        </g>\n    );\n};\n\nexport default StationNumberText;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { ParamContext } from '../../context';\nimport StationNumberText from '../station-num-gzmtr';\n\nconst InfoGZMTR = () => {\n    const { param } = React.useContext(ParamContext);\n    const curStnInfo = param.stn_list[param.current_stn_idx];\n\n    const curNameEl = React.useRef<SVGGElement | null>(null);\n    const [nameBBox, setNameBBox] = useState({ width: 0 } as DOMRect);\n    useEffect(\n        () => setNameBBox(curNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [curStnInfo.name[0], curStnInfo.name[1]]\n    );\n\n    const nextStnId = curStnInfo[param.direction === 'l' ? 'parents' : 'children'];\n\n    const otisTransforms = {\n        name: `translate(${((param.direction === 'l' ? 1 : -1) * param.svgWidth.runin) / 4},45)`,\n        next: `translate(${((param.direction === 'l' ? 1 : -1) * param.svgWidth.runin) / 10},45)`,\n    };\n\n    return (\n        <g>\n            <g transform={param.info_panel_type === 'gz2otis' ? otisTransforms.name : ''}>\n                <BigName\n                    ref={curNameEl}\n                    curName={curStnInfo.name}\n                    curSecName={curStnInfo.secondaryName}\n                    style={{\n                        ['--translate-y' as any]: `${\n                            0.5 * param.svg_height -\n                            50 -\n                            (curStnInfo.name[1].split('\\\\').length - 1) * 18 -\n                            (curStnInfo.secondaryName ? 58 / 2 : 0)\n                        }px`,\n                    }}\n                />\n\n                <BigStnNum\n                    lineNum={param.line_num}\n                    stnNum={curStnInfo.num}\n                    style={{\n                        ['--translate-x' as any]: `${(param.svgWidth.runin + nameBBox.width) / 2 + 55}px`,\n                        ['--translate-y' as any]: `${\n                            0.5 * param.svg_height -\n                            30 -\n                            (curStnInfo.name[1].split('\\\\').length - 1) * 18 -\n                            (curStnInfo.secondaryName ? 58 / 2 : 0)\n                        }px`,\n                    }}\n                />\n            </g>\n\n            <g transform={param.info_panel_type === 'gz2otis' ? otisTransforms.next : ''}>\n                {nextStnId.includes('linestart') || nextStnId.includes('lineend') ? (\n                    <></>\n                ) : nextStnId.length === 1 ? (\n                    <BigNext nextId={nextStnId[0]} nameBBox={nameBBox} />\n                ) : (\n                    <BigNext2 nextIds={nextStnId} nameBBox={nameBBox} />\n                )}\n            </g>\n        </g>\n    );\n};\n\nexport default InfoGZMTR;\n\nconst BigName = React.forwardRef(\n    (props: { curName: Name; curSecName: false | Name } & React.SVGProps<SVGGElement>, ref: React.Ref<SVGGElement>) => {\n        const { curName, curSecName, ...others } = props;\n\n        return (\n            <g id=\"big_name\" {...others}>\n                {React.useMemo(\n                    () => (\n                        <g ref={ref}>\n                            <text className=\"rmg-name__zh\" fontSize={90}>\n                                {curName[0]}\n                            </text>\n                            <g fontSize={36} className=\"rmg-name__en\">\n                                {curName[1].split('\\\\').map((txt, i) => (\n                                    <text key={i} dy={70 + i * 36}>\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </g>\n                    ),\n                    // eslint-disable-next-line react-hooks/exhaustive-deps\n                    [curName]\n                )}\n\n                {curSecName && (\n                    <BigSecName\n                        secName={curSecName}\n                        transform={`translate(0,${70 + curName[1].split('\\\\').length * 36})`}\n                    />\n                )}\n            </g>\n        );\n    }\n);\n\nconst BigSecName = (props: { secName: Name } & React.SVGProps<SVGGElement>) => {\n    const { secName, ...others } = props;\n    const nameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as DOMRect);\n    useEffect(\n        () => setBBox(nameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.secName.toString()]\n    );\n\n    return (\n        <g {...others}>\n            <g transform=\"translate(0,4.5)\" fontSize={36}>\n                <text textAnchor=\"end\" x={bBox.x - 3} className=\"rmg-name__zh\">\n                    {'('}\n                </text>\n                <text textAnchor=\"start\" x={bBox.width + bBox.x + 3} className=\"rmg-name__zh\">\n                    {')'}\n                </text>\n            </g>\n            <g ref={nameEl} textAnchor=\"middle\">\n                <text className=\"rmg-name__zh\" fontSize={26}>\n                    {secName[0]}\n                </text>\n                <text dy={22} className=\"rmg-name__en\" fontSize={14}>\n                    {secName[1]}\n                </text>\n            </g>\n        </g>\n    );\n};\n\nconst BigStnNum = (props: { lineNum: string; stnNum: string } & React.SVGProps<SVGGElement>) => {\n    const { lineNum, stnNum, ...others } = props;\n\n    return (\n        <g id=\"big_stn_num\" {...others}>\n            {React.useMemo(\n                () => (\n                    <>\n                        <path\n                            className=\"rmg-stn rmg-stn--future\"\n                            d=\"M 0,12.95 V -12.95 H -12.95 a 12.95,12.95 0 0,0 0,25.9 h 25.9 a 12.95,12.95 0 0,0 0,-25.9 H 0 \"\n                        />\n                        <StationNumberText transform=\"scale(1.4)\" {...{ lineNum, stnNum }} />\n                    </>\n                ),\n                [lineNum, stnNum]\n            )}\n        </g>\n    );\n};\n\nconst BigNext = (props: { nextId: string; nameBBox: DOMRect }) => {\n    const { param } = React.useContext(ParamContext);\n    const nextInfo = param.stn_list[props.nextId];\n    const { name, secondaryName } = nextInfo;\n\n    const [nextBBox, setNextBBox] = useState({ width: 0 } as DOMRect);\n    const nextNameEl = React.useRef<SVGGElement | null>(null);\n    useEffect(\n        () => setNextBBox(nextNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [name.toString()]\n    );\n\n    const nextNameZHCount = param.stn_list[props.nextId].name[0].length;\n    const nameBcrX = (param.svgWidth.runin - props.nameBBox.width) / 2;\n\n    return (\n        <>\n            <g id=\"big_next\">\n                <g\n                    textAnchor=\"middle\"\n                    style={{\n                        ['--translate-x' as any]:\n                            param.direction === 'l'\n                                ? '80px'\n                                : nextNameZHCount <= 2\n                                ? `${param.svgWidth.runin - 45 - nextBBox.width - 70}px`\n                                : `${param.svgWidth.runin - 45 - nextBBox.width - 35 * 1.5}px`,\n                    }}\n                >\n                    <text className=\"rmg-name__zh\" fontSize={35}>\n                        下站\n                    </text>\n                    <text className=\"rmg-name__en\" fontSize={17} dy={30}>\n                        Next\n                    </text>\n                </g>\n                <g\n                    textAnchor=\"start\"\n                    ref={nextNameEl}\n                    style={{\n                        ['--translate-x' as any]:\n                            param.direction === 'l'\n                                ? nextNameZHCount <= 2\n                                    ? `${115 + 35}px`\n                                    : `${115 + 35 / 2}px`\n                                : `${param.svgWidth.runin - 45 - nextBBox.width}px`,\n                    }}\n                >\n                    <text className=\"rmg-name__zh\" fontSize={35}>\n                        {name[0]}\n                    </text>\n                    <g fontSize={17}>\n                        {name[1].split('\\\\').map((txt: string, i: number) => (\n                            <text className=\"rmg-name__en\" dy={30 + i * 17} key={i}>\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n                </g>\n                {secondaryName && (\n                    <g\n                        textAnchor=\"middle\"\n                        style={{\n                            ['--translate-x' as any]:\n                                param.direction === 'l'\n                                    ? nextNameZHCount <= 2\n                                        ? `${115 + 35}px`\n                                        : `${115 + 35 / 2}px`\n                                    : `${param.svgWidth.runin - 45 - nextBBox.width}px`,\n                        }}\n                    >\n                        <BigNextSec\n                            secName={secondaryName}\n                            transform={`translate(${nextBBox.width / 2},${30 + name[1].split('\\\\').length * 17 + 5})`}\n                        />\n                    </g>\n                )}\n            </g>\n            <path\n                id=\"arrow\"\n                d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\"\n                fill=\"black\"\n                style={{\n                    ['--translate-x' as any]:\n                        param.direction === 'l'\n                            ? `${\n                                  (115 + 35 * ((nextNameZHCount <= 2 ? 1 : 0.5) + nextNameZHCount) + nameBcrX) / 2 - 20\n                              }px`\n                            : `${\n                                  (param.svgWidth.runin -\n                                      45 -\n                                      nextBBox.width -\n                                      (nextNameZHCount <= 2 ? 70 + 35 : 35 * 2.5) +\n                                      nameBcrX +\n                                      props.nameBBox.width +\n                                      55 +\n                                      18.5 * 1.4) /\n                                      2 +\n                                  20\n                              }px`,\n                    ['--rotate' as any]: param.direction === 'l' ? '0deg' : '180deg',\n                }}\n            />\n        </>\n    );\n};\n\nconst BigNextSec = (props: { secName: Name } & React.SVGProps<SVGGElement>) => {\n    const { secName, ...others } = props;\n\n    const nameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as DOMRect);\n    useEffect(\n        () => setBBox(nameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.secName.toString()]\n    );\n\n    return (\n        <g {...others}>\n            <g transform=\"translate(0,2.5)\" fontSize={25}>\n                <text textAnchor=\"end\" x={bBox.x - 3} className=\"rmg-name__zh\">\n                    {'('}\n                </text>\n                <text textAnchor=\"start\" x={bBox.width + bBox.x + 3} className=\"rmg-name__zh\">\n                    {')'}\n                </text>\n            </g>\n            <g ref={nameEl}>\n                <text className=\"rmg-name__zh\" fontSize={18}>\n                    {secName[0]}\n                </text>\n                <text className=\"rmg-name__en\" fontSize={10} dy={15}>\n                    {secName[1]}\n                </text>\n            </g>\n        </g>\n    );\n};\n\nconst BigNext2 = (props: { nextIds: string[]; nameBBox: DOMRect }) => {\n    const { param, routes } = React.useContext(ParamContext);\n\n    const nextNames = props.nextIds.map((id) => param.stn_list[id].name);\n    const [nextBBox, setNextBBox] = useState({ width: 0 } as DOMRect);\n    const nextNameEls = useRef<(SVGGElement | null)[]>([]);\n    useEffect(\n        () => {\n            setNextBBox((prevBBox) => ({ ...prevBBox, width: 0 }));\n            nextNameEls.current.forEach((el) => {\n                let nextBBox = el?.getBBox();\n                setNextBBox((prevBBox) => {\n                    if (nextBBox) {\n                        return prevBBox.width > nextBBox.width ? prevBBox : nextBBox;\n                    } else {\n                        return prevBBox;\n                    }\n                });\n            });\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [nextNames.toString()]\n    );\n\n    const validEnds = props.nextIds.map((stnId) =>\n        routes.reduce(\n            (acc, route) =>\n                // filter routes not containing next station's id\n                route.includes(stnId)\n                    ? acc.concat(\n                          route\n                              .filter((s) => !['linestart', 'lineend'].includes(s))\n                              // select first/last station's id\n                              .slice(param.direction === 'l' ? 0 : -1)[0]\n                      )\n                    : acc,\n            [] as string[]\n        )\n    );\n\n    const nextNameZHCount = Math.max(...nextNames.map((names) => names[0].length));\n    const nameBcrX = (param.svgWidth.runin - props.nameBBox.width) / 2;\n\n    return (\n        <>\n            <g id=\"big_next_2\">\n                {nextNames.map((name, i) => {\n                    return (\n                        <React.Fragment key={i}>\n                            <g\n                                textAnchor=\"middle\"\n                                style={{\n                                    ['--translate-x' as any]:\n                                        param.direction === 'l'\n                                            ? '72px'\n                                            : `${param.svgWidth.runin - 45 - nextBBox.width - 41}px`,\n                                }}\n                            >\n                                <text className=\"rmg-name__zh\">下站</text>\n                                <text className=\"rmg-name__en\" y={22}>\n                                    Next\n                                </text>\n                            </g>\n                            <g\n                                ref={(el) => (nextNameEls.current[i] = el)}\n                                textAnchor=\"start\"\n                                style={{\n                                    ['--translate-x' as any]:\n                                        param.direction === 'l'\n                                            ? '113px'\n                                            : `${param.svgWidth.runin - 45 - nextBBox.width}px`,\n                                }}\n                            >\n                                <text className=\"rmg-name__zh\">{name[0]}</text>\n                                {name[1].split('\\\\').map((txt, j) => (\n                                    <text key={j} className=\"rmg-name__en\" y={22 + j * 13}>\n                                        {txt}\n                                    </text>\n                                ))}\n                                <text className=\"rmg-name__zh\" y={-35}>\n                                    {validEnds[i].map((s) => param.stn_list[s].name[0]).join('/') + '方向'}\n                                </text>\n                                <text className=\"rmg-name__en rmg-name__gzmtr--next2-dest\" y={-20}>\n                                    {'Towards ' +\n                                        validEnds[i]\n                                            .map((s) => param.stn_list[s].name[1])\n                                            .join('/')\n                                            .replace('\\\\', ' ')}\n                                </text>\n                            </g>\n                        </React.Fragment>\n                    );\n                })}\n            </g>\n            <path\n                id=\"arrow\"\n                d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\"\n                fill=\"black\"\n                style={{\n                    ['--translate-x' as any]:\n                        param.direction === 'l'\n                            ? `${(99 + 27 * (1 + nextNameZHCount) + nameBcrX) / 2 - 20}px`\n                            : `${\n                                  (param.svgWidth.runin -\n                                      45 -\n                                      nextBBox.width -\n                                      41 -\n                                      27 +\n                                      nameBcrX +\n                                      props.nameBBox.width +\n                                      55 +\n                                      18.5 * 1.4) /\n                                      2 +\n                                  20\n                              }px`,\n                    ['--rotate' as any]: param.direction === 'l' ? '0deg' : '180deg',\n                }}\n            />\n        </>\n    );\n};\n","import * as React from 'react';\n\nimport { ParamContext } from '../../context';\nimport StripGZMTR from '../strip/strip-gzmtr';\nimport InfoGZMTR from './info-gzmtr';\n\nconst RunInGZMTR = () => {\n    const { param } = React.useContext(ParamContext);\n\n    const otisTransforms = {\n        platform: `translate(${param.direction === 'l' ? 50 : -50},45)`,\n    };\n    return (\n        <>\n            <StripGZMTR\n                variant={param.info_panel_type}\n                isShowLight={param.info_panel_type !== 'gz2otis'}\n                isShowPSD={param.info_panel_type !== 'gz2otis' && param.psd_num}\n            />\n\n            <g transform={param.info_panel_type === 'gz2otis' ? otisTransforms.platform : ''}>\n                <PlatformNum\n                    num={param.platform_num}\n                    style={{\n                        ['--translate-x' as any]: `${param.direction === 'l' ? param.svgWidth.runin - 100 : 100}px`,\n                    }}\n                />\n            </g>\n\n            <InfoGZMTR />\n\n            {param.info_panel_type === 'gz2otis' && <OtisFrame />}\n        </>\n    );\n};\n\nexport default RunInGZMTR;\n\nconst PlatformNum = (props: { num: string | false } & React.SVGProps<SVGGElement>) => {\n    const { num, ...others } = props;\n\n    return (\n        <g id=\"platform\" {...others}>\n            {React.useMemo(\n                () => (\n                    <>\n                        <circle cx={0} cy={0} r={30} fill=\"var(--rmg-theme-colour)\" />\n                        <text className=\"rmg-name__en\" fontSize={38} dy={-9.5}>\n                            {num}\n                        </text>\n                        <text className=\"rmg-name__zh\" fontSize={13} dy={10}>\n                            站台\n                        </text>\n                        <text className=\"rmg-name__en\" fontSize={9} dy={21}>\n                            Platform\n                        </text>\n                    </>\n                ),\n                [num]\n            )}\n        </g>\n    );\n};\n\nconst OtisFrame = () => {\n    const { param } = React.useContext(ParamContext);\n    return (\n        <g id=\"otis_frame\" strokeWidth={3} stroke=\"black\">\n            <line y2={param.svg_height} transform={`translate(${param.svgWidth.runin / 2},0)`} />\n            <line x2={param.svgWidth.runin} transform=\"translate(0,90)\" />\n        </g>\n    );\n};\n"],"sourceRoot":""}