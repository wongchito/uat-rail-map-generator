{"version":3,"sources":["svgs/destination/destination-shmetro.tsx"],"names":["memo","DefsSHMetro","InfoSHMetro","id","viewBox","refY","d","fill","useContext","ParamContext","param","routes","validDests","Set","filter","route","includes","current_stn_idx","map","res","stnId","direction","reverse","destNames","stn_list","name","join","replace","terminalEl","useRef","useState","width","terminalBBox","setTerminalBBox","useEffect","current","getBBox","middle","svgWidth","destination","platformX","PLATFORM_WIDTH","transform","svg_height","stroke","strokeWidth","markerEnd","Terminal","ref","platform_num","PlatformNum","line_name","match","LineNameBoxNumber","LineNameBoxText","forwardRef","props","useMemo","textAnchor","className","fontSize","dy","r","dominantBaseline","x","boxX","height","lineNumber","lineNameRes","letterSpacing"],"mappings":"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","file":"static/js/destinationSHMetro.1208fc19.chunk.js","sourcesContent":["import React, { memo, useContext, useMemo, forwardRef, useRef, useState, useEffect } from 'react';\nimport { ParamContext } from '../../context';\n\nexport default memo(function DestinationSHMetro() {\n    return (\n        <>\n            <DefsSHMetro />\n            <InfoSHMetro />\n        </>\n    );\n});\n\nconst DefsSHMetro = memo(() => (\n    <defs>\n        {/* An extension of the line/path. Remember to minus the stroke-width.  */}\n        <marker id=\"slope\" viewBox=\"-1.5 0 3 1.5\" refY={0.5}>\n            <path d=\"M0,0L1,1H-1z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n    </defs>\n));\n\nconst InfoSHMetro = () => {\n    const { param, routes } = useContext(ParamContext);\n\n    // for each left valid destinations, get the name from id\n    const validDests = [\n        ...new Set(\n            routes\n                .filter(route => route.includes(param.current_stn_idx))\n                .map(route => {\n                    let res = route.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n                    return param.direction === 'l' ? res[0] : res.reverse()[0];\n                })\n        ),\n    ];\n    const destNames: Name = [\n        validDests.map(id => param.stn_list[id].name[0]).join('，'),\n        validDests\n            .map(id => param.stn_list[id].name[1])\n            .join(', ')\n            .replace('\\\\', ' '),\n    ];\n\n    const terminalEl = useRef<SVGGElement | null>(null);\n    const [terminalBBox, setTerminalBBox] = useState({ width: 0 } as SVGRect);\n    useEffect(\n        () => setTerminalBBox(terminalEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [...destNames]\n    );\n\n    const [middle, MARGIN, PADDING, LINEBOX_WIDTH, PLATFORM_WIDTH] = [param.svgWidth.destination / 2, 10, 36, 264, 325];\n    // Alignment Priority:\n    // 1. Centre of canvas\n    // 2. Centre of remaining\n    const platformX =\n        middle - MARGIN - PADDING - terminalBBox.width >= PLATFORM_WIDTH / 2 &&\n        middle - MARGIN - PADDING - LINEBOX_WIDTH >= PLATFORM_WIDTH / 2\n            ? middle\n            : param.direction === 'l'\n            ? (param.svgWidth.destination + terminalBBox.width - LINEBOX_WIDTH) / 2\n            : (param.svgWidth.destination - terminalBBox.width + LINEBOX_WIDTH) / 2;\n\n    // the platform screen doors flash light\n    // #20\n    // $('g#station_info_shmetro > rect').attr({ transform: `translate(${this._svgDestWidth / 2},${250 + dh})` })\n\n    return (\n        <g transform={`translate(0,${param.svg_height - 300})`}>\n            <path\n                stroke=\"var(--rmg-theme-colour)\"\n                strokeWidth={12}\n                d={\n                    param.direction === 'l'\n                        ? `M${param.svgWidth.destination - 24},16 H 36`\n                        : `M24,16 H ${param.svgWidth.destination - 36}`\n                }\n                transform=\"translate(0,220)\"\n                markerEnd=\"url(#slope)\"\n            />\n\n            <Terminal ref={terminalEl} destNames={destNames} />\n            {param.platform_num !== false && (\n                <g transform={`translate(${platformX},0)`}>\n                    <PlatformNum />\n                </g>\n            )}\n            {/* <!-- Todo: fix this absolute position --> */}\n            {/* Todo: fix svgWidth.destination*0.8, this has only been tested on 1000 width */}\n\n            {param.line_name[0].match(/^[\\w\\d]+/) ? <LineNameBoxNumber /> : <LineNameBoxText />}\n        </g>\n    );\n};\n\nconst Terminal = forwardRef((props: { destNames: Name }, ref: React.Ref<SVGGElement>) => {\n    const { param } = useContext(ParamContext);\n\n    return (\n        <g ref={ref} transform={`translate(${param.direction === 'l' ? 36 : param.svgWidth.destination - 36},145)`}>\n            {useMemo(\n                () => (\n                    <>\n                        <path\n                            d=\"M60,60L0,0L60-60H100L55-15H160V15H55L100,60z\"\n                            fill=\"black\"\n                            transform={`rotate(${param.direction === 'l' ? 0 : 180})scale(0.8)`}\n                        />\n                        <g\n                            textAnchor={param.direction === 'l' ? 'start' : 'end'}\n                            transform={`translate(${param.direction === 'l' ? 128 + 20 : -128 - 20},15)`}\n                        >\n                            <text className=\"rmg-name__zh\" fontSize={90}>\n                                {'往' + props.destNames[0]}\n                            </text>\n                            <text className=\"rmg-name__en\" fontSize={30} dy={44}>\n                                {'To ' + props.destNames[1]}\n                            </text>\n                        </g>\n                    </>\n                ),\n                // eslint-disable-next-line react-hooks/exhaustive-deps\n                [param.direction, ...props.destNames]\n            )}\n        </g>\n    );\n});\n\nconst PlatformNum = () => {\n    const { param } = useContext(ParamContext);\n\n    // Total width: 325\n    return (\n        <g transform={`translate(${-325 / 2 + 60},130)`}>\n            <circle r={60} fill=\"none\" stroke=\"black\" strokeWidth={2} />\n            <text className=\"rmg-name__en\" dominantBaseline=\"central\" fontSize={120} textAnchor=\"middle\">\n                {param.platform_num}\n            </text>\n            <text className=\"rmg-name__zh\" fontSize={100} dominantBaseline=\"central\" x={65}>\n                站台\n            </text>\n        </g>\n    );\n};\n\nconst LineNameBoxText = () => {\n    const { param } = useContext(ParamContext);\n    const { line_name } = param;\n\n    const boxX = param.direction === 'l' ? param.svgWidth.destination - 36 - 132 : 36 + 132;\n\n    // Total width: 264\n    return useMemo(\n        () => (\n            <g transform={`translate(${boxX},92)`}>\n                <rect fill=\"var(--rmg-theme-colour)\" x={-132} width={264} height={120} />\n                <g textAnchor=\"middle\" transform=\"translate(0,68)\" fill=\"var(--rmg-theme-fg)\">\n                    <text className=\"rmg-name__zh\" fontSize={68}>\n                        {line_name[0]}\n                    </text>\n                    <text className=\"rmg-name__en\" fontSize={30} dy={42}>\n                        {line_name[1]}\n                    </text>\n                </g>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [boxX, ...line_name]\n    );\n};\n\nconst LineNameBoxNumber = () => {\n    const { param } = useContext(ParamContext);\n\n    const [lineNumber, lineNameRes] = param.line_name[0].match(/^[\\w\\d]+|.+/g);\n\n    // Number width: 108\n    // Text width: 136\n    // Gap: 20\n    // Left: 108/2 + 20 + 136 = 210\n    // Right: 108/2 = 54\n    const boxX = param.direction === 'l' ? param.svgWidth.destination - 36 - 210 : 36 + 54;\n\n    // Total width: 264\n    return useMemo(\n        () => (\n            <g transform={`translate(${boxX},92)`}>\n                <rect fill=\"var(--rmg-theme-colour)\" x={-54} width={108} height={120} />\n                <text\n                    className=\"rmg-name__zh\"\n                    fill=\"var(--rmg-theme-fg)\"\n                    fontSize={96}\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    transform=\"translate(0,60)\"\n                    letterSpacing={-5}\n                >\n                    {lineNumber}\n                </text>\n                <g textAnchor=\"start\" transform=\"translate(74,68)\">\n                    <text className=\"rmg-name__zh\" fontSize={68}>\n                        {lineNameRes}\n                    </text>\n                    <text className=\"rmg-name__en\" fontSize={30} dy={42}>\n                        {param.line_name[1]}\n                    </text>\n                </g>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [boxX, ...param.line_name]\n    );\n};\n"],"sourceRoot":""}