{"version":3,"sources":["panels/stations/edit-diag/name-list-items.tsx","panels/stations/edit-diag/interchange-tab.tsx","constants/colours lazy /^/.//.*$/ groupOptions: {} namespace object","panels/colour-diag/theme-items.tsx","panels/colour-diag/dialog.tsx","panels/colour-diag/index.ts"],"names":["useStyles","makeStyles","createStyles","listItemIcon","width","fontSize","textAlign","NameListItems","props","t","useTranslation","classes","React","className","style","variant","label","onChange","onUpdate","value","name","autoFocus","helperText","toString","intChipSetStyles","StationEditInterchangeTab","stnId","dispatch","useDispatch","rmgStyle","useSelector","store","app","theme","param","transfer","stn_list","useState","osiNameDialog0Opened","setOsiNameDialog0Opened","osiNameDialog1Opened","setOsiNameDialog1Opened","addClick","index","newInfo","addInterchange","deleteClick","setIdx","intIdx","removeInterchange","margin","title","onClick","setIndex","onDelete","i","RmgStyle","MTR","SHMetro","includes","Fragment","color","lineHeight","whiteSpace","marginRight","osi_names","join","open","onClose","intChip","borderRadius","height","intChipText","display","intChipTextZH","intChipTextEN","intChipLabel","paddingLeft","paddingRight","intChipDeleteIcon","marginLeft","InterchangeChipSet","intInfos","info","chipSelected","setChipSelected","nameDialogOpened","setNameDialogOpened","intChips","map","intInfo","deleteIcon","backgroundColor","undefined","lineName","key","concat","Array","updateInterchange","OSINameDialog","osiName","dividers","target","newOSIName","val","updateStationOsiName","InterchangeMore","useMemo","primary","native","tick_direc","direction","ShortDirection","left","right","updateStationTickDirection","Object","values","d","edge","_","checked","updateStationPaidArea","paid_area","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","module","exports","cityItem","flexDirection","alignItems","menuItemSpan","padding","button","minWidth","inputColour","position","top","buttonContainer","flexShrink","PalettePanel","i18n","lineList","list","setList","listPromise","default","useEffect","a","data","CityCode","Other","colour","fg","MonoColour","white","useLineList","length","filter","l","newTheme","component","disablePadding","event","slice","select","line","disabled","getTransText2","languages","CustomPanel","hexTemp","setHexTemp","type","rgb","opacity","htmlFor","borderColor","error","match","hex","idx","toUpperCase","CitySelectItem","items","cityList","c","CountryFlag","country","useEmojiStyles","img","codePoints","split","char","codePointAt","LanguageCode","ChineseCN","ChineseSimp","language","navigator","platform","indexOf","src","process","alt","String","fromCodePoint","cp","parseInt","contentWrapper","overflow","paddingTop","spacing","paddingBottom","breakpoints","down","contentLeft","maxWidth","contentControl","flexGrow","paperRoot","listItemPaper","justifyContent","iconRoot","palette","action","active","inputBaseRoot","inputBaseInputZH","inputBaseInputEN","chipWrapper","overflowX","chipRoot","chipLabel","Dialog2","LineNameInput","nameChange","newName","root","input","RecentChipSet","line_name","stationList","allInfos","Set","reduce","acc","JSON","stringify","reverse","chips","x","parse","txt","secondary","secondaryTypographyProps","ColourControl","tabIndex","setTabIndex","tabNav","indicatorColor","textColor","scrollButtons","panel","ColourDialog"],"mappings":"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,KAE1CA,QAAStF,EAASwF,sBAMvC,CAACjG,EAAOjB,EAAGkB,EAAUQ,EAASwF,UAAWxF,EAAS2E,e,mBC9XzD,IAAIrB,EAAM,CACT,cAAe,CACd,GACA,IAED,cAAe,CACd,GACA,GAED,iBAAkB,CACjB,GACA,GAED,YAAa,CACZ,GACA,IAED,eAAgB,CACf,GACA,IAED,aAAc,CACb,GACA,IAED,gBAAiB,CAChB,GACA,IAED,YAAa,CACZ,GACA,IAED,eAAgB,CACf,GACA,IAED,cAAe,CACd,GACA,IAED,iBAAkB,CACjB,GACA,IAED,aAAc,CACb,GACA,GAED,gBAAiB,CAChB,GACA,GAED,cAAe,CACd,GACA,GAED,iBAAkB,CACjB,GACA,GAED,WAAY,CACX,GACA,GAED,cAAe,CACd,GACA,GAED,YAAa,CACZ,GACA,GAED,eAAgB,CACf,GACA,GAED,cAAe,CACd,GACA,GAED,iBAAkB,CACjB,GACA,GAED,aAAc,CACb,GACA,GAED,gBAAiB,CAChB,GACA,GAED,aAAc,CACb,GACA,GAED,gBAAiB,CAChB,GACA,GAED,WAAY,CACX,GACA,GAED,cAAe,CACd,GACA,GAED,cAAe,CACd,GACA,IAED,iBAAkB,CACjB,GACA,IAED,WAAY,CACX,GACA,IAED,cAAe,CACd,GACA,IAED,UAAW,CACV,GACA,IAED,aAAc,CACb,GACA,IAED,WAAY,CACX,GACA,IAED,cAAe,CACd,GACA,IAED,YAAa,CACZ,GACA,IAED,eAAgB,CACf,GACA,IAED,cAAe,CACd,GACA,IAED,iBAAkB,CACjB,GACA,IAED,UAAW,CACV,GACA,IAED,aAAc,CACb,GACA,IAED,SAAU,CACT,GACA,IAED,YAAa,CACZ,GACA,IAED,UAAW,CACV,GACA,IAED,aAAc,CACb,GACA,IAED,UAAW,CACV,GACA,IAED,aAAc,CACb,GACA,IAED,YAAa,CACZ,GACA,IAED,eAAgB,CACf,GACA,IAED,iBAAkB,CACjB,GACA,IAED,oBAAqB,CACpB,GACA,IAED,UAAW,CACV,GACA,IAED,aAAc,CACb,GACA,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","file":"static/js/panelStationsInterchange.eb34a687.chunk.js","sourcesContent":["import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ListItem, ListItemIcon, TextField, makeStyles, createStyles } from '@material-ui/core';\nimport { Name } from '../../../constants/constants';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        listItemIcon: {\n            width: '1em',\n            fontSize: '1.5rem',\n            textAlign: 'center',\n        },\n    })\n);\n\ninterface Props {\n    onUpdate: (index: number) => (event: React.ChangeEvent<HTMLInputElement>) => void;\n    name: Name;\n}\n\nconst NameListItems = (props: Props) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    return React.useMemo(\n        () => (\n            <>\n                <ListItem>\n                    <ListItemIcon>\n                        <span className={classes.listItemIcon}>文</span>\n                    </ListItemIcon>\n                    <TextField\n                        style={{ width: '100%' }}\n                        variant=\"outlined\"\n                        label={t('stations.edit.name.nameZH')}\n                        onChange={props.onUpdate(0)}\n                        value={props.name[0]}\n                        autoFocus\n                    />\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <span className={classes.listItemIcon}>A</span>\n                    </ListItemIcon>\n                    <TextField\n                        style={{ width: '100%' }}\n                        variant=\"outlined\"\n                        label={t('stations.edit.name.nameEN')}\n                        onChange={props.onUpdate(1)}\n                        value={props.name[1]}\n                        helperText={t('stations.edit.name.nameENHelper')}\n                    />\n                </ListItem>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.name?.toString() || '']\n    );\n};\n\nexport default NameListItems;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    Chip,\n    createStyles,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Divider,\n    Icon,\n    IconButton,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    makeStyles,\n    Select,\n    Switch,\n    Tooltip,\n} from '@material-ui/core';\nimport ColourDialog from '../../colour-diag';\nimport NameListItems from './name-list-items';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../../redux';\nimport { InterchangeInfo, MonoColour, Name, RmgStyle, ShortDirection, Theme } from '../../../constants/constants';\nimport {\n    addInterchange,\n    removeInterchange,\n    updateInterchange,\n    updateStationOsiName,\n    updateStationPaidArea,\n    updateStationTickDirection,\n} from '../../../redux/param/action';\n\nconst StationEditInterchangeTab = (props: { stnId: string }) => {\n    const { stnId } = props;\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n\n    const rmgStyle = useSelector((store: RootState) => store.app.rmgStyle);\n    const theme = useSelector((store: RootState) => store.param.theme);\n    const { transfer } = useSelector((store: RootState) => store.param.stn_list[stnId]);\n\n    const [osiNameDialog0Opened, setOsiNameDialog0Opened] = React.useState(false);\n    const [osiNameDialog1Opened, setOsiNameDialog1Opened] = React.useState(false);\n\n    const addClick = (index: number) => {\n        let newInfo: InterchangeInfo = [...theme, '轉綫', 'Line'];\n        dispatch(addInterchange(stnId, index, newInfo));\n    };\n\n    const deleteClick = (setIdx: number, intIdx: number) => {\n        dispatch(removeInterchange(stnId, setIdx, intIdx));\n    };\n\n    return (\n        <List>\n            <ListItem>\n                <ListItemText>\n                    <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.within')}</h3>\n                </ListItemText>\n                <ListItemSecondaryAction>\n                    <Tooltip title={t('stations.edit.interchange.add')} aria-label=\"add\">\n                        <IconButton onClick={() => addClick(0)}>\n                            <Icon>add_circle</Icon>\n                        </IconButton>\n                    </Tooltip>\n                </ListItemSecondaryAction>\n            </ListItem>\n            <ListItem>\n                <InterchangeChipSet stnId={stnId} setIndex={0} onDelete={i => deleteClick(0, i)} />\n            </ListItem>\n\n            {/* Out of station transfer */}\n            {[RmgStyle.MTR, RmgStyle.SHMetro].includes(rmgStyle) && (\n                <>\n                    <Divider />\n                    <ListItem>\n                        <ListItemText>\n                            <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.osi')}</h3>\n                        </ListItemText>\n                        <ListItemSecondaryAction>\n                            {[RmgStyle.MTR].includes(rmgStyle) && (\n                                <React.Fragment>\n                                    <Button\n                                        variant=\"outlined\"\n                                        color=\"primary\"\n                                        style={{ lineHeight: '1rem', whiteSpace: 'pre', marginRight: 5 }}\n                                        onClick={() => setOsiNameDialog0Opened(true)}\n                                    >\n                                        {transfer.osi_names[0]\n                                            ? transfer.osi_names[0].join('\\r\\n')\n                                            : '車站名\\r\\nStn Name'}\n                                    </Button>\n                                    <OSINameDialog\n                                        open={osiNameDialog0Opened}\n                                        stnId={stnId}\n                                        setIndex={0}\n                                        onClose={() => setOsiNameDialog0Opened(false)}\n                                    />\n                                </React.Fragment>\n                            )}\n                            <Tooltip title={t('stations.edit.interchange.add')} aria-label=\"add\">\n                                <IconButton onClick={() => addClick(1)}>\n                                    <Icon>add_circle</Icon>\n                                </IconButton>\n                            </Tooltip>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                    <ListItem>\n                        <InterchangeChipSet stnId={stnId} setIndex={1} onDelete={i => deleteClick(1, i)} />\n                    </ListItem>\n                </>\n            )}\n\n            {/* Out of system transfer */}\n            {[RmgStyle.SHMetro].includes(rmgStyle || '') && (\n                <>\n                    <Divider />\n                    <ListItem>\n                        <ListItemText>\n                            <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.osysi')}</h3>\n                        </ListItemText>\n                        <ListItemSecondaryAction>\n                            {[RmgStyle.MTR].includes(rmgStyle) && (\n                                <React.Fragment>\n                                    <Button\n                                        variant=\"outlined\"\n                                        color=\"primary\"\n                                        style={{ lineHeight: '1rem', whiteSpace: 'pre', marginRight: 5 }}\n                                        onClick={() => setOsiNameDialog1Opened(true)}\n                                    >\n                                        {transfer.osi_names[1]\n                                            ? transfer.osi_names[1].join('\\r\\n')\n                                            : '車站名\\r\\nStn Name'}\n                                    </Button>\n                                    <OSINameDialog\n                                        open={osiNameDialog1Opened}\n                                        stnId={stnId}\n                                        setIndex={1}\n                                        onClose={() => setOsiNameDialog1Opened(false)}\n                                    />\n                                </React.Fragment>\n                            )}\n                            <Tooltip title={t('stations.edit.interchange.add')} aria-label=\"add\">\n                                <IconButton onClick={() => addClick(2)}>\n                                    <Icon>add_circle</Icon>\n                                </IconButton>\n                            </Tooltip>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                    <ListItem>\n                        <InterchangeChipSet stnId={stnId} setIndex={2} onDelete={i => deleteClick(2, i)} />\n                    </ListItem>\n                </>\n            )}\n            {[RmgStyle.MTR, RmgStyle.SHMetro].includes(rmgStyle) && (\n                <ListItem>\n                    <span>{t('stations.edit.interchange.note')}</span>\n                </ListItem>\n            )}\n            {/* MTR more settings */ rmgStyle === RmgStyle.MTR && <InterchangeMore stnId={props.stnId} />}\n        </List>\n    );\n};\n\nexport default StationEditInterchangeTab;\n\nconst intChipSetStyles = makeStyles(() =>\n    createStyles({\n        intChip: {\n            borderRadius: 4.5,\n            height: 40,\n            lineHeight: '1rem',\n            margin: 2,\n        },\n        intChipText: {\n            display: 'block',\n            textAlign: 'center' as 'center',\n        },\n        intChipTextZH: {\n            fontSize: 18,\n            lineHeight: '1.2rem',\n        },\n        intChipTextEN: {\n            fontSize: '.75rem',\n            lineHeight: '.9rem',\n            whiteSpace: 'pre-wrap' as 'pre-wrap',\n        },\n        intChipLabel: {\n            paddingLeft: 6,\n            paddingRight: 6,\n        },\n        intChipDeleteIcon: {\n            marginLeft: -3,\n        },\n    })\n);\n\ninterface InterchangeChipSetProps {\n    stnId: string;\n    setIndex: number;\n    onDelete: (i: number) => void;\n}\n\nconst InterchangeChipSet = (props: InterchangeChipSetProps) => {\n    const { stnId, setIndex, onDelete } = props;\n    const classes = intChipSetStyles();\n    const dispatch = useDispatch();\n\n    const intInfos = useSelector((store: RootState) => store.param.stn_list[stnId].transfer.info[setIndex]);\n\n    const [chipSelected, setChipSelected] = React.useState(-1);\n    const [nameDialogOpened, setNameDialogOpened] = React.useState(false);\n\n    const handleClick = (index: number) => {\n        setChipSelected(index);\n        setNameDialogOpened(true);\n    };\n\n    const nameDialogUpdate = (key: string, value: any) => {\n        if (key === 'theme') {\n            const newInfo = (value as string[]).concat(Array(2)) as InterchangeInfo;\n            dispatch(updateInterchange(stnId, setIndex, chipSelected, newInfo));\n        }\n        if (key === 'name') {\n            const newInfo = Array(4).concat(value) as InterchangeInfo;\n            dispatch(updateInterchange(stnId, setIndex, chipSelected, newInfo));\n        }\n    };\n\n    const intChips = intInfos?.map((intInfo, i) => {\n        let label = (\n            <span style={{ color: intInfo[3] }}>\n                <span className={`${classes.intChipText} ${classes.intChipTextZH}`}>{intInfo[4]}</span>\n                <span className={`${classes.intChipText} ${classes.intChipTextEN}`}>{intInfo[5]}</span>\n            </span>\n        );\n        return (\n            <Chip\n                key={i}\n                label={label}\n                className={classes.intChip}\n                classes={{\n                    label: classes.intChipLabel,\n                    deleteIcon: classes.intChipDeleteIcon,\n                }}\n                style={{ backgroundColor: intInfo[2] }}\n                onDelete={() => onDelete(i)}\n                onClick={() => handleClick(i)}\n            />\n        );\n    });\n\n    return (\n        <div>\n            {intChips}\n\n            <ColourDialog\n                open={nameDialogOpened}\n                theme={\n                    intInfos?.[chipSelected] === undefined\n                        ? ([] as any as Theme)\n                        : [\n                              intInfos[chipSelected][0],\n                              intInfos[chipSelected][1],\n                              intInfos[chipSelected][2],\n                              intInfos[chipSelected][3] as MonoColour,\n                          ]\n                }\n                lineName={\n                    intInfos?.[chipSelected] === undefined\n                        ? ['', '']\n                        : [intInfos[chipSelected][4], intInfos[chipSelected][5]]\n                }\n                onUpdate={nameDialogUpdate}\n                onClose={() => setNameDialogOpened(false)}\n            />\n        </div>\n    );\n};\n\ninterface OSINameDialogProps {\n    open: boolean;\n    stnId: string;\n    setIndex: number;\n    onClose: () => void;\n}\n\nconst OSINameDialog = (props: OSINameDialogProps) => {\n    const { open, stnId, setIndex, onClose } = props;\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n\n    const osiName = useSelector((store: RootState) => store.param.stn_list[stnId].transfer.osi_names[setIndex]) || [\n        '車站名',\n        'Stn Name',\n    ];\n\n    const handleUpdate =\n        (index: number) =>\n        ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\n            let newOSIName = osiName.map((val, i) => (i === index ? value : val)) as Name;\n            dispatch(updateStationOsiName(stnId, setIndex, newOSIName));\n        };\n\n    return (\n        <Dialog open={open} onClose={onClose}>\n            <DialogTitle>{t('stations.edit.interchange.osiName')}</DialogTitle>\n            <DialogContent dividers>\n                <List>\n                    <NameListItems onUpdate={handleUpdate} name={osiName} />\n                </List>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose} color=\"primary\" autoFocus>\n                    {t('dialog.done')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nconst InterchangeMore = (props: { stnId: string }) => {\n    const { stnId } = props;\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n\n    const { transfer } = useSelector((store: RootState) => store.param.stn_list[stnId]);\n\n    return React.useMemo(() => {\n        const tickDirecChange = ({ target: { value } }: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n            let direction = value;\n            if (direction === ShortDirection.left || direction === ShortDirection.right) {\n                dispatch(updateStationTickDirection(stnId, direction as ShortDirection));\n            }\n        };\n\n        return (\n            <>\n                <Divider />\n                <ListItem>\n                    <ListItemText>\n                        <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.settings')}</h3>\n                    </ListItemText>\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>format_textdirection_l_to_r</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('stations.edit.interchange.tickDirec.label')} />\n                    <ListItemSecondaryAction>\n                        <Select native value={transfer.tick_direc} onChange={tickDirecChange}>\n                            {Object.values(ShortDirection).map(d => (\n                                <option key={d} value={d}>\n                                    {t('stations.edit.interchange.tickDirec.' + d)}\n                                </option>\n                            ))}\n                        </Select>\n                    </ListItemSecondaryAction>\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>attach_money</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('stations.edit.interchange.paidArea')} />\n                    <ListItemSecondaryAction>\n                        <Switch\n                            color=\"primary\"\n                            edge=\"end\"\n                            onChange={(_, checked) => {\n                                dispatch(updateStationPaidArea(stnId, checked));\n                            }}\n                            checked={transfer.paid_area}\n                        />\n                    </ListItemSecondaryAction>\n                </ListItem>\n            </>\n        );\n    }, [stnId, t, dispatch, transfer.paid_area, transfer.tick_direc]);\n};\n","var map = {\n\t\"./README.md\": [\n\t\t82,\n\t\t73\n\t],\n\t\"./barcelona\": [\n\t\t38,\n\t\t1\n\t],\n\t\"./barcelona.ts\": [\n\t\t38,\n\t\t1\n\t],\n\t\"./beijing\": [\n\t\t39,\n\t\t12\n\t],\n\t\"./beijing.ts\": [\n\t\t39,\n\t\t12\n\t],\n\t\"./changsha\": [\n\t\t40,\n\t\t23\n\t],\n\t\"./changsha.ts\": [\n\t\t40,\n\t\t23\n\t],\n\t\"./chengdu\": [\n\t\t41,\n\t\t34\n\t],\n\t\"./chengdu.ts\": [\n\t\t41,\n\t\t34\n\t],\n\t\"./chongqing\": [\n\t\t42,\n\t\t36\n\t],\n\t\"./chongqing.ts\": [\n\t\t42,\n\t\t36\n\t],\n\t\"./dongguan\": [\n\t\t43,\n\t\t2\n\t],\n\t\"./dongguan.ts\": [\n\t\t43,\n\t\t2\n\t],\n\t\"./edinburgh\": [\n\t\t44,\n\t\t3\n\t],\n\t\"./edinburgh.ts\": [\n\t\t44,\n\t\t3\n\t],\n\t\"./foshan\": [\n\t\t45,\n\t\t4\n\t],\n\t\"./foshan.ts\": [\n\t\t45,\n\t\t4\n\t],\n\t\"./glasgow\": [\n\t\t46,\n\t\t5\n\t],\n\t\"./glasgow.ts\": [\n\t\t46,\n\t\t5\n\t],\n\t\"./guangzhou\": [\n\t\t47,\n\t\t6\n\t],\n\t\"./guangzhou.ts\": [\n\t\t47,\n\t\t6\n\t],\n\t\"./hangzhou\": [\n\t\t48,\n\t\t7\n\t],\n\t\"./hangzhou.ts\": [\n\t\t48,\n\t\t7\n\t],\n\t\"./hongkong\": [\n\t\t49,\n\t\t8\n\t],\n\t\"./hongkong.ts\": [\n\t\t49,\n\t\t8\n\t],\n\t\"./kansai\": [\n\t\t50,\n\t\t9\n\t],\n\t\"./kansai.ts\": [\n\t\t50,\n\t\t9\n\t],\n\t\"./kaohsiung\": [\n\t\t51,\n\t\t10\n\t],\n\t\"./kaohsiung.ts\": [\n\t\t51,\n\t\t10\n\t],\n\t\"./london\": [\n\t\t52,\n\t\t11\n\t],\n\t\"./london.ts\": [\n\t\t52,\n\t\t11\n\t],\n\t\"./macao\": [\n\t\t53,\n\t\t13\n\t],\n\t\"./macao.ts\": [\n\t\t53,\n\t\t13\n\t],\n\t\"./madrid\": [\n\t\t54,\n\t\t14\n\t],\n\t\"./madrid.ts\": [\n\t\t54,\n\t\t14\n\t],\n\t\"./nanjing\": [\n\t\t55,\n\t\t15\n\t],\n\t\"./nanjing.ts\": [\n\t\t55,\n\t\t15\n\t],\n\t\"./newtaipei\": [\n\t\t56,\n\t\t16\n\t],\n\t\"./newtaipei.ts\": [\n\t\t56,\n\t\t16\n\t],\n\t\"./osaka\": [\n\t\t57,\n\t\t17\n\t],\n\t\"./osaka.ts\": [\n\t\t57,\n\t\t17\n\t],\n\t\"./oslo\": [\n\t\t58,\n\t\t18\n\t],\n\t\"./oslo.ts\": [\n\t\t58,\n\t\t18\n\t],\n\t\"./other\": [\n\t\t59,\n\t\t19\n\t],\n\t\"./other.ts\": [\n\t\t59,\n\t\t19\n\t],\n\t\"./paris\": [\n\t\t60,\n\t\t20\n\t],\n\t\"./paris.ts\": [\n\t\t60,\n\t\t20\n\t],\n\t\"./qingdao\": [\n\t\t61,\n\t\t21\n\t],\n\t\"./qingdao.ts\": [\n\t\t61,\n\t\t21\n\t],\n\t\"./sanfrancisco\": [\n\t\t62,\n\t\t22\n\t],\n\t\"./sanfrancisco.ts\": [\n\t\t62,\n\t\t22\n\t],\n\t\"./seoul\": [\n\t\t63,\n\t\t24\n\t],\n\t\"./seoul.ts\": [\n\t\t63,\n\t\t24\n\t],\n\t\"./shanghai\": [\n\t\t64,\n\t\t25\n\t],\n\t\"./shanghai.ts\": [\n\t\t64,\n\t\t25\n\t],\n\t\"./shenzhen\": [\n\t\t65,\n\t\t26\n\t],\n\t\"./shenzhen.ts\": [\n\t\t65,\n\t\t26\n\t],\n\t\"./singapore\": [\n\t\t66,\n\t\t27\n\t],\n\t\"./singapore.ts\": [\n\t\t66,\n\t\t27\n\t],\n\t\"./stockholm\": [\n\t\t67,\n\t\t28\n\t],\n\t\"./stockholm.ts\": [\n\t\t67,\n\t\t28\n\t],\n\t\"./taipei\": [\n\t\t68,\n\t\t29\n\t],\n\t\"./taipei.ts\": [\n\t\t68,\n\t\t29\n\t],\n\t\"./tianjin\": [\n\t\t69,\n\t\t30\n\t],\n\t\"./tianjin.ts\": [\n\t\t69,\n\t\t30\n\t],\n\t\"./tokyo\": [\n\t\t70,\n\t\t31\n\t],\n\t\"./tokyo.ts\": [\n\t\t70,\n\t\t31\n\t],\n\t\"./toronto\": [\n\t\t71,\n\t\t32\n\t],\n\t\"./toronto.ts\": [\n\t\t71,\n\t\t32\n\t],\n\t\"./tyneandwear\": [\n\t\t72,\n\t\t33\n\t],\n\t\"./tyneandwear.ts\": [\n\t\t72,\n\t\t33\n\t],\n\t\"./xian\": [\n\t\t73,\n\t\t35\n\t],\n\t\"./xian.ts\": [\n\t\t73,\n\t\t35\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 78;\nmodule.exports = webpackAsyncContext;","import React, { useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    createStyles,\n    Divider,\n    List,\n    ListItem,\n    ListItemText,\n    makeStyles,\n    MenuItem,\n    Select,\n    TextField,\n    Tooltip,\n} from '@material-ui/core';\nimport { getTransText2 } from '../../utils';\nimport { CityCode, cityList } from '../../constants/city-config';\nimport { ColourHex, LanguageCode, MonoColour, PaletteEntry, Theme } from '../../constants/constants';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        cityItem: {\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n        },\n        menuItemSpan: {\n            padding: '0 .3rem',\n        },\n        button: {\n            borderRadius: '50%',\n            height: 24,\n            width: 24,\n            minWidth: 0,\n            marginRight: 8,\n            // border: 'solid',\n            padding: 0,\n        },\n        inputColour: {\n            position: 'absolute',\n            width: 0,\n            height: 0,\n            left: 27,\n            top: 32,\n        },\n        buttonContainer: {\n            display: 'flex',\n            flexShrink: 1,\n        },\n    })\n);\n\nconst useLineList = (theme: Theme) => {\n    const [list, setList] = React.useState([] as PaletteEntry[]);\n\n    const listPromise = theme[0]\n        ? import(/* webpackChunkName: \"colours\" */ `../../constants/colours/${theme[0]}`).then(\n              module => module.default as PaletteEntry[]\n          )\n        : Promise.resolve([] as PaletteEntry[]);\n\n    useEffect(\n        () => {\n            if (typeof theme[0] === 'undefined') {\n                return;\n            }\n            (async () => {\n                const data = await listPromise;\n                setList(\n                    theme[0] === CityCode.Other\n                        ? [{ ...data[0], colour: theme[2], fg: theme[3] || MonoColour.white }]\n                        : data\n                );\n            })();\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [theme.toString()]\n    );\n\n    return list;\n};\n\ninterface ColourDialogProps {\n    theme: Theme;\n    onUpdate: (key: string, value: any) => void;\n}\n\nexport const PalettePanel = (props: ColourDialogProps) => {\n    const { t, i18n } = useTranslation();\n    const classes = useStyles();\n\n    const cityChange = (event: React.ChangeEvent<HTMLInputElement>) =>\n        props.onUpdate('theme', [event.target.value, ...props.theme.slice(1)]);\n\n    // Hook for fetching line list of current city\n    const lineList = useLineList(props.theme);\n\n    // Hook for updating props.theme when lineList changed\n    useEffect(\n        () => {\n            if (lineList.length === 0) return; // initialising, ignore\n            if (lineList.filter(l => l.id === props.theme[1]).length) return; // current city, ignore\n            let { id, colour, fg } = lineList[0];\n            let newTheme = [props.theme[0], id, colour, fg || MonoColour.white];\n            props.onUpdate('theme', newTheme);\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [lineList]\n    );\n\n    const lineChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let line = event.target.value;\n        let { colour, fg } = lineList.filter(l => l.id === line)[0];\n        let newTheme = [props.theme[0], line, colour, fg || MonoColour.white];\n        props.onUpdate('theme', newTheme);\n    };\n\n    return (\n        <List component=\"div\" disablePadding>\n            <CitySelectItem value={props.theme[0]} onChange={cityChange} />\n            <Divider variant=\"middle\" />\n            <ListItem>\n                <ListItemText primary={t('colour.line')} />\n                <TextField\n                    select\n                    style={{ width: 166 }}\n                    onChange={lineChange}\n                    value={props.theme[1]}\n                    disabled={props.theme[0] === 'other'}\n                >\n                    {lineList.map(l => (\n                        <MenuItem key={l.id} value={l.id}>\n                            <span\n                                className={classes.menuItemSpan}\n                                style={{\n                                    backgroundColor: l.colour,\n                                    color: l.fg || MonoColour.white,\n                                }}\n                            >\n                                {getTransText2(l.name, i18n.languages as LanguageCode[])}\n                            </span>\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </ListItem>\n        </List>\n    );\n};\n\nexport const CustomPanel = (props: ColourDialogProps) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const [hexTemp, setHexTemp] = useState(props.theme[2]);\n\n    useEffect(\n        () => setHexTemp(props.theme[2]),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.theme[2]]\n    );\n\n    const colourChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let rgb = event.target.value;\n        // setHexTemp(rgb);\n        props.onUpdate('theme', [CityCode.Other, 'other', rgb, props.theme[3]]);\n    };\n\n    const hexChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let hex = event.target.value;\n        if (hex.match(/^#[0-9a-fA-F]{0,6}$/) === null) return;\n        setHexTemp(hex as ColourHex);\n\n        if (props.theme[0] !== 'other') {\n            if (hex.match(/^#[0-9a-fA-f]{6}$/) !== null) {\n                // if hex valid, modify theme city and props.hex\n                let newTheme = [CityCode.Other, 'other', hex, props.theme[3]];\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (along with selection)\n                // then line will be updated by hook\n            } else {\n                // if hex not valid, modify theme city only\n                let newTheme = [CityCode.Other, 'other', ...props.theme.slice(2)];\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (along with selection)\n                // then line will be updated by hook\n            }\n        } else {\n            if (hex.match(/^#[0-9a-fA-F]{6}$/) !== null) {\n                // if hex valid, modify props.hex\n                let newTheme = props.theme.map((val, idx) => (idx === 2 ? hex : val));\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (actually only hex is changed)\n            } else {\n                // if hex not valid, do nothing\n            }\n        }\n    };\n\n    const fgChange = (event: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n        let newTheme = [CityCode.Other, 'other', props.theme[2], event.target.value];\n        props.onUpdate('theme', newTheme);\n    };\n\n    return (\n        <List component=\"div\" disablePadding>\n            <ListItem>\n                <ListItemText primary={t('colour.colour')} />\n                <div className={classes.buttonContainer}>\n                    <input\n                        type=\"color\"\n                        id=\"input-color\"\n                        value={props.theme[2]}\n                        onChange={colourChange}\n                        className={classes.inputColour}\n                        style={{ opacity: 0 }}\n                    />\n                    <label htmlFor=\"input-color\">\n                        <Tooltip title={t('colour.tooltip')} aria-label=\"colour picker\">\n                            <Button\n                                className={classes.button}\n                                style={{\n                                    backgroundColor: props.theme[2],\n                                    borderColor: props.theme[3] || MonoColour.white,\n                                }}\n                                variant=\"contained\"\n                                component=\"span\"\n                            >\n                                {' '}\n                            </Button>\n                        </Tooltip>\n                    </label>\n                </div>\n                <TextField\n                    error={!hexTemp?.match(/^#[0-9a-fA-F]{6}$/g)}\n                    style={{ width: 85 }}\n                    onChange={hexChange}\n                    value={hexTemp?.toUpperCase()}\n                />\n            </ListItem>\n            <Divider variant=\"middle\" />\n            <ListItem>\n                <ListItemText primary={t('colour.fg')} />\n                <Select\n                    native\n                    style={{ width: 85 }}\n                    label={t('colour.fg')}\n                    onChange={fgChange}\n                    value={props.theme[3] || MonoColour.white}\n                >\n                    <option value=\"#fff\">{t('colour.fgWhite')}</option>\n                    <option value=\"#000\">{t('colour.fgBlack')}</option>\n                </Select>\n            </ListItem>\n        </List>\n    );\n};\n\nconst CitySelectItem = (props: { value: string; onChange: (event: React.ChangeEvent<HTMLInputElement>) => void }) => {\n    const { t, i18n } = useTranslation();\n    const classes = useStyles();\n\n    const items = useMemo(\n        () =>\n            cityList.map(c => (\n                <MenuItem key={c.id} value={c.id}>\n                    <span className={classes.cityItem}>\n                        <CountryFlag code={c.country} />\n                        <span>{getTransText2(c.name, i18n.languages as LanguageCode[])}</span>\n                    </span>\n                </MenuItem>\n            )),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n    return (\n        <ListItem>\n            <ListItemText primary={t('colour.city')} />\n            <TextField select style={{ width: 166 }} value={props.value} onChange={props.onChange}>\n                {items}\n            </TextField>\n        </ListItem>\n    );\n};\n\nconst useEmojiStyles = makeStyles(() =>\n    createStyles({\n        img: {\n            height: 20,\n            marginRight: '0.2rem',\n        },\n    })\n);\n\n/**\n * Convert ISO 3166 alpha-2 country code (followed by BS 6879 UK subdivision code, if applicable) to flag Emoji. For Windows platform, an `img` element with image source from OpenMoji is returned.\n */\nfunction CountryFlag(props: { code: string }) {\n    const { i18n } = useTranslation();\n    const classes = useEmojiStyles();\n\n    let codePoints = [] as string[];\n\n    if (props.code.length === 2) {\n        codePoints = props.code\n            .toUpperCase()\n            .split('')\n            .map(char => ((char.codePointAt(0) || 0) + 127397).toString(16).toUpperCase());\n    } else {\n        codePoints = ['1F3F4'].concat(\n            props.code\n                .toUpperCase()\n                .split('')\n                .map(char => ((char.codePointAt(0) || 0) + 917536).toString(16).toUpperCase()),\n            'E007F'\n        );\n    }\n\n    // special case for simplified Chinese\n    if (\n        [LanguageCode.ChineseCN, LanguageCode.ChineseSimp].includes(i18n.language as LanguageCode) &&\n        props.code === 'TW'\n    )\n        codePoints = ['1F3F4'];\n\n    return navigator.platform.indexOf('Win32') !== -1 || navigator.platform.indexOf('Win64') !== -1 ? (\n        <img\n            src={process.env.PUBLIC_URL + `/images/flags/${codePoints.join('-')}.svg`}\n            className={classes.img}\n            alt={`Flag of ${props.code}`}\n        />\n    ) : (\n        // <img src={process.env.PUBLIC_URL + `/images/flags/${codePoints.join('-')}.svg`} className={classes.img} />\n        <span>{String.fromCodePoint(...codePoints.map(cp => parseInt(cp, 16)))}</span>\n    );\n}\n","import React, { useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n    Button,\n    Chip,\n    createStyles,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Divider,\n    Icon,\n    InputBase,\n    List,\n    ListItem,\n    ListItemText,\n    makeStyles,\n    Paper,\n    Tab,\n    Tabs,\n} from '@material-ui/core';\nimport { CustomPanel, PalettePanel } from './theme-items';\nimport { InterchangeInfo, MonoColour, Name, Theme } from '../../constants/constants';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../redux';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        contentWrapper: {\n            display: 'flex',\n            overflow: 'hidden',\n            paddingTop: theme.spacing(1),\n            paddingBottom: theme.spacing(1),\n            paddingLeft: theme.spacing(3),\n            paddingRight: theme.spacing(3),\n            [theme.breakpoints.down('xs')]: {\n                flexDirection: 'column',\n            },\n        },\n        contentLeft: {\n            maxWidth: 280,\n        },\n        contentControl: {\n            flexGrow: 0,\n            flexShrink: 0,\n            display: 'flex',\n            flexDirection: 'column',\n            width: 270,\n        },\n\n        paperRoot: {\n            maxWidth: 250,\n        },\n        listItemPaper: {\n            justifyContent: 'center',\n        },\n        iconRoot: {\n            position: 'absolute',\n            color: theme.palette.action.active,\n        },\n        inputBaseRoot: {\n            display: 'block',\n        },\n        inputBaseInputZH: {\n            textAlign: 'center',\n            fontSize: 36,\n            padding: 0,\n            paddingTop: 6,\n            height: 45,\n        },\n        inputBaseInputEN: {\n            textAlign: 'center',\n            fontSize: 18,\n            padding: 0,\n            paddingBottom: 6,\n            height: 'auto',\n        },\n\n        chipWrapper: {\n            overflowX: 'auto',\n            display: 'flex',\n        },\n        chipRoot: {\n            borderRadius: 4.5,\n            height: 32,\n            lineHeight: '1rem',\n            margin: 2,\n        },\n        chipLabel: {\n            padding: '0 6px',\n            '& > span': {\n                display: 'block',\n                textAlign: 'center',\n            },\n            '& > span:first-child': {\n                fontSize: '1rem',\n            },\n            '& > span:last-child': {\n                lineHeight: '0.8rem',\n            },\n        },\n    })\n);\n\ninterface Props {\n    open: boolean;\n    theme: Theme;\n    lineName: Name;\n    onUpdate: (key: string, value: any) => void;\n    onClose: () => void;\n}\n\nconst Dialog2 = (props: Props) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    return (\n        <Dialog open={props.open} onClose={props.onClose}>\n            <DialogTitle>{t('colour.title')}</DialogTitle>\n            <DialogContent className={classes.contentWrapper}>\n                <List component=\"div\" disablePadding className={classes.contentLeft}>\n                    <LineNameInput theme={props.theme} lineName={props.lineName} onUpdate={props.onUpdate} />\n                    <Divider />\n                    <RecentChipSet onUpdate={props.onUpdate} />\n                </List>\n                <div className={classes.contentControl}>\n                    <ColourControl theme={props.theme} onUpdate={props.onUpdate} />\n                </div>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose} color=\"primary\">\n                    {t('dialog.done')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default Dialog2;\n\nconst LineNameInput = (props: { lineName: Name; theme: Theme; onUpdate: Props['onUpdate'] }) => {\n    const classes = useStyles();\n\n    const nameChange = (value: string, index: number) => {\n        let newName = props.lineName.map((val, idx) => (idx === index ? value : val));\n        props.onUpdate('name', newName);\n    };\n\n    return (\n        <ListItem style={{ justifyContent: 'center' }}>\n            <Paper className={classes.paperRoot} style={{ backgroundColor: props.theme[2] }}>\n                <Icon className={classes.iconRoot}>edit</Icon>\n                <InputBase\n                    value={props.lineName[0]}\n                    classes={{\n                        root: classes.inputBaseRoot,\n                        input: classes.inputBaseInputZH,\n                    }}\n                    style={{ color: props.theme[3] || MonoColour.white }}\n                    onChange={e => nameChange(e.target.value, 0)}\n                    autoFocus\n                />\n                <InputBase\n                    value={props.lineName[1]}\n                    classes={{\n                        root: classes.inputBaseRoot,\n                        input: classes.inputBaseInputEN,\n                    }}\n                    style={{ color: props.theme[3] || MonoColour.white }}\n                    onChange={e => nameChange(e.target.value, 1)}\n                />\n            </Paper>\n        </ListItem>\n    );\n};\n\nconst RecentChipSet = (props: { onUpdate: Props['onUpdate'] }) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const theme = useSelector((store: RootState) => store.param.theme);\n    const lineName = useSelector((store: RootState) => store.param.line_name);\n    const stationList = useSelector((store: RootState) => store.param.stn_list);\n\n    const allInfos = useMemo(\n        () =>\n            new Set(\n                Object.values(stationList)\n                    .reduce(\n                        (acc, { transfer }) => {\n                            const { info } = transfer;\n                            return acc.concat(...info);\n                        },\n                        [[...theme, ...lineName]]\n                    )\n                    .map(val => JSON.stringify(val))\n                    .reverse()\n            ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n\n    const chips = useMemo(\n        () =>\n            [...allInfos].map((x, i) => {\n                const info: InterchangeInfo = JSON.parse(x);\n                const label = info.slice(4).map((txt, i) => (\n                    <span key={i} style={{ color: info[3] }}>\n                        {txt}\n                    </span>\n                ));\n\n                return (\n                    <Chip\n                        key={i}\n                        onClick={() => {\n                            props.onUpdate('theme', info.slice(0, 4));\n                            props.onUpdate('name', info.slice(4));\n                        }}\n                        style={{ backgroundColor: info[2] }}\n                        className={classes.chipRoot}\n                        classes={{ label: classes.chipLabel }}\n                        {...{ label }}\n                    />\n                );\n            }),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n\n    return (\n        <ListItem>\n            <ListItemText\n                primary={t('colour.recent')}\n                secondary={chips}\n                secondaryTypographyProps={{ component: 'div' }}\n                classes={{ secondary: classes.chipWrapper }}\n            />\n        </ListItem>\n    );\n};\n\nconst ColourControl = (props: { theme: Theme; onUpdate: Props['onUpdate'] }) => {\n    const { t } = useTranslation();\n    const [tabIndex, setTabIndex] = useState(props.theme[0] === 'other' ? 1 : 0);\n\n    const tabNav = (\n        <Tabs\n            value={tabIndex}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            onChange={(_, val) => setTabIndex(val)}\n            variant=\"fullWidth\"\n            scrollButtons=\"off\"\n        >\n            <Tab label={t('colour.palette')} style={{ minWidth: 'unset' }} />\n            <Tab label={t('colour.custom')} style={{ minWidth: 'unset' }} />\n        </Tabs>\n    );\n\n    const panel = (idx => {\n        switch (idx) {\n            case 0:\n                return <PalettePanel {...props} />;\n            case 1:\n                return <CustomPanel {...props} />;\n            default:\n                return <></>;\n        }\n    })(tabIndex);\n\n    return (\n        <>\n            {tabNav}\n            {panel}\n        </>\n    );\n};\n","import ColourDialog from './dialog';\n\nexport default ColourDialog;\n"],"sourceRoot":""}