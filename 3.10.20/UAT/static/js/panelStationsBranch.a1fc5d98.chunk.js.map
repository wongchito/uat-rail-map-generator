{"version":3,"sources":["panels/stations/edit-diag/branch-tab.tsx"],"names":["useStyles","makeStyles","createStyles","select","width","StationEditBranchTab","props","stnId","t","useTranslation","style","margin","BranchSelectSet","direction","Direction","left","right","rmgStyle","useAppSelector","store","param","branchEntry","stn_list","branch","React","useMemo","BranchTypeItem","BranchFirstItem","RmgStyle","SHMetro","BranchPosItem","classes","dispatch","useAppDispatch","handleChange","branchType","target","value","updateStationBranchType","primary","native","onChange","className","disabled","length","BranchStyle","through","nonThrough","stnList","stnInfo","neighbours","parents","children","branchFirst","branchEndFirst","branchEndId","indexOf","branchesArg","first","updateStationBranchFirstStation","transform","map","id","formatStnName","toString","branchPos","flipStationBranchPosition","p"],"mappings":"4UAuBMA,EAAYC,aAAW,kBACzBC,YAAa,CACTC,OAAQ,CACJC,MAAO,UAKJ,SAASC,EAAqBC,GACzC,IAAQC,EAAUD,EAAVC,MACAC,EAAMC,cAAND,EAER,OACI,eAAC,IAAD,WACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,oBAAIE,MAAO,CAAEC,OAAQ,GAArB,SAA2BH,EAAE,mCAGrC,cAACI,EAAD,CAAiBL,MAAOA,EAAOM,UAAWC,IAAUC,OACpD,cAAC,IAAD,IACA,cAAC,IAAD,UACI,cAAC,IAAD,UACI,oBAAIL,MAAO,CAAEC,OAAQ,GAArB,SAA2BH,EAAE,oCAGrC,cAACI,EAAD,CAAiBL,MAAOA,EAAOM,UAAWC,IAAUE,WAUhE,IAAMJ,EAAkB,SAACN,GACrB,IAAQC,EAAqBD,EAArBC,MAAOM,EAAcP,EAAdO,UACTI,EAAWC,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMV,SAC/CW,EAAcH,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAME,SAASf,GAAOgB,OAAOV,MAE/E,OAAOW,IAAMC,SACT,kBACI,qCACI,cAACC,EAAD,eAAoBpB,IACnBe,EAAY,IACT,qCACI,cAACM,EAAD,eAAqBrB,IACpBW,IAAaW,IAASC,SAAW,cAACC,EAAD,eAAmBxB,YAMrE,CAACC,EAAOM,EAAWQ,EAAY,MASjCK,EAAiB,SAACpB,GACpB,IAAQC,EAAqBD,EAArBC,MAAOM,EAAcP,EAAdO,UACPL,EAAMC,cAAND,EACFuB,EAAU/B,IACVgC,EAAWC,cAEXZ,EAAcH,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAME,SAASf,GAAOgB,OAAOV,MAEzEqB,EAAe,SAAC,GAAiF,IAC/FC,EAD8F,EAA9EC,OAAUC,MAEX,OAAfF,GAGOA,IAAed,EAAY,IAIlCW,EAASM,aAAwB/B,EAAOM,EAAWsB,KAI3D,OAAOX,IAAMC,SACT,kBACI,eAAC,IAAD,WACI,cAAC,IAAD,UACI,cAAC,IAAD,2BAEJ,cAAC,IAAD,CAAcc,QAAS/B,EAAE,qCACzB,eAAC,IAAD,CAAQgC,QAAM,EAACC,SAAUP,EAAcG,MAAOhB,EAAY,IAAM,KAAMqB,UAAWX,EAAQ5B,OAAzF,UACI,wBAAQkC,MAAM,KAAKM,SAAiC,IAAvBtB,EAAYuB,OAAzC,SACKpC,EAAE,kCAEP,wBAAQ6B,MAAOQ,IAAYC,QAASH,SAAiC,IAAvBtB,EAAYuB,OAA1D,SACKpC,EAAE,uCAEP,wBAAQ6B,MAAOQ,IAAYE,WAAYJ,SAAiC,IAAvBtB,EAAYuB,OAA7D,SACKpC,EAAE,kDAMnB,CAACD,EAAOc,EAAY,MAItBM,EAAkB,SAACrB,GACrB,IAAQC,EAAqBD,EAArBC,MAAOM,EAAcP,EAAdO,UACPL,EAAMC,cAAND,EACFuB,EAAU/B,IACVgC,EAAWC,cAEXhB,EAAWC,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMV,SAC/CsC,EAAU9B,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAME,YAC9C2B,EAAUD,EAAQzC,GAClBc,EAAc4B,EAAQ1B,OAAOV,GAC7BqC,EAAarC,IAAcC,IAAUC,KAAOkC,EAAQE,QAAUF,EAAQG,SAEtElB,EAAe,SAAC,GAAiF,IAC/FmB,EAD8F,EAA9EjB,OAAUC,MAE9B,GAAIhB,EAAY,KAAOgC,EAAvB,CAII,IACIC,EADAC,EAAcF,EAElB,GAAIxC,IAAcC,IAAUE,MAAO,CAC/B,KAA+C,IAAxCgC,EAAQO,GAAaJ,QAAQP,QAChCW,EAAcP,EAAQO,GAAaH,SAAS,GAEhDE,EAAiBN,EAAQO,GAAaJ,QAAQD,EAAWM,QAAQH,QAC9D,CACH,KAAgD,IAAzCL,EAAQO,GAAaH,SAASR,QACjCW,EAAcP,EAAQO,GAAaJ,QAAQ,GAE/CG,EAAiBN,EAAQO,GAAaH,SAASF,EAAWM,QAAQH,IAEtE,IAAMI,EAAgG,CAClG,CAAElD,QAAOM,YAAW6C,MAAOL,GAC3B,CACI9C,MAAOgD,EACP1C,UAAWA,IAAcC,IAAUC,KAAOD,IAAUE,MAAQF,IAAUC,KACtE2C,MAAOJ,IAGftB,EAAS2B,aAAgCF,MAIjD,OAAOjC,IAAMC,SACT,kBACI,eAAC,IAAD,WACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAMf,MAAO,CAAEkD,UAAW/C,IAAcC,IAAUC,KAAO,YAAc,YAAvE,qBAEJ,cAAC,IAAD,CAAcwB,QAAS/B,EAAE,gCACzB,cAAC,IAAD,CACIgC,QAAM,EACNC,SAAUP,EACVG,MAAOhB,EAAY,IAAM6B,EAAW,GACpCR,UAAWX,EAAQ5B,OAJvB,SAMK+C,EAAWW,KAAI,SAAAC,GAAE,OACd,wBAAiBzB,MAAOyB,EAAxB,SACKC,YAAcf,EAAQc,GAAK7C,IADnB6C,aAQ7B,CAACvD,EAAOc,EAAY,GAAI6B,EAAWc,cAIrClC,EAAgB,SAACxB,GACnB,IAAQC,EAAqBD,EAArBC,MAAOM,EAAcP,EAAdO,UACPL,EAAMC,cAAND,EACFuB,EAAU/B,IACVgC,EAAWC,cAEXe,EAAU9B,aAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAME,YAC9C2B,EAAUD,EAAQzC,GAClBc,EAAc4B,EAAQ1B,OAAOV,GAC7BqC,EAAarC,IAAcC,IAAUC,KAAOkC,EAAQE,QAAUF,EAAQG,SAEtElB,EAAe,SAAC,GAAiF,IAC/F+B,EAA6B,UADiE,EAA9E7B,OAAUC,MACa,EAAI,EAC/C,GAAIa,EAAWM,QAAQnC,EAAY,MAAQ4C,EAA3C,CAII,IAAIV,EAAclC,EAAY,GAC9B,GAAIR,IAAcC,IAAUE,MAAO,CAC/B,KAA+C,IAAxCgC,EAAQO,GAAaJ,QAAQP,QAChCW,EAAcP,EAAQO,GAAaH,SAAS,GAEhDpB,EAASkC,YAA0BX,EAAahD,QAC7C,CACH,KAAgD,IAAzCyC,EAAQO,GAAaH,SAASR,QACjCW,EAAcP,EAAQO,GAAaJ,QAAQ,GAE/CnB,EAASkC,YAA0B3D,EAAOgD,OAKtD,OAAO/B,IAAMC,SACT,kBACI,eAAC,IAAD,WACI,cAAC,IAAD,UACI,cAAC,IAAD,0BAEJ,cAAC,IAAD,CAAcc,QAAS/B,EAAE,oCACzB,cAAC,IAAD,CACIgC,QAAM,EACNC,SAAUP,EACVG,MAA8C,IAAvCa,EAAWM,QAAQnC,EAAY,IAAY,QAAU,QAC5DqB,UAAWX,EAAQ5B,OAJvB,SAMK,CAAC,QAAS,SAAS0D,KAAI,SAAAM,GAAC,OACrB,wBAAgB9B,MAAO8B,EAAvB,SACK3D,EAAE,4BAA8B2D,IADxBA,aAQ7B,CAAC5D,EAAOc,EAAY,GAAI6B,EAAWc","file":"static/js/panelStationsBranch.a1fc5d98.chunk.js","sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    createStyles,\n    Divider,\n    Icon,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    makeStyles,\n    Select,\n} from '@material-ui/core';\nimport { formatStnName } from '../../../utils';\nimport { useAppDispatch, useAppSelector } from '../../../redux';\nimport { BranchStyle, Direction, RmgStyle } from '../../../constants/constants';\nimport {\n    flipStationBranchPosition,\n    updateStationBranchFirstStation,\n    UpdateStationBranchFirstStationArgType,\n    updateStationBranchType,\n} from '../../../redux/param/action';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        select: {\n            width: 166,\n        },\n    })\n);\n\nexport default function StationEditBranchTab(props: { stnId: string }) {\n    const { stnId } = props;\n    const { t } = useTranslation();\n\n    return (\n        <List>\n            <ListItem>\n                <ListItemText>\n                    <h3 style={{ margin: 0 }}>{t('stations.edit.branch.left')}</h3>\n                </ListItemText>\n            </ListItem>\n            <BranchSelectSet stnId={stnId} direction={Direction.left} />\n            <Divider />\n            <ListItem>\n                <ListItemText>\n                    <h3 style={{ margin: 0 }}>{t('stations.edit.branch.right')}</h3>\n                </ListItemText>\n            </ListItem>\n            <BranchSelectSet stnId={stnId} direction={Direction.right} />\n        </List>\n    );\n}\n\ninterface BranchSelectSetProps {\n    stnId: string;\n    direction: Direction;\n}\n\nconst BranchSelectSet = (props: BranchSelectSetProps) => {\n    const { stnId, direction } = props;\n    const rmgStyle = useAppSelector(store => store.param.style);\n    const branchEntry = useAppSelector(store => store.param.stn_list[stnId].branch[direction]);\n\n    return React.useMemo(\n        () => (\n            <>\n                <BranchTypeItem {...props} />\n                {branchEntry[0] && (\n                    <>\n                        <BranchFirstItem {...props} />\n                        {rmgStyle !== RmgStyle.SHMetro && <BranchPosItem {...props} />}\n                    </>\n                )}\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [stnId, direction, branchEntry[0]]\n    );\n};\n\ninterface ItemProps {\n    stnId: string;\n    direction: Direction;\n}\n\nconst BranchTypeItem = (props: ItemProps) => {\n    const { stnId, direction } = props;\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const branchEntry = useAppSelector(store => store.param.stn_list[stnId].branch[direction]);\n\n    const handleChange = ({ target: { value } }: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n        let branchType = value as 'na' | BranchStyle;\n        if (branchType === 'na') {\n            // no changes\n            return;\n        } else if (branchType === branchEntry[0]) {\n            // no changes\n            return;\n        } else {\n            dispatch(updateStationBranchType(stnId, direction, branchType));\n        }\n    };\n\n    return React.useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>merge_type</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('stations.edit.branch.type.title')} />\n                <Select native onChange={handleChange} value={branchEntry[0] || 'na'} className={classes.select}>\n                    <option value=\"na\" disabled={branchEntry.length !== 0}>\n                        {t('stations.edit.branch.type.na')}\n                    </option>\n                    <option value={BranchStyle.through} disabled={branchEntry.length === 0}>\n                        {t('stations.edit.branch.type.through')}\n                    </option>\n                    <option value={BranchStyle.nonThrough} disabled={branchEntry.length === 0}>\n                        {t('stations.edit.branch.type.nonThrough')}\n                    </option>\n                </Select>\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [stnId, branchEntry[0]]\n    );\n};\n\nconst BranchFirstItem = (props: ItemProps) => {\n    const { stnId, direction } = props;\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const rmgStyle = useAppSelector(store => store.param.style);\n    const stnList = useAppSelector(store => store.param.stn_list);\n    const stnInfo = stnList[stnId];\n    const branchEntry = stnInfo.branch[direction];\n    const neighbours = direction === Direction.left ? stnInfo.parents : stnInfo.children;\n\n    const handleChange = ({ target: { value } }: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n        let branchFirst = value as string;\n        if (branchEntry[1] === branchFirst) {\n            // no changes\n            return;\n        } else {\n            let branchEndId = branchFirst;\n            let branchEndFirst: string;\n            if (direction === Direction.right) {\n                while (stnList[branchEndId].parents.length === 1) {\n                    branchEndId = stnList[branchEndId].children[0];\n                }\n                branchEndFirst = stnList[branchEndId].parents[neighbours.indexOf(branchFirst)];\n            } else {\n                while (stnList[branchEndId].children.length === 1) {\n                    branchEndId = stnList[branchEndId].parents[0];\n                }\n                branchEndFirst = stnList[branchEndId].children[neighbours.indexOf(branchFirst)];\n            }\n            const branchesArg: [UpdateStationBranchFirstStationArgType, UpdateStationBranchFirstStationArgType] = [\n                { stnId, direction, first: branchFirst },\n                {\n                    stnId: branchEndId,\n                    direction: direction === Direction.left ? Direction.right : Direction.left,\n                    first: branchEndFirst,\n                },\n            ];\n            dispatch(updateStationBranchFirstStation(branchesArg));\n        }\n    };\n\n    return React.useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon style={{ transform: direction === Direction.left ? 'scale(-1)' : 'scale(1)' }}>share</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('stations.edit.branch.first')} />\n                <Select\n                    native\n                    onChange={handleChange}\n                    value={branchEntry[1] || neighbours[0]}\n                    className={classes.select}\n                >\n                    {neighbours.map(id => (\n                        <option key={id} value={id}>\n                            {formatStnName(stnList[id], rmgStyle)}\n                        </option>\n                    ))}\n                </Select>\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [stnId, branchEntry[1], neighbours.toString()]\n    );\n};\n\nconst BranchPosItem = (props: ItemProps) => {\n    const { stnId, direction } = props;\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const stnList = useAppSelector(store => store.param.stn_list);\n    const stnInfo = stnList[stnId];\n    const branchEntry = stnInfo.branch[direction] as [BranchStyle, string]; // mount only if branchEntry[0] is not undefined\n    const neighbours = direction === Direction.left ? stnInfo.parents : stnInfo.children;\n\n    const handleChange = ({ target: { value } }: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n        let branchPos: 0 | 1 = value === 'lower' ? 1 : 0;\n        if (neighbours.indexOf(branchEntry[1]) === branchPos) {\n            // no changes\n            return;\n        } else {\n            let branchEndId = branchEntry[1];\n            if (direction === Direction.right) {\n                while (stnList[branchEndId].parents.length === 1) {\n                    branchEndId = stnList[branchEndId].children[0];\n                }\n                dispatch(flipStationBranchPosition(branchEndId, stnId));\n            } else {\n                while (stnList[branchEndId].children.length === 1) {\n                    branchEndId = stnList[branchEndId].parents[0];\n                }\n                dispatch(flipStationBranchPosition(stnId, branchEndId));\n            }\n        }\n    };\n\n    return React.useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>swap_vert</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('stations.edit.branch.pos.title')} />\n                <Select\n                    native\n                    onChange={handleChange}\n                    value={neighbours.indexOf(branchEntry[1]) === 1 ? 'lower' : 'upper'}\n                    className={classes.select}\n                >\n                    {['upper', 'lower'].map(p => (\n                        <option key={p} value={p}>\n                            {t('stations.edit.branch.pos.' + p)}\n                        </option>\n                    ))}\n                </Select>\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [stnId, branchEntry[1], neighbours.toString()]\n    );\n};\n"],"sourceRoot":""}