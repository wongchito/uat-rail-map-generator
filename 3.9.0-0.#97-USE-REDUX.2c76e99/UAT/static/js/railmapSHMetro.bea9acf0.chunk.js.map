{"version":3,"sources":["svgs/railmap/main/station/station-shmetro.tsx","svgs/railmap/main/main-shmetro.tsx","svgs/railmap/railmap-shmetro.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","svgs/railmap/methods/share.ts"],"names":["StationSHMetro","props","param","useContext","ParamContext","stnInfo","stn_list","stnId","branchNameDX","branch","left","right","length","name","split","direction","stationIconStyle","stationIconColor","info_panel_type","services","fill","stnState","transfer","info","reduce","acc","cur","stroke","xlinkHref","transform","infos","StationNameGElement","nameENLn","stnNameEl","useRef","React","useState","width","bBox","setBBox","useEffect","current","getBBox","x","sum","x1","x2","strokeWidth","intInfos","concat","textAnchor","StationName","ref","stnName","osiInfos","forwardRef","others","useMemo","className","fontSize","map","txt","i","dy","IntBoxGroup","dx","isLineNumber","Boolean","match","isMaglev","el","IntBoxMaglev","IntBoxNumber","IntBoxLetter","memo","prevProps","nextProps","toString","dominantBaseline","textCount","height","y","OSIText","lineNames","join","MainSHMetro","routes","branches","deps","adjMat","adjacencyList","criticalPath","criticalPathMethod","realCP","nodes","slice","xShares","console","log","Object","keys","getXShareMTR","JSON","stringify","lineXs","svgWidth","railmap","padding","xs","len","yShares","includes","ys","branch_spacing","stnStates","getStnState","current_stn_idx","servicesLevel","values","stationInfo","flat","indexOf","bool","filter","s","linePaths","drawLine","paths","stns","_linePath","path","id","svg_height","Line","servicePath","pass","j","d","markerStart","undefined","markerEnd","strokeLinejoin","main","stnIds","type","servicesMax","prevY","prevX","e","servicesDelta","local","express","direct","servicesPassDelta","forEach","hasOwnProperty","xb","xm","ym","Math","abs","h","StationGroup","ServicesElements","service","labelX","dx_hint","serviceLevel","y1","y2","DirectionElements","RailMapSHMetro","DefsSHMetro","r","viewBox","refY","refX","filterUnits","slope","intercept","_objectWithoutProperties","source","excluded","key","target","sourceKeys","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","stnList","leftW","rightW","children","a","c","from","to","allLengths","criticalPaths","child","cp","push","unshift","maxLength","max","branchOfStn","partSource","partSink","leftOpenJaw","lens","currentId","Set","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","namePoss","leftWideFactor","rightWideFactor","pathWeight","Infinity","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","parents","stnPred","res","getYShare","realXs","realYs","prevId","stnDX","stnExtraH","stnSpareH","warn","replace","stations","lineMainStns","linePassStns"],"mappings":"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","file":"static/js/railmapSHMetro.bea9acf0.chunk.js","sourcesContent":["import React, { useContext, useRef, memo } from 'react';\nimport { ParamContext } from '../../../../context';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n}\n\nconst StationSHMetro = (props: Props) => {\n    const { param } = useContext(ParamContext);\n    const stnInfo = param.stn_list[props.stnId];\n\n    // shift station name if the line bifurcate here\n    const branchNameDX =\n        ([...stnInfo.branch.left, ...stnInfo.branch.right].length ? 8 + 12 * stnInfo.name[1].split('\\\\').length : 0) *\n        (param.direction === 'l' ? -1 : 1);\n\n    let stationIconStyle = '';\n    let stationIconColor: {[pos: string]: string} = {};\n    if (param.info_panel_type === 'sh2020') {\n        if (stnInfo.services.length === 3) stationIconStyle = 'stn_sh_2020_direct';\n        else if (stnInfo.services.length === 2) stationIconStyle = 'stn_sh_2020_express';\n        else stationIconStyle = 'stn_sh_2020';\n        stationIconColor.fill = props.stnState === -1 ? 'gray' : 'var(--rmg-theme-colour)';\n    } else {\n        // param.info_panel_type === 'sh' or others (from other styles)\n        if (stnInfo.services.length === 3) stationIconStyle = 'direct_sh';\n        else if (stnInfo.services.length === 2) stationIconStyle = 'express_sh';\n        else if (stnInfo.transfer.info.reduce((acc, cur) => acc + cur.length, 0)) stationIconStyle = 'int2_sh';\n        else stationIconStyle = 'stn_sh';\n        stationIconColor.stroke = props.stnState === -1 ? 'gray' : 'var(--rmg-theme-colour)';\n    }\n\n\n    return (\n        <>\n            <use\n                xlinkHref={`#${stationIconStyle}`}\n                {...stationIconColor}  // different styles use either `fill` or `stroke`\n            />\n            <g transform={`translate(${branchNameDX},0)`}>\n                <StationNameGElement\n                    name={stnInfo.name}\n                    infos={stnInfo.transfer.info}\n                    stnState={props.stnState}\n                    direction={param.direction}\n                    info_panel_type={param.info_panel_type}\n                />\n            </g>\n        </>\n    );\n};\n\nexport default StationSHMetro;\n\ninterface StationNameGElementProps {\n    name: Name;\n    infos: InterchangeInfo[][];\n    stnState: -1 | 0 | 1;\n    direction: 'l' | 'r';\n    info_panel_type: PanelTypeGZMTR | PanelTypeShmetro;\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const nameENLn = props.name[1].split('\\\\').length;\n\n    // get the exact station name width so that the\n    // interchange station icon can be right after the station name\n    const stnNameEl = useRef<SVGGElement | null>(null);\n    // the original name position\n    const [bBox, setBBox] = React.useState({ width: 0 } as DOMRect);\n    React.useEffect(\n        () => setBBox(stnNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [...props.name]\n    );\n    // the original name position's right x\n    const x = bBox.width + 5;\n\n    // rotate the station info now\n    // other wise the bcr will be inaccurate due to the rotation\n    // Chito: so, use BBox instead\n\n    return (\n        <g transform={`translate(${props.direction === 'l' ? 6 : -6},${props.info_panel_type === 'sh2020' ? -20 : -6})rotate(${props.direction === 'l' ? -45 : 45})`}>\n            {props.infos.reduce((sum, infos) => sum + infos.length, 0) && (\n                <line\n                    x1={0}\n                    x2={props.direction === 'l' ? x : -x}\n                    stroke={props.stnState === -1 ? 'gray' : 'black'}\n                    strokeWidth={0.5}\n                />\n            )}\n\n            <IntBoxGroup\n                intInfos={props.infos[1] ? ([] as InterchangeInfo[]).concat(...props.infos) : props.infos[0]}\n                transform={`translate(${x * (props.direction === 'l' ? 1 : -1)},-10.75)`}\n                direction={props.direction}\n            />\n\n            <g\n                textAnchor={props.direction === 'l' ? 'start' : 'end'}\n                transform={`translate(0,${-14.15625 - 2 - 12 * (nameENLn - 1)})`}\n            >\n                <StationName\n                    ref={stnNameEl}\n                    stnName={props.name}\n                    fill={props.stnState === -1 ? 'gray' : props.stnState === 0 ? 'red' : 'black'}\n                />\n\n                {props.infos[1]?.length && (\n                    <g\n                        transform={`translate(${\n                            (x + props.infos.reduce((sum, infos) => sum + infos.length, 0) * 15) *\n                            (props.direction === 'l' ? 1 : -1)\n                        },-22)`}\n                    >\n                        <OSIText osiInfos={props.infos[1]} />\n                    </g>\n                )}\n            </g>\n        </g>\n    );\n};\n\nconst StationName = React.forwardRef(\n    (props: { stnName: Name } & React.SVGProps<SVGGElement>, ref: React.Ref<SVGGElement>) => {\n        const { stnName, ...others } = props;\n\n        return (\n            <g ref={ref} {...others}>\n                {React.useMemo(\n                    () => (\n                        <>\n                            <text className=\"rmg-name__zh\">{stnName[0]}</text>\n                            <g fontSize={9.6}>\n                                {stnName[1].split('\\\\').map((txt, i) => (\n                                    <text key={i} className=\"rmg-name__en\" dy={12 * (i + 1)}>\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </>\n                    ),\n                    // eslint-disable-next-line react-hooks/exhaustive-deps\n                    [...stnName]\n                )}\n            </g>\n        );\n    }\n);\n\nconst IntBoxGroup = (props: { intInfos: InterchangeInfo[]; direction: 'l' | 'r' } & React.SVGProps<SVGGElement>) => {\n    const { intInfos, direction, ...others } = props;\n\n    let dx = 0;\n    return (\n        <g fontSize={14} textAnchor=\"middle\" {...others}>\n            {intInfos.map((info, i) => {\n                // start with digit\n                const isLineNumber = Boolean(info[4].match(/^\\d.*$/));\n                const isMaglev = Boolean(info[4].match(/^磁(悬)*浮/));\n\n                if (props.direction === 'r') {\n                    dx -= (isLineNumber || isMaglev ? 20 : info[4].length * 14 + 12 + 0) + (i === 0 ? 0 : 5);\n                }\n\n                let el = <g />;\n                if (isMaglev) {\n                    el = (\n                        <g transform={`translate(${dx},-16)scale(0.1428571429)`} key={i}>\n                            <IntBoxMaglev info={info} />\n                        </g>\n                    );\n                } else if (isLineNumber) {\n                    el = (\n                        <g transform={`translate(${dx},0)`} key={i}>\n                            <IntBoxNumber info={info} />\n                        </g>\n                    );\n                } else {\n                    el = (\n                        <g transform={`translate(${dx},0)`} key={i}>\n                            <IntBoxLetter info={info} />\n                        </g>\n                    );\n                }\n\n                // 20 + 5(margin) for number line\n                // 60 + 5(margin) for letter line\n                if (props.direction === 'l') {\n                    dx += isLineNumber || isMaglev ? 25 : info[4].length * 14 + 12 + 5;\n                }\n                return el;\n            })}\n        </g>\n    );\n};\n\nconst IntBoxMaglev = memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_maglev\" fill={props.info[2]} stroke={props.info[2]} />\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxNumber = memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_number\" fill={props.info[2]} />\n            <text x={10} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                {/* // line starts with numbers */}\n                {props.info[4].match(/(\\d*)\\w+/)![0]}\n            </text>\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxLetter = memo(\n    (props: { info: InterchangeInfo }) => {\n        // box width: 16 * number of characters + 12\n        const textCount = props.info[4].split('\\\\')[0].length;\n        return (\n            <>\n                <rect height={22} width={textCount * 14 + 12} y={-11} fill={props.info[2]} />\n                <text x={textCount * 7 + 6} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                    {props.info[4].split('\\\\')[0]}\n                </text>\n            </>\n        );\n    },\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst OSIText = (props: { osiInfos: InterchangeInfo[] }) => {\n    // get the all names from the out of station changes\n    const lineNames = props.osiInfos.map(info => info[4]);\n    return React.useMemo(\n        () => (\n            <g textAnchor=\"middle\" fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {'换乘' + lineNames.join('，')}\n                </text>\n                <text className=\"rmg-name__zh\" dy={5}>\n                    仅限公共交通卡\n                </text>\n                <text className=\"rmg-name__en\" dy={12.5} fontSize=\"75%\">\n                    Only for Public Transportation Card\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [lineNames.toString()]\n    );\n};\n","import React, { useContext } from 'react';\nimport { ParamContext } from '../../../context';\nimport { adjacencyList, getXShareMTR, criticalPathMethod, drawLine, getStnState } from '../methods/share';\nimport StationSHMetro from './station/station-shmetro';\n\ninterface servicesPath {\n    main: string[];\n    pass: string[];\n    service: Services;\n}\n\nconst MainSHMetro = () => {\n    const { param, routes, branches, deps } = useContext(ParamContext);\n\n    const adjMat = adjacencyList(\n        param.stn_list,\n        () => 0,\n        () => 0\n    );\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const xShares = React.useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShareMTR(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n    const lineXs: [number, number] = [\n        (param.svgWidth.railmap * param.padding) / 100,\n        param.svgWidth.railmap * (1 - param.padding / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = React.useMemo(\n        () => {\n            console.log('computing y shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: branches[0].includes(cur) ? 0 : 3 }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: -yShares[cur] * param.branch_spacing }),\n        {} as typeof yShares\n    );\n\n    const stnStates = React.useMemo(\n        () => getStnState(param.current_stn_idx, routes, param.direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.current_stn_idx, param.direction, routes.toString()]\n    );\n\n    const services: Services[] = ['local', 'express', 'direct'];\n    const servicesLevel = Object.values(param.stn_list)\n        .map(stationInfo => stationInfo.services)\n        .flat() // all services\n        .reduce(\n            (acc, cur) => {\n                acc[services.indexOf(cur)] = true;\n                return acc;\n            },\n            [false, false, false] as [boolean, boolean, boolean]\n        ) // set the flag in order\n        .map((bool, i) => [services[i], bool] as [Services, boolean]) // zip\n        .filter(s => s[1]) // get the existing service\n        .map(s => s[0]); // maintain the services' order\n\n    const linePaths = drawLine(branches, stnStates);\n\n    // paths = {'local':{'main':..., 'pass':...}, 'express':...}\n    // const paths = servicesLevel.reduce((allServicesPath, services) => ({\n    //         ...allServicesPath,\n    //         [services]: (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n    //             (acc, cur) => ({\n    //                 ...acc,\n    //                 [cur]: linePaths[cur].map(stns => _linePath(stns, cur, xs, ys, param.direction, services)).filter(path => path !== ''),\n    //             }),\n    //             {} as { [key in keyof ReturnType<typeof drawLine>]: string[] })\n    //     }), {} as {[services in Services]: { main: string[]; pass: string[] }}\n    // );\n\n    // paths = [{'main':..., 'pass':..., 'service':'local'}, ...}]\n    const paths = servicesLevel.map(services =>\n        (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n            (acc, cur) => ({\n                ...acc,\n                [cur]: linePaths[cur]\n                    .map(stns => _linePath(stns, cur, xs, ys, param.direction, services, servicesLevel.length))\n                    .filter(path => path !== ''),\n                service: services,\n            }),\n            {} as servicesPath\n        )\n    );\n\n    return (\n        <g id=\"main\" transform={`translate(0,${param.svg_height - 63})`}>\n            <Line paths={paths} direction={param.direction} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} />\n            <ServicesElements\n                servicesLevel={servicesLevel}\n                dy={-param.svg_height + 100}\n                direction={param.direction}\n                lineXs={lineXs}\n            />\n            <DirectionElements />\n        </g>\n    );\n};\n\nexport default MainSHMetro;\n\nconst Line = (props: { paths: servicesPath[]; direction: 'l' | 'r' }) => {\n    return (\n        <>\n            {props.paths.map((servicePath, i) => (\n                <g key={`servicePath${i}`} transform={`translate(0,${i * 25})`}>\n                    <g>\n                        {servicePath.pass.map((path, j) => (\n                            <path\n                                key={j}\n                                stroke=\"gray\"\n                                strokeWidth={12}\n                                fill=\"none\"\n                                d={path}\n                                markerStart={props.direction === 'l' ? 'url(#arrow_gray)' : undefined}\n                                markerEnd={props.direction === 'r' ? 'url(#arrow_gray)' : undefined}\n                                strokeLinejoin=\"round\"\n                            />\n                        ))}\n                    </g>\n                    <g>\n                        {servicePath.main.map((path, j) => (\n                            <path\n                                key={j}\n                                stroke=\"var(--rmg-theme-colour)\"\n                                strokeWidth={12}\n                                fill=\"none\"\n                                d={path}\n                                markerStart={props.direction === 'l' ? 'url(#arrow_theme_left)' : undefined}\n                                markerEnd={props.direction === 'r' ? 'url(#arrow_theme_right)' : undefined}\n                                strokeLinejoin=\"round\"\n                                filter={i === 2 ? 'url(#contrast-direct)' : i === 1 ? 'url(#contrast-express)' : ''}\n                            />\n                        ))}\n                    </g>\n                </g>\n            ))}\n        </>\n    );\n};\n\nconst _linePath = (\n    stnIds: string[],\n    type: 'main' | 'pass',\n    xs: { [stnId: string]: number },\n    ys: { [stnId: string]: number },\n    direction: 'l' | 'r',\n    services: Services,\n    servicesMax: number\n) => {\n    var [prevY, prevX] = [] as number[];\n    var path: { [key: string]: number[] } = {};\n    const e = 30;\n\n    const servicesDelta = {\n        local: 0,\n        express: 20,\n        direct: 40,\n    }[services]; // Todo: enum Services could be a better idea?\n    const servicesPassDelta = servicesMax > 1 ? 50 : 0;\n\n    stnIds.forEach(stnId => {\n        var x = xs[stnId];\n        var y = ys[stnId];\n        if (!prevY && prevY !== 0) {\n            [prevX, prevY] = [x, y];\n            path['start'] = [x, y];\n            return;\n        }\n        if (y === 0) {\n            // merge back to main line\n            if (y !== prevY) {\n                path['bifurcate'] = [prevX, prevY];\n            }\n        } else {\n            // on the branch line\n            if (y !== prevY) {\n                path['bifurcate'] = [x, y];\n            }\n        }\n        path['end'] = [x, y];\n        [prevX, prevY] = [x, y];\n    });\n\n    // generate path\n    if (!path.hasOwnProperty('start')) {\n        // no line generated\n        // keys in path: none\n        return '';\n    } else if (!path.hasOwnProperty('end')) {\n        // litte line (only beyond terminal station)\n        // keys in path: start\n        let [x, y] = path['start'];\n        if (type === 'main') {\n            // current at terminal(end) station, draw the litte main line\n            if (direction === 'l') {\n                return `M ${x - e - servicesDelta},${y} H ${x}`;\n            } else {\n                return `M ${x},${y} H ${x + e + servicesDelta}`;\n            }\n        } else {\n            // type === 'pass'\n            // current at terminal(start) station, draw the litte pass line\n            if (direction === 'l') {\n                return `M ${x},${y} L ${x + e + servicesPassDelta},${y}`;\n            } else {\n                return `M ${x - e - servicesPassDelta},${y} L ${x},${y}`;\n            }\n        }\n    } else if (!path.hasOwnProperty('bifurcate')) {\n        // general main line\n        // keys in path: start, end\n        let [x, y] = path['start'],\n            h = path['end'][0];\n        if (type === 'main') {\n            if (direction === 'l') {\n                return `M ${x - e - servicesDelta},${y} H ${h}`;\n            } else {\n                return `M ${x},${y} H ${h + e + servicesDelta}`;\n            }\n        } else {\n            // type === 'pass'\n            if (direction === 'l') {\n                return `M ${x - e},${y} H ${h + e + servicesPassDelta}`;\n            } else {\n                return `M ${x - e - servicesPassDelta},${y} H ${h}`;\n            }\n        }\n    } else {\n        // main line bifurcate here to become the branch line\n        // and path return here are only branch line\n        // keys in path: start, bifurcate, end\n\n        // Todo: disable lower branch\n        let [x, y] = path['start'];\n        let xb = path['bifurcate'][0];\n        let [xm, ym] = path['end'];\n        if (type === 'main') {\n            if (direction === 'l') {\n                if (ym > y) {\n                    // main line, left direction, center to upper\n                    return `M ${x - e},${y} H ${xb + Math.abs(xb-xm) / 2} V ${ym}`;\n                } else {\n                    // main line, left direction, upper to center\n                    return `M ${x},${y} H ${xb - Math.abs(xb-x) / 2} V ${ym} H ${xm}`; // wrong marker\n                }\n            } else {\n                if (ym > y) {\n                    // main line, right direction, upper to center\n                    return `M ${x},${y} H ${xb + Math.abs(xb - xm) / 2} V ${ym} H ${xm}`; // wrong marker\n                } else {\n                    // main line, right direction, center to upper\n                    return `M ${x + Math.abs(xb-x) / 2},${y} V ${ym} H ${xm + e}`;\n                }\n            }\n        } else {\n            // type === 'pass'\n            if (direction === 'l') {\n                if (ym > y) {\n                    // pass line, left direction, center to upper\n                    return `M ${x - e},${y} H ${xb + Math.abs(xb - xm) / 2} V ${ym}`;\n                } else {\n                    // pass line, left direction, upper to center\n                    return `M ${x},${y} H ${xb - Math.abs(xb-x) / 2} V ${ym} H ${xm + e}`;\n                }\n            } else {\n                if (ym > y) {\n                    // pass line, right direction, upper to center\n                    return `M ${x - e},${y} H ${xb + Math.abs(xb-xm) / 2} V ${ym}`;\n                } else {\n                    // pass line, right direction, center to upper\n                    return `M ${x},${y} H ${xb - Math.abs(xb-x) / 2} V ${ym} H ${xm + e}`;\n                }\n            }\n        }\n    }\n};\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { param } = useContext(ParamContext);\n\n    return (\n        <g>\n            {Object.keys(param.stn_list)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (\n                    <g key={stnId} transform={`translate(${props.xs[stnId]},${props.ys[stnId]})`}>\n                        <StationSHMetro stnId={stnId} stnState={props.stnStates[stnId]} />\n                    </g>\n                ))}\n        </g>\n    );\n};\n\nconst ServicesElements = (props: { servicesLevel: Services[]; direction: 'l' | 'r'; dy: number; lineXs: number[] }) => {\n    const { param } = useContext(ParamContext);\n\n    if (props.servicesLevel.length === 1) return <></>;\n\n    const servicesLevel = props.servicesLevel.map(\n        service =>\n            ({\n                local: '普通车',\n                express: '大站车',\n                direct: '直达车',\n            }[service])\n    );\n\n    // let dx = props.direction === 'r' ? 5 : param.svgWidth.railmap - 55;\n    const labelX = props.direction === 'r' ? props.lineXs[0] - 42 : props.lineXs[1] + 42;\n\n    let dx_hint = props.servicesLevel.length === 2 ? 350 : 500;\n\n    return (\n        <g>\n            {servicesLevel.map((service, i) => (\n                <g key={service} transform={`translate(${labelX},${i * 25})`}>\n                    <rect x={-27.5} height={10} width={55} fill={'white'} stroke={'black'} y={-5}></rect>\n                    <text className=\"rmg-name__zh\" fontSize={9} y={3} textAnchor=\"middle\">{`${service}运行线`}</text>\n                </g>\n            ))}\n            <g transform={`translate(${props.direction === 'r' ? 30 : param.svgWidth.railmap - dx_hint},${props.dy})`}>\n                <text className=\"rmg-name__zh\">图例：</text>\n                {servicesLevel.map((serviceLevel, i) => (\n                    <g key={`serviceLevel${i}`} transform={`translate(${i * 150 + 50},0)`}>\n                        <line\n                            x1=\"0\"\n                            x2=\"35\"\n                            y1=\"-5\"\n                            y2=\"-5\"\n                            stroke=\"var(--rmg-theme-colour)\"\n                            strokeWidth=\"12\"\n                            filter={i === 2 ? 'url(#contrast-direct)' : i === 1 ? 'url(#contrast-express)' : ''}\n                        />\n                        <use x=\"17.5\" y=\"-5\" xlinkHref=\"#stn_sh\" fill=\"var(--rmg-theme-colour)\" />\n                        <text x=\"40\" className=\"rmg-name__zh\">{`${serviceLevel}停靠站`}</text>\n                    </g>\n                ))}\n            </g>\n        </g>\n    );\n};\n\nconst DirectionElements = () => {\n    const { param } = useContext(ParamContext);\n\n    return (\n        <g\n            transform={`translate(${param.direction === 'l' ? 50 : param.svgWidth.railmap - 150},${\n                -param.svg_height + 100\n            })`}\n        >\n            <text className=\"rmg-name__zh\">列车前进方向</text>\n            <path\n                d=\"M60,60L0,0L60-60H100L55-15H160V15H55L100,60z\"\n                fill=\"var(--rmg-theme-colour)\"\n                transform={`translate(${param.direction === 'l' ? -30 : 125},-5)rotate(${\n                    param.direction === 'l' ? 0 : 180\n                })scale(0.15)`}\n            />\n        </g>\n    );\n};\n","import * as React from 'react';\nimport MainSHMetro from './main/main-shmetro';\n\nconst RailMapSHMetro = React.memo(() => (\n    <>\n        <DefsSHMetro />\n\n        <MainSHMetro />\n    </>\n));\n\nexport default RailMapSHMetro;\n\nconst DefsSHMetro = React.memo(() => (\n    <defs>\n        <circle id=\"stn_sh\" fill=\"#fff\" strokeWidth={2} r={5} />\n        <path id=\"int2_sh\" fill=\"#fff\" strokeWidth={2} d=\"M -5,0 a 5,5 0 1 1 10,0 V10 a 5,5 0 1 1 -10,0Z\" />\n        <path id=\"express_sh\" fill=\"#fff\" strokeWidth={2} d=\"M -5,0 a 5,5 0 1 1 10,0 V25 a 5,5 0 1 1 -10,0Z\" />\n        <path id=\"direct_sh\" fill=\"#fff\" strokeWidth={2} d=\"M -5,0 a 5,5 0 1 1 10,0 V50 a 5,5 0 1 1 -10,0Z\" />\n        <rect id=\"stn_sh_2020\" stroke=\"none\" height={24} width={10} y={-18} />\n        <rect id=\"stn_sh_2020_express\" stroke=\"none\" height={49} width={10} y={-18} />\n        <rect id=\"stn_sh_2020_direct\" stroke=\"none\" height={74} width={10} y={-18} />\n\n        <rect id=\"intbox_number\" height={22} width={20} y={-11} />\n\n        <g id=\"intbox_maglev\" transform=\"translate(-25,0)\">\n            <rect id=\"maglev_5\" height={144} width={130} y=\"40\" x=\"30\" strokeWidth={10} />\n            <path\n                id=\"maglev_3\"\n                fill=\"white\"\n                d=\"m90,55a40,5 0 0 0 -40,3a5,5 0 0 0 -5,5a5,60 0 0 0 -3,60a5,5 0 0 0 5,5l96,0a5,5 0 0 0 5,-5a5,60 0 0 0 -3,-60a5,5 0 0 0 -5,-5a40,5 0 0 0 -40,-3l-5,-10l-5,10\"\n            />\n            <path\n                id=\"maglev_4\"\n                fill=\"white\"\n                d=\"m90,140l-40,0a10,5 0 0 1 -10,-5l0,25a10,15 0 0 0 10,15l15,0l0,-10l-15,0l0,-15l90,0l0,15l-15,0l0,10l15,0a10,15 0 0 0 10,-15l0,-25a10,5 0 0 1 -10,5l-50,0\"\n            />\n            <rect id=\"maglev_1\" height=\"25\" width=\"40\" y=\"80\" x=\"50\" />\n            <rect id=\"maglev_2\" height=\"25\" width=\"40\" y=\"80\" x=\"100\" />\n        </g>\n\n        {/* An extension of the line/path. Remember to minus the stroke-width.  */}\n        <marker id=\"arrow_gray\" viewBox=\"-1.5 0 3 1.5\" refY={0.5}>\n            <path d=\"M0,0L1,1H-1z\" fill=\"gray\" />\n        </marker>\n        <marker id=\"arrow_theme_left\" refX={1} refY={0.5}>\n            <path d=\"M1,0L0,1H1z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n        <marker id=\"arrow_theme_right\" refY={0.5}>\n            <path d=\"M0,0L1,1H-1z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n\n        {/* Contrast filters for lines */}\n        <filter id=\"contrast-direct\" filterUnits=\"userSpaceOnUse\">\n            <feComponentTransfer>\n                <feFuncR type=\"linear\" slope={0.5} intercept={0.25} />\n                <feFuncG type=\"linear\" slope={0.5} intercept={0.25} />\n                <feFuncB type=\"linear\" slope={0.5} intercept={0.25} />\n            </feComponentTransfer>\n        </filter>\n        <filter id=\"contrast-express\" filterUnits=\"userSpaceOnUse\">\n            <feComponentTransfer>\n                <feFuncR type=\"linear\" slope={0.75} intercept={0.125} />\n                <feFuncG type=\"linear\" slope={0.75} intercept={0.125} />\n                <feFuncB type=\"linear\" slope={0.75} intercept={0.125} />\n            </feComponentTransfer>\n        </filter>\n    </defs>\n));\n","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import * as Global from '../../../methods';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (direction === 'r'\n                        ? _isSuccessor(currentId, cur, routes)\n                        : _isPredecessor(currentId, cur, routes))\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as { [stnId: string]: StationInfo };\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] }\n    ) {\n        var [prevId, prevY, prevX] = ([] as unknown) as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 0.8;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + 9.68}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - 9.68}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] }\n    ) {\n        let linePaths = { main: [] as string[], pass: [] as string[] };\n        branches.forEach((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branches: string[][], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    let linePaths = { main: [] as string[][], pass: [] as string[][] };\n    branches.forEach(branch => {\n        branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n        var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n        var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n        if (lineMainStns.length === 1) {\n            linePassStns = branch;\n        }\n\n        if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n            // if two set disjoint\n            if (linePassStns[0] === branch[0]) {\n                // -1 -1 1 1\n                linePassStns.push(lineMainStns[0]);\n            } else if (\n                lineMainStns[0] === branch[0] &&\n                lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                linePassStns.length\n            ) {\n                linePassStns = branch;\n                lineMainStns = [];\n            } else {\n                // 1 1 -1 -1\n                linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n            }\n        }\n\n        linePaths.main.push(lineMainStns);\n        linePaths.pass.push(linePassStns);\n    });\n\n    return linePaths;\n};\n"],"sourceRoot":""}