{"version":3,"sources":["constants/constants.ts","../external \"MaterialUI\"","../external \"React\"","redux/app/reducer.ts","redux/param/reducer.ts","redux/helper/reducer.ts","redux/index.ts","redux/param/action.ts","redux/app/action.ts","redux/helper/action.ts","redux/helper/graph-theory-util.ts","../external \"ReactI18next\"","../external \"ReactRouterDOM\"","../external \"ReactRedux\"","../external \"Redux\"","utils.ts","../external \"i18next\"","context.ts","constants/city-config.ts","../external \"ReactDOM\"","../external \"i18nextXHRBackend\"","../external \"i18nextBrowserLanguageDetector\"","../external \"ReduxThunk\"","i18n.ts","app-appbar.tsx","error-boundary.tsx","svgs/svg.tsx","svgs/index.ts","panels/panels.tsx","panels/index.tsx","App.tsx","serviceWorker.ts","util/storage/storageService.ts","util/storage/storageLocalStorage.ts","util/storage/index.ts","index.tsx","util/auto-save-scheduler.ts"],"names":["LoadingStatus","RmgStyle","CanvasType","Direction","ShortDirection","BranchStyle","MonoColour","Services","Facilities","PanelTypeGZMTR","PanelTypeShmetro","LanguageCode","AllCanvas","canvasConfig","MTR","Destination","RailMap","GZMTR","RunIn","SHMetro","Indoor","module","exports","MaterialUI","React","initialState","rmgStyle","canvasScale","canvasScaleStatus","init","canvasToShow","canvasToShowStatus","svgWidth","destination","runin","railmap","indoor","svg_height","y_pc","padding","branch_spacing","direction","left","platform_num","theme","CityCode","HongKong","white","line_name","current_stn_idx","stn_list","namePosMTR","isStagger","isFlip","customiseMTRDest","isLegacy","terminal","line_num","psd_num","info_panel_type","gz1","notesGZMTR","direction_gz_x","direction_gz_y","depsStr","branches","routes","tpo","rootReducer","combineReducers","app","state","action","type","SET_RMG_STYLE","SET_CANVAS_SCALE","SET_CANVAS_SCALE_STATUS","SET_CANVAS_TO_SHOW","SET_CANVAS_TO_SHOW_STATUS","param","SET_FULL_PARAM","fullParam","SET_SVG_HEIGHT","svgHeight","SET_SVG_WIDTH","canvas","SET_Y_PERCENTAGE","yPercentage","SET_BRANCH_SPACING","branchSpacing","SET_PADDING_PERCENTAGE","paddingPercentage","SET_DIRECTION_INDICATOR_X","directionIndicatorX","SET_DIRECTION_INDICATOR_Y","directionIndicatorY","SET_THEME","SET_LINE_NAME","lineName","SET_DIRECTION","SET_PLATFORM","platform","SET_LINE_NUM","lineNum","SET_PSD_NUM","psdNum","SET_PANEL_TYPE","panelType","SET_NOTES","notes","SET_NAME_POSITION","namePosition","SET_CUSTOMISED_MTR_DESTINATION","customisedMtrDestination","SET_CURRENT_STATION","currentStation","SET_STATION","stationId","station","SET_STATIONS_BULK","stations","helper","SET_DEPS_STR","SET_BRANCHES","SET_ROUTES","SET_TPO","store","createStore","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","setFullParam","dispatch","triggerHelpersUpdate","setSvgHeight","setSvgWidth","setYPercentage","setBranchSpacing","setPaddingPercentage","setDirectionIndicatorX","setDirectionIndicatorY","setTheme","setLineName","setDirection","setPlatform","setLineNum","setPsdNum","setPanelType","setNotes","addNote","getState","concat","updateNote","index","updatedNote","map","originalNote","idx","removeNote","filter","_","setNamePosition","staggerStationNames","flipStationNames","setCustomisedMtrDestination","toggleLineNameBeforeDestination","isShow","customiseDestinationName","customisedName","setCurrentStation","setStation","setStationsBulk","reverseStations","newStationList","Object","keys","reduce","acc","stnId","id","lineend","parents","children","slice","reverse","branch","right","linestart","updateStationName","name","stationInfo","updateStationSecondaryName","secondaryName","updateStationNum","num","addInterchange","setIndex","interchangeInfo","newTransferInfo","transfer","info","i","length","push","removeInterchange","interchangeIndex","set","setIdx","intIdx","updateInterchange","int","undefined","updateStationOsiName","osiName","newOsiNames","osi_names","updateStationTickDirection","tickDirection","tick_direc","updateStationPaidArea","isPaidArea","paid_area","updateStationBranchType","branchStyle","updateStationBranchFirstStation","first","flipStationBranchPosition","updateStationFacility","facility","addStationService","service","services","includes","removeStationService","s","setRmgStyle","setCanvasScale","setCanvasScaleStatus","zoomIn","a","loading","newScale","Number","toFixed","window","rmgStorage","writeFile","toString","loaded","failed","zoomOut","setCanvasToShow","setCanvasToShowStatus","selectCanvas","calcAndGetDepsStr","stnList","nextDepsStr","entries","JSON","stringify","join","calcBranches","console","log","nextBranches","stack","branchCount","curId","shift","prevId","branchNextId","getBranches","calcRoutes","getRoutes","prevBranches","cur","indexOf","ReactI18next","ReactRouterDOM","ReactRedux","Redux","updateParam","dest_legacy","fontZH","fontEN","weightZH","weightEN","stnInfo","style","interchange","arr","forEach","intInfo","splice","change_type","split","usage","svg_dest_width","svg_width","note","char_form","show_outer","strip_pc","txt_bg_gap","txt_flip","getTransText2","obj","langs","l","English","formatStnName","replace","i18next","ParamContext","createContext","cityList","Barcelona","country","en","Beijing","zh","Changsha","Chengdu","Chongqing","Dongguan","Edinburgh","ga","Foshan","Glasgow","Guangzhou","Hangzhou","Kansai","ja","Kaohsiung","London","Macao","pt","Madrid","Nanjing","NewTaipei","Osaka","Oslo","Paris","Qingdao","SanFrancisco","Seoul","ko","Shanghai","Shenzhen","Singapore","Stockholm","Taipei","Tianjin","Tokyo","Toronto","TyneAndWear","Xian","Other","ReactDOM","i18nextXHRBackend","i18nextBrowserLanguageDetector","ReduxThunk","i18n","use","Backend","LanguageDetector","initReactI18next","fallbackLng","default","backend","loadPath","process","interpolation","escapeValue","then","t","document","title","documentElement","setAttribute","language","useStyles","makeStyles","createStyles","rootLight","backgroundColor","palette","primary","main","rootDark","background","paper","flexGrow","color","menuButton","AppAppBar","useTranslation","classes","prefersDarkMode","useMediaQuery","useMemo","position","className","variant","CanvasToggle","useState","canvasButtonEl","setCanvasButtonEl","handleClick","onClick","e","currentTarget","anchorEl","open","Boolean","onClose","c","margin","ZoomToggles","ErrorBoundary","props","hasError","error","errorInfo","this","Component","root","display","flexDirection","overflowX","content","flex","border","SVGs","svgWidths","sharedProps","useCallback","xmlns","xmlnsXlink","height","viewBox","colorInterpolationFilters","values","path","StyleSpecificSVGs","canvasAvailable","canvasList","svgProps","to","memo","useEffect","getElementById","href","Suspense","fallback","fill","width","strokeWidth","stroke","RunInGZMTR","lazy","RailMapGZMTR","DestinationMTR","RailMapMTR","DestinationSHMetro","RunInSHMetro","RailMapSHMetro","IndoorSHMetro","PanelSave","PanelLayout","PanelDesign","PanelStations","PanelInfo","breakpoints","down","typography","tab","up","justifyContent","minWidth","minHeight","marginBottom","paddingLeft","tabs","overflow","scrollbarWidth","WebkitOverflowScrolling","tabpanel","spacing","paddingBottom","alignItems","PanelTab","useTheme","isMobile","value","setValue","tabNav","component","orientation","indicatorColor","textColor","onChange","val","scrollButtons","label","icon","role","panel","Panel","darkTheme","createMuiTheme","secondary","overrides","MuiDialog","lightTheme","light","App","basename","AppBody","deps","paramString","Provider","overflowY","location","hostname","match","StorageLocalStorage","currentBusyFilename","warn","localStorage","alert","Error","setItem","removeItem","filename","contents","getItem","indexedDB","Promise","resolve","request","onerror","err","onsuccess","navigator","serviceWorker","ready","registration","unregister","catch","message","head","append","tag","link","createElement","rel","getRmgStorage","readFile","updatedParam","parse","canvasScaleString","rmgStore","setInterval"],"mappings":"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","file":"static/js/main.761dd4de.chunk.js","sourcesContent":["import { CityCode } from './city-config';\n\nexport enum LoadingStatus {\n    init = 'init',\n    loading = 'loading',\n    loaded = 'loaded',\n    failed = 'failed',\n}\n\nexport enum RmgStyle {\n    MTR = 'mtr',\n    GZMTR = 'gzmtr',\n    SHMetro = 'shmetro',\n}\n\nexport enum CanvasType {\n    Destination = 'destination',\n    RunIn = 'runin',\n    RailMap = 'railmap',\n    Indoor = 'indoor',\n}\n\nexport const AllCanvas = 'all';\n\nexport const canvasConfig: { [s in RmgStyle]: CanvasType[] } = {\n    [RmgStyle.MTR]: [CanvasType.Destination, CanvasType.RailMap],\n    [RmgStyle.GZMTR]: [CanvasType.RunIn, CanvasType.RailMap],\n    [RmgStyle.SHMetro]: [CanvasType.Destination, CanvasType.RunIn, CanvasType.RailMap, CanvasType.Indoor],\n};\n\n/**\n * @property {string} 0 - Chinese characters\n * @property {string} 1 - Latin characters\n */\nexport type Name = [string, string];\n\nexport enum Direction {\n    left = 'left',\n    right = 'right',\n}\n\nexport enum ShortDirection {\n    left = 'l',\n    right = 'r',\n}\n\nexport enum BranchStyle {\n    through = 'through',\n    nonThrough = 'nonthrough',\n}\n\n/**\n * Information of branch on both side.\n * @property 0 - branch type\n * @property 1 - ID of the first station of the branch (should also be one of the station's parents/children) or empty\n */\nexport type BranchInfo = Record<Direction, [BranchStyle, string] | []>;\n\nexport enum MonoColour {\n    black = '#000',\n    white = '#fff',\n}\n\nexport type ColourHex = `#${string}`;\n\n/**\n * Colour theme of line, derived from `LineEntry`.\n * @property 0 - city id\n * @property 1 - line id\n * @property 2 - background colour\n * @property 3 - foreground colour\n */\nexport type Theme = [CityCode, string, ColourHex, MonoColour];\n\nexport type InterchangeInfo = [...Theme, ...Name];\n\nexport interface StationTransfer {\n    /**\n     * Direction of text/tick of interchanges.\n     */\n    tick_direc: ShortDirection;\n    /**\n     * Flag of paid area within out-of-station interchange.\n     */\n    paid_area: boolean;\n    /**\n     * Array of name (in two languages) of all out-of-station interchange stations.\n     */\n    osi_names: Name[];\n    /**\n     * Array of arrays of interchange info.\n     * @property 0 - array of within-station interchange info\n     * @property remaining - arrays of out-of-station interchange info (from the nearest to the furthest station)\n     */\n    info: InterchangeInfo[][];\n}\n\nexport enum Services {\n    local = 'local',\n    express = 'express',\n    direct = 'direct',\n}\n\nexport enum Facilities {\n    airport = 'airport',\n    disney = 'disney',\n    hsr = 'hsr',\n    none = '',\n}\n\nexport interface StationInfo {\n    /**\n     * Station name in two languages.\n     */\n    name: Name;\n    secondaryName: false | Name;\n    /**\n     * Station number. (GZMTR specific)\n     */\n    num: string;\n    /**\n     * Dictionary of the information of branch on the station's both side.\n     */\n    branch: BranchInfo;\n    /**\n     * Array of parents' IDs.\n     */\n    parents: string[];\n    /**\n     * Array of children's IDs.\n     */\n    children: string[];\n    /**\n     * Detail of interchanges.\n     */\n    transfer: StationTransfer;\n    /**\n     * Array of services at this station.\n     */\n    services: Services[];\n    /**\n     * Facility near the station\n     */\n    facility: Facilities;\n}\n\nexport type StationDict = Record<string, StationInfo>;\n\nexport enum PanelTypeGZMTR {\n    gz1 = 'gz1',\n    gz28 = 'gz28',\n    gz2otis = 'gz2otis',\n    gz3 = 'gz3',\n    gz4 = 'gz4',\n    gz5 = 'gz5',\n    gz1421 = 'gz1421',\n    gz6 = 'gz6',\n    gzgf = 'gzgf',\n}\n\nexport enum PanelTypeShmetro {\n    sh = 'sh',\n    sh2020 = 'sh2020',\n}\n\n/**\n * Dictionary of configuration parameters for RMG, stored in `localStorage` as string.\n */\nexport interface RMGParam {\n    svgWidth: Record<CanvasType, number>;\n    svg_height: number;\n    /**\n     * Vertical position (in percentage) of line.\n     */\n    y_pc: number;\n    /**\n     * Left and right margin of line (in percentage).\n     */\n    padding: number;\n    /**\n     * Branch spacing (in pixels) of line.\n     */\n    branch_spacing: number;\n    direction: ShortDirection;\n    platform_num: string | false;\n    theme: Theme;\n    line_name: Name;\n    current_stn_idx: keyof StationDict;\n    /**\n     * Key-value pairs of the information of each station.\n     */\n    stn_list: StationDict;\n    namePosMTR: {\n        /**\n         * Flag of whether station names staggered. If false, place name above line.\n         */\n        isStagger: boolean;\n        /**\n         * Flag of flipping station names.\n         * When `isStagger === false`, names are above line if `isFlip === false`.\n         */\n        isFlip: boolean;\n    };\n    /**\n     * Customise destination sign of MTR style.\n     */\n    customiseMTRDest: {\n        /**\n         * Flag of legacy style. (Show line name before 'to').\n         */\n        isLegacy: boolean;\n        /**\n         * Customise terminal stations.\n         */\n        terminal: false | Name;\n    };\n    line_num: string;\n    psd_num: string;\n    info_panel_type: PanelTypeGZMTR | PanelTypeShmetro;\n    notesGZMTR: Note[];\n    direction_gz_x: number;\n    direction_gz_y: number;\n}\n\n/**\n * Array of a single note entry for Guangzhou Metro style.\n * @property 0 - text in Chinese characters\n * @property 1 - text in Latin characters\n * @property 2 - percentage of horizontal position\n * @property 3 - percentage of vertical position\n * @property 4 - flag of showing border\n */\nexport type Note = [...Name, number, number, boolean];\n\nexport enum LanguageCode {\n    Catalan = 'ca',\n    English = 'en',\n    Spanish = 'es',\n    French = 'fr',\n    Gaelic = 'ga',\n    Japanese = 'ja',\n    Korean = 'ko',\n    Norwegian = 'no',\n    Portuguese = 'pt',\n    Swedish = 'sv',\n    Chinese = 'zh',\n    ChineseCN = 'zh-CN',\n    ChineseSimp = 'zh-Hans',\n    ChineseTrad = 'zh-Hant',\n    ChineseHK = 'zh-HK',\n    ChineseTW = 'zh-TW',\n}\n\nexport type Translation = { [l in LanguageCode]?: string };\n\nexport interface PaletteEntry {\n    /**\n     * ID of line.\n     */\n    id: string;\n    /**\n     * Key-value pairs of multi-lingual names of the line.\n     */\n    name: Translation;\n    /**\n     * Background colour (in #HEX).\n     */\n    colour: ColourHex;\n    /**\n     * Foreground colour. Mandatory field if foreground colour is black.\n     */\n    fg?: MonoColour;\n    /**\n     * Pantone colour. If defined, colour is converted with Pantone Color Finder (https://www.pantone.com/color-finder).\n     */\n    pantone?: string;\n}\n","module.exports = MaterialUI;","module.exports = React;","import { AllCanvas, CanvasType, LoadingStatus, RmgStyle } from '../../constants/constants';\nimport {\n    SET_CANVAS_SCALE,\n    SET_CANVAS_SCALE_STATUS,\n    SET_CANVAS_TO_SHOW,\n    SET_CANVAS_TO_SHOW_STATUS,\n    SET_RMG_STYLE,\n    setCanvasScaleAction,\n    setCanvasScaleStatusAction,\n    setCanvasToShowAction,\n    setCanvasToShowStatusAction,\n    setRmgStyleAction,\n} from './action';\n\ninterface AppState {\n    rmgStyle: RmgStyle;\n    canvasScale: number;\n    canvasScaleStatus: LoadingStatus;\n    canvasToShow: CanvasType | typeof AllCanvas;\n    canvasToShowStatus: LoadingStatus;\n}\n\nconst initialState: AppState = {\n    rmgStyle: RmgStyle.MTR,\n    canvasScale: 1,\n    canvasScaleStatus: LoadingStatus.init,\n    canvasToShow: AllCanvas,\n    canvasToShowStatus: LoadingStatus.init,\n};\n\nexport default function AppReducer(\n    state = initialState,\n    action:\n        | setRmgStyleAction\n        | setCanvasScaleAction\n        | setCanvasScaleStatusAction\n        | setCanvasToShowAction\n        | setCanvasToShowStatusAction\n): AppState {\n    switch (action.type) {\n        case SET_RMG_STYLE:\n            state.rmgStyle = action.rmgStyle;\n            break;\n        case SET_CANVAS_SCALE:\n            state.canvasScale = action.canvasScale;\n            break;\n        case SET_CANVAS_SCALE_STATUS:\n            state.canvasScaleStatus = action.canvasScaleStatus;\n            break;\n        case SET_CANVAS_TO_SHOW:\n            state.canvasToShow = action.canvasToShow;\n            break;\n        case SET_CANVAS_TO_SHOW_STATUS:\n            state.canvasToShowStatus = action.canvasToShowStatus;\n            break;\n        default:\n            break;\n    }\n\n    return { ...state };\n}\n","import { CityCode } from '../../constants/city-config';\nimport { MonoColour, PanelTypeGZMTR, RMGParam, ShortDirection } from '../../constants/constants';\nimport {\n    SET_BRANCH_SPACING,\n    SET_CURRENT_STATION,\n    SET_CUSTOMISED_MTR_DESTINATION,\n    SET_DIRECTION,\n    SET_DIRECTION_INDICATOR_X,\n    SET_DIRECTION_INDICATOR_Y,\n    SET_FULL_PARAM,\n    SET_LINE_NAME,\n    SET_LINE_NUM,\n    SET_NAME_POSITION,\n    SET_NOTES,\n    SET_PADDING_PERCENTAGE,\n    SET_PANEL_TYPE,\n    SET_PLATFORM,\n    SET_PSD_NUM,\n    SET_STATION,\n    SET_STATIONS_BULK,\n    SET_SVG_HEIGHT,\n    SET_SVG_WIDTH,\n    SET_THEME,\n    SET_Y_PERCENTAGE,\n    setBranchSpacingAction,\n    setCurrentStationAction,\n    setCustomisedMtrDestinationAction,\n    setDirectionAction,\n    setDirectionIndicatorXAction,\n    setDirectionIndicatorYAction,\n    setFullParamAction,\n    setLineNameAction,\n    setLineNumAction,\n    setNamePositionAction,\n    setNotesAction,\n    setPaddingPercentageAction,\n    setPanelTypeAction,\n    setPlatformAction,\n    setPsdNumAction,\n    setStationAction,\n    setStationsBulkAction,\n    setSvgHeightAction,\n    setSvgWidthAction,\n    setThemeAction,\n    setYPercentageAction,\n} from './action';\n\nconst initialState: RMGParam = {\n    svgWidth: {\n        destination: 100,\n        runin: 100,\n        railmap: 100,\n        indoor: 100,\n    },\n    svg_height: 100,\n    y_pc: 50,\n    padding: 10,\n    branch_spacing: 10,\n    direction: ShortDirection.left,\n    platform_num: '1',\n    theme: [CityCode.HongKong, 'twl', '#E2231A', MonoColour.white],\n    line_name: ['線', 'line'],\n    current_stn_idx: '',\n    stn_list: {},\n    namePosMTR: {\n        isStagger: true,\n        isFlip: true,\n    },\n    customiseMTRDest: {\n        isLegacy: false,\n        terminal: false,\n    },\n    line_num: '1',\n    psd_num: '1',\n    info_panel_type: PanelTypeGZMTR.gz1,\n    notesGZMTR: [],\n    direction_gz_x: 0,\n    direction_gz_y: 0,\n};\n\nexport default function ParamReducer(\n    state = initialState,\n    action:\n        | setFullParamAction\n        | setSvgHeightAction\n        | setSvgWidthAction\n        | setYPercentageAction\n        | setBranchSpacingAction\n        | setPaddingPercentageAction\n        | setDirectionIndicatorXAction\n        | setDirectionIndicatorYAction\n        | setThemeAction\n        | setLineNameAction\n        | setDirectionAction\n        | setPlatformAction\n        | setLineNumAction\n        | setPsdNumAction\n        | setPanelTypeAction\n        | setNotesAction\n        | setNamePositionAction\n        | setCustomisedMtrDestinationAction\n        | setCurrentStationAction\n        | setStationAction\n        | setStationsBulkAction\n) {\n    switch (action.type) {\n        case SET_FULL_PARAM:\n            return action.fullParam;\n        case SET_SVG_HEIGHT:\n            state.svg_height = action.svgHeight;\n            break;\n        case SET_SVG_WIDTH:\n            state.svgWidth[action.canvas] = action.svgWidth;\n            break;\n        case SET_Y_PERCENTAGE:\n            state.y_pc = action.yPercentage;\n            break;\n        case SET_BRANCH_SPACING:\n            state.branch_spacing = action.branchSpacing;\n            break;\n        case SET_PADDING_PERCENTAGE:\n            state.padding = action.paddingPercentage;\n            break;\n        case SET_DIRECTION_INDICATOR_X:\n            state.direction_gz_x = action.directionIndicatorX;\n            break;\n        case SET_DIRECTION_INDICATOR_Y:\n            state.direction_gz_y = action.directionIndicatorY;\n            break;\n        case SET_THEME:\n            state.theme = action.theme;\n            break;\n        case SET_LINE_NAME:\n            state.line_name = action.lineName;\n            break;\n        case SET_DIRECTION:\n            state.direction = action.direction;\n            break;\n        case SET_PLATFORM:\n            state.platform_num = action.platform;\n            break;\n        case SET_LINE_NUM:\n            state.line_num = action.lineNum;\n            break;\n        case SET_PSD_NUM:\n            state.psd_num = action.psdNum;\n            break;\n        case SET_PANEL_TYPE:\n            state.info_panel_type = action.panelType;\n            break;\n        case SET_NOTES:\n            state.notesGZMTR = action.notes;\n            break;\n        case SET_NAME_POSITION:\n            state.namePosMTR = action.namePosition;\n            break;\n        case SET_CUSTOMISED_MTR_DESTINATION:\n            state.customiseMTRDest = action.customisedMtrDestination;\n            break;\n        case SET_CURRENT_STATION:\n            state.current_stn_idx = action.currentStation;\n            break;\n        case SET_STATION:\n            state.stn_list[action.stationId] = action.station;\n            break;\n        case SET_STATIONS_BULK:\n            state.stn_list = action.stations;\n            break;\n        default:\n            break;\n    }\n    return { ...state };\n}\n","import {\n    SET_BRANCHES,\n    SET_DEPS_STR,\n    SET_ROUTES,\n    SET_TPO,\n    setBranchesAction,\n    setDepsStrAction,\n    setRoutesAction,\n    setTpoAction,\n} from './action';\n\ninterface HelperState {\n    depsStr: string;\n    branches: string[][];\n    routes: string[][];\n    tpo: string[];\n}\n\nconst initialState: HelperState = { depsStr: '', branches: [], routes: [], tpo: [] };\n\nexport default function HelperReducer(\n    state = initialState,\n    action: setDepsStrAction | setBranchesAction | setRoutesAction | setTpoAction\n) {\n    switch (action.type) {\n        case SET_DEPS_STR:\n            state.depsStr = action.depsStr;\n            break;\n        case SET_BRANCHES:\n            state.branches = action.branches;\n            break;\n        case SET_ROUTES:\n            state.routes = action.routes;\n            break;\n        case SET_TPO:\n            state.tpo = action.tpo;\n            break;\n        default:\n            break;\n    }\n\n    return { ...state };\n}\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunk, { ThunkMiddleware } from 'redux-thunk';\nimport AppReducer from './app/reducer';\nimport ParamReducer from './param/reducer';\nimport HelperReducer from './helper/reducer';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\n\nconst rootReducer = combineReducers({\n    app: AppReducer,\n    param: ParamReducer,\n    helper: HelperReducer,\n});\nexport type RootState = ReturnType<typeof rootReducer>;\n\nconst store = createStore(rootReducer, applyMiddleware(thunk as ThunkMiddleware<RootState>));\nexport default store;\n\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import {\n    BranchStyle,\n    CanvasType,\n    Direction,\n    Facilities,\n    InterchangeInfo,\n    Name,\n    Note,\n    PanelTypeGZMTR,\n    PanelTypeShmetro,\n    RMGParam,\n    Services,\n    ShortDirection,\n    StationDict,\n    StationInfo,\n    Theme,\n} from '../../constants/constants';\nimport { AppDispatch, RootState } from '../index';\nimport { triggerHelpersUpdate } from '../helper/action';\n\nexport const SET_FULL_PARAM = 'SET_FULL_PARAM';\n\n// layout\nexport const SET_SVG_HEIGHT = 'SET_SVG_HEIGHT';\nexport const SET_SVG_WIDTH = 'SET_SVG_WIDTH';\nexport const SET_Y_PERCENTAGE = 'SET_Y_PERCENTAGE';\nexport const SET_BRANCH_SPACING = 'SET_BRANCH_SPACING';\nexport const SET_PADDING_PERCENTAGE = 'SET_PADDING_PERCENTAGE';\nexport const SET_DIRECTION_INDICATOR_X = 'SET_DIRECTION_INDICATOR_X';\nexport const SET_DIRECTION_INDICATOR_Y = 'SET_DIRECTION_INDICATOR_Y';\n\n// design\nexport const SET_THEME = 'SET_THEME';\nexport const SET_LINE_NAME = 'SET_LINE_NAME';\nexport const SET_DIRECTION = 'SET_DIRECTION';\nexport const SET_PLATFORM = 'SET_PLATFORM';\nexport const SET_LINE_NUM = 'SET_LINE_NUM';\nexport const SET_PSD_NUM = 'SET_PSD_NUM';\nexport const SET_PANEL_TYPE = 'SET_PANEL_TYPE';\nexport const SET_NOTES = 'SET_NOTES';\nexport const SET_NAME_POSITION = 'SET_NAME_POSITION';\nexport const SET_CUSTOMISED_MTR_DESTINATION = 'SET_CUSTOMISED_MTR_DESTINATION';\n\n// stations\nexport const SET_CURRENT_STATION = 'SET_CURRENT_STATION';\nexport const SET_STATION = 'SET_STATION';\nexport const SET_STATIONS_BULK = 'SET_STATIONS_BULK';\n\nexport interface setFullParamAction {\n    type: typeof SET_FULL_PARAM;\n    fullParam: RMGParam;\n}\n\nexport interface setSvgHeightAction {\n    type: typeof SET_SVG_HEIGHT;\n    svgHeight: number;\n}\n\nexport interface setSvgWidthAction {\n    type: typeof SET_SVG_WIDTH;\n    svgWidth: number;\n    canvas: CanvasType;\n}\n\nexport interface setYPercentageAction {\n    type: typeof SET_Y_PERCENTAGE;\n    yPercentage: number;\n}\n\nexport interface setBranchSpacingAction {\n    type: typeof SET_BRANCH_SPACING;\n    branchSpacing: number;\n}\n\nexport interface setPaddingPercentageAction {\n    type: typeof SET_PADDING_PERCENTAGE;\n    paddingPercentage: number;\n}\n\nexport interface setDirectionIndicatorXAction {\n    type: typeof SET_DIRECTION_INDICATOR_X;\n    directionIndicatorX: number;\n}\n\nexport interface setDirectionIndicatorYAction {\n    type: typeof SET_DIRECTION_INDICATOR_Y;\n    directionIndicatorY: number;\n}\n\nexport interface setThemeAction {\n    type: typeof SET_THEME;\n    theme: Theme;\n}\n\nexport interface setLineNameAction {\n    type: typeof SET_LINE_NAME;\n    lineName: Name;\n}\n\nexport interface setDirectionAction {\n    type: typeof SET_DIRECTION;\n    direction: ShortDirection;\n}\n\nexport interface setPlatformAction {\n    type: typeof SET_PLATFORM;\n    platform: string | false;\n}\n\nexport interface setLineNumAction {\n    type: typeof SET_LINE_NUM;\n    lineNum: string;\n}\n\nexport interface setPsdNumAction {\n    type: typeof SET_PSD_NUM;\n    psdNum: string;\n}\n\nexport interface setPanelTypeAction {\n    type: typeof SET_PANEL_TYPE;\n    panelType: PanelTypeGZMTR | PanelTypeShmetro;\n}\n\nexport interface setNotesAction {\n    type: typeof SET_NOTES;\n    notes: Note[];\n}\n\nexport interface setNamePositionAction {\n    type: typeof SET_NAME_POSITION;\n    namePosition: RMGParam['namePosMTR'];\n}\n\nexport interface setCustomisedMtrDestinationAction {\n    type: typeof SET_CUSTOMISED_MTR_DESTINATION;\n    customisedMtrDestination: RMGParam['customiseMTRDest'];\n}\n\nexport interface setCurrentStationAction {\n    type: typeof SET_CURRENT_STATION;\n    currentStation: string;\n}\n\nexport interface setStationAction {\n    type: typeof SET_STATION;\n    stationId: string;\n    station: StationInfo;\n}\n\nexport interface setStationsBulkAction {\n    type: typeof SET_STATIONS_BULK;\n    stations: StationDict;\n}\n\n// export const setFullParam = (fullParam: RMGParam): setFullParamAction => {\n//     return { type: SET_FULL_PARAM, fullParam };\n// };\n\nexport const setFullParam = (fullParam: RMGParam) => {\n    return (dispatch: AppDispatch) => {\n        dispatch({ type: SET_FULL_PARAM, fullParam });\n        dispatch(triggerHelpersUpdate());\n    };\n};\n\nexport const setSvgHeight = (svgHeight: number): setSvgHeightAction => {\n    return { type: SET_SVG_HEIGHT, svgHeight };\n};\n\nexport const setSvgWidth = (svgWidth: number, canvas: CanvasType): setSvgWidthAction => {\n    return { type: SET_SVG_WIDTH, svgWidth, canvas };\n};\n\nexport const setYPercentage = (yPercentage: number): setYPercentageAction => {\n    return { type: SET_Y_PERCENTAGE, yPercentage };\n};\n\nexport const setBranchSpacing = (branchSpacing: number): setBranchSpacingAction => {\n    return { type: SET_BRANCH_SPACING, branchSpacing };\n};\n\nexport const setPaddingPercentage = (paddingPercentage: number): setPaddingPercentageAction => {\n    return { type: SET_PADDING_PERCENTAGE, paddingPercentage };\n};\n\nexport const setDirectionIndicatorX = (directionIndicatorX: number): setDirectionIndicatorXAction => {\n    return { type: SET_DIRECTION_INDICATOR_X, directionIndicatorX };\n};\n\nexport const setDirectionIndicatorY = (directionIndicatorY: number): setDirectionIndicatorYAction => {\n    return { type: SET_DIRECTION_INDICATOR_Y, directionIndicatorY };\n};\n\nexport const setTheme = (theme: Theme): setThemeAction => {\n    return { type: SET_THEME, theme };\n};\n\nexport const setLineName = (lineName: Name): setLineNameAction => {\n    return { type: SET_LINE_NAME, lineName };\n};\n\nexport const setDirection = (direction: ShortDirection): setDirectionAction => {\n    return { type: SET_DIRECTION, direction };\n};\n\nexport const setPlatform = (platform: string | false): setPlatformAction => {\n    return { type: SET_PLATFORM, platform };\n};\n\nexport const setLineNum = (lineNum: string): setLineNumAction => {\n    return { type: SET_LINE_NUM, lineNum };\n};\n\nexport const setPsdNum = (psdNum: string): setPsdNumAction => {\n    return { type: SET_PSD_NUM, psdNum };\n};\n\nexport const setPanelType = (panelType: PanelTypeShmetro | PanelTypeGZMTR): setPanelTypeAction => {\n    return { type: SET_PANEL_TYPE, panelType };\n};\n\nconst setNotes = (notes: Note[]): setNotesAction => {\n    return { type: SET_NOTES, notes };\n};\n\nexport const addNote = () => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const notes = getState().param.notesGZMTR;\n        dispatch(setNotes(notes.concat([['', '', 0, 0, false]])));\n    };\n};\n\nexport const updateNote = (index: number, updatedNote: Note) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const notes = getState().param.notesGZMTR;\n        dispatch(setNotes(notes.map((originalNote, idx) => (idx === index ? updatedNote : originalNote))));\n    };\n};\n\nexport const removeNote = (index: number) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const notes = getState().param.notesGZMTR;\n        dispatch(setNotes(notes.filter((_, idx) => idx !== index)));\n    };\n};\n\nconst setNamePosition = (namePosition: RMGParam['namePosMTR']): setNamePositionAction => {\n    return { type: SET_NAME_POSITION, namePosition };\n};\n\nexport const staggerStationNames = (isStagger: boolean) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const namePosition = getState().param.namePosMTR;\n        dispatch(setNamePosition({ ...namePosition, isStagger }));\n    };\n};\n\nexport const flipStationNames = () => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const namePosition = getState().param.namePosMTR;\n        dispatch(setNamePosition({ ...namePosition, isFlip: !namePosition.isFlip }));\n    };\n};\n\nconst setCustomisedMtrDestination = (\n    customisedMtrDestination: RMGParam['customiseMTRDest']\n): setCustomisedMtrDestinationAction => {\n    return { type: SET_CUSTOMISED_MTR_DESTINATION, customisedMtrDestination };\n};\n\nexport const toggleLineNameBeforeDestination = (isShow: boolean) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const customisedMtrDestination = getState().param.customiseMTRDest;\n        dispatch(setCustomisedMtrDestination({ ...customisedMtrDestination, isLegacy: isShow }));\n    };\n};\n\nexport const customiseDestinationName = (customisedName: Name | false) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const customisedMtrDestination = getState().param.customiseMTRDest;\n        dispatch(setCustomisedMtrDestination({ ...customisedMtrDestination, terminal: customisedName }));\n    };\n};\n\nexport const setCurrentStation = (currentStation: string): setCurrentStationAction => {\n    return { type: SET_CURRENT_STATION, currentStation };\n};\n\n// const setStation = (stationId: string, station: StationInfo): setStationAction => {\n//     return { type: SET_STATION, stationId, station };\n// };\n\nexport const setStation = (stationId: string, station: StationInfo) => {\n    return (dispatch: AppDispatch) => {\n        dispatch({ type: SET_STATION, stationId, station });\n        dispatch(triggerHelpersUpdate());\n    };\n};\n\n// export const setStationsBulk = (stations: StationDict): setStationsBulkAction => {\n//     return { type: SET_STATIONS_BULK, stations };\n// };\n\nexport const setStationsBulk = (stations: StationDict) => {\n    return (dispatch: AppDispatch) => {\n        dispatch({ type: SET_STATIONS_BULK, stations });\n        dispatch(triggerHelpersUpdate());\n    };\n};\n\nexport const reverseStations = () => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const { stn_list } = getState().param;\n        const newStationList = Object.keys(stn_list).reduce(\n            (acc, stnId) => ({\n                ...acc,\n                [stnId]: (id => {\n                    switch (id) {\n                        case 'linestart':\n                            return {\n                                ...stn_list.lineend,\n                                parents: [],\n                                children: stn_list.lineend.parents.slice().reverse(),\n                                branch: { left: [] as [], right: stn_list.lineend.branch.left },\n                            };\n                        case 'lineend':\n                            return {\n                                ...stn_list.linestart,\n                                parents: stn_list.linestart.children.slice().reverse(),\n                                children: [],\n                                branch: { left: stn_list.linestart.branch.right, right: [] as [] },\n                            };\n                        default:\n                            return {\n                                ...stn_list[id],\n                                parents: stn_list[id].children\n                                    .map(id => (id === 'linestart' ? 'lineend' : id === 'lineend' ? 'linestart' : id))\n                                    .reverse(),\n                                children: stn_list[id].parents\n                                    .map(id => (id === 'linestart' ? 'lineend' : id === 'lineend' ? 'linestart' : id))\n                                    .reverse(),\n                                branch: {\n                                    left: stn_list[id].branch.right,\n                                    right: stn_list[id].branch.left,\n                                },\n                            };\n                    }\n                })(stnId),\n            }),\n            {} as StationDict\n        );\n        dispatch(setStationsBulk(newStationList));\n    };\n};\n\nexport const updateStationName = (stationId: string, name: Name) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(setStation(stationId, { ...stationInfo, name }));\n    };\n};\n\nexport const updateStationSecondaryName = (stationId: string, secondaryName: Name | false) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(setStation(stationId, { ...stationInfo, secondaryName }));\n    };\n};\n\nexport const updateStationNum = (stationId: string, num: string) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(setStation(stationId, { ...stationInfo, num }));\n    };\n};\n\n/**\n *\n * @param stationId\n * @param setIndex - set 0: within-station interchange. set 1: Out of station(OSI) transfer. set 2: Out of system(OSysI) transfer\n * @param interchangeInfo\n */\nexport const addInterchange = (stationId: string, setIndex: number, interchangeInfo: InterchangeInfo) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n\n        const newTransferInfo = stationInfo.transfer.info.map(i => i.slice());\n        if (newTransferInfo.length > setIndex) {\n            newTransferInfo[setIndex].push(interchangeInfo);\n        } else {\n            for (let i = newTransferInfo.length; i < setIndex; i++) {\n                newTransferInfo[i] = [];\n            }\n            newTransferInfo[setIndex] = [interchangeInfo];\n        }\n\n        dispatch(\n            setStation(stationId, { ...stationInfo, transfer: { ...stationInfo.transfer, info: newTransferInfo } })\n        );\n    };\n};\n\nexport const removeInterchange = (stationId: string, setIndex: number, interchangeIndex: number) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n\n        if (\n            stationInfo.transfer.info.length > setIndex &&\n            stationInfo.transfer.info[setIndex].length > interchangeIndex\n        ) {\n            const newTransferInfo = stationInfo.transfer.info.map((set, setIdx) =>\n                setIdx === setIndex ? set.filter((_, intIdx) => intIdx !== interchangeIndex) : set\n            );\n            dispatch(\n                setStation(stationId, { ...stationInfo, transfer: { ...stationInfo.transfer, info: newTransferInfo } })\n            );\n        }\n    };\n};\n\nexport const updateInterchange = (\n    stationId: string,\n    setIndex: number,\n    interchangeIndex: number,\n    interchangeInfo: InterchangeInfo\n) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n\n        if (\n            stationInfo.transfer.info.length > setIndex &&\n            stationInfo.transfer.info[setIndex].length > interchangeIndex\n        ) {\n            const newTransferInfo = stationInfo.transfer.info.map((set, setIdx) =>\n                setIdx === setIndex\n                    ? set.map((int, intIdx) =>\n                          intIdx === interchangeIndex\n                              ? ([0, 1, 2, 3, 4, 5].map(i =>\n                                    interchangeInfo[i] === undefined ? int[i] : interchangeInfo[i]\n                                ) as InterchangeInfo)\n                              : int\n                      )\n                    : set\n            );\n            dispatch(\n                setStation(stationId, { ...stationInfo, transfer: { ...stationInfo.transfer, info: newTransferInfo } })\n            );\n        }\n    };\n};\n\nexport const updateStationOsiName = (stationId: string, setIndex: number, osiName: Name) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n\n        const newOsiNames = stationInfo.transfer.osi_names.map(i => i.slice()) as Name[];\n        if (newOsiNames.length > setIndex) {\n            newOsiNames[setIndex] = osiName;\n        } else {\n            for (let i = newOsiNames.length; i < setIndex; i++) {\n                newOsiNames[i] = ['車站名', 'Stn Name'];\n            }\n            newOsiNames[setIndex] = osiName;\n        }\n        dispatch(\n            setStation(stationId, {\n                ...stationInfo,\n                transfer: { ...stationInfo.transfer, osi_names: newOsiNames },\n            })\n        );\n    };\n};\n\nexport const updateStationTickDirection = (stationId: string, tickDirection: ShortDirection) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(\n            setStation(stationId, {\n                ...stationInfo,\n                transfer: { ...stationInfo.transfer, tick_direc: tickDirection },\n            })\n        );\n    };\n};\n\nexport const updateStationPaidArea = (stationId: string, isPaidArea: boolean) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(\n            setStation(stationId, {\n                ...stationInfo,\n                transfer: { ...stationInfo.transfer, paid_area: isPaidArea },\n            })\n        );\n    };\n};\n\nexport const updateStationBranchType = (stationId: string, direction: Direction, branchStyle: BranchStyle) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(\n            setStation(stationId, {\n                ...stationInfo,\n                branch: { ...stationInfo.branch, [direction]: [branchStyle, stationInfo.branch[direction][1]] },\n            })\n        );\n    };\n};\n\nexport type UpdateStationBranchFirstStationArgType = { stnId: string; direction: Direction; first: string };\n\n// FIXME\nexport const updateStationBranchFirstStation = (\n    branches: [UpdateStationBranchFirstStationArgType, UpdateStationBranchFirstStationArgType]\n) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const { stn_list } = getState().param;\n        dispatch(\n            setStationsBulk({\n                ...stn_list,\n                [branches[0].stnId]: {\n                    ...stn_list[branches[0].stnId],\n                    branch: {\n                        ...stn_list[branches[0].stnId].branch,\n                        [branches[0].direction]: [\n                            stn_list[branches[0].stnId].branch[branches[0].direction][0],\n                            branches[0].first,\n                        ],\n                    },\n                },\n                [branches[1].stnId]: {\n                    ...stn_list[branches[1].stnId],\n                    branch: {\n                        ...stn_list[branches[1].stnId].branch,\n                        [branches[1].direction]: [\n                            stn_list[branches[1].stnId].branch[branches[1].direction][0],\n                            branches[1].first,\n                        ],\n                    },\n                },\n            })\n        );\n    };\n};\n\nexport const flipStationBranchPosition = (left: string, right: string) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const { stn_list } = getState().param;\n        dispatch(\n            setStationsBulk({\n                ...stn_list,\n                [left]: { ...stn_list[left], parents: stn_list[left].parents.slice().reverse() },\n                [right]: { ...stn_list[right], children: stn_list[right].children.slice().reverse() },\n            })\n        );\n    };\n};\n\nexport const updateStationFacility = (stationId: string, facility: Facilities) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n        dispatch(setStation(stationId, { ...stationInfo, facility }));\n    };\n};\n\nexport const addStationService = (stationId: string, service: Services) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n\n        if (!stationInfo.services.includes(service)) {\n            dispatch(setStation(stationId, { ...stationInfo, services: stationInfo.services.concat(service) }));\n        }\n    };\n};\n\nexport const removeStationService = (stationId: string, service: Services) => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stationInfo = getState().param.stn_list[stationId];\n\n        if (stationInfo.services.includes(service)) {\n            dispatch(\n                setStation(stationId, {\n                    ...stationInfo,\n                    services: stationInfo.services.filter(s => s !== service),\n                })\n            );\n        }\n    };\n};\n","import { AllCanvas, CanvasType, LoadingStatus, RmgStyle } from '../../constants/constants';\nimport { Dispatch } from 'redux';\nimport { RootState } from '../index';\n\nexport const SET_RMG_STYLE = 'SET_RMG_STYLE';\nexport const SET_CANVAS_SCALE = 'SET_CANVAS_SCALE';\nexport const SET_CANVAS_SCALE_STATUS = 'SET_CANVAS_SCALE_STATUS';\nexport const SET_CANVAS_TO_SHOW = 'SET_CANVAS_TO_SHOW';\nexport const SET_CANVAS_TO_SHOW_STATUS = 'SET_CANVAS_TO_SHOW_STATUS';\n\nexport interface setRmgStyleAction {\n    type: typeof SET_RMG_STYLE;\n    rmgStyle: RmgStyle;\n}\n\nexport interface setCanvasScaleAction {\n    type: typeof SET_CANVAS_SCALE;\n    canvasScale: number;\n}\n\nexport interface setCanvasScaleStatusAction {\n    type: typeof SET_CANVAS_SCALE_STATUS;\n    canvasScaleStatus: LoadingStatus;\n}\n\nexport interface setCanvasToShowAction {\n    type: typeof SET_CANVAS_TO_SHOW;\n    canvasToShow: CanvasType | typeof AllCanvas;\n}\n\nexport interface setCanvasToShowStatusAction {\n    type: typeof SET_CANVAS_TO_SHOW_STATUS;\n    canvasToShowStatus: LoadingStatus;\n}\n\nexport const setRmgStyle = (rmgStyle: RmgStyle) => {\n    return { type: SET_RMG_STYLE, rmgStyle } as setRmgStyleAction;\n};\n\nexport const setCanvasScale = (canvasScale: number) => {\n    return { type: SET_CANVAS_SCALE, canvasScale } as setCanvasScaleAction;\n};\n\nconst setCanvasScaleStatus = (canvasScaleStatus: LoadingStatus) => {\n    return { type: SET_CANVAS_SCALE_STATUS, canvasScaleStatus } as setCanvasScaleStatusAction;\n};\n\nexport const zoomIn = () => {\n    return async (dispatch: Dispatch, getState: () => RootState) => {\n        dispatch(setCanvasScaleStatus(LoadingStatus.loading));\n        try {\n            const newScale = Number((getState().app.canvasScale + 0.1).toFixed(1));\n            dispatch(setCanvasScale(newScale));\n            await window.rmgStorage.writeFile('rmgScale', newScale.toString());\n            dispatch(setCanvasScaleStatus(LoadingStatus.loaded));\n        } catch (err) {\n            dispatch(setCanvasScaleStatus(LoadingStatus.failed));\n        }\n    };\n};\n\nexport const zoomOut = () => {\n    return async (dispatch: Dispatch, getState: () => RootState) => {\n        dispatch(setCanvasScaleStatus(LoadingStatus.loading));\n        try {\n            const { canvasScale } = getState().app;\n            const newScale =\n                Number(canvasScale.toFixed(1)) <= 0.1\n                    ? Number(canvasScale.toFixed(1))\n                    : Number((canvasScale - 0.1).toFixed(1));\n            dispatch(setCanvasScale(newScale));\n            await window.rmgStorage.writeFile('rmgScale', newScale.toString());\n            dispatch(setCanvasScaleStatus(LoadingStatus.loaded));\n        } catch (err) {\n            dispatch(setCanvasScaleStatus(LoadingStatus.failed));\n        }\n    };\n};\n\nexport const setCanvasToShow = (canvasToShow: CanvasType | typeof AllCanvas) => {\n    return { type: SET_CANVAS_TO_SHOW, canvasToShow } as setCanvasToShowAction;\n};\n\nconst setCanvasToShowStatus = (canvasToShowStatus: LoadingStatus) => {\n    return { type: SET_CANVAS_TO_SHOW_STATUS, canvasToShowStatus } as setCanvasToShowStatusAction;\n};\n\nexport const selectCanvas = (canvas: CanvasType | typeof AllCanvas) => {\n    return async (dispatch: Dispatch) => {\n        dispatch(setCanvasToShowStatus(LoadingStatus.loading));\n        try {\n            dispatch(setCanvasToShow(canvas));\n            await window.rmgStorage.writeFile('rmgCanvas', canvas);\n            dispatch(setCanvasToShowStatus(LoadingStatus.loaded));\n        } catch (err) {\n            dispatch(setCanvasToShowStatus(LoadingStatus.failed));\n        }\n    };\n};\n","import { AppDispatch, RootState } from '../index';\nimport { getBranches, getRoutes, getTpo } from './graph-theory-util';\n\nexport const SET_DEPS_STR = 'SET_DEPS_STR';\nexport const SET_BRANCHES = 'SET_BRANCHES';\nexport const SET_ROUTES = 'SET_ROUTES';\nexport const SET_TPO = 'SET_TPO';\n\nexport type setDepsStrAction = {\n    type: typeof SET_DEPS_STR;\n    depsStr: string;\n};\nexport type setBranchesAction = {\n    type: typeof SET_BRANCHES;\n    branches: string[][];\n};\nexport type setRoutesAction = {\n    type: typeof SET_ROUTES;\n    routes: string[][];\n};\nexport type setTpoAction = {\n    type: typeof SET_TPO;\n    tpo: string[];\n};\n\nconst setDepsStr = (depsStr: string): setDepsStrAction => {\n    return { type: SET_DEPS_STR, depsStr };\n};\n\nconst setBranches = (branches: string[][]): setBranchesAction => {\n    return { type: SET_BRANCHES, branches };\n};\n\nconst setRoutes = (routes: string[][]): setRoutesAction => {\n    return { type: SET_ROUTES, routes };\n};\n\nconst setTpo = (tpo: string[]): setTpoAction => {\n    return { type: SET_TPO, tpo };\n};\n\nconst calcAndGetDepsStr = () => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const stnList = getState().param.stn_list;\n        const nextDepsStr = Object.entries(stnList)\n            .map(\n                ([stationId, stationInfo]) =>\n                    stationId +\n                    stationInfo.parents.toString() +\n                    stationInfo.children.toString() +\n                    JSON.stringify(stationInfo.branch)\n            )\n            .join('');\n        dispatch(setDepsStr(nextDepsStr));\n        return nextDepsStr;\n    };\n};\n\nconst calcBranches = () => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        console.log('Re-calculating branches...');\n        const stnList = getState().param.stn_list;\n        const nextBranches = getBranches(stnList);\n        dispatch(setBranches(nextBranches));\n        return nextBranches;\n    };\n};\n\nconst calcRoutes = () => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        console.log('Re-calculating routes...');\n        const stnList = getState().param.stn_list;\n        dispatch(setRoutes(getRoutes(stnList)));\n    };\n};\n\nexport const triggerHelpersUpdate = () => {\n    return (dispatch: AppDispatch, getState: () => RootState) => {\n        const prevDepsStr = getState().helper.depsStr;\n        const nextDepsStr = dispatch(calcAndGetDepsStr());\n        if (prevDepsStr !== nextDepsStr) {\n            dispatch(calcRoutes());\n\n            const prevBranches = getState().helper.branches;\n            const nextBranches = dispatch(calcBranches());\n            if (prevBranches.toString() !== nextBranches.toString()) {\n                console.log('Re-calculating topology ordering...');\n                dispatch(setTpo(getTpo(nextBranches)));\n            }\n        }\n    };\n};\n","import { StationDict } from '../../constants/constants';\n\n/**\n * Getter of all branches (支線段) of the line (both ends included). The first branch must be the main line.\n * @example MTREastRailLine.branches\n * /*\n * [0]: [LineStart, Lo Wu, ..., Hung Hom, LineEnd]\n * [1]: [LineStart, Lok Ma Chau, Sheung Shui]\n * [2]: [University, Racecourse, Sha Tin]\n * /\n */\nexport const getBranches = (stnList: StationDict) => {\n    const stack = ['linestart'];\n    const branches = [['linestart']];\n    let branchCount = 0;\n\n    while (stack.length) {\n        let curId = stack.shift() as string;\n        let prevId = branches[branchCount].slice(-1)[0] || null;\n        if (prevId && curId !== 'linestart') {\n            branches[branchCount].push(curId);\n        } else {\n            branches[branchCount] = [curId];\n        }\n        while (curId !== 'lineend') {\n            prevId = curId;\n            const children = stnList[prevId].children;\n            switch (children.length) {\n                case 1:\n                    curId = children[0];\n                    break;\n                case 2:\n                    let branchNextId = stnList[prevId].branch.right[1] as string;\n                    // if (branchCount === 0) {\n                    if (stnList[prevId].branch.right[0] === 'through') {\n                        branches.push([curId]);\n                        stack.push(branchNextId);\n                    } else {\n                        if (branchCount === 0) {\n                            branches.push([prevId]);\n                            stack.push(branchNextId);\n                            // all branching out nodes are added to stack in the first loop\n                        }\n                    }\n                    curId = children.filter(stnId => stnId !== branchNextId)[0];\n                    break;\n            }\n            branches[branchCount].push(curId);\n\n            if (prevId === stnList[curId].branch.left[1]) {\n                break;\n            }\n        }\n        // branches[branchCount] = curBranch;\n        branchCount++;\n    }\n\n    return branches;\n};\n\n/**\n * Getter of all routes (行車交路) of the line (both ends included). The first branch must be the main line.\n * @example MTREastRailLine.branches\n * /*\n * [0]: [LineStart, Lo Wu, Sheung Shui, ..., Hung Hom, LineEnd]\n * [1]: [LineStart, Lok Ma Chau, Sheung Shui, ..., Hung Hom, LineEnd]\n * [2]: [LineStart, Lo Wu, Sheung Shui, ..., University, Racecourse, Sha Tin, ..., Hung Hom, LineEnd]\n * [3]: [LineStart, Lok Ma Chau, Sheung Shui, ..., University, Racecourse, Sha Tin, ..., Hung Hom, LineEnd]\n * /\n */\nexport const getRoutes = (stnList: StationDict) => {\n    const stack = ['linestart'];\n    const branches = [['linestart']];\n    let branchCount = 0;\n\n    while (stack.length) {\n        let curId = stack.shift() as string;\n        let prevId = branches[branchCount].slice(-1)[0] || null;\n        if (prevId && curId !== 'linestart') {\n            branches[branchCount].push(curId);\n        } else {\n            branches[branchCount] = [curId];\n        }\n        while (curId !== 'lineend') {\n            prevId = curId;\n            const children = stnList[prevId].children;\n            switch (children.length) {\n                case 1:\n                    curId = children[0];\n                    break;\n                case 2:\n                    let branchNextId = stnList[prevId].branch.right[1] as string;\n                    // if (branchCount === 0) {\n                    if (stnList[prevId].branch.right[0] === 'through') {\n                        branches.push(branches[branchCount].slice());\n                        stack.push(branchNextId);\n                    } else {\n                        if (branchCount === 0) {\n                            branches.push([prevId]);\n                            stack.push(branchNextId);\n                        }\n                        // branches.push([prevId]);\n                    }\n                    // stack.push(branchNextId);\n                    // }\n                    curId = children.filter(stnId => stnId !== branchNextId)[0];\n                    break;\n            }\n            branches[branchCount].push(curId);\n\n            if (prevId === stnList[curId].branch.left[1] && stnList[curId].branch.left[0] === 'nonthrough') {\n                break;\n            }\n        }\n        // branches[branchCount] = curBranch;\n        branchCount++;\n    }\n\n    return branches;\n};\n\n/**\n * Calculate topology ordering for all stations by stacking all branches into an 1-dimension array\n */\nexport const getTpo = (branches: string[][]) => {\n    if (branches.length === 1) {\n        return branches[0].slice(1, -1);\n    } else {\n        return branches\n            .reduce(\n                (acc, cur) => {\n                    // insert the other branch before the rest of the main branch\n                    const idx = acc.indexOf(cur[cur.length - 1]);\n                    return [...acc.slice(0, idx), ...cur.slice(1), ...acc.slice(idx + 1)];\n                },\n                ['lineend']\n            )\n            .slice(0, -1);\n    }\n};\n","module.exports = ReactI18next;","module.exports = ReactRouterDOM;","module.exports = ReactRedux;","module.exports = Redux;","import { LanguageCode, Note, RmgStyle, StationInfo, Translation } from './constants/constants';\n\nexport const updateParam = (param: { [x: string]: any }) => {\n    // Version 0.10\n    if (!('line_name' in param)) {\n        param.line_name = ['路線名', 'Name of Line'];\n    }\n    if (!('dest_legacy' in param)) {\n        param.dest_legacy = false;\n    }\n\n    // Version 0.11\n    delete param.fontZH;\n    delete param.fontEN;\n    delete param.weightZH;\n    delete param.weightEN;\n\n    // Version 0.12\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (!('branch' in stnInfo)) {\n            param.stn_list[stnId].branch = { left: [], right: [] };\n            if (stnInfo.children.length === 2) {\n                param.stn_list[stnId].branch.right = ['through', stnInfo.children[1]];\n            } else {\n                param.stn_list[stnId].branch.right = [];\n            }\n            if (stnInfo.parents.length === 2) {\n                param.stn_list[stnId].branch.left = ['through', stnInfo.parents[1]];\n            } else {\n                param.stn_list[stnId].branch.left = [];\n            }\n        }\n    }\n\n    // Version 1.2\n    if (!('psd_num' in param)) {\n        param.psd_num = '1';\n    } else {\n        param.psd_num = param.psd_num.toString();\n    }\n\n    if (!('line_num' in param)) {\n        param.line_num = '1';\n    }\n    delete param.style;\n    if (param.theme.length === 3) {\n        param.theme.push('#fff');\n    }\n\n    // Version 1.3\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (!('num' in stnInfo)) {\n            param.stn_list[stnId].num = '00';\n        }\n        if ('interchange' in stnInfo) {\n            stnInfo.interchange.map((arr: any) => {\n                return arr.forEach((intInfo: any) => {\n                    if (intInfo.length === 5) {\n                        intInfo.splice(3, 0, '#fff');\n                    }\n                });\n            });\n        }\n    }\n\n    // Version 1.5\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (stnInfo.change_type === 'osi22_end_p') {\n            param.stn_list[stnId].change_type = 'osi22_pr';\n        }\n        if (stnInfo.change_type === 'osi22_end_u') {\n            param.stn_list[stnId].change_type = 'osi22_ur';\n        }\n    }\n\n    // Version 2.1\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (!('interchange' in stnInfo)) {\n            param.stn_list[stnId].interchange = [[]];\n        }\n    }\n\n    // Version 1.4\n    // Version 2.2\n    // Version 2.3\n    if (!('info_panel_type' in param)) {\n        param.info_panel_type = 'gz28';\n    } else {\n        param.info_panel_type = (type => {\n            switch (type) {\n                case 'gz_1':\n                case 'panasonic':\n                    return 'gz28';\n                case 'gz_2':\n                    return 'gz6';\n                case 'gz_3':\n                    return 'gz3';\n                default:\n                    return type;\n            }\n        })(param.info_panel_type);\n    }\n\n    if (!('direction_gz_x' in param)) {\n        param.direction_gz_x = 50;\n    }\n    if (!('direction_gz_y' in param)) {\n        param.direction_gz_y = 70;\n    }\n\n    // Version 2.6\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (!('transfer' in stnInfo)) {\n            param.stn_list[stnId].transfer = {\n                // type: stnInfo.change_type?.split('_')[0] as 'none' | 'int2' | 'int3' | 'osi11' | 'osi12' | 'osi22',\n                tick_direc:\n                    stnInfo.change_type === 'none' || stnInfo.change_type === 'int2'\n                        ? 'r'\n                        : (stnInfo.change_type?.split('_')[1].split('').slice().reverse()[0] as 'l' | 'r'),\n                paid_area:\n                    stnInfo.change_type?.indexOf('osi') !== -1 ? stnInfo.change_type?.split('_')[1][0] === 'p' : true,\n                osi_names: stnInfo.change_type?.indexOf('osi') !== -1 ? [stnInfo.interchange[1][0]] : [],\n                info:\n                    stnInfo.interchange.length === 2\n                        ? [stnInfo.interchange[0], stnInfo.interchange[1].slice(1)]\n                        : stnInfo.interchange,\n            };\n        }\n        delete param.stn_list[stnId].change_type;\n        delete param.stn_list[stnId].interchange;\n    }\n\n    // Version 2.8\n    // Version 3.0\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (!('services' in stnInfo)) {\n            param.stn_list[stnId].services = ['local'];\n        }\n        if (!('facility' in stnInfo)) {\n            if ('usage' in stnInfo) {\n                param.stn_list[stnId].facility = stnInfo.usage;\n            } else {\n                param.stn_list[stnId].facility = '';\n            }\n        }\n        delete param.stn_list[stnId].usage;\n    }\n\n    // Version 3.4\n    if (!('customiseMTRDest' in param)) {\n        param.customiseMTRDest = { isLegacy: param.dest_legacy || false, terminal: false };\n    }\n    delete param.dest_legacy;\n\n    // Version 3.4\n    if (!('svgWidth' in param)) {\n        param.svgWidth = {\n            destination: param.svg_dest_width,\n            runin: param.svg_dest_width,\n            railmap: param.svg_width,\n            indoor: param.svg_width,\n        };\n    }\n    // Version 3.8\n    if (!('indoor' in param.svgWidth)) {\n        param.svgWidth.indoor = param.svgWidth.railmap;\n    }\n    delete param.svg_width;\n    delete param.svg_dest_width;\n\n    if (!('notesGZMTR' in param)) {\n        param.notesGZMTR = [];\n    }\n\n    param.notesGZMTR = param.notesGZMTR?.map((note: any[]) =>\n        note.length === 4 ? note.concat([false]) : note\n    ) as Note[];\n\n    // Version 3.5.3\n    delete param.char_form;\n    delete param.show_outer;\n    delete param.strip_pc;\n    delete param.txt_bg_gap;\n\n    // Version 3.5.4\n    if (!('namePosMTR' in param)) {\n        param.namePosMTR = {\n            isStagger: true,\n            isFlip: param.txt_flip,\n        };\n    }\n    delete param.txt_flip;\n\n    // Version 3.5.6\n    // Version 3.6.2\n    Object.keys(param.stn_list).forEach(stnId => {\n        if (!('secondaryName' in param.stn_list[stnId])) {\n            param.stn_list[stnId].secondaryName = false;\n        } else {\n            if (param.stn_list[stnId].secondaryName !== false && param.stn_list[stnId].secondaryName.join() === ',') {\n                param.stn_list[stnId].secondaryName = false;\n            }\n        }\n\n        if ('type' in param.stn_list[stnId].transfer) {\n            delete param.stn_list[stnId].transfer.type;\n        }\n    });\n\n    return param;\n};\n\nexport const getTransText2 = (obj: Translation, langs: LanguageCode[]) => {\n    for (let l of langs) {\n        if (obj[l]) return obj[l];\n    }\n    return obj[LanguageCode.English];\n};\n\n/**\n * Format display style of station name as `[num: ]nameZH,nameEN`.\n */\nexport const formatStnName = (stnInfo: StationInfo, style: RmgStyle) =>\n    (style === RmgStyle.GZMTR ? (stnInfo?.num || '-') + ': ' : '') + stnInfo?.name.join().replace('\\\\', ' ');\n","module.exports = i18next;","import { createContext } from 'react';\n\ninterface IParamContext {\n    branches: string[][];\n    routes: string[][];\n    deps: string;\n    tpo: string[];\n}\n\nexport const ParamContext = createContext<IParamContext>({} as IParamContext);\n","import { Translation } from './constants';\n\nexport enum CityCode {\n    Barcelona = 'barcelona',\n    Beijing = 'beijing',\n    Changsha = 'changsha',\n    Chengdu = 'chengdu',\n    Chongqing = 'chongqing',\n    Dongguan = 'dongguan',\n    Edinburgh = 'edinburgh',\n    Foshan = 'foshan',\n    Glasgow = 'glasgow',\n    Guangzhou = 'guangzhou',\n    Hangzhou = 'hangzhou',\n    HongKong = 'hongkong',\n    Kansai = 'kansai',\n    Kaohsiung = 'kaohsiung',\n    London = 'london',\n    Macao = 'macao',\n    Madrid = 'madrid',\n    Nanjing = 'nanjing',\n    NewTaipei = 'newtaipei',\n    Osaka = 'osaka',\n    Oslo = 'oslo',\n    Paris = 'paris',\n    Qingdao = 'qingdao',\n    SanFrancisco = 'sanfrancisco',\n    Seoul = 'seoul',\n    Shanghai = 'shanghai',\n    Shenzhen = 'shenzhen',\n    Singapore = 'singapore',\n    Stockholm = 'stockholm',\n    Taipei = 'taipei',\n    Tianjin = 'tianjin',\n    Tokyo = 'tokyo',\n    Toronto = 'toronto',\n    TyneAndWear = 'tyneandwear',\n    Xian = 'xian',\n    Other = 'other',\n}\n\ninterface CityEntry {\n    id: CityCode;\n    /**\n     * ISO 3166-1 alpha-2 country code. (For cities in Britain, append BS 6879 subdivision code. )\n     */\n    country: string;\n    /**\n     * Key-value pairs of multi-lingual names of the city.\n     */\n    name: Translation;\n}\n\nexport const cityList: CityEntry[] = [\n    {\n        id: CityCode.Barcelona,\n        country: 'ES',\n        name: {\n            en: 'Barcelona',\n            'zh-Hans': '巴塞罗那',\n            'zh-HK': '巴塞隆拿',\n            'zh-TW': '巴塞隆納',\n        },\n    },\n    {\n        id: CityCode.Beijing,\n        country: 'CN',\n        name: {\n            en: 'Beijing',\n            zh: '北京',\n        },\n    },\n    {\n        id: CityCode.Changsha,\n        country: 'CN',\n        name: {\n            en: 'Changsha',\n            'zh-Hans': '长沙',\n            'zh-Hant': '長沙',\n        },\n    },\n    {\n        id: CityCode.Chengdu,\n        country: 'CN',\n        name: {\n            en: 'Chengdu',\n            zh: '成都',\n        },\n    },\n    {\n        id: CityCode.Chongqing,\n        country: 'CN',\n        name: {\n            en: 'Chongqing',\n            'zh-Hans': '重庆',\n            'zh-Hant': '重慶',\n        },\n    },\n    {\n        id: CityCode.Dongguan,\n        country: 'CN',\n        name: {\n            en: 'Dongguan',\n            'zh-Hans': '东莞',\n            'zh-Hant': '東莞',\n        },\n    },\n    {\n        id: CityCode.Edinburgh,\n        country: 'GBSCT',\n        name: {\n            en: 'Edinburgh',\n            ga: 'Dùn Èideann',\n            'zh-Hans': '爱丁堡',\n            'zh-Hant': '愛丁堡',\n        },\n    },\n    {\n        id: CityCode.Foshan,\n        country: 'CN',\n        name: {\n            en: 'Foshan',\n            zh: '佛山',\n        },\n    },\n    {\n        id: CityCode.Glasgow,\n        country: 'GBSCT',\n        name: {\n            en: 'Glasgow',\n            ga: 'Glaschu',\n            zh: '格拉斯哥',\n        },\n    },\n    {\n        id: CityCode.Guangzhou,\n        country: 'CN',\n        name: {\n            en: 'Guangzhou',\n            'zh-Hans': '广州',\n            'zh-Hant': '廣州',\n        },\n    },\n    {\n        id: CityCode.Hangzhou,\n        country: 'CN',\n        name: {\n            en: 'Hangzhou',\n            zh: '杭州',\n        },\n    },\n    {\n        id: CityCode.HongKong,\n        country: 'HK',\n        name: {\n            en: 'Hong Kong',\n            zh: '香港',\n        },\n    },\n    {\n        id: CityCode.Kansai,\n        country: 'JP',\n        name: {\n            en: 'Kansai Area',\n            ja: '近畿地方',\n            'zh-Hans': '近畿地方（关西地方）',\n            'zh-Hant': '近畿地方（關西地方）',\n        },\n    },\n    {\n        id: CityCode.Kaohsiung,\n        country: 'TW',\n        name: {\n            en: 'Kaohsiung',\n            zh: '高雄',\n        },\n    },\n    {\n        id: CityCode.London,\n        country: 'GBENG',\n        name: {\n            en: 'London',\n            'zh-Hans': '伦敦',\n            'zh-Hant': '倫敦',\n        },\n    },\n    {\n        id: CityCode.Macao,\n        country: 'MO',\n        name: {\n            en: 'Macao',\n            pt: 'Macau',\n            'zh-Hans': '澳门',\n            'zh-Hant': '澳門',\n        },\n    },\n    {\n        id: CityCode.Madrid,\n        country: 'ES',\n        name: {\n            en: 'Madrid',\n            'zh-Hans': '马德里',\n            'zh-Hant': '馬德里',\n        },\n    },\n    {\n        id: CityCode.Nanjing,\n        country: 'CN',\n        name: {\n            en: 'Nanjing',\n            zh: '南京',\n        },\n    },\n    {\n        id: CityCode.NewTaipei,\n        country: 'TW',\n        name: {\n            en: 'New Taipei',\n            zh: '新北',\n        },\n    },\n    {\n        id: CityCode.Osaka,\n        country: 'JP',\n        name: {\n            en: 'Osaka',\n            ja: '大阪',\n            zh: '大阪',\n        },\n    },\n    {\n        id: CityCode.Oslo,\n        country: 'NO',\n        name: {\n            en: 'Oslo',\n            'zh-Hans': '奥斯陆',\n            'zh-Hant': '奧斯陸',\n        },\n    },\n    {\n        id: CityCode.Paris,\n        country: 'FR',\n        name: {\n            en: 'Paris',\n            zh: '巴黎',\n        },\n    },\n    {\n        id: CityCode.Qingdao,\n        country: 'CN',\n        name: {\n            en: 'Qingdao',\n            'zh-Hans': '青岛',\n            'zh-Hant': '青島',\n        },\n    },\n    {\n        id: CityCode.SanFrancisco,\n        country: 'US',\n        name: {\n            en: 'San Francisco',\n            'zh-Hans': '旧金山',\n            'zh-HK': '三藩市',\n            'zh-TW': '舊金山',\n        },\n    },\n    {\n        id: CityCode.Seoul,\n        country: 'KR',\n        name: {\n            en: 'Seoul (Metropolitan Area)',\n            ko: '서울(수도권)',\n            'zh-Hans': '首尔（首都圈）',\n            'zh-Hant': '首爾（首都圈）',\n        },\n    },\n    {\n        id: CityCode.Shanghai,\n        country: 'CN',\n        name: {\n            en: 'Shanghai',\n            zh: '上海',\n        },\n    },\n    {\n        id: CityCode.Shenzhen,\n        country: 'CN',\n        name: {\n            en: 'Shenzhen',\n            zh: '深圳',\n        },\n    },\n    {\n        id: CityCode.Singapore,\n        country: 'SG',\n        name: {\n            en: 'Singapore',\n            zh: '新加坡',\n        },\n    },\n    {\n        id: CityCode.Stockholm,\n        country: 'SE',\n        name: {\n            en: 'Stockholm',\n            'zh-Hans': '斯德哥尔摩',\n            'zh-Hant': '斯德哥爾摩',\n        },\n    },\n    {\n        id: CityCode.Taipei,\n        country: 'TW',\n        name: {\n            en: 'Taipei',\n            zh: '台北',\n        },\n    },\n    {\n        id: CityCode.Tianjin,\n        country: 'CN',\n        name: {\n            en: 'Tianjin',\n            zh: '天津',\n        },\n    },\n    {\n        id: CityCode.Tokyo,\n        country: 'JP',\n        name: {\n            en: 'Tokyo (Greater Tokyo Area)',\n            ja: '東京（首都圏）',\n            'zh-Hans': '东京（首都圈）',\n            'zh-Hant': '東京（首都圈）',\n        },\n    },\n    {\n        id: CityCode.Toronto,\n        country: 'CA',\n        name: {\n            en: 'Toronto',\n            'zh-Hans': '多伦多',\n            'zh-Hant': '多倫多',\n        },\n    },\n    {\n        id: CityCode.TyneAndWear,\n        country: 'GBENG',\n        name: {\n            en: 'Tyne and Wear',\n            'zh-Hans': '泰恩-威尔',\n            'zh-HK': '泰威',\n            'zh-TW': '泰恩-威爾',\n        },\n    },\n    {\n        id: CityCode.Xian,\n        country: 'CN',\n        name: {\n            en: \"Xi'an\",\n            zh: '西安',\n        },\n    },\n    {\n        id: CityCode.Other,\n        country: 'UN',\n        name: {\n            en: 'Customise',\n            'zh-Hans': '自定义',\n            'zh-Hant': '自訂',\n        },\n    },\n];\n","module.exports = ReactDOM;","module.exports = i18nextXHRBackend;","module.exports = i18nextBrowserLanguageDetector;","module.exports = ReduxThunk;","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport Backend from 'i18next-xhr-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\ni18n.use(Backend)\n    .use(LanguageDetector)\n    .use(initReactI18next)\n    .init({\n        fallbackLng: {\n            'zh-CN': ['zh-Hans', 'en'],\n            'zh-Hant': ['zh-HK', 'en'],\n            'zh-HK': ['zh-Hant', 'en'],\n            'zh-TW': ['zh-HK', 'zh-Hant'],\n            default: ['en'],\n        },\n        // debug: true,\n        backend: {\n            // for all available options read the backend's repository readme file\n            loadPath: process.env.PUBLIC_URL + '/locale/{{lng}}.json',\n        },\n\n        interpolation: {\n            escapeValue: false, // not needed for react as it escapes by default\n        },\n    })\n    .then(t => {\n        document.title = t('title');\n        document.documentElement.setAttribute('lang', i18n.language);\n    });\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    AppBar,\n    Toolbar,\n    Tooltip,\n    IconButton,\n    Typography,\n    Icon,\n    makeStyles,\n    createStyles,\n    Menu,\n    MenuItem,\n    Divider,\n    useMediaQuery,\n} from '@material-ui/core';\nimport { AllCanvas, canvasConfig, CanvasType } from './constants/constants';\nimport { useAppDispatch, useAppSelector } from './redux';\nimport { selectCanvas, zoomIn, zoomOut } from './redux/app/action';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        rootLight: {\n            backgroundColor: theme.palette.primary.main,\n        },\n        rootDark: {\n            backgroundColor: theme.palette.background.paper,\n        },\n        title: {\n            flexGrow: 1,\n            color: '#fff',\n        },\n        menuButton: {\n            color: '#fff',\n        },\n    })\n);\n\nconst AppAppBar = () => {\n    const { t, i18n } = useTranslation();\n    const classes = useStyles();\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n    return React.useMemo(\n        () => (\n            <AppBar position=\"sticky\" className={prefersDarkMode ? classes.rootDark : classes.rootLight}>\n                <Toolbar variant=\"dense\">\n                    <Typography variant=\"h6\" className={classes.title} color=\"textPrimary\">\n                        {process.env.PUBLIC_URL.includes('uat') ? t('titleUAT') : t('title')}\n                    </Typography>\n\n                    <CanvasToggle />\n                    <ZoomToggles />\n                </Toolbar>\n            </AppBar>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [prefersDarkMode, i18n.language]\n    );\n};\n\nexport default AppAppBar;\n\nconst CanvasToggle = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const rmgStyle = useAppSelector(store => store.app.rmgStyle);\n\n    const [canvasButtonEl, setCanvasButtonEl] = React.useState<null | HTMLElement>(null);\n    const handleClick = (action: CanvasType | typeof AllCanvas) => () => {\n        dispatch(selectCanvas(action));\n        setCanvasButtonEl(null);\n    };\n\n    return React.useMemo(\n        () => (\n            <>\n                <Tooltip title={t('toggle.tooltip')}>\n                    <IconButton onClick={e => setCanvasButtonEl(e.currentTarget)} className={classes.menuButton}>\n                        <Icon>photo_library</Icon>\n                    </IconButton>\n                </Tooltip>\n                <Menu anchorEl={canvasButtonEl} open={Boolean(canvasButtonEl)} onClose={() => setCanvasButtonEl(null)}>\n                    {canvasConfig[rmgStyle].map(c => (\n                        <MenuItem key={c} onClick={handleClick(c)}>\n                            {t('toggle.' + c)}\n                        </MenuItem>\n                    ))}\n                    <Divider style={{ margin: '6px 0' }} />\n                    <MenuItem onClick={handleClick(AllCanvas)}>{t('toggle.all')}</MenuItem>\n                </Menu>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [rmgStyle, canvasButtonEl, classes.menuButton]\n    );\n};\n\nconst ZoomToggles = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    return React.useMemo(\n        () => (\n            <>\n                <Tooltip title={t('zoom.out')}>\n                    <IconButton onClick={() => dispatch(zoomOut())} className={classes.menuButton}>\n                        <Icon>zoom_out</Icon>\n                    </IconButton>\n                </Tooltip>\n                <Tooltip title={t('zoom.in')}>\n                    <IconButton onClick={() => dispatch(zoomIn())} className={classes.menuButton}>\n                        <Icon>zoom_in</Icon>\n                    </IconButton>\n                </Tooltip>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [classes.menuButton]\n    );\n};\n","import React from 'react';\n\nexport default class ErrorBoundary extends React.Component<{ children: React.ReactNode }, { hasError: boolean }> {\n    constructor(props: { children: React.ReactNode }) {\n        super(props);\n        this.state = { hasError: false };\n    }\n\n    static getDerivedStateFromError(error: any) {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true };\n    }\n\n    componentDidCatch(error: any, errorInfo: any) {\n        // You can also log the error to an error reporting service\n        // logErrorToMyService(error, errorInfo);\n    }\n\n    render() {\n        if (this.state.hasError) {\n            // You can render any custom fallback UI\n            return <h1>Something went wrong.</h1>;\n        }\n\n        return this.props.children;\n    }\n}\n","import React, { lazy, memo, useCallback, useEffect } from 'react';\nimport { CircularProgress, createStyles, makeStyles } from '@material-ui/core';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport ErrorBoundary from '../error-boundary';\nimport { AllCanvas, canvasConfig, CanvasType, RmgStyle } from '../constants/constants';\nimport { selectCanvas, setRmgStyle } from '../redux/app/action';\nimport { useAppDispatch, useAppSelector } from '../redux';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            display: 'flex',\n            flexDirection: 'row',\n            overflowX: 'scroll',\n            '&::before, &::after': {\n                content: '\"\"',\n                margin: 'auto',\n            },\n            '& > svg': {\n                flex: '0 0 auto',\n                border: '1px solid black',\n            },\n        },\n    })\n);\n\nconst SVGs = () => {\n    const classes = useStyles();\n\n    const canvasScale = useAppSelector(store => store.app.canvasScale);\n    const svgHeight = useAppSelector(store => store.param.svg_height);\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const theme = useAppSelector(store => store.param.theme);\n\n    const sharedProps = useCallback(\n        (canvas: CanvasType): React.SVGProps<SVGSVGElement> => ({\n            id: canvas,\n            xmlns: 'http://www.w3.org/2000/svg',\n            xmlnsXlink: 'http://www.w3.org/1999/xlink',\n            height: svgHeight * canvasScale,\n            viewBox: `0 0 ${svgWidths[canvas]} ${svgHeight}`,\n            colorInterpolationFilters: 'sRGB',\n            style: {\n                ['--rmg-svg-width' as any]: svgWidths[canvas] + 'px',\n                ['--rmg-svg-height' as any]: svgHeight + 'px',\n                ['--rmg-theme-colour' as any]: theme[2],\n                ['--rmg-theme-fg' as any]: theme[3],\n            },\n        }),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [svgHeight, JSON.stringify(svgWidths), theme, canvasScale]\n    );\n\n    return (\n        <div className={classes.root}>\n            <Switch>\n                {Object.values(RmgStyle).map(s => (\n                    <Route path={`/${s}`} key={s}>\n                        <StyleSpecificSVGs style={s} canvasAvailable={canvasList[s]} svgProps={sharedProps} />\n                    </Route>\n                ))}\n                <Redirect to={'/' + RmgStyle.MTR} />\n            </Switch>\n        </div>\n    );\n};\n\nexport default SVGs;\n\nconst StyleSpecificSVGs = memo(\n    (props: {\n        style: RmgStyle;\n        canvasAvailable: { [canvas in CanvasType]?: JSX.Element };\n        svgProps: (canvas: CanvasType) => React.SVGProps<SVGSVGElement>;\n    }) => {\n        const dispatch = useAppDispatch();\n\n        const canvasToShow = useAppSelector(store => store.app.canvasToShow);\n\n        dispatch(setRmgStyle(props.style));\n\n        useEffect(\n            () => {\n                ['share', ...Object.values(CanvasType)].forEach(canvas => {\n                    if (canvas in props.canvasAvailable || canvas === 'share') {\n                        (document.getElementById('css_' + canvas) as HTMLLinkElement).href =\n                            process.env.PUBLIC_URL + `/styles/${canvas}_${props.style}.css`;\n                    } else {\n                        (document.getElementById('css_' + canvas) as HTMLLinkElement).href = '';\n                    }\n                });\n\n                ![...canvasConfig[props.style], AllCanvas].includes(canvasToShow) && dispatch(selectCanvas(AllCanvas));\n            },\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            []\n        );\n\n        return (\n            <>\n                {(Object.keys(props.canvasAvailable) as (keyof typeof props.canvasAvailable)[]).map(\n                    canvas =>\n                        [AllCanvas, canvas].includes(canvasToShow) && (\n                            <React.Suspense key={canvas} fallback={<CircularProgress />}>\n                                <ErrorBoundary>\n                                    <svg {...props.svgProps(canvas)}>\n                                        <rect\n                                            id=\"canvas-bg\"\n                                            fill=\"white\"\n                                            style={{ height: 'var(--rmg-svg-height)', width: 'var(--rmg-svg-width)' }}\n                                        />\n                                        {props.canvasAvailable[canvas]}\n                                        <rect\n                                            id=\"canvas-border\"\n                                            fill=\"none\"\n                                            strokeWidth={3}\n                                            stroke=\"none\"\n                                            style={{ height: 'var(--rmg-svg-height)', width: 'var(--rmg-svg-width)' }}\n                                        />\n                                    </svg>\n                                </ErrorBoundary>\n                            </React.Suspense>\n                        )\n                )}\n            </>\n        );\n    }\n);\n\n// Canvas available\n\nconst RunInGZMTR = lazy(() => import(/* webpackChunkName: \"runinGZMTR\" */ './runin/runin-gzmtr'));\nconst RailMapGZMTR = lazy(() => import(/* webpackChunkName: \"railmapGZMTR\" */ './railmap/railmap-gzmtr'));\n\nconst DestinationMTR = lazy(() => import(/* webpackChunkName: \"destinationMTR\" */ './destination/destination-mtr'));\nconst RailMapMTR = lazy(() => import(/* webpackChunkName: \"railmapMTR\" */ './railmap/railmap-mtr'));\n\nconst DestinationSHMetro = lazy(\n    () => import(/* webpackChunkName: \"destinationSHMetro\" */ './destination/destination-shmetro')\n);\nconst RunInSHMetro = lazy(() => import(/* webpackChunkName: \"runinSHMetro\" */ './runin/runin-shmetro'));\nconst RailMapSHMetro = lazy(() => import(/* webpackChunkName: \"railmapSHMetro\" */ './railmap/railmap-shmetro'));\nconst IndoorSHMetro = lazy(() => import(/* webpackChunkName: \"indoorSHMetro\" */ './indoor/indoor-shmetro'));\n\n/**\n * Each value of this object is an object of ORDERED key-value pairs\n */\nconst canvasList: { [s in RmgStyle]: { [c in CanvasType]?: JSX.Element } } = {\n    [RmgStyle.GZMTR]: {\n        [CanvasType.RunIn]: <RunInGZMTR />,\n        [CanvasType.RailMap]: <RailMapGZMTR />,\n    },\n    [RmgStyle.MTR]: {\n        [CanvasType.Destination]: <DestinationMTR />,\n        [CanvasType.RailMap]: <RailMapMTR />,\n    },\n    [RmgStyle.SHMetro]: {\n        [CanvasType.Destination]: <DestinationSHMetro />,\n        [CanvasType.RunIn]: <RunInSHMetro />,\n        [CanvasType.RailMap]: <RailMapSHMetro />,\n        [CanvasType.Indoor]: <IndoorSHMetro />,\n    },\n};\n","import SVGs from './svg';\n\nexport default SVGs;\n","import * as React from 'react';\n\nimport {\n    Typography,\n    CircularProgress,\n    Tabs,\n    Tab,\n    Icon,\n    makeStyles,\n    createStyles,\n    useTheme,\n    useMediaQuery,\n} from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nconst PanelSave = React.lazy(() => import(/* webpackChunkName: \"panelSave\" */ './save'));\nconst PanelLayout = React.lazy(() => import(/* webpackChunkName: \"panelLayout\" */ './layout'));\nconst PanelDesign = React.lazy(() => import(/* webpackChunkName: \"panelDesign\" */ './design'));\nconst PanelStations = React.lazy(() => import(/* webpackChunkName: \"panelStations\" */ './stations'));\nconst PanelInfo = React.lazy(() => import(/* webpackChunkName: \"panelInfo\" */ './panel-info'));\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        root: {\n            display: 'flex',\n            flexDirection: 'row',\n            height: '100%',\n            [theme.breakpoints.down('xs')]: {\n                flexDirection: 'column',\n            },\n        },\n        typography: {\n            background: theme.palette.background.default,\n        },\n        tab: {\n            padding: '6px 24px',\n            height: 48,\n            '& .MuiTab-wrapper': {\n                flexDirection: 'row',\n            },\n            [theme.breakpoints.up('sm')]: {\n                '& .MuiTab-wrapper': {\n                    justifyContent: 'flex-start',\n                },\n            },\n            [theme.breakpoints.down('xs')]: {\n                minWidth: 'calc(100% / 5)',\n            },\n            '&.MuiTab-labelIcon': {\n                minHeight: 'unset',\n                '& .MuiTab-wrapper': {\n                    '& > *:first-child': {\n                        marginBottom: 0,\n                    },\n                    '& > *:not(first-child)': {\n                        paddingLeft: 8,\n                    },\n                },\n            },\n        },\n        tabs: {\n            overflow: 'auto',\n            '&::-webkit-scrollbar': {\n                width: 0,\n            },\n            scrollbarWidth: 'none',\n            WebkitOverflowScrolling: 'touch',\n        },\n        tabpanel: {\n            overflow: 'auto',\n            flex: 1,\n            padding: theme.spacing(3),\n            paddingBottom: 0,\n            height: `calc(100% - ${theme.spacing(3)}px)`,\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'flex-start',\n        },\n    })\n);\n\nexport default function PanelTab() {\n    const { t, i18n } = useTranslation();\n\n    const classes = useStyles();\n    const theme = useTheme();\n    const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\n\n    const [value, setValue] = React.useState(0);\n\n    const panel = (index: number) => {\n        switch (index) {\n            case 0:\n                return <PanelSave />;\n            case 1:\n                return <PanelLayout />;\n            case 2:\n                return <PanelDesign />;\n            case 3:\n                return <PanelStations />;\n            case 4:\n                return <PanelInfo />;\n            default:\n                return <PanelSave />;\n        }\n    };\n\n    const tabNav = React.useMemo(\n        () => (\n            <Typography className={`${classes.typography} ${classes.tabs}`} component=\"div\">\n                <Tabs\n                    value={value}\n                    orientation={isMobile ? 'horizontal' : 'vertical'}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    onChange={(_, val) => setValue(val)}\n                    variant=\"scrollable\"\n                    scrollButtons=\"off\"\n                >\n                    {[\n                        ['file', 'insert_drive_file'],\n                        ['layout', 'panorama'],\n                        ['design', 'brush'],\n                        ['stations', 'directions_transit'],\n                        ['info', 'info'],\n                    ].map((val, i) => (\n                        <Tab\n                            label={<span>{t('tab.' + val[0])}</span>}\n                            icon={<Icon>{val[1]}</Icon>}\n                            key={i}\n                            className={classes.tab}\n                        />\n                    ))}\n                </Tabs>\n            </Typography>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [value, i18n.language, classes.tab, isMobile]\n    );\n\n    return (\n        <div className={classes.root}>\n            {tabNav}\n            <Typography className={`${classes.typography} ${classes.tabpanel}`} component=\"div\" role=\"tabpanel\">\n                <React.Suspense fallback={<CircularProgress />}>{panel(value)}</React.Suspense>\n            </Typography>\n        </div>\n    );\n}\n","import * as React from 'react';\nimport { CircularProgress } from '@material-ui/core';\n\nimport PanelTabs from './panels';\n\nexport default function Panel() {\n    return (\n        <React.Suspense fallback={<CircularProgress />}>\n            <PanelTabs />\n        </React.Suspense>\n    );\n}\n","import React, { useEffect } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport AppAppBar from './app-appbar';\nimport SVGs from './svgs';\nimport Panels from './panels';\nimport { ParamContext } from './context';\nimport { createMuiTheme, ThemeProvider, useMediaQuery, LinearProgress } from '@material-ui/core';\nimport { useAppSelector } from './redux';\n\nconst darkTheme = createMuiTheme({\n    palette: {\n        type: 'dark',\n        primary: {\n            main: '#bb86fc',\n        },\n        secondary: {\n            main: '#018786',\n        },\n        error: {\n            main: '#cf6679',\n        },\n    },\n    // palette: {\n    //     type: 'dark',\n    //     primary: {\n    //         main: '#8ab4f8',\n    //     },\n    // },\n    overrides: {\n        MuiDialog: {\n            paper: {\n                minWidth: 280,\n            },\n        },\n    },\n});\n\nconst lightTheme = createMuiTheme({\n    palette: {\n        primary: {\n            light: '#bb86fc',\n            main: '#6200ee',\n        },\n        secondary: {\n            main: '#018786',\n        },\n        error: {\n            main: '#b00020',\n        },\n    },\n    // palette: {\n    //     primary: {\n    //         main: '#1a73e8',\n    //     },\n    //     text: {\n    //         primary: '#202124',\n    //         secondary: '#5f6368',\n    //     },\n    // },\n    overrides: {\n        MuiDialog: {\n            paper: {\n                minWidth: 280,\n            },\n        },\n    },\n});\n\nexport default function App() {\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n    const theme = prefersDarkMode ? darkTheme : lightTheme;\n\n    return (\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <ThemeProvider theme={theme}>\n                <React.Suspense fallback={<LinearProgress />}>\n                    <AppAppBar />\n                </React.Suspense>\n                <AppBody />\n            </ThemeProvider>\n        </BrowserRouter>\n    );\n}\n\nconst AppBody = () => {\n    const param = useAppSelector(store => store.param);\n    const deps = useAppSelector(store => store.helper.depsStr);\n    const branches = useAppSelector(store => store.helper.branches);\n    const routes = useAppSelector(store => store.helper.routes);\n    const tpo = useAppSelector(store => store.helper.tpo);\n\n    const paramString = JSON.stringify(param);\n    useEffect(() => {\n        window.rmgStorage.writeFile('rmgParam', paramString).then();\n    }, [paramString]);\n\n    return (\n        <>\n            <ParamContext.Provider value={{ branches, routes, deps, tpo }}>\n                <div style={{ overflowY: 'auto' }}>\n                    <SVGs />\n                </div>\n                <div style={{ flex: 1, overflow: 'hidden' }}>\n                    <Panels />\n                </div>\n            </ParamContext.Provider>\n            <canvas style={{ display: 'none' }} />\n        </>\n    );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","export const FILE_NOT_FOUND = 'FILE_NOT_FOUND';\n\nexport default interface StorageService {\n    init: () => Promise<void>;\n\n    writeFile: (filename: string, contents: string) => Promise<void>;\n\n    readFile: (filename: string) => Promise<string>;\n\n    deleteFile: (filename: string) => Promise<void>;\n}\n","import { FILE_NOT_FOUND } from './storageService';\n\nexport default class StorageLocalStorage {\n    private currentBusyFilename: false | string;\n\n    constructor() {\n        this.currentBusyFilename = false;\n    }\n\n    async init() {\n        console.warn('Using localStorage, please update your browser');\n\n        if (!window.localStorage) {\n            alert('Local storage is not available! Please upgrade to a newer browser!');\n            throw new Error('LocalStorage unavailable');\n        }\n\n        try {\n            window.localStorage.setItem('storage_test', '1');\n            window.localStorage.removeItem('storage_test');\n        } catch (e) {\n            alert(\n                \"Local storage is not accessible! Please modify your browser's settings or try with another browser!\"\n            );\n            throw new Error('LocalStorage no write permission');\n        }\n    }\n\n    async writeFile(filename: string, contents: string) {\n        if (this.currentBusyFilename === filename) {\n            console.warn('Attempt to write', filename, 'while write process is not finished!');\n        }\n\n        this.currentBusyFilename = filename;\n        window.localStorage.setItem(filename, contents);\n        this.currentBusyFilename = false;\n    }\n\n    async readFile(filename: string) {\n        if (this.currentBusyFilename === filename) {\n            console.warn('Attempt to read', filename, 'while write process is not finished!');\n        }\n\n        const contents = window.localStorage.getItem(filename);\n        if (!contents) {\n            throw new Error(FILE_NOT_FOUND);\n        }\n        return contents;\n    }\n\n    async deleteFile(filename: string) {\n        if (this.currentBusyFilename === filename) {\n            console.warn('Attempt to delete', filename, 'while write process is not finished!');\n        }\n\n        this.currentBusyFilename = filename;\n        window.localStorage.removeItem(filename);\n        this.currentBusyFilename = false;\n    }\n}\n","import StorageLocalStorage from './storageLocalStorage';\nimport StorageService from './storageService';\n\nexport default async function getRmgStorage(): Promise<StorageService> {\n    if (!window.indexedDB) {\n        console.log('IndexedDB not supported');\n        return new StorageLocalStorage();\n    }\n\n    return await new Promise<StorageService>(resolve => {\n        try {\n            const request = window.indexedDB.open('indexeddb_feature_detection', 1);\n\n            request.onerror = err => {\n                console.log('IndexedDB can NOT be accessed:', err);\n                console.log('Fallback to LocalStorage');\n                resolve(new StorageLocalStorage());\n            };\n\n            request.onsuccess = () => {\n                console.log('IndexedDB can be accessed');\n                // TODO: toggle on indexedDB\n                // resolve(new StorageIndexedDB());\n                resolve(new StorageLocalStorage());\n            };\n        } catch (error) {\n            console.warn('Error while opening IndexedDB:', error);\n            resolve(new StorageLocalStorage());\n        }\n    });\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport './i18n';\nimport App from './App';\nimport { updateParam } from './utils';\nimport * as serviceWorker from './serviceWorker';\n\nimport { AllCanvas, CanvasType } from './constants/constants';\nimport StorageService from './util/storage/storageService';\nimport getRmgStorage from './util/storage';\nimport store from './redux';\nimport { Provider } from 'react-redux';\nimport { setCanvasScale, setCanvasToShow } from './redux/app/action';\nimport { setFullParam } from './redux/param/action';\nimport autoSaveScheduler from './util/auto-save-scheduler';\n\ndeclare global {\n    interface Window {\n        gtag: any;\n        rmgStorage: StorageService;\n        rmgStore: any;\n    }\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// load empty stylesheet elements\ndocument.head.append(\n    ...['share', ...Object.values(CanvasType)].map(tag => {\n        let link = document.createElement('link');\n        link.rel = 'stylesheet';\n        link.id = 'css_' + tag;\n        return link;\n    })\n);\n\nconst renderApp = () => {\n    ReactDOM.render(\n        // <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>,\n        // </React.StrictMode>,\n        document.getElementById('root')\n    );\n};\n\ngetRmgStorage()\n    .then(async rmgStorage => {\n        // setup storage and param\n        await rmgStorage.init();\n        try {\n            const contents = await rmgStorage.readFile('rmgParam');\n\n            const updatedParam = updateParam(JSON.parse(contents));\n            await rmgStorage.writeFile('rmgParam', JSON.stringify(updatedParam));\n        } catch (err) {\n            console.warn('Error in reading rmgParam', err);\n            const module = await import('./constants/templates/basic/blank');\n            const updatedParam = updateParam(module.default);\n            await rmgStorage.writeFile('rmgParam', JSON.stringify(updatedParam));\n        } finally {\n            window.rmgStorage = rmgStorage;\n        }\n    })\n    .then(async () => {\n        // init param store with localStorage\n        const contents = await window.rmgStorage.readFile('rmgParam');\n        store.dispatch(setFullParam(JSON.parse(contents)));\n    })\n    .then(async () => {\n        // style being setup in SVG's router\n\n        // setup canvas scale\n        try {\n            const canvasScaleString = await window.rmgStorage.readFile('rmgScale');\n            const canvasScale = Number(canvasScaleString);\n            canvasScale >= 0.1 && store.dispatch(setCanvasScale(canvasScale));\n        } catch (err) {\n            console.warn('Error in reading rmgScale file', err);\n            console.log('Initiating rmgScale as 1');\n            await window.rmgStorage.writeFile('rmgScale', '1');\n            store.dispatch(setCanvasScale(1));\n        }\n\n        // setup canvas to show\n        try {\n            const canvasToShow = (await window.rmgStorage.readFile('rmgCanvas')) as CanvasType | typeof AllCanvas;\n            store.dispatch(setCanvasToShow(canvasToShow));\n        } catch (err) {\n            console.warn('Error in reading rmgCanvas file', err);\n            console.log('Initiating rmgCanvas as \"all\"');\n            await window.rmgStorage.writeFile('rmgCanvas', AllCanvas);\n            store.dispatch(setCanvasToShow(AllCanvas));\n        }\n\n        window.rmgStore = store;\n    })\n    .then(() => {\n        renderApp();\n    })\n    .then(() => {\n        autoSaveScheduler();\n    });\n","export default function autoSaveScheduler() {\n    setInterval(async () => {\n        await window.rmgStorage.writeFile('rmgParamRedux', JSON.stringify(window.rmgStore.getState().param));\n        console.log('Parameter auto saved!');\n    }, 60 * 1000);\n}\n"],"sourceRoot":""}