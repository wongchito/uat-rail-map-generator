{"version":3,"file":"static/js/panelStations.e62acd7f.chunk.js","mappings":"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","sources":["panels/stations/station-list.tsx","methods.ts","panels/stations/utils.ts","panels/stations/add-diag.tsx","panels/stations/edit-diag/dialog.tsx","panels/stations/edit-diag/index.ts","panels/stations/delete-diags.tsx","panels/stations/fabs.tsx","panels/stations/auto-num-diag.tsx","panels/stations/panel2.tsx","panels/stations/index.ts"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n    createStyles,\n    Divider,\n    Icon,\n    IconButton,\n    List,\n    ListItem,\n    ListItemSecondaryAction,\n    ListItemText,\n    makeStyles,\n    Menu,\n    MenuItem,\n    Paper,\n    Typography,\n} from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\nimport { useAppDispatch, useAppSelector } from '../../redux';\nimport { RmgStyle } from '../../constants/constants';\nimport { setCurrentStation } from '../../redux/param/action';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        listItemNum: {\n            marginRight: theme.spacing(1),\n            fontSize: '1.2rem',\n        },\n        listItemText: {\n            display: 'flex',\n            alignItems: 'baseline',\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            '& .MuiListItemText-primary': {\n                marginRight: theme.spacing(1),\n            },\n        },\n        selectedItem: {\n            background: theme.palette.action.hover,\n        },\n    })\n);\n\ninterface Props {\n    selectedId: string;\n    onAction: (stnId: string) => (action: 'edit' | 'remove') => void;\n}\n\nconst StationList = (props: Props) => {\n    const tpo = useAppSelector(store => store.helper.tpo);\n\n    return (\n        <Paper>\n            <List dense disablePadding>\n                {tpo.map(stnId => (\n                    <React.Fragment key={stnId}>\n                        <StationEntry\n                            stnId={stnId}\n                            isSelected={stnId === props.selectedId}\n                            onAction={props.onAction(stnId)}\n                        />\n                        <Divider />\n                    </React.Fragment>\n                ))}\n            </List>\n        </Paper>\n    );\n};\n\nexport default StationList;\n\nconst StationEntry = (props: { stnId: string; isSelected: boolean; onAction: (action: 'edit' | 'remove') => void }) => {\n    const { stnId, isSelected, onAction } = props;\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const rmgStyle = useAppSelector(store => store.param.style);\n    const stationInfo = useAppSelector(store => store.param.stn_list[stnId]);\n\n    const name = stationInfo?.name || ['', ''];\n    const num = stationInfo?.num || '00';\n\n    const [toggleEl, setToggleEl] = useState<null | HTMLElement>(null);\n\n    const handleCurrent = () => {\n        dispatch(setCurrentStation(stnId));\n        setToggleEl(null);\n    };\n\n    const handleAction = (action: 'edit' | 'remove') => () => {\n        onAction(action);\n        setToggleEl(null);\n    };\n\n    return (\n        <ListItem className={isSelected ? classes.selectedItem : ''}>\n            {rmgStyle === RmgStyle.GZMTR && <Typography className={classes.listItemNum}>{num}</Typography>}\n            <ListItemText primary={name[0]} secondary={name[1].replace('\\\\', ' ')} className={classes.listItemText} />\n            <ListItemSecondaryAction>\n                <IconButton size=\"small\" onClick={e => setToggleEl(e.currentTarget)}>\n                    <Icon>more_vert</Icon>\n                </IconButton>\n                <Menu anchorEl={toggleEl} open={Boolean(toggleEl)} onClose={() => setToggleEl(null)}>\n                    <MenuItem onClick={handleCurrent}>{t('stations.current')}</MenuItem>\n                    <MenuItem onClick={handleAction('edit')}>{t('stations.edit.button')}</MenuItem>\n                    <MenuItem onClick={handleAction('remove')}>{t('stations.remove.button')}</MenuItem>\n                </Menu>\n            </ListItemSecondaryAction>\n        </ListItem>\n    );\n};\n","import { StationDict } from './constants/constants';\n\n/**\n * Vertical position (in shares) of station icon if using MTR style (for consistency of method `RMGLine.newStnPossibleLoc()`).\n */\nexport const getYShareMTR = (stnId: string, stnList: StationDict): -1 | 0 | 1 => {\n    if (\n        ['linestart', 'lineend'].includes(stnId) ||\n        stnList[stnId].parents.length > 1 ||\n        stnList[stnId].children.length > 1\n    ) {\n        return 0;\n    }\n    var stnPred = stnList[stnId].parents[0];\n    if (stnPred) {\n        // parent exist\n        if (stnList[stnPred].children.length === 1) {\n            // no sibling, then y same as parent\n            return getYShareMTR(stnPred, stnList);\n        } else {\n            // sibling exists, then y depends on its idx of being children\n            return stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n        }\n    } else {\n        // no parent, must be linestart\n        return 0;\n    }\n};\n","import { getYShareMTR } from '../../methods';\nimport {\n    BranchStyle,\n    Facilities,\n    Name,\n    Services,\n    ShortDirection,\n    StationDict,\n    StationInfo,\n} from '../../constants/constants';\n\nexport const addStation = (\n    prep: 'before' | 'after',\n    stnId: string,\n    loc: 'centre' | 'upper' | 'lower' | 'newupper' | 'newlower',\n    end: string,\n    stnList: StationDict\n): [string, StationDict] => {\n    // get new id\n    let newId = getRandomId();\n    while (Object.keys(stnList).includes(newId)) {\n        newId = getRandomId();\n    }\n    let newInfo: StationInfo = {\n        name: getNameFromId(newId),\n        secondaryName: false,\n        num: '00',\n        services: [Services.local],\n        parents: [],\n        children: [],\n        branch: {\n            left: [],\n            right: [],\n        },\n        transfer: {\n            info: [[]],\n            // type: 'none',\n            tick_direc: ShortDirection.right,\n            paid_area: true,\n            osi_names: [],\n        },\n        facility: Facilities.none,\n    };\n\n    let newStnList = JSON.parse(JSON.stringify(stnList)) as StationDict;\n\n    if (prep === 'before') {\n        if (loc === 'centre') {\n            newInfo.parents = stnList[stnId].parents;\n            if (stnList[stnId].parents.length === 0 && getYShareMTR(stnId, stnList) !== 0) {\n                // todo: is this case really exist?\n                newInfo.children = stnList.linestart.children;\n            } else if (getYShareMTR(stnId, stnList) !== 0) {\n                // pivot on branch\n                newInfo.children = stnList[stnList[stnId].parents[0]].children.slice();\n                newInfo.branch.right = stnList[newInfo.parents[0]].branch.right;\n                newStnList[newInfo.parents[0]].branch.right = [];\n            } else {\n                // pivot on main\n                newInfo.children = [stnId];\n                newInfo.branch.left = stnList[stnId].branch.left;\n                newStnList[stnId].branch.left = [];\n            }\n            newInfo.parents.forEach(par => {\n                newStnList[par].children = [newId];\n            });\n            newInfo.children.forEach(child => {\n                newStnList[child].parents = [newId];\n            });\n        } else if (loc === 'upper') {\n            if (stnList[stnId].parents.length === 2) {\n                if (stnList[stnId].branch.left[1] === stnList[stnId].parents[0]) {\n                    newStnList[stnId].branch.left[1] = newId;\n                }\n\n                newInfo.parents = stnList[stnId].parents.slice(0, 1);\n                newInfo.children = [stnId];\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n                newStnList[stnId].parents[0] = newId;\n            } else {\n                // already on branch\n                newInfo.parents = stnList[stnId].parents;\n                newInfo.children = [stnId];\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children[0] = newId;\n\n                    if (stnList[par].branch.right[1] === stnId) {\n                        newStnList[par].branch.right[1] = newId;\n                    }\n                });\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n            }\n        } else if (loc === 'lower') {\n            if (stnList[stnId].parents.length === 2) {\n                if (stnList[stnId].branch.left[1] === stnList[stnId].parents[1]) {\n                    newStnList[stnId].branch.left[1] = newId;\n                }\n\n                newInfo.parents = stnList[stnId].parents.slice(1);\n                newInfo.children = [stnId];\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n                newStnList[stnId].parents[1] = newId;\n            } else {\n                // already on branch\n                newInfo.parents = stnList[stnId].parents;\n                newInfo.children = [stnId];\n                newInfo.parents.forEach(par => {\n                    let parChildLen = stnList[par].children.length;\n                    newStnList[par].children[parChildLen - 1] = newId;\n\n                    if (stnList[par].branch.right[1] === stnId) {\n                        newStnList[par].branch.right[1] = newId;\n                    }\n                });\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n            }\n        } else {\n            newStnList[stnId].branch.left = [BranchStyle.through, newId];\n            newStnList[end].branch.right = [BranchStyle.through, newId];\n            newInfo.parents = [end];\n            newInfo.children = [stnId];\n\n            if (loc === 'newupper') {\n                newStnList[end].children.unshift(newId);\n                newStnList[stnId].parents.unshift(newId);\n            } else {\n                newStnList[end].children.push(newId);\n                newStnList[stnId].parents.push(newId);\n            }\n        }\n    } else {\n        if (loc === 'centre') {\n            newInfo.children = stnList[stnId].children;\n            if (stnList[stnId].children.length === 0 && getYShareMTR(stnId, stnList) !== 0) {\n                newInfo.parents = stnList.lineend.parents;\n            } else if (getYShareMTR(stnId, stnList) !== 0) {\n                // pivot on branch\n                newInfo.parents = stnList[stnList[stnId].children[0]].parents;\n                newInfo.branch.left = stnList[newInfo.children[0]].branch.left;\n                newStnList[newInfo.children[0]].branch.left = [];\n            } else {\n                // pivot on main\n                newInfo.parents = [stnId];\n                newInfo.branch.right = stnList[stnId].branch.right;\n                newStnList[stnId].branch.right = [];\n            }\n            newInfo.children.forEach(child => {\n                newStnList[child].parents = [newId];\n            });\n            newInfo.parents.forEach(par => {\n                newStnList[par].children = [newId];\n            });\n        } else if (loc === 'upper') {\n            if (stnList[stnId].children.length === 2) {\n                if (stnList[stnId].branch.right[1] === stnList[stnId].children[0]) {\n                    newStnList[stnId].branch.right[1] = newId;\n                }\n\n                newInfo.children = stnList[stnId].children.slice(0, 1);\n                newInfo.parents = [stnId];\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n                newStnList[stnId].children[0] = newId;\n            } else {\n                // already on branch\n                newInfo.children = stnList[stnId].children;\n                newInfo.parents = [stnId];\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents[0] = newId;\n\n                    if (stnList[child].branch.left[1] === stnId) {\n                        newStnList[child].branch.left[1] = newId;\n                    }\n                });\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n            }\n        } else if (loc === 'lower') {\n            if (stnList[stnId].children.length === 2) {\n                if (stnList[stnId].branch.right[1] === stnList[stnId].children[1]) {\n                    newStnList[stnId].branch.right[1] = newId;\n                }\n\n                newInfo.children = stnList[stnId].children.slice(1);\n                newInfo.parents = [stnId];\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n                newStnList[stnId].children[1] = newId;\n            } else {\n                // already on branch\n                newInfo.children = stnList[stnId].children;\n                newInfo.parents = [stnId];\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents[stnList[child].parents.length === 1 ? 0 : 1] = newId;\n\n                    if (stnList[child].branch.left[1] === stnId) {\n                        newStnList[child].branch.left[1] = newId;\n                    }\n                });\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n            }\n        } else {\n            newStnList[stnId].branch.right = [BranchStyle.through, newId];\n            newStnList[end].branch.left = [BranchStyle.through, newId];\n\n            newInfo.children = [end];\n            newInfo.parents = [stnId];\n\n            if (loc === 'newupper') {\n                newStnList[end].parents.unshift(newId);\n                newStnList[stnId].children.unshift(newId);\n            } else {\n                newStnList[end].parents.push(newId);\n                newStnList[stnId].children.push(newId);\n            }\n        }\n    }\n\n    return [\n        newId,\n        {\n            ...newStnList,\n            [newId]: newInfo,\n        } as StationDict,\n    ];\n};\n\nconst getRandomId = () =>\n    Math.floor(Math.random() * Math.pow(36, 4))\n        .toString(36)\n        .padStart(4, '0');\n\nfunction getNameFromId(stnId: string): Name {\n    let numsZH = '癸甲乙丙丁戊己庚辛壬日月金木水火土竹戈十大中一弓人心手口尸廿山女田難卜重'.split('');\n    let numsEN =\n        'Zero One Two Three Four Five Six Seven Eight Nine Alfa Bravo Charlie Delta Echo Foxtrot Golf Hotel India Juliett Kilo Lima Mike November Oscar Papa Quebec Romeo Sierra Tango Uniform Victor Whiskey X-ray Yankee Zulu'.split(\n            ' '\n        );\n    return [\n        stnId\n            .split('')\n            .map(char => numsZH[parseInt(char, 36)])\n            .join(''),\n        stnId\n            .split('')\n            .map(char => numsEN[parseInt(char, 36)])\n            .join(' '),\n    ];\n}\n\n/**\n * Remove a station and update neighbour's parameters at the same time.\n * (All descriptions are based on MTR style. )\n */\nexport const removeStation = (stnId: string, stnList: StationDict) => {\n    let newStnList = JSON.parse(JSON.stringify(stnList)) as StationDict;\n    let parents = newStnList[stnId].parents;\n    let children = newStnList[stnId].children;\n\n    let isLastMainBranchStn = true;\n    for (let id in newStnList) {\n        if ([stnId, 'linestart', 'lineend'].includes(id)) continue;\n        if (getYShareMTR(id, newStnList) === 0) {\n            isLastMainBranchStn = false;\n            break;\n        }\n    }\n\n    if (parents.length === 2 && children.length === 2) {\n        // Todo: rewrite, join two branches rather than reject\n        return false;\n    } else if (isLastMainBranchStn) {\n        // Last main line station\n        return false;\n    } else if (Object.keys(newStnList).length === 4) {\n        // Last two stations\n        return false;\n    } else if (parents.length === 2 || children.length === 2) {\n        console.log('this case');\n        parents.forEach(parId => {\n            newStnList[parId].children = children;\n        });\n        children.forEach(childId => {\n            newStnList[childId].parents = parents;\n        });\n        if (parents.length === 1) {\n            newStnList[parents[0]].branch.right = newStnList[stnId].branch.right;\n        }\n        if (children.length === 1) {\n            newStnList[children[0]].branch.left = newStnList[stnId].branch.left;\n        }\n    } else if (newStnList[parents[0]].children.length === 2 && newStnList[children[0]].parents.length === 2) {\n        // 1 par 1 child, last station on upper/lower branch\n        // branch disappear\n        var childIdxOfPar = newStnList[parents[0]].children.indexOf(stnId);\n        var parIdxOfChild = newStnList[children[0]].parents.indexOf(stnId);\n        newStnList[parents[0]].children.splice(childIdxOfPar, 1);\n        newStnList[children[0]].parents.splice(parIdxOfChild, 1);\n\n        newStnList[parents[0]].branch.right = [];\n        newStnList[children[0]].branch.left = [];\n    } else {\n        // 1 par 1 child\n        parents.forEach(parId => {\n            var idx = newStnList[parId].children.indexOf(stnId);\n            if (children.length) {\n                newStnList[parId].children[idx] = children[0];\n            } else {\n                // Right dest\n                newStnList[parId].children.splice(idx, 1);\n            }\n\n            if (newStnList[parId].branch.right[1] === stnId) {\n                newStnList[parId].branch.right[1] = children[0];\n            }\n        });\n        children.forEach(childId => {\n            var idx = newStnList[childId].parents.indexOf(stnId);\n            if (parents.length) {\n                newStnList[childId].parents[idx] = parents[0];\n            } else {\n                // Left dest\n                newStnList[childId].parents.splice(idx, 1);\n            }\n\n            if (newStnList[childId].branch.left[1] === stnId) {\n                newStnList[childId].branch.left[1] = parents[0];\n            }\n        });\n    }\n\n    delete newStnList[stnId];\n\n    return newStnList;\n};\n","import React, { useMemo, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    List,\n    ListItem,\n    ListItemIcon,\n    Icon,\n    DialogActions,\n    Button,\n    makeStyles,\n    createStyles,\n    ListItemText,\n    Select,\n    Divider,\n} from '@material-ui/core';\nimport { formatStnName } from '../../utils';\nimport { getYShareMTR } from '../../methods';\nimport { addStation } from './utils';\nimport { useAppDispatch, useAppSelector } from '../../redux';\nimport { StationDict, StationInfo } from '../../constants/constants';\nimport { setStationsBulk } from '../../redux/param/action';\n\nconst newBranchPossibleEnd = (prep: 'before' | 'after', pivot: string, stnList: StationDict) => {\n    let res: string[] = [];\n    if (prep === 'before') {\n        while (stnList[pivot].parents.length === 1) {\n            pivot = stnList[pivot].parents[0];\n            res.unshift(pivot);\n        }\n        res.pop();\n    } else {\n        while (stnList[pivot].children.length === 1) {\n            pivot = stnList[pivot].children[0];\n            res.push(pivot);\n        }\n        res.shift();\n    }\n    return res;\n};\n\nconst newStnPossibleLoc = (\n    prep: 'before' | 'after',\n    pivot: string,\n    stnList: { [stnId: string]: StationInfo }\n): [number, number, number, string[], string[]] => {\n    let deg = stnList[pivot] ? stnList[pivot][prep === 'before' ? 'parents' : 'children'].length : 0;\n    switch (deg) {\n        case 2:\n            // 1 -> 2\n            return [1, 1, 1, [], []];\n        case 1:\n            let y = getYShareMTR(pivot, stnList);\n            if (y === 0) {\n                // 1 -> 1\n                let state: string[] | 0 = newBranchPossibleEnd(prep, pivot, stnList);\n                state = state.length ? state : [];\n                return [1, 0, 0, state, state];\n                // [1,0,0,1,1];\n            } else if (y < 0) {\n                if (prep === 'before') {\n                    return [stnList[stnList[pivot].parents[0]].children.length - 1, 0, 1, [], []];\n                } else {\n                    return [stnList[stnList[pivot].children[0]].parents.length - 1, 0, 1, [], []];\n                }\n            } else {\n                if (prep === 'before') {\n                    return [stnList[stnList[pivot].parents[0]].children.length - 1, 1, 0, [], []];\n                } else {\n                    return [stnList[stnList[pivot].children[0]].parents.length - 1, 1, 0, [], []];\n                }\n            }\n    }\n    return [0, 0, 0, [], []];\n};\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        dialogContent: {\n            padding: 8,\n        },\n        select: {\n            width: 166,\n            marginLeft: 8,\n        },\n    })\n);\n\ninterface StationAddDialogProps {\n    open: boolean;\n    onClose: (action: 'close' | string) => void;\n}\n\nexport default React.memo(\n    function StationAddDialog(props: StationAddDialogProps) {\n        const { t } = useTranslation();\n        const classes = useStyles();\n        const dispatch = useAppDispatch();\n\n        const rmgStyle = useAppSelector(store => store.param.style);\n        const stnList = useAppSelector(store => store.param.stn_list);\n        const { tpo } = useAppSelector(store => store.helper)\n\n        const allLocs = {\n            centre: t('stations.add.centre'),\n            upper: t('stations.add.upper'),\n            lower: t('stations.add.lower'),\n            newupper: t('stations.add.newUpper'),\n            newlower: t('stations.add.newLower'),\n        };\n\n        const [prep, setPrep] = React.useState('before' as 'before' | 'after');\n        const [pivot, setPivot] = React.useState(tpo[0]);\n        const [loc, setLoc] = React.useState(Object.keys(allLocs)[0]);\n        const [locOK, setLocOK] = React.useState(Array(5).fill(true) as boolean[]);\n\n        const [end, setEnd] = React.useState('');\n        const [endList, setEndList] = React.useState([] as string[]);\n\n        // Hook for updating loc list and end lists when pivot changed\n        const newLocs = useMemo(() => newStnPossibleLoc(prep, pivot, stnList), [prep, pivot, stnList]);\n        useEffect(\n            () => {\n                setLocOK(newLocs.map(p => (typeof p === 'number' ? Boolean(p) : Boolean(p.length))));\n                setEndList(newLocs[3]);\n            },\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [newLocs.toString()]\n        );\n\n        // Hook for updating loc selection (first available) when locOK list changed\n        useEffect(\n            () => setLoc(Object.keys(allLocs)[locOK.indexOf(true)]),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [locOK]\n        );\n\n        // Hook for updating end selection when end list changed\n        useEffect(() => {\n            if (endList.length === 0) return;\n            setEnd(endList[0]);\n        }, [endList]);\n\n        // Hook for setting new pivot in case of previous one being deleted\n        useEffect(\n            () => {\n                if (!(pivot in stnList)) setPivot(tpo[0]);\n            },\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [Object.keys(stnList).toString()]\n        );\n\n        const handleClick = (action: string) => {\n            if (action === 'close') {\n                props.onClose('close');\n            } else {\n                let [newId, res] = addStation(\n                    prep as 'before' | 'after',\n                    pivot,\n                    loc as 'centre' | 'upper' | 'lower' | 'newupper' | 'newlower',\n                    end as string,\n                    stnList\n                );\n                dispatch(setStationsBulk(res));\n                props.onClose(newId);\n            }\n        };\n\n        return (\n            <Dialog open={props.open} onClose={() => handleClick('close')}>\n                <DialogTitle>{t('stations.add.title')}</DialogTitle>\n                <DialogContent className={classes.dialogContent}>\n                    <List component=\"div\" disablePadding>\n                        <ListItem>\n                            <ListItemIcon>\n                                <Icon>control_camera</Icon>\n                            </ListItemIcon>\n                            <ListItemText primary={t('stations.add.prep')} />\n                            <Select\n                                native\n                                onChange={e => setPrep(e.target.value as 'before' | 'after')}\n                                value={prep}\n                                className={classes.select}\n                            >\n                                {['before', 'after'].map(p => (\n                                    <option key={p} value={p}>\n                                        {t('stations.add.' + p)}\n                                    </option>\n                                ))}\n                            </Select>\n                        </ListItem>\n                        <Divider variant=\"middle\" />\n                        <ListItem>\n                            <ListItemIcon>\n                                <Icon>near_me</Icon>\n                            </ListItemIcon>\n                            <ListItemText primary={t('stations.add.pivot')} />\n                            <Select\n                                native\n                                onChange={e => setPivot(e.target.value as string)}\n                                value={pivot}\n                                className={classes.select}\n                            >\n                                {tpo.map(stnId => (\n                                    <option key={stnId} value={stnId}>\n                                        {formatStnName(stnList[stnId], rmgStyle)}\n                                    </option>\n                                ))}\n                            </Select>\n                        </ListItem>\n                        <Divider variant=\"middle\" />\n                        <ListItem>\n                            <ListItemIcon>\n                                <Icon>share</Icon>\n                            </ListItemIcon>\n                            <ListItemText primary={t('stations.add.loc')} />\n                            <Select\n                                native\n                                onChange={e => setLoc(e.target.value as string)}\n                                value={loc}\n                                className={classes.select}\n                            >\n                                {(Object.keys(allLocs) as (keyof typeof allLocs)[]).map((key, idx) => (\n                                    <option key={key} value={key} disabled={!locOK[idx]}>\n                                        {allLocs[key]}\n                                    </option>\n                                ))}\n                            </Select>\n                        </ListItem>\n                        <Divider\n                            variant=\"middle\"\n                            style={{ display: ['newupper', 'newlower'].includes(loc) ? 'flex' : 'none' }}\n                        />\n                        <ListItem style={{ display: ['newupper', 'newlower'].includes(loc) ? 'flex' : 'none' }}>\n                            <ListItemIcon>\n                                <Icon>undo</Icon>\n                            </ListItemIcon>\n                            <ListItemText primary={t('stations.add.end')} />\n                            <Select\n                                native\n                                onChange={e => setEnd(e.target.value as string)}\n                                value={end}\n                                className={classes.select}\n                            >\n                                {endList.map(stnId => (\n                                    <option key={stnId} value={stnId}>\n                                        {formatStnName(stnList[stnId], rmgStyle)}\n                                    </option>\n                                ))}\n                            </Select>\n                        </ListItem>\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => handleClick('close')} color=\"primary\">\n                        {t('dialog.cancel')}\n                    </Button>\n                    <Button onClick={() => handleClick('accept')} color=\"primary\" autoFocus>\n                        {t('dialog.ok')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    },\n    (prevProps, nextProps) => prevProps.open === nextProps.open\n);\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    Tabs,\n    Tab,\n    Icon,\n    Typography,\n    CircularProgress,\n    DialogActions,\n    Button,\n    useTheme,\n    useMediaQuery,\n    makeStyles,\n    createStyles,\n    Paper,\n} from '@material-ui/core';\n\nconst NameTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsName\" */ './name-tab'));\nconst InterchangeTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsInterchange\" */ './interchange-tab'));\nconst BranchTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsBranch\" */ './branch-tab'));\nconst MoreTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsMore\" */ './more-tab'));\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        tab: {\n            padding: '6px 24px',\n            height: 48,\n            minWidth: 'calc(100% / 4)',\n            '& .MuiTab-wrapper': {\n                flexDirection: 'row',\n            },\n            '&.MuiTab-labelIcon': {\n                minHeight: 'unset',\n                '& .MuiTab-wrapper': {\n                    '& > *:first-child': {\n                        marginBottom: 0,\n                    },\n                    '& > *:not(first-child)': {\n                        paddingLeft: 8,\n                    },\n                },\n            },\n        },\n    })\n);\n\ninterface StationEditDialogProps {\n    onClose: () => void;\n    open: boolean;\n    stnId: string;\n}\n\nexport default function StationEditDialog(props: StationEditDialogProps) {\n    const { t } = useTranslation();\n\n    const [tabIndex, setTabIndex] = React.useState(0);\n\n    const classes = useStyles();\n\n    const tabNav = React.useMemo(\n        () => (\n            <Tabs\n                value={tabIndex}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                onChange={(_, val) => setTabIndex(val)}\n                variant=\"scrollable\"\n                scrollButtons=\"off\"\n            >\n                {[\n                    ['name', 'title'],\n                    ['interchange', 'transfer_within_a_station'],\n                    ['branch', 'share'],\n                    ['more', 'more_horiz'],\n                ].map((val, i) => (\n                    <Tab\n                        label={<span>{t('stations.edit.tab.' + val[0])}</span>}\n                        icon={<Icon>{val[1]}</Icon>}\n                        key={i}\n                        className={classes.tab}\n                    />\n                ))}\n            </Tabs>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [tabIndex, classes.tab]\n    );\n\n    return (\n        <DialogWrapper {...props}>\n            {tabNav}\n            <Typography component=\"div\" role=\"tabpanel\">\n                <React.Suspense fallback={<CircularProgress />}>\n                    {(idx => {\n                        switch (idx) {\n                            case 0:\n                                return <NameTab stnId={props.stnId} />;\n                            case 1:\n                                return <InterchangeTab stnId={props.stnId} />;\n                            case 2:\n                                return <BranchTab stnId={props.stnId} />;\n                            case 3:\n                                return <MoreTab stnId={props.stnId} />;\n                        }\n                    })(tabIndex)}\n                </React.Suspense>\n            </Typography>\n        </DialogWrapper>\n    );\n}\n\nconst DialogWrapper = (props: { children: React.ReactNode } & StationEditDialogProps) => {\n    const { t } = useTranslation();\n\n    const theme = useTheme();\n    const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\n    const isDialog = useMediaQuery(theme.breakpoints.down('sm'));\n\n    return isDialog ? (\n        <Dialog onClose={props.onClose} open={props.open} fullScreen={isMobile}>\n            <DialogTitle>{t('stations.edit.title')}</DialogTitle>\n            <DialogContent dividers style={{ padding: '0 16px' }}>\n                {props.children}\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose} color=\"primary\">\n                    {t('dialog.done')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    ) : (\n        <Paper>{props.children}</Paper>\n    );\n};\n","import Dialog from './dialog';\n\nexport default Dialog;\n","import React, { useState, memo } from 'react';\nimport { useTranslation, Trans } from 'react-i18next';\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core';\nimport { removeStation } from './utils';\nimport { setCurrentStation, setStationsBulk } from '../../redux/param/action';\nimport { useAppDispatch, useAppSelector } from '../../redux';\n\ninterface Props {\n    open: boolean;\n    onClose: () => void;\n}\n\nexport default function StationDeleteDialog(props: Props & { stnId: string }) {\n    const { stnId, open, onClose } = props;\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const stnList = useAppSelector(store => store.param.stn_list);\n    const currentStationIndex = useAppSelector(store => store.param.current_stn_idx);\n\n    const [isError, setIsError] = useState(false);\n\n    const handleClick = (action: 'close' | 'accept') => () => {\n        if (action === 'accept') {\n            let res = removeStation(stnId, stnList);\n            if (res === false) {\n                setIsError(true);\n            } else {\n                if (currentStationIndex === stnId) {\n                    let newCurrentId = Object.keys(res).filter(id => !['linestart', 'lineend'].includes(id))[0];\n                    dispatch(setCurrentStation(newCurrentId));\n                }\n                dispatch(setStationsBulk(res));\n            }\n        }\n        onClose();\n    };\n    return (\n        <>\n            <Dialog open={open} onClose={handleClick('close')}>\n                <DialogTitle>{t('stations.remove.title')}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        <Trans i18nKey=\"stations.remove.msg\">{{ name: stnList[props.stnId]?.name.join() }}</Trans>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClick('close')} color=\"primary\" autoFocus>\n                        {t('dialog.cancel')}\n                    </Button>\n                    <Button onClick={handleClick('accept')} color=\"primary\">\n                        {t('stations.remove.button')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <ErrorDialog open={isError} onClose={() => setIsError(false)} />\n        </>\n    );\n}\n\nconst ErrorDialog = memo(\n    (props: Props) => {\n        const { t } = useTranslation();\n        return (\n            <Dialog open={props.open} onClose={props.onClose}>\n                <DialogTitle>{t('stations.remove.error.title')}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>{t('stations.remove.error.msg')}</DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.onClose} color=\"primary\" autoFocus>\n                        {t('dialog.ok')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    },\n    (prevProps, nextProps) => prevProps.open === nextProps.open\n);\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    createStyles,\n    Fab,\n    Icon,\n    ListItemIcon,\n    ListItemText,\n    makeStyles,\n    Menu,\n    MenuItem,\n    Tooltip,\n} from '@material-ui/core';\nimport { useAppSelector } from '../../redux';\nimport { RmgStyle } from '../../constants/constants';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        fab: {\n            position: 'fixed',\n            right: theme.spacing(2),\n            bottom: theme.spacing(2),\n        },\n    })\n);\n\ninterface Props {\n    onAction: (action: string) => void;\n}\n\nconst StationFabs = React.memo(\n    (props: Props) => {\n        const { t } = useTranslation();\n        const rmgStyle = useAppSelector(store => store.param.style);\n        const classes = useStyles();\n        const [fabEl, setFabEl] = React.useState<null | HTMLElement>(null);\n\n        const handleAction = (action: string) => () => {\n            setFabEl(null);\n            props.onAction(action);\n        };\n\n        return (\n            <>\n                <Tooltip title={t('stations.fabs.tooltip') || ''} aria-label=\"options\">\n                    <Fab color=\"primary\" className={classes.fab} onClick={e => setFabEl(e.target as HTMLElement)}>\n                        <Icon>more_vert</Icon>\n                    </Fab>\n                </Tooltip>\n\n                <Menu anchorEl={fabEl} open={Boolean(fabEl)} onClose={() => setFabEl(null)}>\n                    <MenuItem onClick={handleAction('add')}>\n                        <ListItemIcon>\n                            <Icon>add_box</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('stations.fabs.add')} />\n                    </MenuItem>\n                    <MenuItem onClick={handleAction('reverse')}>\n                        <ListItemIcon>\n                            <Icon>cached</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('stations.fabs.reverse')} />\n                    </MenuItem>\n                    {rmgStyle === RmgStyle.GZMTR && (\n                        <MenuItem onClick={handleAction('autonum')}>\n                            <ListItemIcon>\n                                <Icon>filter_1</Icon>\n                            </ListItemIcon>\n                            <ListItemText primary={t('design.autoNum.button')} />\n                        </MenuItem>\n                    )}\n                </Menu>\n            </>\n        );\n    },\n    () => true\n);\n\nexport default StationFabs;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core';\nimport { updateStationNum } from '../../redux/param/action';\nimport { useAppDispatch, useAppSelector } from '../../redux';\n\ninterface Props {\n    open: boolean;\n    onClose: () => void;\n}\n\nconst AutoNumDialog = (props: Props) => {\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const { branches } = useAppSelector(store => store.helper);\n\n    const handleClick = (action: 'ascend' | 'descend') => {\n        let branch0 = branches[0];\n        branch0.forEach((stnId, i) => {\n            let num: string;\n            if (action === 'ascend') {\n                num = i.toString().padStart(2, '0');\n            } else {\n                num = (branch0.length - 1 - i).toString().padStart(2, '0');\n            }\n            dispatch(updateStationNum(stnId, num));\n            // (window.myLine as RMGLineGZ).updateStnNum(stnId, num);\n        });\n        // props.paramUpdate('stn_list', getParams().stn_list);\n        props.onClose();\n    };\n\n    return React.useMemo(\n        () => (\n            <Dialog onClose={props.onClose} open={props.open}>\n                <DialogTitle>{t('design.autoNum.title')}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>{t('design.autoNum.msg')}</DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.onClose} color=\"primary\" autoFocus>\n                        {t('dialog.cancel')}\n                    </Button>\n                    <Button onClick={() => handleClick('ascend')} color=\"primary\">\n                        {t('design.autoNum.ascend')}\n                    </Button>\n                    <Button onClick={() => handleClick('descend')} color=\"primary\">\n                        {t('design.autoNum.descend')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.open]\n    );\n};\n\nexport default AutoNumDialog;\n","import React, { useState } from 'react';\nimport { createStyles, Grid, makeStyles } from '@material-ui/core';\nimport StationList from './station-list';\nimport StationAddDialog from './add-diag';\nimport StationEditDialog from './edit-diag';\nimport StationDeleteDialog from './delete-diags';\nimport StationFabs from './fabs';\nimport AutoNumDialog from './auto-num-diag';\nimport { useAppDispatch, useAppSelector } from '../../redux';\nimport { RmgStyle } from '../../constants/constants';\nimport { reverseStations } from '../../redux/param/action';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        gridContainer: {\n            height: '100%',\n            overflow: 'hidden',\n        },\n        gridItem: {\n            height: '100%',\n            overflow: 'auto',\n        },\n    })\n);\n\nconst PanelStations2 = () => {\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const rmgStyle = useAppSelector(store => store.param.style);\n\n    const [stnSelected, setStnSelected] = useState('');\n    const [isOpen, setIsOpen] = useState(false);\n\n    const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n    const [isAutoNumDialogOpen, setIsAutoNumDialogOpen] = useState(false);\n\n    const [stnToRemove, setStnToRemove] = useState('');\n    const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n\n    const handleAction = (stnId: string) => (action: 'edit' | 'remove') => {\n        if (action === 'edit') {\n            setStnSelected(stnId);\n            setIsOpen(true);\n        }\n        if (action === 'remove') {\n            if (stnSelected === stnId) setStnSelected('');\n            setStnToRemove(stnId);\n            setIsDeleteDialogOpen(true);\n        }\n    };\n\n    const fabsAction = (action: string) => {\n        if (action === 'add') {\n            setIsAddDialogOpen(true);\n        }\n        if (action === 'reverse') {\n            dispatch(reverseStations());\n        }\n        if (action === 'autonum') {\n            setIsAutoNumDialogOpen(true);\n        }\n    };\n\n    const stnAddDialogClose = (action: 'close' | string) => {\n        setIsAddDialogOpen(false);\n        if (action !== 'close') {\n            setStnSelected(action);\n            setIsOpen(true);\n        }\n    };\n\n    return (\n        <>\n            <Grid container spacing={1} className={classes.gridContainer}>\n                <Grid item xs={12} md={4} className={classes.gridItem}>\n                    <StationList selectedId={stnSelected} onAction={handleAction} />\n                </Grid>\n                <Grid item xs={8} className={classes.gridItem}>\n                    {stnSelected && (\n                        <StationEditDialog open={isOpen} stnId={stnSelected} onClose={() => setIsOpen(false)} />\n                    )}\n                </Grid>\n            </Grid>\n\n            <StationFabs onAction={fabsAction} />\n\n            <StationAddDialog open={isAddDialogOpen} onClose={stnAddDialogClose} />\n            <StationDeleteDialog\n                open={isDeleteDialogOpen}\n                onClose={() => setIsDeleteDialogOpen(false)}\n                stnId={stnToRemove}\n            />\n            {rmgStyle === RmgStyle.GZMTR && (\n                <AutoNumDialog open={isAutoNumDialogOpen} onClose={() => setIsAutoNumDialogOpen(false)} />\n            )}\n        </>\n    );\n};\n\nexport default PanelStations2;\n","import Panel from './panel2';\n\nexport default Panel;\n"],"names":["useStyles","makeStyles","theme","createStyles","listItemNum","marginRight","spacing","fontSize","listItemText","display","alignItems","whiteSpace","overflow","selectedItem","background","palette","action","hover","props","tpo","useAppSelector","store","helper","Paper","List","dense","disablePadding","map","stnId","StationEntry","isSelected","selectedId","onAction","Divider","t","useTranslation","classes","dispatch","useAppDispatch","rmgStyle","param","style","stationInfo","stn_list","name","num","useState","toggleEl","setToggleEl","handleAction","ListItem","className","RmgStyle","Typography","ListItemText","primary","secondary","replace","ListItemSecondaryAction","IconButton","size","onClick","e","currentTarget","Icon","Menu","anchorEl","open","Boolean","onClose","MenuItem","setCurrentStation","getYShareMTR","stnList","includes","parents","length","children","stnPred","indexOf","getRandomId","Math","floor","random","pow","toString","padStart","getNameFromId","numsZH","split","numsEN","char","parseInt","join","dialogContent","padding","select","width","marginLeft","React","allLocs","centre","upper","lower","newupper","newlower","prep","setPrep","pivot","setPivot","Object","keys","loc","setLoc","Array","fill","locOK","setLocOK","end","setEnd","endList","setEndList","newLocs","useMemo","y","state","res","unshift","pop","push","shift","newBranchPossibleEnd","newStnPossibleLoc","useEffect","p","handleClick","newId","newInfo","secondaryName","services","Services","branch","left","right","transfer","info","tick_direc","ShortDirection","paid_area","osi_names","facility","Facilities","newStnList","JSON","parse","stringify","linestart","slice","forEach","par","child","parChildLen","BranchStyle","lineend","addStation","setStationsBulk","Dialog","DialogTitle","DialogContent","component","ListItemIcon","Select","native","onChange","target","value","variant","formatStnName","key","idx","disabled","DialogActions","Button","color","autoFocus","prevProps","nextProps","NameTab","InterchangeTab","BranchTab","MoreTab","tab","height","minWidth","flexDirection","minHeight","marginBottom","paddingLeft","DialogWrapper","useTheme","isMobile","useMediaQuery","breakpoints","down","fullScreen","dividers","tabIndex","setTabIndex","tabNav","Tabs","indicatorColor","textColor","_","val","scrollButtons","i","Tab","label","icon","role","fallback","CircularProgress","StationDeleteDialog","currentStationIndex","current_stn_idx","isError","setIsError","isLastMainBranchStn","id","console","log","parId","childId","childIdxOfPar","parIdxOfChild","splice","removeStation","newCurrentId","filter","DialogContentText","Trans","i18nKey","ErrorDialog","memo","fab","position","bottom","fabEl","setFabEl","Tooltip","title","Fab","branches","branch0","updateStationNum","gridContainer","gridItem","stnSelected","setStnSelected","isOpen","setIsOpen","isAddDialogOpen","setIsAddDialogOpen","isAutoNumDialogOpen","setIsAutoNumDialogOpen","stnToRemove","setStnToRemove","isDeleteDialogOpen","setIsDeleteDialogOpen","Grid","container","item","xs","md","reverseStations"],"sourceRoot":""}