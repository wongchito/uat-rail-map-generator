{"version":3,"file":"static/js/panelDesign.85f40255.chunk.js","mappings":"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","sources":["panels/colour-diag/theme-items.tsx","panels/colour-diag/dialog.tsx","panels/colour-diag/index.ts","panels/design/list-common.tsx","panels/design/panel.tsx","panels/design/index.ts","../node_modules/@material-ui/core/esm/Collapse/Collapse.js"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    createStyles,\n    Divider,\n    List,\n    ListItem,\n    ListItemText,\n    makeStyles,\n    MenuItem,\n    Select,\n    TextField,\n    Tooltip,\n} from '@material-ui/core';\nimport { getTransText2 } from '../../utils';\nimport { ColourHex, LanguageCode, MonoColour, PaletteEntry, Theme } from '../../constants/constants';\nimport { useAppSelector } from '../../redux';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        cityItem: {\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n        },\n        menuItemSpan: {\n            padding: '0 .3rem',\n        },\n        button: {\n            borderRadius: '50%',\n            height: 24,\n            width: 24,\n            minWidth: 0,\n            marginRight: 8,\n            // border: 'solid',\n            padding: 0,\n        },\n        inputColour: {\n            position: 'absolute',\n            width: 0,\n            height: 0,\n            left: 27,\n            top: 32,\n        },\n        buttonContainer: {\n            display: 'flex',\n            flexShrink: 1,\n        },\n    })\n);\n\nconst useLineList = (theme: Theme) => {\n    const [list, setList] = React.useState([] as PaletteEntry[]);\n\n    const listPromise: Promise<PaletteEntry[]> = fetch(`https://railmapgen.github.io/rmg-palette/resources/palettes/${theme[0]}.json`)\n        .then(resp => resp.json())\n        .catch(() => []);\n\n    useEffect(\n        () => {\n            if (typeof theme[0] === 'undefined') {\n                return;\n            }\n            (async () => {\n                const data = await listPromise;\n                setList(\n                    theme[0] === 'other' ? [{ ...data[0], colour: theme[2], fg: theme[3] || MonoColour.white }] : data\n                );\n            })();\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [theme.toString()]\n    );\n\n    return list;\n};\n\ninterface ColourDialogProps {\n    theme: Theme;\n    onUpdate: (key: string, value: any) => void;\n}\n\nexport const PalettePanel = (props: ColourDialogProps) => {\n    const { t, i18n } = useTranslation();\n    const classes = useStyles();\n\n    const cityChange = (event: React.ChangeEvent<HTMLInputElement>) =>\n        props.onUpdate('theme', [event.target.value, ...props.theme.slice(1)]);\n\n    // Hook for fetching line list of current city\n    const lineList = useLineList(props.theme);\n\n    // Hook for updating props.theme when lineList changed\n    useEffect(\n        () => {\n            if (lineList.length === 0) return; // initialising, ignore\n            if (lineList.filter(l => l.id === props.theme[1]).length) return; // current city, ignore\n            let { id, colour, fg } = lineList[0];\n            let newTheme = [props.theme[0], id, colour, fg || MonoColour.white];\n            props.onUpdate('theme', newTheme);\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [lineList]\n    );\n\n    const lineChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let line = event.target.value;\n        let { colour, fg } = lineList.filter(l => l.id === line)[0];\n        let newTheme = [props.theme[0], line, colour, fg || MonoColour.white];\n        props.onUpdate('theme', newTheme);\n    };\n\n    return (\n        <List component=\"div\" disablePadding>\n            <CitySelectItem value={props.theme[0]} onChange={cityChange} />\n            <Divider variant=\"middle\" />\n            <ListItem>\n                <ListItemText primary={t('colour.line')} />\n                <TextField\n                    select\n                    style={{ width: 166 }}\n                    onChange={lineChange}\n                    value={props.theme[1]}\n                    disabled={props.theme[0] === 'other'}\n                >\n                    {lineList.map(l => (\n                        <MenuItem key={l.id} value={l.id}>\n                            <span\n                                className={classes.menuItemSpan}\n                                style={{\n                                    backgroundColor: l.colour,\n                                    color: l.fg || MonoColour.white,\n                                }}\n                            >\n                                {getTransText2(l.name, i18n.languages as LanguageCode[])}\n                            </span>\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </ListItem>\n        </List>\n    );\n};\n\nexport const CustomPanel = (props: ColourDialogProps) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const [hexTemp, setHexTemp] = useState(props.theme[2]);\n\n    useEffect(\n        () => setHexTemp(props.theme[2]),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.theme[2]]\n    );\n\n    const colourChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let rgb = event.target.value;\n        // setHexTemp(rgb);\n        props.onUpdate('theme', ['other', 'other', rgb, props.theme[3]]);\n    };\n\n    const hexChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let hex = event.target.value;\n        if (hex.match(/^#[0-9a-fA-F]{0,6}$/) === null) return;\n        setHexTemp(hex as ColourHex);\n\n        if (props.theme[0] !== 'other') {\n            if (hex.match(/^#[0-9a-fA-f]{6}$/) !== null) {\n                // if hex valid, modify theme city and props.hex\n                let newTheme = ['other', 'other', hex, props.theme[3]];\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (along with selection)\n                // then line will be updated by hook\n            } else {\n                // if hex not valid, modify theme city only\n                let newTheme = ['other', 'other', ...props.theme.slice(2)];\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (along with selection)\n                // then line will be updated by hook\n            }\n        } else {\n            if (hex.match(/^#[0-9a-fA-F]{6}$/) !== null) {\n                // if hex valid, modify props.hex\n                let newTheme = props.theme.map((val, idx) => (idx === 2 ? hex : val));\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (actually only hex is changed)\n            } else {\n                // if hex not valid, do nothing\n            }\n        }\n    };\n\n    const fgChange = (event: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n        let newTheme = ['other', 'other', props.theme[2], event.target.value];\n        props.onUpdate('theme', newTheme);\n    };\n\n    return (\n        <List component=\"div\" disablePadding>\n            <ListItem>\n                <ListItemText primary={t('colour.colour')} />\n                <div className={classes.buttonContainer}>\n                    <input\n                        type=\"color\"\n                        id=\"input-color\"\n                        value={props.theme[2]}\n                        onChange={colourChange}\n                        className={classes.inputColour}\n                        style={{ opacity: 0 }}\n                    />\n                    <label htmlFor=\"input-color\">\n                        <Tooltip title={t('colour.tooltip') || ''} aria-label=\"colour picker\">\n                            <Button\n                                className={classes.button}\n                                style={{\n                                    backgroundColor: props.theme[2],\n                                    borderColor: props.theme[3] || MonoColour.white,\n                                }}\n                                variant=\"contained\"\n                                component=\"span\"\n                            >\n                                {' '}\n                            </Button>\n                        </Tooltip>\n                    </label>\n                </div>\n                <TextField\n                    error={!hexTemp?.match(/^#[0-9a-fA-F]{6}$/g)}\n                    style={{ width: 85 }}\n                    onChange={hexChange}\n                    value={hexTemp?.toUpperCase()}\n                />\n            </ListItem>\n            <Divider variant=\"middle\" />\n            <ListItem>\n                <ListItemText primary={t('colour.fg')} />\n                <Select\n                    native\n                    style={{ width: 85 }}\n                    label={t('colour.fg')}\n                    onChange={fgChange}\n                    value={props.theme[3] || MonoColour.white}\n                >\n                    <option value=\"#fff\">{t('colour.fgWhite')}</option>\n                    <option value=\"#000\">{t('colour.fgBlack')}</option>\n                </Select>\n            </ListItem>\n        </List>\n    );\n};\n\nconst CitySelectItem = (props: { value: string; onChange: (event: React.ChangeEvent<HTMLInputElement>) => void }) => {\n    const { t, i18n } = useTranslation();\n    const classes = useStyles();\n\n    const cityList = useAppSelector(state => state.data.paletteCityConfig);\n\n    const items = useMemo(\n        () =>\n            cityList.map(c => (\n                <MenuItem key={c.id} value={c.id}>\n                    <span className={classes.cityItem}>\n                        <CountryFlag code={c.country} />\n                        <span>{getTransText2(c.name, i18n.languages as LanguageCode[])}</span>\n                    </span>\n                </MenuItem>\n            )),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n    return (\n        <ListItem>\n            <ListItemText primary={t('colour.city')} />\n            <TextField select style={{ width: 166 }} value={props.value} onChange={props.onChange}>\n                {items}\n            </TextField>\n        </ListItem>\n    );\n};\n\nconst useEmojiStyles = makeStyles(() =>\n    createStyles({\n        img: {\n            height: 20,\n            marginRight: '0.2rem',\n        },\n    })\n);\n\n/**\n * Convert ISO 3166 alpha-2 country code (followed by BS 6879 UK subdivision code, if applicable) to flag Emoji. For Windows platform, an `img` element with image source from OpenMoji is returned.\n */\nfunction CountryFlag(props: { code: string }) {\n    const { i18n } = useTranslation();\n    const classes = useEmojiStyles();\n\n    let codePoints = [] as string[];\n\n    if (props.code.length === 2) {\n        codePoints = props.code\n            .toUpperCase()\n            .split('')\n            .map(char => ((char.codePointAt(0) || 0) + 127397).toString(16).toUpperCase());\n    } else {\n        codePoints = ['1F3F4'].concat(\n            props.code\n                .toUpperCase()\n                .split('')\n                .map(char => ((char.codePointAt(0) || 0) + 917536).toString(16).toUpperCase()),\n            'E007F'\n        );\n    }\n\n    // special case for simplified Chinese\n    if (\n        [LanguageCode.ChineseCN, LanguageCode.ChineseSimp].includes(i18n.language as LanguageCode) &&\n        props.code === 'TW'\n    )\n        codePoints = ['1F3F4'];\n\n    return navigator.platform.indexOf('Win32') !== -1 || navigator.platform.indexOf('Win64') !== -1 ? (\n        <img\n            src={process.env.PUBLIC_URL + `/images/flags/${codePoints.join('-')}.svg`}\n            className={classes.img}\n            alt={`Flag of ${props.code}`}\n        />\n    ) : (\n        // <img src={process.env.PUBLIC_URL + `/images/flags/${codePoints.join('-')}.svg`} className={classes.img} />\n        <span>{String.fromCodePoint(...codePoints.map(cp => parseInt(cp, 16)))}</span>\n    );\n}\n","import React, { useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    Chip,\n    createStyles,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Divider,\n    Icon,\n    InputBase,\n    List,\n    ListItem,\n    ListItemText,\n    makeStyles,\n    Paper,\n    Tab,\n    Tabs,\n} from '@material-ui/core';\nimport { CustomPanel, PalettePanel } from './theme-items';\nimport { InterchangeInfo, MonoColour, Name, Theme } from '../../constants/constants';\nimport { useAppSelector } from '../../redux';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        contentWrapper: {\n            display: 'flex',\n            overflow: 'hidden',\n            paddingTop: theme.spacing(1),\n            paddingBottom: theme.spacing(1),\n            paddingLeft: theme.spacing(3),\n            paddingRight: theme.spacing(3),\n            [theme.breakpoints.down('xs')]: {\n                flexDirection: 'column',\n            },\n        },\n        contentLeft: {\n            maxWidth: 280,\n        },\n        contentControl: {\n            flexGrow: 0,\n            flexShrink: 0,\n            display: 'flex',\n            flexDirection: 'column',\n            width: 270,\n        },\n\n        paperRoot: {\n            maxWidth: 250,\n        },\n        listItemPaper: {\n            justifyContent: 'center',\n        },\n        iconRoot: {\n            position: 'absolute',\n            color: theme.palette.action.active,\n        },\n        inputBaseRoot: {\n            display: 'block',\n        },\n        inputBaseInputZH: {\n            textAlign: 'center',\n            fontSize: 36,\n            padding: 0,\n            paddingTop: 6,\n            height: 45,\n        },\n        inputBaseInputEN: {\n            textAlign: 'center',\n            fontSize: 18,\n            padding: 0,\n            paddingBottom: 6,\n            height: 'auto',\n        },\n\n        chipWrapper: {\n            overflowX: 'auto',\n            display: 'flex',\n        },\n        chipRoot: {\n            borderRadius: 4.5,\n            height: 32,\n            lineHeight: '1rem',\n            margin: 2,\n        },\n        chipLabel: {\n            padding: '0 6px',\n            '& > span': {\n                display: 'block',\n                textAlign: 'center',\n            },\n            '& > span:first-child': {\n                fontSize: '1rem',\n            },\n            '& > span:last-child': {\n                lineHeight: '0.8rem',\n            },\n        },\n    })\n);\n\ninterface Props {\n    open: boolean;\n    theme: Theme;\n    lineName: Name;\n    onUpdate: (key: string, value: any) => void;\n    onClose: () => void;\n}\n\nconst Dialog2 = (props: Props) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    return (\n        <Dialog open={props.open} onClose={props.onClose}>\n            <DialogTitle>{t('colour.title')}</DialogTitle>\n            <DialogContent className={classes.contentWrapper}>\n                <List component=\"div\" disablePadding className={classes.contentLeft}>\n                    <LineNameInput theme={props.theme} lineName={props.lineName} onUpdate={props.onUpdate} />\n                    <Divider />\n                    <RecentChipSet onUpdate={props.onUpdate} />\n                </List>\n                <div className={classes.contentControl}>\n                    <ColourControl theme={props.theme} onUpdate={props.onUpdate} />\n                </div>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose} color=\"primary\">\n                    {t('dialog.done')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default Dialog2;\n\nconst LineNameInput = (props: { lineName: Name; theme: Theme; onUpdate: Props['onUpdate'] }) => {\n    const classes = useStyles();\n\n    const nameChange = (value: string, index: number) => {\n        let newName = props.lineName.map((val, idx) => (idx === index ? value : val));\n        props.onUpdate('name', newName);\n    };\n\n    return (\n        <ListItem style={{ justifyContent: 'center' }}>\n            <Paper className={classes.paperRoot} style={{ backgroundColor: props.theme[2] }}>\n                <Icon className={classes.iconRoot}>edit</Icon>\n                <InputBase\n                    value={props.lineName[0]}\n                    classes={{\n                        root: classes.inputBaseRoot,\n                        input: classes.inputBaseInputZH,\n                    }}\n                    style={{ color: props.theme[3] || MonoColour.white }}\n                    onChange={e => nameChange(e.target.value, 0)}\n                    autoFocus\n                />\n                <InputBase\n                    value={props.lineName[1]}\n                    classes={{\n                        root: classes.inputBaseRoot,\n                        input: classes.inputBaseInputEN,\n                    }}\n                    style={{ color: props.theme[3] || MonoColour.white }}\n                    onChange={e => nameChange(e.target.value, 1)}\n                />\n            </Paper>\n        </ListItem>\n    );\n};\n\nconst RecentChipSet = (props: { onUpdate: Props['onUpdate'] }) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const theme = useAppSelector(store => store.param.theme);\n    const lineName = useAppSelector(store => store.param.line_name);\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    const allInfos = useMemo(\n        () =>\n            new Set(\n                Object.values(stationList)\n                    .reduce(\n                        (acc, { transfer }) => {\n                            const { info } = transfer;\n                            return acc.concat(...info);\n                        },\n                        [[...theme, ...lineName]]\n                    )\n                    .map(val => JSON.stringify(val))\n                    .reverse()\n            ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n\n    const chips = useMemo(\n        () =>\n            [...allInfos].map((x, i) => {\n                const info: InterchangeInfo = JSON.parse(x);\n                const label = info.slice(4).map((txt, i) => (\n                    <span key={i} style={{ color: info[3] }}>\n                        {txt}\n                    </span>\n                ));\n\n                return (\n                    <Chip\n                        key={i}\n                        onClick={() => {\n                            props.onUpdate('theme', info.slice(0, 4));\n                            props.onUpdate('name', info.slice(4));\n                        }}\n                        style={{ backgroundColor: info[2] }}\n                        className={classes.chipRoot}\n                        classes={{ label: classes.chipLabel }}\n                        {...{ label }}\n                    />\n                );\n            }),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n\n    return (\n        <ListItem>\n            <ListItemText\n                primary={t('colour.recent')}\n                secondary={chips}\n                secondaryTypographyProps={{ component: 'div' }}\n                classes={{ secondary: classes.chipWrapper }}\n            />\n        </ListItem>\n    );\n};\n\nconst ColourControl = (props: { theme: Theme; onUpdate: Props['onUpdate'] }) => {\n    const { t } = useTranslation();\n    const [tabIndex, setTabIndex] = useState(props.theme[0] === 'other' ? 1 : 0);\n\n    const tabNav = (\n        <Tabs\n            value={tabIndex}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            onChange={(_, val) => setTabIndex(val)}\n            variant=\"fullWidth\"\n            scrollButtons=\"off\"\n        >\n            <Tab label={t('colour.palette')} style={{ minWidth: 'unset' }} />\n            <Tab label={t('colour.custom')} style={{ minWidth: 'unset' }} />\n        </Tabs>\n    );\n\n    const panel = (idx => {\n        switch (idx) {\n            case 0:\n                return <PalettePanel {...props} />;\n            case 1:\n                return <CustomPanel {...props} />;\n            default:\n                return <></>;\n        }\n    })(tabIndex);\n\n    return (\n        <>\n            {tabNav}\n            {panel}\n        </>\n    );\n};\n","import ColourDialog from './dialog';\n\nexport default ColourDialog;\n","import React, { ChangeEvent, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    Collapse,\n    createStyles,\n    Divider,\n    Icon,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    makeStyles,\n    Switch,\n    TextField,\n} from '@material-ui/core';\nimport ColourDialog from '../colour-diag';\nimport { useAppDispatch, useAppSelector } from '../../redux';\nimport { Name, RmgStyle, ShortDirection } from '../../constants/constants';\nimport { setDirection, setLineName, setPlatform, setTheme } from '../../redux/param/action';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        dividerVertical: {\n            margin: theme.spacing(0, 2),\n        },\n        nestedList: {\n            paddingLeft: theme.spacing(5),\n        },\n    })\n);\n\nconst DesignList = () => {\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const rmgStyle = useAppSelector(store => store.param.style);\n    const lineName = useAppSelector(store => store.param.line_name);\n    const theme = useAppSelector(store => store.param.theme);\n\n    const [isCDiagOpen, setIsCDiagOpen] = React.useState(false);\n\n    const nameDialogUpdate = (key: string, value: any) => {\n        if (key === 'name') {\n            dispatch(setLineName(Object.values(value) as Name));\n        }\n        if (key === 'theme') {\n            dispatch(setTheme(value));\n        }\n    };\n\n    return (\n        <>\n            <ListItem button onClick={() => setIsCDiagOpen(true)}>\n                <ListItemIcon>\n                    <Icon>color_lens</Icon>\n                </ListItemIcon>\n                <ListItemText\n                    primary={t('design.theme')}\n                    secondary={\n                        <span\n                            style={{\n                                backgroundColor: theme[2],\n                                color: theme[3],\n                                padding: '.1rem .3rem',\n                            }}\n                        >\n                            {Object.values(lineName).join()}\n                        </span>\n                    }\n                />\n                <Icon color=\"action\">arrow_right</Icon>\n            </ListItem>\n            <ColourDialog\n                open={isCDiagOpen}\n                theme={theme}\n                lineName={lineName}\n                onUpdate={nameDialogUpdate}\n                onClose={() => setIsCDiagOpen(false)}\n            />\n            <Divider />\n            <DirectionLi />\n            <Divider />\n            {rmgStyle === RmgStyle.SHMetro ? <PlatformNumSHMetroLi /> : <PlatformNumLi />}\n        </>\n    );\n};\n\nexport default DesignList;\n\nconst DirectionLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const direction = useAppSelector(store => store.param.direction);\n\n    return React.useMemo(() => {\n        const handleDirectionChange = () => {\n            dispatch(setDirection(direction === ShortDirection.left ? ShortDirection.right : ShortDirection.left));\n        };\n\n        return (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>directions</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('design.direction.button')} secondary={t('design.direction.' + direction)} />\n                <Divider orientation=\"vertical\" flexItem className={classes.dividerVertical} />\n                <Button variant=\"outlined\" color=\"primary\" onClick={handleDirectionChange}>\n                    {t('design.direction.switch')}\n                </Button>\n            </ListItem>\n        );\n    }, [classes.dividerVertical, direction, t, dispatch]);\n};\n\nconst PlatformNumLi = () => {\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const platform = useAppSelector(store => store.param.platform_num);\n\n    return React.useMemo(() => {\n        const handleChange = ({ target: { value } }: ChangeEvent<HTMLInputElement>) => {\n            dispatch(setPlatform(value));\n        };\n\n        return (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>looks_one</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('design.platform')} />\n                <TextField value={platform} onChange={handleChange} />\n            </ListItem>\n        );\n    }, [platform, dispatch, t]);\n};\n\nconst PlatformNumSHMetroLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const platform = useAppSelector(store => store.param.platform_num);\n\n    return useMemo(() => {\n        const handleSwitch = (_: React.ChangeEvent<HTMLInputElement>, checked: boolean) => {\n            if (checked) {\n                dispatch(setPlatform(''));\n            } else {\n                dispatch(setPlatform(false));\n            }\n        };\n\n        const handleChange = ({ target: { value } }: ChangeEvent<HTMLInputElement>) => {\n            dispatch(setPlatform(value));\n        };\n\n        return (\n            <>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>looks_one</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('design.platform')} />\n                    <ListItemSecondaryAction>\n                        <Switch color=\"primary\" checked={platform !== false} onChange={handleSwitch} />\n                    </ListItemSecondaryAction>\n                </ListItem>\n                <Collapse in={platform !== false} unmountOnExit>\n                    <List component=\"div\" disablePadding className={classes.nestedList}>\n                        <ListItem>\n                            <TextField placeholder={t('design.platform')} value={platform} onChange={handleChange} />\n                        </ListItem>\n                    </List>\n                </Collapse>\n            </>\n        );\n    }, [platform, classes.nestedList, t, dispatch]);\n};\n","import React from 'react';\nimport { Divider, Grid, LinearProgress, List, Paper } from '@material-ui/core';\nimport DesignCommon from './list-common';\nimport { useAppSelector } from '../../redux';\nimport { RmgStyle } from '../../constants/constants';\n\nconst DesignMTR = React.lazy(() => import(/* webpackChunkName: \"panelDesignMTR\" */ './list-mtr'));\nconst DesignGZMTR = React.lazy(() => import(/* webpackChunkName: \"panelDesignGZMTR\" */ './list-gzmtr'));\nconst DesignShmetro = React.lazy(() => import(/* webpackChunkName: \"panelDesignShmetro\" */ './list-shmetro'));\n\nconst DesignPanel = () => {\n    const rmgStyle = useAppSelector(store => store.param.style);\n    return (\n        <Grid container spacing={3} justifyContent=\"center\" alignItems=\"flex-start\">\n            <Grid item xs={12} sm={10} md={7} lg={5}>\n                <Paper>\n                    <List component=\"div\" disablePadding>\n                        <DesignCommon />\n                        {rmgStyle === RmgStyle.MTR && (\n                            <React.Suspense fallback={<LinearProgress />}>\n                                <Divider />\n                                <DesignMTR />\n                            </React.Suspense>\n                        )}\n                        {rmgStyle === RmgStyle.GZMTR && (\n                            <React.Suspense fallback={<LinearProgress />}>\n                                <Divider />\n                                <DesignGZMTR />\n                            </React.Suspense>\n                        )}\n                        {rmgStyle === RmgStyle.SHMetro && (\n                            <React.Suspense fallback={<LinearProgress />}>\n                                <Divider />\n                                <DesignShmetro />\n                            </React.Suspense>\n                        )}\n                    </List>\n                </Paper>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default DesignPanel;\n","import Panel from './panel';\n\nexport default Panel;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { chainPropTypes } from '@material-ui/utils';\nimport { Transition } from 'react-transition-group';\nimport withStyles from '../styles/withStyles';\nimport { duration } from '../styles/transitions';\nimport deprecatedPropType from '../utils/deprecatedPropType';\nimport { getTransitionProps } from '../transitions/utils';\nimport useTheme from '../styles/useTheme';\nimport { useForkRef } from '../utils';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      height: 0,\n      overflow: 'hidden',\n      transition: theme.transitions.create('height')\n    },\n\n    /* Styles applied to the root element when the transition has entered. */\n    entered: {\n      height: 'auto',\n      overflow: 'visible'\n    },\n\n    /* Styles applied to the root element when the transition has exited and `collapsedSize` != 0px. */\n    hidden: {\n      visibility: 'hidden'\n    },\n\n    /* Styles applied to the outer wrapper element. */\n    wrapper: {\n      // Hack to get children with a negative margin to not falsify the height computation.\n      display: 'flex'\n    },\n\n    /* Styles applied to the inner wrapper element. */\n    wrapperInner: {\n      width: '100%'\n    }\n  };\n};\n/**\n * The Collapse transition is used by the\n * [Vertical Stepper](/components/steppers/#vertical-stepper) StepContent component.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n */\n\nvar Collapse = /*#__PURE__*/React.forwardRef(function Collapse(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      collapsedHeight = props.collapsedHeight,\n      _props$collapsedSize = props.collapsedSize,\n      collapsedSizeProp = _props$collapsedSize === void 0 ? '0px' : _props$collapsedSize,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disableStrictM = props.disableStrictModeCompat,\n      disableStrictModeCompat = _props$disableStrictM === void 0 ? false : _props$disableStrictM,\n      inProp = props.in,\n      onEnter = props.onEnter,\n      onEntered = props.onEntered,\n      onEntering = props.onEntering,\n      onExit = props.onExit,\n      onExited = props.onExited,\n      onExiting = props.onExiting,\n      style = props.style,\n      _props$timeout = props.timeout,\n      timeout = _props$timeout === void 0 ? duration.standard : _props$timeout,\n      _props$TransitionComp = props.TransitionComponent,\n      TransitionComponent = _props$TransitionComp === void 0 ? Transition : _props$TransitionComp,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"collapsedHeight\", \"collapsedSize\", \"component\", \"disableStrictModeCompat\", \"in\", \"onEnter\", \"onEntered\", \"onEntering\", \"onExit\", \"onExited\", \"onExiting\", \"style\", \"timeout\", \"TransitionComponent\"]);\n\n  var theme = useTheme();\n  var timer = React.useRef();\n  var wrapperRef = React.useRef(null);\n  var autoTransitionDuration = React.useRef();\n  var collapsedSize = typeof (collapsedHeight || collapsedSizeProp) === 'number' ? \"\".concat(collapsedHeight || collapsedSizeProp, \"px\") : collapsedHeight || collapsedSizeProp;\n  React.useEffect(function () {\n    return function () {\n      clearTimeout(timer.current);\n    };\n  }, []);\n  var enableStrictModeCompat = theme.unstable_strictMode && !disableStrictModeCompat;\n  var nodeRef = React.useRef(null);\n  var handleRef = useForkRef(ref, enableStrictModeCompat ? nodeRef : undefined);\n\n  var normalizedTransitionCallback = function normalizedTransitionCallback(callback) {\n    return function (nodeOrAppearing, maybeAppearing) {\n      if (callback) {\n        var _ref = enableStrictModeCompat ? [nodeRef.current, nodeOrAppearing] : [nodeOrAppearing, maybeAppearing],\n            _ref2 = _slicedToArray(_ref, 2),\n            node = _ref2[0],\n            isAppearing = _ref2[1]; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.\n\n\n        if (isAppearing === undefined) {\n          callback(node);\n        } else {\n          callback(node, isAppearing);\n        }\n      }\n    };\n  };\n\n  var handleEnter = normalizedTransitionCallback(function (node, isAppearing) {\n    node.style.height = collapsedSize;\n\n    if (onEnter) {\n      onEnter(node, isAppearing);\n    }\n  });\n  var handleEntering = normalizedTransitionCallback(function (node, isAppearing) {\n    var wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;\n\n    var _getTransitionProps = getTransitionProps({\n      style: style,\n      timeout: timeout\n    }, {\n      mode: 'enter'\n    }),\n        transitionDuration = _getTransitionProps.duration;\n\n    if (timeout === 'auto') {\n      var duration2 = theme.transitions.getAutoHeightDuration(wrapperHeight);\n      node.style.transitionDuration = \"\".concat(duration2, \"ms\");\n      autoTransitionDuration.current = duration2;\n    } else {\n      node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : \"\".concat(transitionDuration, \"ms\");\n    }\n\n    node.style.height = \"\".concat(wrapperHeight, \"px\");\n\n    if (onEntering) {\n      onEntering(node, isAppearing);\n    }\n  });\n  var handleEntered = normalizedTransitionCallback(function (node, isAppearing) {\n    node.style.height = 'auto';\n\n    if (onEntered) {\n      onEntered(node, isAppearing);\n    }\n  });\n  var handleExit = normalizedTransitionCallback(function (node) {\n    var wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;\n    node.style.height = \"\".concat(wrapperHeight, \"px\");\n\n    if (onExit) {\n      onExit(node);\n    }\n  });\n  var handleExited = normalizedTransitionCallback(onExited);\n  var handleExiting = normalizedTransitionCallback(function (node) {\n    var wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;\n\n    var _getTransitionProps2 = getTransitionProps({\n      style: style,\n      timeout: timeout\n    }, {\n      mode: 'exit'\n    }),\n        transitionDuration = _getTransitionProps2.duration;\n\n    if (timeout === 'auto') {\n      var duration2 = theme.transitions.getAutoHeightDuration(wrapperHeight);\n      node.style.transitionDuration = \"\".concat(duration2, \"ms\");\n      autoTransitionDuration.current = duration2;\n    } else {\n      node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : \"\".concat(transitionDuration, \"ms\");\n    }\n\n    node.style.height = collapsedSize;\n\n    if (onExiting) {\n      onExiting(node);\n    }\n  });\n\n  var addEndListener = function addEndListener(nodeOrNext, maybeNext) {\n    var next = enableStrictModeCompat ? nodeOrNext : maybeNext;\n\n    if (timeout === 'auto') {\n      timer.current = setTimeout(next, autoTransitionDuration.current || 0);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(TransitionComponent, _extends({\n    in: inProp,\n    onEnter: handleEnter,\n    onEntered: handleEntered,\n    onEntering: handleEntering,\n    onExit: handleExit,\n    onExited: handleExited,\n    onExiting: handleExiting,\n    addEndListener: addEndListener,\n    nodeRef: enableStrictModeCompat ? nodeRef : undefined,\n    timeout: timeout === 'auto' ? null : timeout\n  }, other), function (state, childProps) {\n    return /*#__PURE__*/React.createElement(Component, _extends({\n      className: clsx(classes.root, classes.container, className, {\n        'entered': classes.entered,\n        'exited': !inProp && collapsedSize === '0px' && classes.hidden\n      }[state]),\n      style: _extends({\n        minHeight: collapsedSize\n      }, style),\n      ref: handleRef\n    }, childProps), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.wrapper,\n      ref: wrapperRef\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.wrapperInner\n    }, children)));\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Collapse.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content node to be collapsed.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: chainPropTypes(PropTypes.object, function (props) {\n    if (props.classes && props.classes.container) {\n      throw new Error(['Material-UI: the classes.container key is deprecated.', 'Use `classes.root` instead', 'The name of the pseudo-class was changed for consistency.'].join('\\n'));\n    }\n\n    return null;\n  }),\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The height of the container when collapsed.\n   * @deprecated The prop was renamed to support the addition of horizontal orientation, use `collapsedSize` instead.\n   */\n  collapsedHeight: deprecatedPropType(PropTypes.oneOfType([PropTypes.number, PropTypes.string]), 'The prop was renamed to support the vertical orientation, use `collapsedSize` instead'),\n\n  /**\n   * The height of the container when collapsed.\n   */\n  collapsedSize: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Enable this prop if you encounter 'Function components cannot be given refs',\n   * use `unstable_createStrictModeTheme`,\n   * and can't forward the ref in the passed `Component`.\n   */\n  disableStrictModeCompat: PropTypes.bool,\n\n  /**\n   * If `true`, the component will transition in.\n   */\n  in: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onExited: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   *\n   * Set to 'auto' to automatically calculate transition time based on height.\n   */\n  timeout: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })])\n} : void 0;\nCollapse.muiSupportAuto = true;\nexport default withStyles(styles, {\n  name: 'MuiCollapse'\n})(Collapse);"],"names":["useStyles","makeStyles","createStyles","cityItem","display","flexDirection","alignItems","menuItemSpan","padding","button","borderRadius","height","width","minWidth","marginRight","inputColour","position","left","top","buttonContainer","flexShrink","PalettePanel","props","useTranslation","t","i18n","classes","lineList","theme","React","list","setList","listPromise","fetch","then","resp","json","catch","useEffect","data","colour","fg","MonoColour","toString","useLineList","length","filter","l","id","newTheme","onUpdate","List","component","disablePadding","CitySelectItem","value","onChange","event","target","slice","Divider","variant","ListItem","ListItemText","primary","TextField","select","style","line","disabled","map","MenuItem","className","backgroundColor","color","getTransText2","name","languages","CustomPanel","useState","hexTemp","setHexTemp","type","rgb","opacity","htmlFor","Tooltip","title","Button","borderColor","error","match","hex","val","idx","toUpperCase","Select","native","label","cityList","useAppSelector","state","paletteCityConfig","items","useMemo","c","CountryFlag","code","country","useEmojiStyles","img","codePoints","split","char","codePointAt","concat","LanguageCode","includes","language","navigator","platform","indexOf","src","process","join","alt","String","fromCodePoint","cp","parseInt","contentWrapper","overflow","paddingTop","spacing","paddingBottom","paddingLeft","paddingRight","breakpoints","down","contentLeft","maxWidth","contentControl","flexGrow","paperRoot","listItemPaper","justifyContent","iconRoot","palette","action","active","inputBaseRoot","inputBaseInputZH","textAlign","fontSize","inputBaseInputEN","chipWrapper","overflowX","chipRoot","lineHeight","margin","chipLabel","Dialog","open","onClose","DialogTitle","DialogContent","LineNameInput","lineName","RecentChipSet","ColourControl","DialogActions","onClick","nameChange","index","newName","Paper","Icon","InputBase","root","input","e","autoFocus","store","param","line_name","stationList","stn_list","allInfos","Set","Object","values","reduce","acc","info","transfer","JSON","stringify","reverse","chips","x","i","parse","txt","Chip","secondary","secondaryTypographyProps","tabIndex","setTabIndex","tabNav","Tabs","indicatorColor","textColor","_","scrollButtons","Tab","panel","dividerVertical","nestedList","dispatch","useAppDispatch","rmgStyle","isCDiagOpen","setIsCDiagOpen","ListItemIcon","key","setLineName","setTheme","DirectionLi","RmgStyle","PlatformNumSHMetroLi","PlatformNumLi","direction","orientation","flexItem","setDirection","ShortDirection","platform_num","setPlatform","ListItemSecondaryAction","Switch","checked","Collapse","in","unmountOnExit","placeholder","DesignMTR","DesignGZMTR","DesignShmetro","Grid","container","item","xs","sm","md","lg","fallback","LinearProgress","ref","children","collapsedHeight","_props$collapsedSize","collapsedSize","collapsedSizeProp","_props$component","Component","_props$disableStrictM","disableStrictModeCompat","inProp","onEnter","onEntered","onEntering","onExit","onExited","onExiting","_props$timeout","timeout","duration","_props$TransitionComp","TransitionComponent","Transition","other","_objectWithoutProperties","useTheme","timer","wrapperRef","autoTransitionDuration","clearTimeout","current","enableStrictModeCompat","unstable_strictMode","nodeRef","handleRef","useForkRef","undefined","normalizedTransitionCallback","callback","nodeOrAppearing","maybeAppearing","_ref","_ref2","_slicedToArray","node","isAppearing","handleEnter","handleEntering","wrapperHeight","clientHeight","transitionDuration","getTransitionProps","mode","duration2","transitions","getAutoHeightDuration","handleEntered","handleExit","handleExited","handleExiting","_extends","addEndListener","nodeOrNext","maybeNext","next","setTimeout","childProps","clsx","entered","hidden","minHeight","wrapper","wrapperInner","muiSupportAuto","withStyles","transition","create","visibility"],"sourceRoot":""}