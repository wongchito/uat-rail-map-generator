{"version":3,"sources":["panels/stations/edit-diag/branch-tab.tsx"],"names":["useStyles","makeStyles","createStyles","select","width","StationEditBranchTab","props","stnId","t","useTranslation","style","margin","BranchSelectSet","direction","Direction","left","right","rmgStyle","useSelector","store","app","branchEntry","param","stn_list","branch","React","useMemo","BranchTypeItem","BranchFirstItem","RmgStyle","SHMetro","BranchPosItem","classes","reduxDispatch","useDispatch","dispatch","useContext","ParamContext","handleChange","branchType","target","value","type","updateStationBranchType","primary","native","onChange","className","disabled","length","BranchStyle","through","nonThrough","stnList","stnInfo","neighbours","parents","children","branchFirst","branchEndFirst","branchEndId","indexOf","branchesArg","first","branches","updateStationBranchFirstStation","transform","map","id","formatStnName","toString","branchPos","flipStationBranchPosition","p"],"mappings":"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","file":"static/js/panelStationsBranch.cb2d3476.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    createStyles,\n    Divider,\n    Icon,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    makeStyles,\n    Select,\n} from '@material-ui/core';\nimport { formatStnName } from '../../../utils';\nimport { ParamContext } from '../../../context';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../../redux';\nimport { BranchStyle, Direction, RmgStyle } from '../../../constants/constants';\nimport {\n    flipStationBranchPosition,\n    updateStationBranchFirstStation,\n    UpdateStationBranchFirstStationArgType,\n    updateStationBranchType,\n} from '../../../redux/param/action';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        select: {\n            width: 166,\n        },\n    })\n);\n\nexport default function StationEditBranchTab(props: { stnId: string }) {\n    const { stnId } = props;\n    const { t } = useTranslation();\n\n    return (\n        <List>\n            <ListItem>\n                <ListItemText>\n                    <h3 style={{ margin: 0 }}>{t('stations.edit.branch.left')}</h3>\n                </ListItemText>\n            </ListItem>\n            <BranchSelectSet stnId={stnId} direction={Direction.left} />\n            <Divider />\n            <ListItem>\n                <ListItemText>\n                    <h3 style={{ margin: 0 }}>{t('stations.edit.branch.right')}</h3>\n                </ListItemText>\n            </ListItem>\n            <BranchSelectSet stnId={stnId} direction={Direction.right} />\n        </List>\n    );\n}\n\ninterface BranchSelectSetProps {\n    stnId: string;\n    direction: Direction;\n}\n\nconst BranchSelectSet = (props: BranchSelectSetProps) => {\n    const { stnId, direction } = props;\n    const rmgStyle = useSelector((store: RootState) => store.app.rmgStyle);\n    const branchEntry = useSelector((store: RootState) => store.param.stn_list[stnId].branch[direction]);\n\n    return React.useMemo(\n        () => (\n            <>\n                <BranchTypeItem {...props} />\n                {branchEntry[0] && (\n                    <>\n                        <BranchFirstItem {...props} />\n                        {rmgStyle !== RmgStyle.SHMetro && <BranchPosItem {...props} />}\n                    </>\n                )}\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [stnId, direction, branchEntry[0]]\n    );\n};\n\ninterface ItemProps {\n    stnId: string;\n    direction: Direction;\n}\n\nconst BranchTypeItem = (props: ItemProps) => {\n    const { stnId, direction } = props;\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const reduxDispatch = useDispatch();\n\n    const { dispatch } = React.useContext(ParamContext);\n    const branchEntry = useSelector((store: RootState) => store.param.stn_list[stnId].branch[direction]);\n\n    const handleChange = ({ target: { value } }: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n        let branchType = value as 'na' | BranchStyle;\n        if (branchType === 'na') {\n            // no changes\n            return;\n        } else if (branchType === branchEntry[0]) {\n            // no changes\n            return;\n        } else {\n            dispatch({\n                type: 'UPDATE_STATION_BRANCH_TYPE',\n                stnId,\n                direction,\n                branchType,\n            });\n            reduxDispatch(updateStationBranchType(stnId, direction, branchType));\n        }\n    };\n\n    return React.useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>merge_type</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('stations.edit.branch.type.title')} />\n                <Select native onChange={handleChange} value={branchEntry[0] || 'na'} className={classes.select}>\n                    <option value=\"na\" disabled={branchEntry.length !== 0}>\n                        {t('stations.edit.branch.type.na')}\n                    </option>\n                    <option value={BranchStyle.through} disabled={branchEntry.length === 0}>\n                        {t('stations.edit.branch.type.through')}\n                    </option>\n                    <option value={BranchStyle.nonThrough} disabled={branchEntry.length === 0}>\n                        {t('stations.edit.branch.type.nonThrough')}\n                    </option>\n                </Select>\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [stnId, branchEntry[0]]\n    );\n};\n\nconst BranchFirstItem = (props: ItemProps) => {\n    const { stnId, direction } = props;\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const reduxDispatch = useDispatch();\n\n    const rmgStyle = useSelector((store: RootState) => store.app.rmgStyle);\n    const stnList = useSelector((store: RootState) => store.param.stn_list);\n    const { dispatch } = useContext(ParamContext);\n    const stnInfo = stnList[stnId];\n    const branchEntry = stnInfo.branch[direction];\n    const neighbours = direction === Direction.left ? stnInfo.parents : stnInfo.children;\n\n    const handleChange = ({ target: { value } }: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n        let branchFirst = value as string;\n        if (branchEntry[1] === branchFirst) {\n            // no changes\n            return;\n        } else {\n            let branchEndId = branchFirst;\n            let branchEndFirst: string;\n            if (direction === Direction.right) {\n                while (stnList[branchEndId].parents.length === 1) {\n                    branchEndId = stnList[branchEndId].children[0];\n                }\n                branchEndFirst = stnList[branchEndId].parents[neighbours.indexOf(branchFirst)];\n            } else {\n                while (stnList[branchEndId].children.length === 1) {\n                    branchEndId = stnList[branchEndId].parents[0];\n                }\n                branchEndFirst = stnList[branchEndId].children[neighbours.indexOf(branchFirst)];\n            }\n            const branchesArg: [UpdateStationBranchFirstStationArgType, UpdateStationBranchFirstStationArgType] = [\n                { stnId, direction, first: branchFirst },\n                {\n                    stnId: branchEndId,\n                    direction: direction === Direction.left ? Direction.right : Direction.left,\n                    first: branchEndFirst,\n                },\n            ];\n            dispatch({\n                type: 'UPDATE_STATION_BRANCH_FIRST',\n                branches: branchesArg,\n            });\n            reduxDispatch(updateStationBranchFirstStation(branchesArg));\n        }\n    };\n\n    return React.useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon style={{ transform: direction === Direction.left ? 'scale(-1)' : 'scale(1)' }}>share</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('stations.edit.branch.first')} />\n                <Select\n                    native\n                    onChange={handleChange}\n                    value={branchEntry[1] || neighbours[0]}\n                    className={classes.select}\n                >\n                    {neighbours.map(id => (\n                        <option key={id} value={id}>\n                            {formatStnName(stnList[id], rmgStyle)}\n                        </option>\n                    ))}\n                </Select>\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [stnId, branchEntry[1], neighbours.toString()]\n    );\n};\n\nconst BranchPosItem = (props: ItemProps) => {\n    const { stnId, direction } = props;\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const reduxDispatch = useDispatch();\n\n    const { dispatch } = React.useContext(ParamContext);\n    const stnList = useSelector((store: RootState) => store.param.stn_list);\n    const stnInfo = stnList[stnId];\n    const branchEntry = stnInfo.branch[direction] as [BranchStyle, string]; // mount only if branchEntry[0] is not undefined\n    const neighbours = direction === Direction.left ? stnInfo.parents : stnInfo.children;\n\n    const handleChange = ({ target: { value } }: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n        let branchPos: 0 | 1 = value === 'lower' ? 1 : 0;\n        if (neighbours.indexOf(branchEntry[1]) === branchPos) {\n            // no changes\n            return;\n        } else {\n            let branchEndId = branchEntry[1];\n            if (direction === Direction.right) {\n                while (stnList[branchEndId].parents.length === 1) {\n                    branchEndId = stnList[branchEndId].children[0];\n                }\n                dispatch({\n                    type: 'UPDATE_STATION_BRANCH_POS',\n                    right: stnId,\n                    left: branchEndId,\n                });\n                reduxDispatch(flipStationBranchPosition(branchEndId, stnId));\n            } else {\n                while (stnList[branchEndId].children.length === 1) {\n                    branchEndId = stnList[branchEndId].parents[0];\n                }\n                dispatch({\n                    type: 'UPDATE_STATION_BRANCH_POS',\n                    left: stnId,\n                    right: branchEndId,\n                });\n                reduxDispatch(flipStationBranchPosition(stnId, branchEndId));\n            }\n        }\n    };\n\n    return React.useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>swap_vert</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('stations.edit.branch.pos.title')} />\n                <Select\n                    native\n                    onChange={handleChange}\n                    value={neighbours.indexOf(branchEntry[1]) === 1 ? 'lower' : 'upper'}\n                    className={classes.select}\n                >\n                    {['upper', 'lower'].map(p => (\n                        <option key={p} value={p}>\n                            {t('stations.edit.branch.pos.' + p)}\n                        </option>\n                    ))}\n                </Select>\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [stnId, branchEntry[1], neighbours.toString()]\n    );\n};\n"],"sourceRoot":""}