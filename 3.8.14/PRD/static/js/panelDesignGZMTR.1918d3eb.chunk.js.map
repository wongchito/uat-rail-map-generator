{"version":3,"sources":["panels/design/list-gzmtr.tsx"],"names":["useStyles","makeStyles","theme","createStyles","nestedList","paddingLeft","spacing","DesignListGZMTR","t","useTranslation","useContext","ParamContext","param","dispatch","primary","value","line_num","onChange","e","type","num","target","psd_num","PanelTypeLi","NotesLi","useMemo","style","transform","native","info_panel_type","variant","width","PanelTypesGZMTR","map","key","classes","useState","isCollapse","setIsCollapse","isDialogOpen","setIsDialogOpen","noteSelected","setNoteSelected","button","onClick","prevOpen","color","in","unmountOnExit","component","disablePadding","className","notesGZMTR","_","i","NotesEntry","idx","onEdit","disableTypography","cursor","length","NoteEditDialog","open","onClose","props","toggleEl","setToggleEl","handleEdit","handleSlide","_event","note","val","j","handleRemove","secondary","overflow","textOverflow","whiteSpace","size","currentTarget","anchorEl","Boolean","step","marks","label","marginLeft","marginRight","valueLabelDisplay","edge","checked","toString","noteZH","setNoteZH","noteEN","setNoteEN","handleClick","margin","multiline","autoFocus","helperText"],"mappings":"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","file":"static/js/panelDesignGZMTR.1918d3eb.chunk.js","sourcesContent":["import React, { useContext, useState, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n    ListItem,\n    ListItemIcon,\n    Icon,\n    TextField,\n    ListItemText,\n    makeStyles,\n    createStyles,\n    Collapse,\n    Divider,\n    List,\n    ListItemSecondaryAction,\n    IconButton,\n    Typography,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Button,\n    Menu,\n    MenuItem,\n    Slider,\n    Switch,\n    Select,\n} from '@material-ui/core';\n\nimport { ParamContext } from '../../context';\nimport { PanelTypesGZMTR } from '../../constants';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        nestedList: {\n            paddingLeft: theme.spacing(5),\n        },\n    })\n);\n\nconst DesignListGZMTR = () => {\n    const { t } = useTranslation();\n    const { param, dispatch } = useContext(ParamContext);\n\n    return (\n        <>\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>looks_one</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('design.lineNum')} />\n                <TextField\n                    value={param.line_num}\n                    onChange={e => dispatch({ type: 'SET_LINE_NUM', num: e.target.value })}\n                />\n            </ListItem>\n            <Divider />\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>looks_one</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('design.psd')} />\n                <TextField\n                    value={param.psd_num}\n                    onChange={e => dispatch({ type: 'SET_PSD_NUM', num: e.target.value })}\n                />\n            </ListItem>\n            <Divider />\n            <PanelTypeLi />\n            <Divider />\n            <NotesLi />\n        </>\n    );\n};\n\nexport default DesignListGZMTR;\n\nconst PanelTypeLi = () => {\n    const { t } = useTranslation();\n    const { param, dispatch } = useContext(ParamContext);\n\n    return useMemo(\n        () => (\n            <>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon style={{ transform: 'rotate(180deg)' }}>credit_card</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('design.panelType.button')} />\n                    <Select\n                        native\n                        value={param.info_panel_type}\n                        onChange={e => dispatch({ type: 'SET_PANEL_TYPE', variant: e.target.value as PanelTypeGZMTR })}\n                        style={{ width: 166 }}\n                    >\n                        {PanelTypesGZMTR.map(type => (\n                            <option key={type} value={type}>\n                                {t('design.panelType.' + type)}\n                            </option>\n                        ))}\n                    </Select>\n                </ListItem>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.info_panel_type]\n    );\n};\n\nconst NotesLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const { param, dispatch } = useContext(ParamContext);\n\n    const [isCollapse, setIsCollapse] = useState(false);\n    const [isDialogOpen, setIsDialogOpen] = useState(false);\n    const [noteSelected, setNoteSelected] = useState(0);\n\n    const handleAdd = () => {\n        setNoteSelected(param.notesGZMTR.length);\n        dispatch({ type: 'ADD_NOTE_GZMTR' });\n        setIsDialogOpen(true);\n    };\n\n    const handleUpdate = (idx: number) => () => {\n        setNoteSelected(idx);\n        setIsDialogOpen(true);\n    };\n\n    return (\n        <>\n            <ListItem button onClick={() => setIsCollapse(prevOpen => !prevOpen)}>\n                <ListItemIcon>\n                    <Icon>notes</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('design.notesGZMTR.text')} />\n                {isCollapse ? <Icon color=\"action\">expand_less</Icon> : <Icon color=\"action\">expand_more</Icon>}\n            </ListItem>\n            <Collapse in={isCollapse} unmountOnExit>\n                <List component=\"div\" disablePadding className={classes.nestedList}>\n                    {param.notesGZMTR.map((_, i) => (\n                        <NotesEntry key={i} idx={i} onEdit={handleUpdate(i)} />\n                    ))}\n                    <ListItem>\n                        <ListItemText disableTypography>\n                            <Typography color=\"primary\" style={{ cursor: 'pointer' }} onClick={handleAdd}>\n                                {t('design.notesGZMTR.addNote')}\n                            </Typography>\n                        </ListItemText>\n                    </ListItem>\n                    {isDialogOpen && (\n                        <NoteEditDialog open={isDialogOpen} onClose={() => setIsDialogOpen(false)} idx={noteSelected} />\n                    )}\n                </List>\n            </Collapse>\n        </>\n    );\n};\n\nconst NotesEntry = (props: { idx: number; onEdit: () => void }) => {\n    const { t } = useTranslation();\n    const { param, dispatch } = useContext(ParamContext);\n\n    const [toggleEl, setToggleEl] = useState<null | HTMLElement>(null);\n\n    const handleEdit = () => {\n        setToggleEl(null);\n        props.onEdit();\n    };\n\n    const handleSlide = (i: number) => (_event: React.ChangeEvent<{}>, value: number | number[]) =>\n        typeof value === 'number' &&\n        dispatch({\n            type: 'UPDATE_NOTE_GZMTR',\n            idx: props.idx,\n            note: param.notesGZMTR[props.idx].map((val, j) => (j === i ? value : val)) as Note,\n        });\n\n    const handleRemove = () => {\n        setToggleEl(null);\n        dispatch({ type: 'REMOVE_NOTE_GZMTR', idx: props.idx });\n    };\n\n    return useMemo(\n        () => (\n            <>\n                <ListItem>\n                    <ListItemText\n                        primary={param.notesGZMTR[props.idx][0]}\n                        secondary={param.notesGZMTR[props.idx][1]}\n                        style={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}\n                    />\n                    <ListItemSecondaryAction>\n                        <IconButton size=\"small\" onClick={e => setToggleEl(e.currentTarget)}>\n                            <Icon>more_vert</Icon>\n                        </IconButton>\n                        <Menu anchorEl={toggleEl} open={Boolean(toggleEl)} onClose={() => setToggleEl(null)}>\n                            <MenuItem onClick={handleEdit}>{t('design.notesGZMTR.edit')}</MenuItem>\n\n                            <ListItem component=\"div\">\n                                <Slider\n                                    value={param.notesGZMTR[props.idx][2]}\n                                    onChange={handleSlide(2)}\n                                    step={0.01}\n                                    marks={[\n                                        { value: 0, label: t('layout.directionGZ.left') },\n                                        { value: 100, label: t('layout.directionGZ.right') },\n                                    ]}\n                                    style={{ width: 200, marginLeft: 5, marginRight: 5 }}\n                                    valueLabelDisplay=\"auto\"\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <Slider\n                                    value={param.notesGZMTR[props.idx][3]}\n                                    onChange={handleSlide(3)}\n                                    step={0.01}\n                                    marks={[\n                                        { value: 0, label: t('layout.directionGZ.top') },\n                                        { value: 100, label: t('layout.directionGZ.bottom') },\n                                    ]}\n                                    style={{ width: 200, marginLeft: 5, marginRight: 5 }}\n                                    valueLabelDisplay=\"auto\"\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemText primary={t('design.notesGZMTR.border')} />\n                                <ListItemSecondaryAction>\n                                    <Switch\n                                        edge=\"end\"\n                                        color=\"primary\"\n                                        checked={param.notesGZMTR[props.idx][4]}\n                                        onChange={(_, checked) =>\n                                            dispatch({\n                                                type: 'UPDATE_NOTE_GZMTR',\n                                                idx: props.idx,\n                                                note: param.notesGZMTR[props.idx].map((val, i) =>\n                                                    i === 4 ? checked : val\n                                                ) as Note,\n                                            })\n                                        }\n                                    />\n                                </ListItemSecondaryAction>\n                            </ListItem>\n\n                            <MenuItem onClick={handleRemove}>{t('design.notesGZMTR.remove')}</MenuItem>\n                        </Menu>\n                    </ListItemSecondaryAction>\n                </ListItem>\n                <Divider variant=\"middle\" />\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.notesGZMTR[props.idx].toString(), toggleEl]\n    );\n};\n\ninterface AddNoteDialogProps {\n    open: boolean;\n    onClose: () => void;\n    idx: number;\n}\n\nconst NoteEditDialog = (props: AddNoteDialogProps) => {\n    const { t } = useTranslation();\n\n    const { param, dispatch } = useContext(ParamContext);\n    const note = param.notesGZMTR[props.idx] || ['', '', 0, 0];\n\n    const [noteZH, setNoteZH] = useState(note[0] || '');\n    const [noteEN, setNoteEN] = useState(note[1] || '');\n\n    const handleClick = () => {\n        dispatch({ type: 'UPDATE_NOTE_GZMTR', idx: props.idx, note: [noteZH, noteEN, note[2], note[3], note[4]] });\n        props.onClose();\n    };\n\n    return useMemo(\n        () => (\n            <Dialog open onClose={props.onClose}>\n                <DialogTitle>{t('design.notesGZMTR.editNote')}</DialogTitle>\n                <DialogContent>\n                    <TextField\n                        variant=\"outlined\"\n                        label={t('editor.zh')}\n                        margin=\"dense\"\n                        multiline\n                        autoFocus\n                        value={noteZH}\n                        onChange={e => setNoteZH(e.target.value)}\n                        style={{ width: '100%' }}\n                        helperText={t('editor.enterToWrap')}\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        label={t('editor.en')}\n                        margin=\"dense\"\n                        multiline\n                        value={noteEN}\n                        onChange={e => setNoteEN(e.target.value)}\n                        style={{ width: '100%' }}\n                        helperText={t('editor.enterToWrap')}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button variant=\"contained\" onClick={handleClick} color=\"primary\">\n                        {t('dialog.done')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [noteZH, noteEN]\n    );\n};\n"],"sourceRoot":""}