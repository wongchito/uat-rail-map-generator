{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","methods.ts","svgs/railmap/methods/share.ts","svgs/gzmtr/psd-number.tsx","svgs/strip/strip-gzmtr.tsx","svgs/gzmtr/station-icon/station-icon.tsx","svgs/gzmtr/station-icon/station-number.tsx","svgs/gzmtr/line-icon/line-icon-type2.tsx","svgs/gzmtr/line-icon/interchange-box.tsx","svgs/gzmtr/line-icon/line-icon.tsx","svgs/gzmtr/station-name/station-name.tsx","svgs/gzmtr/station-name/station-secondary-name.tsx","svgs/gzmtr/station-name/express-tag.tsx","svgs/railmap/main/station/station-gzmtr.tsx","svgs/railmap/main/main-gzmtr.tsx","svgs/railmap/railmap-gzmtr.tsx"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","getYShareMTR","stnId","stnList","includes","parents","children","stnPred","adjacencyList","leftW","rightW","reduce","acc","cur","a","c","criticalPathMethod","from","to","adjMat","len","nodes","allLengths","criticalPaths","forEach","child","cp","push","unshift","maxLength","Math","max","getXShareMTR","branches","criticalPath","branchOfStn","filter","branch","partSource","partSink","leftOpenJaw","lens","slice","getStnState","currentId","routes","direction","console","log","Set","concat","ShortDirection","right","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","yShares","xShares","namePoss","leftWideFactor","rightWideFactor","pathWeight","Infinity","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","res","getYShare","stnIds","lineXs","realXs","realYs","e","prevId","prevY","prevX","path","stnDX","stnExtraH","stnSpareH","warn","x","y","join","replace","stations","stnStates","xs","ys","linePaths","main","pass","lineMainStns","linePassStns","_linePath","drawLine","PsdNumber","props","num","inStrip","others","textAnchor","fill","MonoColour","black","height","width","rx","className","fontSize","dy","StripGZMTR","stripHeight","variant","indicatorLight","React","useMemo","cy","r","ry","transform","id","style","isShowLight","isShowPSD","PSD","memo","isInStrip","psdDy","prevProps","nextProps","passed","pathD","large","d","strokeWidth","stroke","StationNumber","lineNum","stnNum","lineNumEl","useRef","stnNumEl","useState","lineNumBBox","setLineNumBBox","stnNumBBox","setStnNumBBox","useEffect","current","getBBox","lineNumScale","stnNumScale","ref","lineName","commonPart","wrapperEl","bBox","setBBox","toString","scale","MAX_WIDTH","dx","trim","InterchangeBox","foregroundColour","backgroundColour","stationState","getType","type","nameZhEl","nameEnEl","nameZhBBox","setNameZhBBox","nameEnBBox","setNameEnBBox","nameZhScale","nameEnScale","white","getYByType","name","matchResultForType1","match","matchResultForType2","map","text","field","stnName","onUpdate","nameEl","split","txt","StationSecondaryName","nextBBox","ExpressTag","StationGZMTR","stnState","stnY","theme","useAppSelector","store","param","line_name","lineNumber","line_num","stnInfo","stn_list","isNameShift","tickRotation","left","nameENLns","nameDX","cos","intInfos","transfer","info","secondaryName","isExpress","services","Services","express","StationNameGElement","nameDY","secNameBBox","setSecNameBBox","IntGroup","IntTicks","xlinkHref","IntBoxs","other","wideFactor","MainGZMTR","helper","deps","depsStr","svgWidths","svgWidth","yPercentage","y_pc","paddingPercentage","padding","branch_spacing","currentStationIndex","current_stn_idx","stationList","rightOpenJaw","getXShare","JSON","stringify","realCP","CanvasType","RailMap","paths","stns","Line","strokeDasharray","StationGroup","DefsGZMTR","RailMapGZMTR","psdNumber","psd_num","infoPanelType","info_panel_type","notes","notesGZMTR","curStnInfo","PanelTypeGZMTR","gz2otis","TerminusFlag","note","NoteBox","x2","strokeLinecap","DirectionIndicator","directionIndicatorX","direction_gz_x","directionIndicatorY","direction_gz_y","validDests","textGroupProps","destIds","DirectionIndicatorTextGroup","DirectionIndicatorTextGroup2","charCounts","minCharCounts","min","charSpacing","abs","Fragment","letterSpacing","noteTextEl","textLength","navigator","userAgent","lengthAdjust"],"mappings":"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","file":"static/js/railmapGZMTR.ca5757f7.chunk.js","sourcesContent":["import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { StationDict } from './constants/constants';\n\n/**\n * Vertical position (in shares) of station icon if using MTR style (for consistency of method `RMGLine.newStnPossibleLoc()`).\n */\nexport const getYShareMTR = (stnId: string, stnList: StationDict): -1 | 0 | 1 => {\n    if (\n        ['linestart', 'lineend'].includes(stnId) ||\n        stnList[stnId].parents.length > 1 ||\n        stnList[stnId].children.length > 1\n    ) {\n        return 0;\n    }\n    var stnPred = stnList[stnId].parents[0];\n    if (stnPred) {\n        // parent exist\n        if (stnList[stnPred].children.length === 1) {\n            // no sibling, then y same as parent\n            return getYShareMTR(stnPred, stnList);\n        } else {\n            // sibling exists, then y depends on its idx of being children\n            return stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n        }\n    } else {\n        // no parent, must be linestart\n        return 0;\n    }\n};\n","import * as Global from '../../../methods';\nimport { RMGParam, ShortDirection, StationDict, StationInfo } from '../../../constants/constants';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (\n                          direction === ShortDirection.right\n                              ? _isSuccessor(currentId, cur, routes)\n                              : _isPredecessor(currentId, cur, routes)\n                      )\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as StationDict;\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number\n    ) {\n        var [prevId, prevY, prevX] = [] as unknown as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 2;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + e}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - e}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number = 9.68\n    ) {\n        let linePaths = { main: [] as string[], pass: [] as string[] };\n        branches.forEach((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branches: string[][], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    let linePaths = { main: [] as string[][], pass: [] as string[][] };\n    branches.forEach(branch => {\n        branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n        var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n        var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n        if (lineMainStns.length === 1) {\n            linePassStns = branch;\n        }\n\n        if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n            // if two set disjoint\n            if (linePassStns[0] === branch[0]) {\n                // -1 -1 1 1\n                linePassStns.push(lineMainStns[0]);\n            } else if (\n                lineMainStns[0] === branch[0] &&\n                lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                linePassStns.length\n            ) {\n                linePassStns = branch;\n                lineMainStns = [];\n            } else {\n                // 1 1 -1 -1\n                linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n            }\n        }\n\n        linePaths.main.push(lineMainStns);\n        linePaths.pass.push(linePassStns);\n    });\n\n    return linePaths;\n};\n","import React, { SVGProps } from 'react';\nimport { MonoColour } from '../../constants/constants';\n\ninterface PsdNumberProps extends SVGProps<SVGGElement> {\n    num: string;\n    inStrip?: boolean;\n}\n\nexport default function PsdNumber(props: PsdNumberProps) {\n    const { num, inStrip, ...others } = props;\n\n    return (\n        <g textAnchor=\"middle\" fill={inStrip ? MonoColour.black : 'var(--rmg-theme-fg)'} {...others}>\n            <rect height={40} width={40} rx={4} x={-20} fill={inStrip ? '#fff' : 'var(--rmg-theme-colour)'} />\n            <text className=\"rmg-name__en\" fontSize={20} dy={12}>\n                {num}\n            </text>\n            <text className=\"rmg-name__zh\" fontSize={12} dy={26}>\n                屏蔽门\n            </text>\n            <text className=\"rmg-name__en\" fontSize={6.5} dy={36}>\n                Screen Door\n            </text>\n        </g>\n    );\n}\n","import React from 'react';\nimport { PanelTypeGZMTR, PanelTypeShmetro } from '../../constants/constants';\nimport PsdNumber from '../gzmtr/psd-number';\n\ninterface Props {\n    variant: PanelTypeGZMTR | PanelTypeShmetro;\n    isShowLight: boolean;\n    isShowPSD: false | string;\n}\n\nconst StripGZMTR = (props: Props) => {\n    const stripHeight = (variant => {\n        switch (variant) {\n            case 'gz28':\n            case 'gz2otis':\n            case 'gz6':\n            case 'gzgf':\n                return 60;\n            case 'gz1':\n            case 'gz3':\n                return 40;\n            case 'gz4':\n            case 'gz5':\n            case 'gz1421':\n                return 20;\n            default:\n                return 0;\n        }\n    })(props.variant);\n\n    const indicatorLight = React.useMemo(() => {\n        switch (props.variant) {\n            case 'gz1':\n                return <circle cy={-58} r={16} fill=\"red\" />;\n            case 'gz28':\n            case 'gz2otis':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz3':\n                return <rect x={-15} y={-55} height={30} width={30} fill=\"red\" />;\n            case 'gz6':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"white\" />;\n            case 'gz1421':\n                return <ellipse cy={-38} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz5':\n                return <rect x={-30} y={-70} height={30} width={60} fill=\"orange\" />;\n            case 'gz4':\n                return <rect x={-50} y={-50} height={25} width={100} fill=\"whitesmoke\" />;\n            case 'gzgf':\n                return <rect x={-30} y={-58} height={30} width={60} fill=\"orange\" />;\n            default:\n                return <></>;\n        }\n    }, [props.variant]);\n\n    const stripDy = -20;\n\n    return (\n        <g transform={`translate(0,${props.variant === 'gz4' ? stripDy : 0})`}>\n            <rect\n                id=\"strip_gz\"\n                style={{\n                    ['--height' as any]: `${stripHeight}px`,\n                }}\n            />\n            <g\n                style={{\n                    transform: 'translate(calc(var(--rmg-svg-width) / 2),var(--rmg-svg-height))',\n                }}\n            >\n                {props.isShowLight && indicatorLight}\n            </g>\n            {props.isShowPSD !== false && <PSD {...props} />}\n        </g>\n    );\n};\n\nexport default StripGZMTR;\n\nconst PSD = React.memo(\n    (props: Props) => {\n        /**\n         * Flag of whether PSD number is stick within the strip area. If `true`, should fill with white, otherwise, fill with theme colour.\n         */\n        const isInStrip = ['gz28', 'gz2otis', 'gz6', 'gzgf'].includes(props.variant);\n        const psdDy = ((variant: PanelTypeGZMTR | PanelTypeShmetro) => {\n            switch (variant) {\n                case 'gz1':\n                case 'gz3':\n                    return '82px';\n                case 'gz4':\n                    return '65px';\n                case 'gz5':\n                    return '80px';\n                case 'gz1421':\n                    return '62px';\n                default:\n                    return '58px';\n            }\n        })(props.variant);\n\n        return (\n            <PsdNumber\n                num={props.isShowPSD as string}\n                inStrip={isInStrip}\n                style={{\n                    ['--psd-dy' as any]: psdDy,\n                    transform: 'translate(var(--translate-x), var(--translate-y))',\n                    ['--translate-x' as any]: 'calc(var(--rmg-svg-width) / 2 + 80px)',\n                    ['--translate-y' as any]: 'calc(var(--rmg-svg-height) - var(--psd-dy, 58px))',\n                }}\n            />\n        );\n    },\n    (prevProps, nextProps) => prevProps.variant === nextProps.variant && prevProps.isShowPSD === nextProps.isShowPSD\n);\n","import React, { memo } from 'react';\n\ninterface StationIconProps {\n    passed?: boolean;\n    large?: boolean;\n}\n\nexport default memo(\n    function StationIcon(props: StationIconProps) {\n        const { passed, large } = props;\n\n        const pathD = large\n            ? 'M0,12.95 V-12.95 H-12.95 a12.95,12.95 0 0,0 0,25.9 h25.9 a12.95,12.95 0 0,0 0,-25.9 H0'\n            : 'M0,9.25 V-9.25 H-9.25 a9.25,9.25 0 0,0 0,18.5 h18.5 a9.25,9.25 0 0,0 0,-18.5 H0';\n\n        return <path d={pathD} fill=\"#fff\" strokeWidth={2} stroke={passed ? '#aaa' : 'var(--rmg-theme-colour)'} />;\n    },\n    (prevProps, nextProps) => prevProps.passed === nextProps.passed && prevProps.large === nextProps.large\n);\n","import React, { SVGProps, useEffect, useRef, useState } from 'react';\nimport StationIcon from './station-icon';\n\nconst TEXT_MAX_WIDTH = 15;\n\ninterface StationNumberProps extends SVGProps<SVGGElement> {\n    lineNum: string;\n    stnNum: string;\n    passed?: boolean;\n    large?: boolean;\n}\n\nexport default function StationNumber(props: StationNumberProps) {\n    const { lineNum, stnNum, passed, large, ...others } = props;\n\n    const lineNumEl = useRef<SVGTextElement | null>(null);\n    const stnNumEl = useRef<SVGTextElement | null>(null);\n\n    const [lineNumBBox, setLineNumBBox] = useState({ width: 0 } as DOMRect);\n    const [stnNumBBox, setStnNumBBox] = useState({ width: 0 } as DOMRect);\n\n    useEffect(() => {\n        setLineNumBBox(lineNumEl.current!.getBBox());\n        setStnNumBBox(stnNumEl.current!.getBBox());\n    }, [lineNum, stnNum]);\n\n    const lineNumScale = TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, lineNumBBox.width);\n    const stnNumScale =\n        lineNum.length === 2 && stnNum.length === 2\n            ? lineNumScale\n            : TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, stnNumBBox.width);\n\n    return (\n        <g {...others}>\n            <StationIcon passed={passed} large={large} />\n            <g\n                textAnchor=\"middle\"\n                fontSize={13.5}\n                transform={large ? 'scale(1.4)' : ''}\n                fill={passed ? '#aaa' : '#000'}\n            >\n                <g transform={`translate(-9.25,0)scale(${lineNumScale})`}>\n                    <text ref={lineNumEl} className=\"rmg-name__zh\">\n                        {lineNum}\n                    </text>\n                </g>\n                <g transform={`translate(9.25,0)scale(${stnNumScale})`}>\n                    <text ref={stnNumEl} className=\"rmg-name__zh\">\n                        {stnNum}\n                    </text>\n                </g>\n            </g>\n        </g>\n    );\n}\n","import React, { memo, useEffect, useRef, useState } from 'react';\nimport { Name } from '../../../constants/constants';\nimport { MAX_WIDTH } from './line-icon';\n\ninterface LineIconType2Props {\n    lineName: Name;\n    commonPart: string;\n}\n\nexport default memo(\n    function LineIconType2(props: LineIconType2Props) {\n        const { lineName, commonPart } = props;\n\n        const wrapperEl = useRef<SVGGElement | null>(null);\n        const [bBox, setBBox] = useState({ x: 0, height: 0, width: 0 } as DOMRect);\n        useEffect(() => {\n            wrapperEl.current && setBBox(wrapperEl.current.getBBox());\n        }, [lineName.toString()]);\n\n        const scale = MAX_WIDTH / Math.max(MAX_WIDTH, bBox.width);\n        const dx = (-bBox.x - bBox.width / 2) * scale;\n        const dy = (bBox.height * (1 - scale) * 1.2) / 2;\n\n        return (\n            <g ref={wrapperEl} transform={`translate(${dx},${dy})scale(${scale})`}>\n                <text className=\"rmg-name__zh\" fontSize={14} y={12} textAnchor=\"end\">\n                    {commonPart}\n                    <tspan className=\"rmg-name__zh\" fontSize={8} x={0} dy={-2} textAnchor=\"start\">\n                        {lineName[0].slice(commonPart.length).trim()}\n                    </tspan>\n                    <tspan className=\"rmg-name__en\" fontSize={4} x={0} dy={6} textAnchor=\"start\">\n                        {lineName[1].slice(commonPart.length).trim()}\n                    </tspan>\n                </text>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.lineName.toString() === nextProps.lineName.toString()\n);\n","import React, { SVGProps } from 'react';\n\nexport default function InterchangeBox(props: SVGProps<SVGRectElement>) {\n    return <rect x={-22.5} height={24} width={45} rx={4.5} {...props} />;\n}\n","import React, { memo, useEffect, useRef, useState } from 'react';\nimport { ColourHex, MonoColour, Name } from '../../../constants/constants';\nimport LineIconType2 from './line-icon-type2';\nimport InterchangeBox from './interchange-box';\n\nexport const MAX_WIDTH = 42;\n\ninterface LineIconProps {\n    lineName: Name;\n    foregroundColour: MonoColour;\n    backgroundColour: ColourHex;\n    stationState: -1 | 0 | 1;\n}\n\nexport default memo(\n    function LineIcon(props: LineIconProps) {\n        const { lineName, foregroundColour, backgroundColour, stationState } = props;\n\n        const [type, commonPart] = getType(lineName);\n\n        const nameZhEl = useRef<SVGTextElement | null>(null);\n        const nameEnEl = useRef<SVGTextElement | null>(null);\n\n        const [nameZhBBox, setNameZhBBox] = useState({ width: 0 } as DOMRect);\n        const [nameEnBBox, setNameEnBBox] = useState({ width: 0 } as DOMRect);\n\n        useEffect(() => {\n            nameZhEl.current && setNameZhBBox(nameZhEl.current.getBBox());\n            nameEnEl.current && setNameEnBBox(nameEnEl.current.getBBox());\n        }, [lineName.toString()]);\n\n        const nameZhScale = MAX_WIDTH / Math.max(MAX_WIDTH, nameZhBBox.width);\n        const nameEnScale = MAX_WIDTH / Math.max(MAX_WIDTH, nameEnBBox.width);\n\n        return (\n            <g textAnchor=\"middle\" fill={stationState === -1 ? MonoColour.white : foregroundColour}>\n                <InterchangeBox fill={stationState === -1 ? '#aaa' : backgroundColour} />\n                {type === 2 ? (\n                    <LineIconType2 lineName={lineName} commonPart={commonPart} />\n                ) : (\n                    <>\n                        <text\n                            ref={nameZhEl}\n                            y={getYByType(type, 'zh', nameZhScale)}\n                            className=\"rmg-name__zh\"\n                            fontSize={12}\n                            transform={`scale(${nameZhScale})`}\n                        >\n                            {type === 1 ? (\n                                <>\n                                    <tspan fontSize={16} dy={0.7}>\n                                        {commonPart}\n                                    </tspan>\n                                    <tspan dy={-0.7}>{lineName[0].slice(commonPart.length)}</tspan>\n                                </>\n                            ) : (\n                                lineName[0]\n                            )}\n                        </text>\n                        <text\n                            ref={nameEnEl}\n                            y={getYByType(type, 'en', nameEnScale)}\n                            className=\"rmg-name__en\"\n                            fontSize={8}\n                            transform={`scale(${nameEnScale})`}\n                        >\n                            {lineName[1]}\n                        </text>\n                    </>\n                )}\n            </g>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.lineName.toString() === nextProps.lineName.toString() &&\n        prevProps.foregroundColour === nextProps.foregroundColour &&\n        prevProps.backgroundColour === nextProps.backgroundColour &&\n        prevProps.stationState === nextProps.stationState\n);\n\n/**\n * type 1: 2号线\n * type 2: APM线\n * type 3: 佛山2号线\n */\nconst getType = (name: Name): [1 | 2 | 3, string] => {\n    const matchResultForType1 = name[0].match(/^(\\d+)\\D+$/);\n    if (matchResultForType1) return [1, matchResultForType1[1]];\n\n    const matchResultForType2 = name.map(text => text.match(/^([\\w\\d]+).+$/));\n    if (matchResultForType2[0] && matchResultForType2[1] && matchResultForType2[0][1] === matchResultForType2[1][1]) {\n        return [2, matchResultForType2[0][1]];\n    }\n\n    return [3, ''];\n};\n\nconst getYByType = (type: ReturnType<typeof getType>[0], field: 'zh' | 'en', scale: number) => {\n    switch (type) {\n        case 1:\n            return (field === 'zh' ? 7.3 : 19.5) * (1 + 1 - scale);\n        case 2:\n            return 0;\n        case 3:\n            return (field === 'zh' ? 8 : 19.5) * (1 + 1 - scale);\n    }\n};\n","import React, { memo, useEffect, useRef } from 'react';\nimport { Name } from '../../../constants/constants';\n\ninterface StationNameProps {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n}\n\nexport default memo(\n    function StationName(props: StationNameProps) {\n        const { stnName, onUpdate } = props;\n\n        const nameEl = useRef<SVGGElement | null>(null);\n\n        useEffect(() => {\n            onUpdate && onUpdate(nameEl.current!.getBBox());\n        }, [stnName.toString()]);\n\n        return (\n            <g ref={nameEl}>\n                <text className=\"rmg-name__zh\" fontSize={18}>\n                    {stnName[0]}\n                </text>\n                <g fontSize={10.5}>\n                    {stnName[1].split('\\\\').map((txt, i) => (\n                        <text key={i} className=\"rmg-name__en\" dy={16 + i * 11}>\n                            {txt}\n                        </text>\n                    ))}\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.stnName.toString() === nextProps.stnName.toString()\n);\n","import React, { SVGProps, useEffect, useRef, useState } from 'react';\nimport { Name } from '../../../constants/constants';\n\ninterface StationSecondaryNameProps extends SVGProps<SVGGElement> {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n    passed?: boolean;\n}\n\nexport default function StationSecondaryName(props: StationSecondaryNameProps) {\n    const { stnName, onUpdate, passed, ...others } = props;\n\n    const nameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as SVGRect);\n\n    useEffect(() => {\n        const nextBBox = nameEl.current!.getBBox();\n        setBBox(nextBBox);\n        onUpdate && onUpdate(nextBBox);\n    }, [stnName.toString()]);\n\n    return (\n        <g fill={passed ? '#aaa' : '#000'} {...others}>\n            <g transform=\"translate(0,3)\" fontSize={18}>\n                <text textAnchor=\"end\" x={bBox.x - 3} className=\"rmg-name__zh\">\n                    {'('}\n                </text>\n                <text textAnchor=\"start\" x={bBox.width + bBox.x + 3} className=\"rmg-name__zh\">\n                    {')'}\n                </text>\n            </g>\n            <g ref={nameEl} textAnchor=\"middle\">\n                <text className=\"rmg-name__zh\" fontSize={13}>\n                    {stnName[0]}\n                </text>\n                <text dy={10} className=\"rmg-name__en\" fontSize={6.5}>\n                    {stnName[1]}\n                </text>\n            </g>\n        </g>\n    );\n}\n","import React, { SVGProps } from 'react';\n\ninterface ExpressTagProps extends SVGProps<SVGGElement> {\n    passed?: boolean;\n}\n\nexport default function ExpressTag(props: ExpressTagProps) {\n    const { passed, ...others } = props;\n\n    return (\n        <g textAnchor=\"middle\" fill={passed ? '#aaa' : 'var(--rmg-theme-colour)'} {...others}>\n            <text className=\"rmg-name__zh\" fontSize={13}>\n                快车停靠站\n            </text>\n            <text dy={10} className=\"rmg-name__en\" fontSize={6.5}>\n                Express Station\n            </text>\n        </g>\n    );\n}\n","import React, { useState } from 'react';\nimport StationNumber from '../../../gzmtr/station-icon/station-number';\nimport { InterchangeInfo, Name, Services } from '../../../../constants/constants';\nimport { useAppSelector } from '../../../../redux';\nimport LineIcon from '../../../gzmtr/line-icon/line-icon';\nimport StationName from '../../../gzmtr/station-name/station-name';\nimport StationSecondaryName from '../../../gzmtr/station-name/station-secondary-name';\nimport ExpressTag from '../../../gzmtr/station-name/express-tag';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n    stnY: number;\n}\n\nconst StationGZMTR = (props: Props) => {\n    const { stnId, stnState, stnY } = props;\n\n    const theme = useAppSelector(store => store.param.theme);\n    const lineName = useAppSelector(store => store.param.line_name);\n    const lineNumber = useAppSelector(store => store.param.line_num);\n    const stnInfo = useAppSelector(store => store.param.stn_list[stnId]);\n\n    const isNameShift = stnInfo.parents.length === 2 || stnInfo.children.length === 2;\n    const tickRotation =\n        stnY > 0\n            ? 180\n            : stnInfo.parents.indexOf(stnInfo.branch.left[1] || '') === 1 ||\n              stnInfo.children.indexOf(stnInfo.branch.right[1] || '') === 1\n            ? 180\n            : 0;\n    const nameENLns = stnInfo.name[1].split('\\\\').length;\n    const nameDX = isNameShift\n        ? tickRotation === 180\n            ? 16 + (nameENLns - 1) * 12 * Math.cos(-45)\n            : -9\n        : tickRotation === 180\n        ? -6\n        : (25 + (nameENLns - 1) * 15) * Math.cos(-45);\n\n    return (\n        <>\n            <IntGroup\n                intInfos={\n                    isNameShift\n                        ? (\n                              [\n                                  [theme[0], theme[1], 'var(--rmg-theme-colour)', 'var(--rmg-theme-fg)', ...lineName],\n                              ] as any[] as InterchangeInfo[]\n                          ).concat(stnInfo.transfer.info[0])\n                        : stnInfo.transfer.info[0]\n                }\n                stnState={stnState}\n                tickRotation={tickRotation}\n            />\n            <StationNumber lineNum={lineNumber} stnNum={stnInfo.num} passed={stnState === -1} />\n            <g transform={`translate(${-nameDX},0)`}>\n                <StationNameGElement\n                    name={stnInfo.name}\n                    secondaryName={stnInfo.secondaryName}\n                    stnState={stnState}\n                    tickRotation={tickRotation}\n                    isExpress={stnInfo.services.includes(Services.express)}\n                />\n            </g>\n        </>\n    );\n};\n\nexport default StationGZMTR;\n\ninterface StationNameGElementProps {\n    name: Name;\n    secondaryName: false | Name;\n    stnState: -1 | 0 | 1;\n    tickRotation: 0 | 180;\n    isExpress: boolean;\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const nameDY = props.tickRotation === 180 ? 17.5 : -20 - props.name[1].split('\\\\').length * 14 * Math.cos(-45);\n\n    const [bBox, setBBox] = useState({ width: 0 } as DOMRect);\n    const [secNameBBox, setSecNameBBox] = useState({ x: 0, width: -20 } as SVGRect);\n\n    return (\n        <g\n            textAnchor={props.tickRotation === 180 ? 'end' : 'start'}\n            className={`Name ${props.stnState === -1 ? 'Pass' : props.stnState === 0 ? 'CurrentGZ' : 'Future'}`}\n            transform={`translate(0,${nameDY})rotate(-45)`}\n        >\n            <StationName stnName={props.name} onUpdate={setBBox} />\n            {props.secondaryName && (\n                <StationSecondaryName\n                    stnName={props.secondaryName}\n                    onUpdate={setSecNameBBox}\n                    passed={props.stnState === -1}\n                    transform={`translate(${\n                        (bBox.width + secNameBBox.width / 2 + 10) * (props.tickRotation === 180 ? -1 : 1)\n                    },${2 + 5 * (props.name[1].split('\\\\').length - 1)})`}\n                />\n            )}\n            {props.isExpress && (\n                <ExpressTag\n                    passed={props.stnState === -1}\n                    transform={`translate(${\n                        (bBox.width + secNameBBox.width + 20 + 35) * (props.tickRotation === 180 ? -1 : 1)\n                    },${2 + 5 * (props.name[1].split('\\\\').length - 1)})`}\n                />\n            )}\n        </g>\n    );\n};\n\ninterface IntGroupProps {\n    intInfos: InterchangeInfo[];\n    stnState: -1 | 0 | 1;\n    tickRotation: 0 | 180;\n}\n\nconst IntGroup = (props: IntGroupProps) => (\n    <>\n        <IntTicks strokeWidth={4} {...props} />\n        <IntBoxs transform={`translate(0,${props.tickRotation === 180 ? -47 : 23})`} {...props} />\n    </>\n);\n\nconst IntTicks = (props: IntGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, stnState, tickRotation, ...others } = props;\n\n    return (\n        <g {...others}>\n            {intInfos.map((info, i) => (\n                <use\n                    key={i}\n                    xlinkHref=\"#inttick\"\n                    stroke={stnState === -1 ? '#aaa' : info[2]}\n                    transform={`translate(${-2 * (intInfos.length - 1) + 4 * i},0)rotate(${\n                        tickRotation === 180 ? 180 : 0\n                    })`}\n                />\n            ))}\n        </g>\n    );\n};\n\nconst IntBoxs = (props: IntGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, tickRotation, stnState, ...other } = props;\n\n    return (\n        <g {...other}>\n            {intInfos.map((info, i) => (\n                <g key={i} transform={`translate(0,${i * 28 * (tickRotation === 180 ? -1 : 1)})`}>\n                    <LineIcon\n                        lineName={[info[4], info[5]]}\n                        foregroundColour={info[3]}\n                        backgroundColour={info[2]}\n                        stationState={stnState}\n                    />\n                </g>\n            ))}\n        </g>\n    );\n};\n","import React, { useMemo } from 'react';\nimport StationGZMTR from './station/station-gzmtr';\nimport { adjacencyList, criticalPathMethod, drawLine, getStnState } from '../methods/share';\nimport {\n    CanvasType,\n    ColourHex,\n    MonoColour,\n    ShortDirection,\n    StationDict,\n} from '../../../constants/constants';\nimport { useAppSelector } from '../../../redux';\nimport LineIcon from '../../gzmtr/line-icon/line-icon';\n\nconst wideFactor = (stnList: StationDict, stnId: string) =>\n    stnList[stnId].parents.length === 2 || stnList[stnId].children.length === 2 ? 0.25 : 0;\n\nconst getXShare = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]): number => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        if (branchOfStn.toString() === branches[0].toString()) {\n            // station on main line, expand to fit\n            let lens = [];\n            if (!leftOpenJaw && !rightOpenJaw) {\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n            } else if (leftOpenJaw) {\n                lens[0] = 0;\n                lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n                lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n            } else {\n                // right open jaw\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n            }\n            return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n        } else {\n            if (!leftOpenJaw && !rightOpenJaw) {\n                let lens = [];\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n                return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n            } else if (leftOpenJaw) {\n                return (\n                    criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len -\n                    criticalPathMethod(stnId, partSink, adjMat).len\n                );\n            } else {\n                // right open jaw\n                return (\n                    criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len +\n                    criticalPathMethod(partSource, stnId, adjMat).len\n                );\n            }\n        }\n    }\n};\n\nconst MainGZMTR = () => {\n    const { branches, routes, depsStr: deps } = useAppSelector(store => store.helper);\n\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const yPercentage = useAppSelector(store => store.param.y_pc);\n    const paddingPercentage = useAppSelector(store => store.param.padding);\n    const branchSpacing = useAppSelector(store => store.param.branch_spacing);\n    const direction = useAppSelector(store => store.param.direction);\n    const lineName = useAppSelector(store => store.param.line_name);\n    const currentStationIndex = useAppSelector(store => store.param.current_stn_idx);\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    const adjMat = adjacencyList(stationList, wideFactor, wideFactor);\n\n    const xShares = useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(stationList).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShare(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const lineXs: [number, number] =\n        direction === ShortDirection.right\n            ? [\n                  (svgWidths[CanvasType.RailMap] * paddingPercentage) / 100 + 65,\n                  svgWidths[CanvasType.RailMap] * (1 - paddingPercentage / 100) - 20,\n              ]\n            : [\n                  (svgWidths[CanvasType.RailMap] * paddingPercentage) / 100,\n                  svgWidths[CanvasType.RailMap] * (1 - paddingPercentage / 100) - 65,\n              ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = useMemo(\n        () => {\n            console.log('computing y shares');\n            return Object.keys(stationList).reduce((acc, cur) => {\n                if (branches[0].includes(cur)) {\n                    return { ...acc, [cur]: 0 };\n                } else {\n                    let branchOfStn = branches.slice(1).filter(branch => branch.includes(cur))[0];\n                    return { ...acc, [cur]: stationList[branchOfStn[0]].children.indexOf(branchOfStn[1]) ? -2 : 2 };\n                }\n            }, {} as { [stnId: string]: number });\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: -yShares[cur] * branchSpacing }),\n        {} as typeof yShares\n    );\n\n    const stnStates = useMemo(\n        () => getStnState(currentStationIndex, routes, direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [currentStationIndex, direction, routes.toString()]\n    );\n\n    const linePaths = drawLine(branches, stnStates);\n    const paths = (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: linePaths[cur].map(stns => _linePath(stns, xs, ys)),\n        }),\n        {} as { [key in keyof ReturnType<typeof drawLine>]: string[] }\n    );\n\n    return (\n        <g\n            id=\"main\"\n            style={{\n                ['--y-percentage' as any]: yPercentage,\n                transform: 'translateY(calc(var(--y-percentage) * var(--rmg-svg-height) / 100))',\n            }}\n        >\n            <Line paths={paths} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} />\n            <g\n                id=\"line_name\"\n                style={{\n                    ['--translate-x' as any]:\n                        direction === ShortDirection.right ? `${lineXs[0] - 65}px` : `${lineXs[1] + 65}px`,\n                }}\n            >\n                <LineIcon\n                    lineName={lineName}\n                    foregroundColour={'var(--rmg-theme-fg)' as MonoColour}\n                    backgroundColour={'var(--rmg-theme-colour)' as ColourHex}\n                    stationState={1}\n                />\n            </g>\n        </g>\n    );\n};\n\nexport default MainGZMTR;\n\nconst Line = React.memo(\n    (props: { paths: { main: string[]; pass: string[] } }) => (\n        <g fill=\"none\" strokeWidth={4}>\n            <g stroke=\"#aaa\" strokeDasharray={4}>\n                {props.paths.pass.map((path, i) => (\n                    <path key={i} d={path} />\n                ))}\n            </g>\n            <g stroke=\"var(--rmg-theme-colour)\">\n                {props.paths.main.map((path, i) => (\n                    <path key={i} d={path} />\n                ))}\n            </g>\n        </g>\n    ),\n    (prevProps, nextProps) => JSON.stringify(prevProps.paths) === JSON.stringify(nextProps.paths)\n);\n\nconst _linePath = (stnIds: string[], realXs: { [stnId: string]: number }, realYs: { [stnId: string]: number }) => {\n    let prevY: number;\n    var path = [] as string[];\n\n    stnIds.forEach(stnId => {\n        let x = realXs[stnId];\n        let y = realYs[stnId];\n        if (!prevY && prevY !== 0) {\n            prevY = y;\n            path.push(`M ${x},${y}`);\n            return;\n        }\n        if (y === 0) {\n            if (y < prevY) path.push(`H ${x - 40}`, 'a 40,40 0 0,0 40,-40', `V ${y}`);\n            if (y > prevY) path.push(`H ${x - 40}`, 'a 40,40 0 0,1 40,40', `V ${y}`);\n        } else {\n            if (y < prevY) path.push(`V ${y + 40}`, 'a 40,40 0 0,1 40,-40', `H ${x}`);\n            if (y > prevY) path.push(`V ${y - 40}`, 'a 40,40 0 0,0 40,40', `H ${x}`);\n        }\n        path.push(`H ${x}`);\n        prevY = y;\n    });\n\n    // simplify path\n    return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n};\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { xs, ys, stnStates } = props;\n\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    return (\n        <g id=\"stn_icons\">\n            {Object.keys(stationList)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (\n                    <g\n                        key={stnId}\n                        style={{\n                            transform: `translate(${xs[stnId]}px,${ys[stnId]}px)`,\n                        }}\n                    >\n                        <StationGZMTR stnId={stnId} stnState={stnStates[stnId]} stnY={ys[stnId]} />\n                    </g>\n                ))}\n        </g>\n    );\n};\n","import React, { memo, useMemo } from 'react';\nimport StripGZMTR from '../strip/strip-gzmtr';\nimport MainGZMTR from './main/main-gzmtr';\nimport { CanvasType, Note, PanelTypeGZMTR, ShortDirection } from '../../constants/constants';\nimport { useAppSelector } from '../../redux';\n\nconst RailMapGZMTR = () => {\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const direction = useAppSelector(store => store.param.direction);\n    const psdNumber = useAppSelector(store => store.param.psd_num);\n    const infoPanelType = useAppSelector(store => store.param.info_panel_type);\n    const notes = useAppSelector(store => store.param.notesGZMTR);\n    const currentStationIndex = useAppSelector(store => store.param.current_stn_idx);\n    const curStnInfo = useAppSelector(store => store.param.stn_list[currentStationIndex]);\n\n    return (\n        <>\n            <DefsGZMTR />\n\n            <StripGZMTR\n                variant={infoPanelType}\n                isShowLight={infoPanelType === PanelTypeGZMTR.gz2otis}\n                isShowPSD={infoPanelType === PanelTypeGZMTR.gz2otis && psdNumber}\n            />\n\n            {(direction === ShortDirection.left && curStnInfo.parents.includes('linestart')) ||\n            (direction === ShortDirection.right && curStnInfo.children.includes('lineend')) ? (\n                <TerminusFlag />\n            ) : (\n                <>\n                    <MainGZMTR />\n                    <DirectionIndicator />\n                    {notes.map((note, i) => (\n                        <NoteBox key={i} note={note} />\n                    ))}\n                </>\n            )}\n\n            {infoPanelType === PanelTypeGZMTR.gz2otis && (\n                <line x2={svgWidths[CanvasType.RailMap]} transform=\"translate(0,90)\" strokeWidth={3} stroke=\"black\" />\n            )}\n        </>\n    );\n};\n\nexport default RailMapGZMTR;\n\nconst DefsGZMTR = memo(() => (\n    <defs>\n        <path id=\"arrow_direction\" d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\" fill=\"black\" />\n        <path id=\"inttick\" d=\"M 0,0 v 18\" strokeLinecap=\"square\" />\n    </defs>\n));\n\nconst DirectionIndicator = () => {\n    const { routes } = useAppSelector(store => store.helper);\n    const {\n        direction,\n        direction_gz_x: directionIndicatorX,\n        direction_gz_y: directionIndicatorY,\n        current_stn_idx: currentStationIndex,\n    } = useAppSelector(store => store.param);\n\n    const validDests = useMemo(\n        () => [\n            ...new Set(\n                routes\n                    .reduce(\n                        (acc, cur) =>\n                            cur.includes(currentStationIndex)\n                                ? acc.concat(\n                                      cur\n                                          .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                                          .slice(direction === ShortDirection.left ? 0 : -1)[0]\n                                  )\n                                : acc,\n                        []\n                    )\n                    .filter(id => id !== currentStationIndex)\n            ),\n        ],\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [currentStationIndex, direction, routes.toString()]\n    );\n\n    const textGroupProps: TextGroupProps = {\n        textAnchor: direction === ShortDirection.left ? 'start' : 'end',\n        transform: `translate(${direction === ShortDirection.left ? 65 : -65},-5)`,\n        destIds: validDests,\n    };\n\n    return (\n        <g\n            id=\"direction_gz\"\n            style={{ ['--x-percentage' as any]: directionIndicatorX, ['--y-percentage' as any]: directionIndicatorY }}\n        >\n            <use\n                xlinkHref=\"#arrow_direction\"\n                style={{ ['--rotate' as any]: direction === ShortDirection.left ? '0deg' : '180deg' }}\n            />\n\n            {validDests.length !== 2 ? (\n                <DirectionIndicatorTextGroup {...textGroupProps} />\n            ) : (\n                <DirectionIndicatorTextGroup2 {...textGroupProps} />\n            )}\n        </g>\n    );\n};\n\ntype TextGroupProps = {\n    destIds: string[];\n} & React.SVGProps<SVGGElement>;\n\nconst DirectionIndicatorTextGroup = (props: TextGroupProps) => {\n    const { destIds, ...others } = props;\n    const stationList = useAppSelector(store => store.param.stn_list);\n    return (\n        <g {...others}>\n            <text className=\"rmg-name__zh\" fontSize={28}>\n                {destIds.map(stnId => stationList[stnId].name[0]).join('/') + '方向'}\n            </text>\n            <text className=\"rmg-name__en\" fontSize={14} dy={22}>\n                {'Towards ' + destIds.map(stnId => stationList[stnId].name[1].replace('\\\\', ' ')).join('/')}\n            </text>\n        </g>\n    );\n};\n\nconst DirectionIndicatorTextGroup2 = (props: TextGroupProps) => {\n    const { destIds, ...others } = props;\n\n    const direction = useAppSelector(store => store.param.direction);\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    const charCounts = destIds.map(stnId => stationList[stnId].name[0].length);\n    const minCharCounts = Math.min(...charCounts);\n    const charSpacing =\n        minCharCounts > 1 && charCounts[0] !== charCounts[1]\n            ? Math.abs(charCounts[0] - charCounts[1]) / (minCharCounts - 1)\n            : 0;\n\n    return (\n        <g {...others}>\n            {destIds.map((id, i) => (\n                <React.Fragment key={id}>\n                    <text\n                        className=\"rmg-name__zh\"\n                        fontSize={25}\n                        x={direction === ShortDirection.left ? 0 : -75}\n                        y={-21 + 42 * i}\n                        letterSpacing={charCounts[i] > charCounts[1 - i] ? '0em' : `${charSpacing}em`}\n                    >\n                        {stationList[id].name[0]}\n                    </text>\n                    <text\n                        className=\"rmg-name__en\"\n                        fontSize={11.5}\n                        x={direction === ShortDirection.left ? 0 : -75}\n                        y={-1 + 42 * i}\n                    >\n                        {'Towards ' + stationList[id].name[1].replace('\\\\', ' ')}\n                    </text>\n                </React.Fragment>\n            ))}\n            <text\n                className=\"rmg-name__zh\"\n                fontSize={28}\n                x={direction === ShortDirection.left ? 25 * (Math.max(...charCounts) + 1) : 0}\n                y={5}\n            >\n                方向\n            </text>\n        </g>\n    );\n};\n\nconst TerminusFlag = React.memo(() => (\n    <g id=\"terminus_gz\" textAnchor=\"middle\">\n        <text className=\"rmg-name__zh\" fontSize={90}>\n            终 点 站\n        </text>\n        <text dy={70} className=\"rmg-name__en\" fontSize={36}>\n            Terminal\n        </text>\n        <g strokeWidth={8} stroke=\"#000\">\n            <path d=\"M -160,68 h -160\" />\n            <path d=\"M 160,68 h 160\" />\n        </g>\n    </g>\n));\n\nconst NoteBox = React.memo(\n    (props: { note: Note }) => {\n        const noteTextEl = React.useRef<SVGGElement | null>(null);\n        const [bBox, setBBox] = React.useState({ width: 0, height: 0, y: 0 } as DOMRect);\n        React.useEffect(\n            () => setBBox(noteTextEl.current!.getBBox()),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [props.note[0], props.note[1]]\n        );\n\n        return (\n            <g\n                className=\"note-box\"\n                style={{ ['--x-percentage' as any]: props.note[2], ['--y-percentage' as any]: props.note[3] }}\n            >\n                {props.note[4] && (\n                    <rect\n                        height={bBox.height + 4}\n                        width={bBox.width + 4}\n                        x={-2}\n                        y={bBox.y - 2}\n                        fill=\"none\"\n                        stroke=\"black\"\n                        strokeWidth={0.5}\n                    />\n                )}\n                <g ref={noteTextEl}>\n                    <g fontSize={16} letterSpacing={1.2}>\n                        {props.note[0].split('\\n').map((txt, i) => (\n                            <text key={i} className=\"rmg-name__zh\" y={i * 18}>\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n\n                    <g\n                        fontSize={10}\n                        letterSpacing={0.33}\n                        transform={`translate(0,${18 * props.note[0].split('\\n').length})`}\n                    >\n                        {props.note[1].split('\\n').map((txt, i) => (\n                            <text\n                                key={i}\n                                className=\"rmg-name__en\"\n                                y={i * 11}\n                                textLength={\n                                    i < (props.note[1].match(/\\n/g)?.length || 0)\n                                        ? bBox.width\n                                        : navigator.userAgent.includes('Firefox')\n                                        ? -1\n                                        : 0\n                                }\n                                lengthAdjust=\"spacing\"\n                            >\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.note.toString() === nextProps.note.toString()\n);\n"],"sourceRoot":""}