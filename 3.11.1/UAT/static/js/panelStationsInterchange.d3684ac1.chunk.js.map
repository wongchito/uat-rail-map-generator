{"version":3,"file":"static/js/panelStationsInterchange.d3684ac1.chunk.js","mappings":"iHAAA,IAAIA,EAAM,CACT,YAAa,CACZ,KACA,MAED,iBAAkB,CACjB,KACA,MAED,eAAgB,CACf,KACA,MAED,aAAc,CACb,KACA,MAED,gBAAiB,CAChB,IACA,MAED,eAAgB,CACf,KACA,MAED,iBAAkB,CACjB,IACA,KAED,cAAe,CACd,KACA,MAED,aAAc,CACb,KACA,MAED,gBAAiB,CAChB,KACA,MAED,gBAAiB,CAChB,KACA,MAED,iBAAkB,CACjB,IACA,MAED,cAAe,CACd,KACA,MAED,eAAgB,CACf,KACA,MAED,kBAAmB,CAClB,KACA,MAED,mBAAoB,CACnB,KACA,MAED,iBAAkB,CACjB,KACA,MAED,gBAAiB,CAChB,KACA,MAED,cAAe,CACd,KACA,MAED,gBAAiB,CAChB,KACA,MAED,gBAAiB,CAChB,KACA,MAED,cAAe,CACd,IACA,MAED,iBAAkB,CACjB,KACA,MAED,mBAAoB,CACnB,IACA,MAED,YAAa,CACZ,KACA,MAED,cAAe,CACd,KACA,MAED,aAAc,CACb,KACA,MAED,cAAe,CACd,KACA,MAED,eAAgB,CACf,KACA,MAED,iBAAkB,CACjB,KACA,MAED,aAAc,CACb,KACA,MAED,YAAa,CACZ,KACA,KAED,aAAc,CACb,KACA,MAED,aAAc,CACb,KACA,KAED,eAAgB,CACf,KACA,MAED,oBAAqB,CACpB,KACA,MAED,sBAAuB,CACtB,KACA,MAED,gBAAiB,CAChB,KACA,KAED,gBAAiB,CAChB,KACA,MAED,aAAc,CACb,KACA,MAED,gBAAiB,CAChB,KACA,KAED,gBAAiB,CAChB,KACA,MAED,iBAAkB,CACjB,KACA,MAED,iBAAkB,CACjB,KACA,MAED,cAAe,CACd,KACA,MAED,cAAe,CACd,KACA,MAED,cAAe,CACd,KACA,MAED,eAAgB,CACf,KACA,KAED,aAAc,CACb,KACA,MAED,eAAgB,CACf,KACA,MAED,mBAAoB,CACnB,KACA,KAED,YAAa,CACZ,KACA,MAED,cAAe,CACd,KACA,MAED,YAAa,CACZ,KACA,OAGF,SAASC,EAAoBC,GAC5B,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","sources":["../node_modules/@railmapgen/rmg-palette-resources/palettes|lazy|/^/.//.*/.js$/|chunkName: palette|groupOptions: {}|namespace object","panels/colour-diag/theme-items.tsx","panels/colour-diag/dialog.tsx","panels/colour-diag/index.ts","panels/stations/edit-diag/name-list-items.tsx","panels/stations/edit-diag/interchange-tab.tsx"],"sourcesContent":["var map = {\n\t\"./baku.js\": [\n\t\t2481,\n\t\t5727\n\t],\n\t\"./barcelona.js\": [\n\t\t6340,\n\t\t8228\n\t],\n\t\"./beijing.js\": [\n\t\t2145,\n\t\t6071\n\t],\n\t\"./cairo.js\": [\n\t\t6509,\n\t\t6827\n\t],\n\t\"./changsha.js\": [\n\t\t574,\n\t\t1606\n\t],\n\t\"./chengdu.js\": [\n\t\t6312,\n\t\t1921\n\t],\n\t\"./chongqing.js\": [\n\t\t300,\n\t\t903\n\t],\n\t\"./dalian.js\": [\n\t\t5169,\n\t\t8863\n\t],\n\t\"./delhi.js\": [\n\t\t3707,\n\t\t6995\n\t],\n\t\"./dongguan.js\": [\n\t\t3280,\n\t\t2709\n\t],\n\t\"./dortmund.js\": [\n\t\t6079,\n\t\t1034\n\t],\n\t\"./edinburgh.js\": [\n\t\t285,\n\t\t8005\n\t],\n\t\"./foshan.js\": [\n\t\t3204,\n\t\t1987\n\t],\n\t\"./glasgow.js\": [\n\t\t4476,\n\t\t6820\n\t],\n\t\"./gothenburg.js\": [\n\t\t6801,\n\t\t1207\n\t],\n\t\"./guadalajara.js\": [\n\t\t9399,\n\t\t6172\n\t],\n\t\"./guangzhou.js\": [\n\t\t5841,\n\t\t5304\n\t],\n\t\"./hangzhou.js\": [\n\t\t3427,\n\t\t5053\n\t],\n\t\"./harbin.js\": [\n\t\t4826,\n\t\t7504\n\t],\n\t\"./hongkong.js\": [\n\t\t4243,\n\t\t3851\n\t],\n\t\"./istanbul.js\": [\n\t\t3107,\n\t\t2020\n\t],\n\t\"./kansai.js\": [\n\t\t382,\n\t\t6410\n\t],\n\t\"./kaohsiung.js\": [\n\t\t3037,\n\t\t9379\n\t],\n\t\"./klangvalley.js\": [\n\t\t137,\n\t\t9893\n\t],\n\t\"./lima.js\": [\n\t\t9118,\n\t\t2275\n\t],\n\t\"./london.js\": [\n\t\t8087,\n\t\t5638\n\t],\n\t\"./macao.js\": [\n\t\t8015,\n\t\t5485\n\t],\n\t\"./madrid.js\": [\n\t\t8020,\n\t\t2343\n\t],\n\t\"./nanjing.js\": [\n\t\t1664,\n\t\t5200\n\t],\n\t\"./newtaipei.js\": [\n\t\t9114,\n\t\t7856\n\t],\n\t\"./osaka.js\": [\n\t\t1064,\n\t\t9309\n\t],\n\t\"./oslo.js\": [\n\t\t8057,\n\t\t103\n\t],\n\t\"./other.js\": [\n\t\t7642,\n\t\t4432\n\t],\n\t\"./paris.js\": [\n\t\t2720,\n\t\t255\n\t],\n\t\"./qingdao.js\": [\n\t\t7994,\n\t\t5360\n\t],\n\t\"./sanfrancisco.js\": [\n\t\t4747,\n\t\t7480\n\t],\n\t\"./sanktpeterburg.js\": [\n\t\t1832,\n\t\t3541\n\t],\n\t\"./santiago.js\": [\n\t\t2568,\n\t\t313\n\t],\n\t\"./saopaulo.js\": [\n\t\t6956,\n\t\t1435\n\t],\n\t\"./seoul.js\": [\n\t\t3266,\n\t\t2897\n\t],\n\t\"./shanghai.js\": [\n\t\t9656,\n\t\t640\n\t],\n\t\"./shenzhen.js\": [\n\t\t4691,\n\t\t2281\n\t],\n\t\"./singapore.js\": [\n\t\t2459,\n\t\t2088\n\t],\n\t\"./stockholm.js\": [\n\t\t4606,\n\t\t2297\n\t],\n\t\"./suzhou.js\": [\n\t\t9819,\n\t\t7984\n\t],\n\t\"./taipei.js\": [\n\t\t9489,\n\t\t9039\n\t],\n\t\"./tehran.js\": [\n\t\t2573,\n\t\t9837\n\t],\n\t\"./tianjin.js\": [\n\t\t7942,\n\t\t111\n\t],\n\t\"./tokyo.js\": [\n\t\t3762,\n\t\t8050\n\t],\n\t\"./toronto.js\": [\n\t\t8148,\n\t\t6840\n\t],\n\t\"./tyneandwear.js\": [\n\t\t9314,\n\t\t938\n\t],\n\t\"./wuxi.js\": [\n\t\t4099,\n\t\t9164\n\t],\n\t\"./xiamen.js\": [\n\t\t4610,\n\t\t3732\n\t],\n\t\"./xian.js\": [\n\t\t2591,\n\t\t4365\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 3171;\nmodule.exports = webpackAsyncContext;","import React, { useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    createStyles,\n    Divider,\n    List,\n    ListItem,\n    ListItemText,\n    makeStyles,\n    MenuItem,\n    Select,\n    TextField,\n    Tooltip,\n} from '@material-ui/core';\nimport { getTransText2 } from '../../utils';\nimport { CityCode, cityList } from '@railmapgen/rmg-palette-resources';\nimport { ColourHex, LanguageCode, MonoColour, PaletteEntry, Theme } from '../../constants/constants';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        cityItem: {\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n        },\n        menuItemSpan: {\n            padding: '0 .3rem',\n        },\n        button: {\n            borderRadius: '50%',\n            height: 24,\n            width: 24,\n            minWidth: 0,\n            marginRight: 8,\n            // border: 'solid',\n            padding: 0,\n        },\n        inputColour: {\n            position: 'absolute',\n            width: 0,\n            height: 0,\n            left: 27,\n            top: 32,\n        },\n        buttonContainer: {\n            display: 'flex',\n            flexShrink: 1,\n        },\n    })\n);\n\nconst useLineList = (theme: Theme) => {\n    const [list, setList] = React.useState([] as PaletteEntry[]);\n\n    const listPromise = import(/* webpackChunkName: \"palette\" */ `@railmapgen/rmg-palette-resources/palettes/${theme[0]}.js`)\n        .then(module => module.default as PaletteEntry[])\n        .catch(() => [] as PaletteEntry[]);\n\n    useEffect(\n        () => {\n            if (typeof theme[0] === 'undefined') {\n                return;\n            }\n            (async () => {\n                const data = await listPromise;\n                setList(\n                    theme[0] === CityCode.Other\n                        ? [{ ...data[0], colour: theme[2], fg: theme[3] || MonoColour.white }]\n                        : data\n                );\n            })();\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [theme.toString()]\n    );\n\n    return list;\n};\n\ninterface ColourDialogProps {\n    theme: Theme;\n    onUpdate: (key: string, value: any) => void;\n}\n\nexport const PalettePanel = (props: ColourDialogProps) => {\n    const { t, i18n } = useTranslation();\n    const classes = useStyles();\n\n    const cityChange = (event: React.ChangeEvent<HTMLInputElement>) =>\n        props.onUpdate('theme', [event.target.value, ...props.theme.slice(1)]);\n\n    // Hook for fetching line list of current city\n    const lineList = useLineList(props.theme);\n\n    // Hook for updating props.theme when lineList changed\n    useEffect(\n        () => {\n            if (lineList.length === 0) return; // initialising, ignore\n            if (lineList.filter(l => l.id === props.theme[1]).length) return; // current city, ignore\n            let { id, colour, fg } = lineList[0];\n            let newTheme = [props.theme[0], id, colour, fg || MonoColour.white];\n            props.onUpdate('theme', newTheme);\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [lineList]\n    );\n\n    const lineChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let line = event.target.value;\n        let { colour, fg } = lineList.filter(l => l.id === line)[0];\n        let newTheme = [props.theme[0], line, colour, fg || MonoColour.white];\n        props.onUpdate('theme', newTheme);\n    };\n\n    return (\n        <List component=\"div\" disablePadding>\n            <CitySelectItem value={props.theme[0]} onChange={cityChange} />\n            <Divider variant=\"middle\" />\n            <ListItem>\n                <ListItemText primary={t('colour.line')} />\n                <TextField\n                    select\n                    style={{ width: 166 }}\n                    onChange={lineChange}\n                    value={props.theme[1]}\n                    disabled={props.theme[0] === 'other'}\n                >\n                    {lineList.map(l => (\n                        <MenuItem key={l.id} value={l.id}>\n                            <span\n                                className={classes.menuItemSpan}\n                                style={{\n                                    backgroundColor: l.colour,\n                                    color: l.fg || MonoColour.white,\n                                }}\n                            >\n                                {getTransText2(l.name, i18n.languages as LanguageCode[])}\n                            </span>\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </ListItem>\n        </List>\n    );\n};\n\nexport const CustomPanel = (props: ColourDialogProps) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const [hexTemp, setHexTemp] = useState(props.theme[2]);\n\n    useEffect(\n        () => setHexTemp(props.theme[2]),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.theme[2]]\n    );\n\n    const colourChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let rgb = event.target.value;\n        // setHexTemp(rgb);\n        props.onUpdate('theme', [CityCode.Other, 'other', rgb, props.theme[3]]);\n    };\n\n    const hexChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let hex = event.target.value;\n        if (hex.match(/^#[0-9a-fA-F]{0,6}$/) === null) return;\n        setHexTemp(hex as ColourHex);\n\n        if (props.theme[0] !== 'other') {\n            if (hex.match(/^#[0-9a-fA-f]{6}$/) !== null) {\n                // if hex valid, modify theme city and props.hex\n                let newTheme = [CityCode.Other, 'other', hex, props.theme[3]];\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (along with selection)\n                // then line will be updated by hook\n            } else {\n                // if hex not valid, modify theme city only\n                let newTheme = [CityCode.Other, 'other', ...props.theme.slice(2)];\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (along with selection)\n                // then line will be updated by hook\n            }\n        } else {\n            if (hex.match(/^#[0-9a-fA-F]{6}$/) !== null) {\n                // if hex valid, modify props.hex\n                let newTheme = props.theme.map((val, idx) => (idx === 2 ? hex : val));\n                props.onUpdate('theme', newTheme);\n                // then lineList will be updated by hook (actually only hex is changed)\n            } else {\n                // if hex not valid, do nothing\n            }\n        }\n    };\n\n    const fgChange = (event: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n        let newTheme = [CityCode.Other, 'other', props.theme[2], event.target.value];\n        props.onUpdate('theme', newTheme);\n    };\n\n    return (\n        <List component=\"div\" disablePadding>\n            <ListItem>\n                <ListItemText primary={t('colour.colour')} />\n                <div className={classes.buttonContainer}>\n                    <input\n                        type=\"color\"\n                        id=\"input-color\"\n                        value={props.theme[2]}\n                        onChange={colourChange}\n                        className={classes.inputColour}\n                        style={{ opacity: 0 }}\n                    />\n                    <label htmlFor=\"input-color\">\n                        <Tooltip title={t('colour.tooltip') || ''} aria-label=\"colour picker\">\n                            <Button\n                                className={classes.button}\n                                style={{\n                                    backgroundColor: props.theme[2],\n                                    borderColor: props.theme[3] || MonoColour.white,\n                                }}\n                                variant=\"contained\"\n                                component=\"span\"\n                            >\n                                {' '}\n                            </Button>\n                        </Tooltip>\n                    </label>\n                </div>\n                <TextField\n                    error={!hexTemp?.match(/^#[0-9a-fA-F]{6}$/g)}\n                    style={{ width: 85 }}\n                    onChange={hexChange}\n                    value={hexTemp?.toUpperCase()}\n                />\n            </ListItem>\n            <Divider variant=\"middle\" />\n            <ListItem>\n                <ListItemText primary={t('colour.fg')} />\n                <Select\n                    native\n                    style={{ width: 85 }}\n                    label={t('colour.fg')}\n                    onChange={fgChange}\n                    value={props.theme[3] || MonoColour.white}\n                >\n                    <option value=\"#fff\">{t('colour.fgWhite')}</option>\n                    <option value=\"#000\">{t('colour.fgBlack')}</option>\n                </Select>\n            </ListItem>\n        </List>\n    );\n};\n\nconst CitySelectItem = (props: { value: string; onChange: (event: React.ChangeEvent<HTMLInputElement>) => void }) => {\n    const { t, i18n } = useTranslation();\n    const classes = useStyles();\n\n    const items = useMemo(\n        () =>\n            cityList.map(c => (\n                <MenuItem key={c.id} value={c.id}>\n                    <span className={classes.cityItem}>\n                        <CountryFlag code={c.country} />\n                        <span>{getTransText2(c.name, i18n.languages as LanguageCode[])}</span>\n                    </span>\n                </MenuItem>\n            )),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n    return (\n        <ListItem>\n            <ListItemText primary={t('colour.city')} />\n            <TextField select style={{ width: 166 }} value={props.value} onChange={props.onChange}>\n                {items}\n            </TextField>\n        </ListItem>\n    );\n};\n\nconst useEmojiStyles = makeStyles(() =>\n    createStyles({\n        img: {\n            height: 20,\n            marginRight: '0.2rem',\n        },\n    })\n);\n\n/**\n * Convert ISO 3166 alpha-2 country code (followed by BS 6879 UK subdivision code, if applicable) to flag Emoji. For Windows platform, an `img` element with image source from OpenMoji is returned.\n */\nfunction CountryFlag(props: { code: string }) {\n    const { i18n } = useTranslation();\n    const classes = useEmojiStyles();\n\n    let codePoints = [] as string[];\n\n    if (props.code.length === 2) {\n        codePoints = props.code\n            .toUpperCase()\n            .split('')\n            .map(char => ((char.codePointAt(0) || 0) + 127397).toString(16).toUpperCase());\n    } else {\n        codePoints = ['1F3F4'].concat(\n            props.code\n                .toUpperCase()\n                .split('')\n                .map(char => ((char.codePointAt(0) || 0) + 917536).toString(16).toUpperCase()),\n            'E007F'\n        );\n    }\n\n    // special case for simplified Chinese\n    if (\n        [LanguageCode.ChineseCN, LanguageCode.ChineseSimp].includes(i18n.language as LanguageCode) &&\n        props.code === 'TW'\n    )\n        codePoints = ['1F3F4'];\n\n    return navigator.platform.indexOf('Win32') !== -1 || navigator.platform.indexOf('Win64') !== -1 ? (\n        <img\n            src={process.env.PUBLIC_URL + `/images/flags/${codePoints.join('-')}.svg`}\n            className={classes.img}\n            alt={`Flag of ${props.code}`}\n        />\n    ) : (\n        // <img src={process.env.PUBLIC_URL + `/images/flags/${codePoints.join('-')}.svg`} className={classes.img} />\n        <span>{String.fromCodePoint(...codePoints.map(cp => parseInt(cp, 16)))}</span>\n    );\n}\n","import React, { useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    Chip,\n    createStyles,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Divider,\n    Icon,\n    InputBase,\n    List,\n    ListItem,\n    ListItemText,\n    makeStyles,\n    Paper,\n    Tab,\n    Tabs,\n} from '@material-ui/core';\nimport { CustomPanel, PalettePanel } from './theme-items';\nimport { InterchangeInfo, MonoColour, Name, Theme } from '../../constants/constants';\nimport { useAppSelector } from '../../redux';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        contentWrapper: {\n            display: 'flex',\n            overflow: 'hidden',\n            paddingTop: theme.spacing(1),\n            paddingBottom: theme.spacing(1),\n            paddingLeft: theme.spacing(3),\n            paddingRight: theme.spacing(3),\n            [theme.breakpoints.down('xs')]: {\n                flexDirection: 'column',\n            },\n        },\n        contentLeft: {\n            maxWidth: 280,\n        },\n        contentControl: {\n            flexGrow: 0,\n            flexShrink: 0,\n            display: 'flex',\n            flexDirection: 'column',\n            width: 270,\n        },\n\n        paperRoot: {\n            maxWidth: 250,\n        },\n        listItemPaper: {\n            justifyContent: 'center',\n        },\n        iconRoot: {\n            position: 'absolute',\n            color: theme.palette.action.active,\n        },\n        inputBaseRoot: {\n            display: 'block',\n        },\n        inputBaseInputZH: {\n            textAlign: 'center',\n            fontSize: 36,\n            padding: 0,\n            paddingTop: 6,\n            height: 45,\n        },\n        inputBaseInputEN: {\n            textAlign: 'center',\n            fontSize: 18,\n            padding: 0,\n            paddingBottom: 6,\n            height: 'auto',\n        },\n\n        chipWrapper: {\n            overflowX: 'auto',\n            display: 'flex',\n        },\n        chipRoot: {\n            borderRadius: 4.5,\n            height: 32,\n            lineHeight: '1rem',\n            margin: 2,\n        },\n        chipLabel: {\n            padding: '0 6px',\n            '& > span': {\n                display: 'block',\n                textAlign: 'center',\n            },\n            '& > span:first-child': {\n                fontSize: '1rem',\n            },\n            '& > span:last-child': {\n                lineHeight: '0.8rem',\n            },\n        },\n    })\n);\n\ninterface Props {\n    open: boolean;\n    theme: Theme;\n    lineName: Name;\n    onUpdate: (key: string, value: any) => void;\n    onClose: () => void;\n}\n\nconst Dialog2 = (props: Props) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    return (\n        <Dialog open={props.open} onClose={props.onClose}>\n            <DialogTitle>{t('colour.title')}</DialogTitle>\n            <DialogContent className={classes.contentWrapper}>\n                <List component=\"div\" disablePadding className={classes.contentLeft}>\n                    <LineNameInput theme={props.theme} lineName={props.lineName} onUpdate={props.onUpdate} />\n                    <Divider />\n                    <RecentChipSet onUpdate={props.onUpdate} />\n                </List>\n                <div className={classes.contentControl}>\n                    <ColourControl theme={props.theme} onUpdate={props.onUpdate} />\n                </div>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose} color=\"primary\">\n                    {t('dialog.done')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default Dialog2;\n\nconst LineNameInput = (props: { lineName: Name; theme: Theme; onUpdate: Props['onUpdate'] }) => {\n    const classes = useStyles();\n\n    const nameChange = (value: string, index: number) => {\n        let newName = props.lineName.map((val, idx) => (idx === index ? value : val));\n        props.onUpdate('name', newName);\n    };\n\n    return (\n        <ListItem style={{ justifyContent: 'center' }}>\n            <Paper className={classes.paperRoot} style={{ backgroundColor: props.theme[2] }}>\n                <Icon className={classes.iconRoot}>edit</Icon>\n                <InputBase\n                    value={props.lineName[0]}\n                    classes={{\n                        root: classes.inputBaseRoot,\n                        input: classes.inputBaseInputZH,\n                    }}\n                    style={{ color: props.theme[3] || MonoColour.white }}\n                    onChange={e => nameChange(e.target.value, 0)}\n                    autoFocus\n                />\n                <InputBase\n                    value={props.lineName[1]}\n                    classes={{\n                        root: classes.inputBaseRoot,\n                        input: classes.inputBaseInputEN,\n                    }}\n                    style={{ color: props.theme[3] || MonoColour.white }}\n                    onChange={e => nameChange(e.target.value, 1)}\n                />\n            </Paper>\n        </ListItem>\n    );\n};\n\nconst RecentChipSet = (props: { onUpdate: Props['onUpdate'] }) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const theme = useAppSelector(store => store.param.theme);\n    const lineName = useAppSelector(store => store.param.line_name);\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    const allInfos = useMemo(\n        () =>\n            new Set(\n                Object.values(stationList)\n                    .reduce(\n                        (acc, { transfer }) => {\n                            const { info } = transfer;\n                            return acc.concat(...info);\n                        },\n                        [[...theme, ...lineName]]\n                    )\n                    .map(val => JSON.stringify(val))\n                    .reverse()\n            ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n\n    const chips = useMemo(\n        () =>\n            [...allInfos].map((x, i) => {\n                const info: InterchangeInfo = JSON.parse(x);\n                const label = info.slice(4).map((txt, i) => (\n                    <span key={i} style={{ color: info[3] }}>\n                        {txt}\n                    </span>\n                ));\n\n                return (\n                    <Chip\n                        key={i}\n                        onClick={() => {\n                            props.onUpdate('theme', info.slice(0, 4));\n                            props.onUpdate('name', info.slice(4));\n                        }}\n                        style={{ backgroundColor: info[2] }}\n                        className={classes.chipRoot}\n                        classes={{ label: classes.chipLabel }}\n                        {...{ label }}\n                    />\n                );\n            }),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n\n    return (\n        <ListItem>\n            <ListItemText\n                primary={t('colour.recent')}\n                secondary={chips}\n                secondaryTypographyProps={{ component: 'div' }}\n                classes={{ secondary: classes.chipWrapper }}\n            />\n        </ListItem>\n    );\n};\n\nconst ColourControl = (props: { theme: Theme; onUpdate: Props['onUpdate'] }) => {\n    const { t } = useTranslation();\n    const [tabIndex, setTabIndex] = useState(props.theme[0] === 'other' ? 1 : 0);\n\n    const tabNav = (\n        <Tabs\n            value={tabIndex}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            onChange={(_, val) => setTabIndex(val)}\n            variant=\"fullWidth\"\n            scrollButtons=\"off\"\n        >\n            <Tab label={t('colour.palette')} style={{ minWidth: 'unset' }} />\n            <Tab label={t('colour.custom')} style={{ minWidth: 'unset' }} />\n        </Tabs>\n    );\n\n    const panel = (idx => {\n        switch (idx) {\n            case 0:\n                return <PalettePanel {...props} />;\n            case 1:\n                return <CustomPanel {...props} />;\n            default:\n                return <></>;\n        }\n    })(tabIndex);\n\n    return (\n        <>\n            {tabNav}\n            {panel}\n        </>\n    );\n};\n","import ColourDialog from './dialog';\n\nexport default ColourDialog;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ListItem, ListItemIcon, TextField, makeStyles, createStyles } from '@material-ui/core';\nimport { Name } from '../../../constants/constants';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        listItemIcon: {\n            width: '1em',\n            fontSize: '1.5rem',\n            textAlign: 'center',\n        },\n    })\n);\n\ninterface Props {\n    onUpdate: (index: number) => (event: React.ChangeEvent<HTMLInputElement>) => void;\n    name: Name;\n}\n\nconst NameListItems = (props: Props) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    return React.useMemo(\n        () => (\n            <>\n                <ListItem>\n                    <ListItemIcon>\n                        <span className={classes.listItemIcon}>文</span>\n                    </ListItemIcon>\n                    <TextField\n                        style={{ width: '100%' }}\n                        variant=\"outlined\"\n                        label={t('stations.edit.name.nameZH')}\n                        onChange={props.onUpdate(0)}\n                        value={props.name[0]}\n                        autoFocus\n                    />\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <span className={classes.listItemIcon}>A</span>\n                    </ListItemIcon>\n                    <TextField\n                        style={{ width: '100%' }}\n                        variant=\"outlined\"\n                        label={t('stations.edit.name.nameEN')}\n                        onChange={props.onUpdate(1)}\n                        value={props.name[1]}\n                        helperText={t('stations.edit.name.nameENHelper')}\n                    />\n                </ListItem>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.name?.toString() || '']\n    );\n};\n\nexport default NameListItems;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    Chip,\n    createStyles,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Divider,\n    Icon,\n    IconButton,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    makeStyles,\n    Select,\n    Switch,\n    Tooltip,\n} from '@material-ui/core';\nimport ColourDialog from '../../colour-diag';\nimport NameListItems from './name-list-items';\nimport { useAppDispatch, useAppSelector } from '../../../redux';\nimport { InterchangeInfo, MonoColour, Name, RmgStyle, ShortDirection, Theme } from '../../../constants/constants';\nimport {\n    addInterchange,\n    removeInterchange,\n    updateInterchange,\n    updateStationOsiName,\n    updateStationPaidArea,\n    updateStationTickDirection,\n} from '../../../redux/param/action';\n\nconst StationEditInterchangeTab = (props: { stnId: string }) => {\n    const { stnId } = props;\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const rmgStyle = useAppSelector(store => store.param.style);\n    const theme = useAppSelector(store => store.param.theme);\n    const { transfer } = useAppSelector(store => store.param.stn_list[stnId]);\n\n    const [osiNameDialog0Opened, setOsiNameDialog0Opened] = React.useState(false);\n    const [osiNameDialog1Opened, setOsiNameDialog1Opened] = React.useState(false);\n\n    const addClick = (index: number) => {\n        let newInfo: InterchangeInfo = [...theme, '轉綫', 'Line'];\n        dispatch(addInterchange(stnId, index, newInfo));\n    };\n\n    const deleteClick = (setIdx: number, intIdx: number) => {\n        dispatch(removeInterchange(stnId, setIdx, intIdx));\n    };\n\n    return (\n        <List>\n            <ListItem>\n                <ListItemText>\n                    <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.within')}</h3>\n                </ListItemText>\n                <ListItemSecondaryAction>\n                    <Tooltip title={t('stations.edit.interchange.add') || ''} aria-label=\"add\">\n                        <IconButton onClick={() => addClick(0)}>\n                            <Icon>add_circle</Icon>\n                        </IconButton>\n                    </Tooltip>\n                </ListItemSecondaryAction>\n            </ListItem>\n            <ListItem>\n                <InterchangeChipSet stnId={stnId} setIndex={0} onDelete={i => deleteClick(0, i)} />\n            </ListItem>\n\n            {/* Out of station transfer */}\n            {[RmgStyle.MTR, RmgStyle.SHMetro].includes(rmgStyle) && (\n                <>\n                    <Divider />\n                    <ListItem>\n                        <ListItemText>\n                            <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.osi')}</h3>\n                        </ListItemText>\n                        <ListItemSecondaryAction>\n                            {[RmgStyle.MTR].includes(rmgStyle) && (\n                                <React.Fragment>\n                                    <Button\n                                        variant=\"outlined\"\n                                        color=\"primary\"\n                                        style={{ lineHeight: '1rem', whiteSpace: 'pre', marginRight: 5 }}\n                                        onClick={() => setOsiNameDialog0Opened(true)}\n                                    >\n                                        {transfer.osi_names[0]\n                                            ? transfer.osi_names[0].join('\\r\\n')\n                                            : '車站名\\r\\nStn Name'}\n                                    </Button>\n                                    <OSINameDialog\n                                        open={osiNameDialog0Opened}\n                                        stnId={stnId}\n                                        setIndex={0}\n                                        onClose={() => setOsiNameDialog0Opened(false)}\n                                    />\n                                </React.Fragment>\n                            )}\n                            <Tooltip title={t('stations.edit.interchange.add') || ''} aria-label=\"add\">\n                                <IconButton onClick={() => addClick(1)}>\n                                    <Icon>add_circle</Icon>\n                                </IconButton>\n                            </Tooltip>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                    <ListItem>\n                        <InterchangeChipSet stnId={stnId} setIndex={1} onDelete={i => deleteClick(1, i)} />\n                    </ListItem>\n                </>\n            )}\n\n            {/* Out of system transfer */}\n            {[RmgStyle.SHMetro].includes(rmgStyle || '') && (\n                <>\n                    <Divider />\n                    <ListItem>\n                        <ListItemText>\n                            <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.osysi')}</h3>\n                        </ListItemText>\n                        <ListItemSecondaryAction>\n                            {[RmgStyle.MTR].includes(rmgStyle) && (\n                                <React.Fragment>\n                                    <Button\n                                        variant=\"outlined\"\n                                        color=\"primary\"\n                                        style={{ lineHeight: '1rem', whiteSpace: 'pre', marginRight: 5 }}\n                                        onClick={() => setOsiNameDialog1Opened(true)}\n                                    >\n                                        {transfer.osi_names[1]\n                                            ? transfer.osi_names[1].join('\\r\\n')\n                                            : '車站名\\r\\nStn Name'}\n                                    </Button>\n                                    <OSINameDialog\n                                        open={osiNameDialog1Opened}\n                                        stnId={stnId}\n                                        setIndex={1}\n                                        onClose={() => setOsiNameDialog1Opened(false)}\n                                    />\n                                </React.Fragment>\n                            )}\n                            <Tooltip title={t('stations.edit.interchange.add') || ''} aria-label=\"add\">\n                                <IconButton onClick={() => addClick(2)}>\n                                    <Icon>add_circle</Icon>\n                                </IconButton>\n                            </Tooltip>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                    <ListItem>\n                        <InterchangeChipSet stnId={stnId} setIndex={2} onDelete={i => deleteClick(2, i)} />\n                    </ListItem>\n                </>\n            )}\n            {[RmgStyle.MTR, RmgStyle.SHMetro].includes(rmgStyle) && (\n                <ListItem>\n                    <span>{t('stations.edit.interchange.note')}</span>\n                </ListItem>\n            )}\n            {/* MTR more settings */ rmgStyle === RmgStyle.MTR && <InterchangeMore stnId={props.stnId} />}\n        </List>\n    );\n};\n\nexport default StationEditInterchangeTab;\n\nconst intChipSetStyles = makeStyles(() =>\n    createStyles({\n        intChip: {\n            borderRadius: 4.5,\n            height: 40,\n            lineHeight: '1rem',\n            margin: 2,\n        },\n        intChipText: {\n            display: 'block',\n            textAlign: 'center' as 'center',\n        },\n        intChipTextZH: {\n            fontSize: 18,\n            lineHeight: '1.2rem',\n        },\n        intChipTextEN: {\n            fontSize: '.75rem',\n            lineHeight: '.9rem',\n            whiteSpace: 'pre-wrap' as 'pre-wrap',\n        },\n        intChipLabel: {\n            paddingLeft: 6,\n            paddingRight: 6,\n        },\n        intChipDeleteIcon: {\n            marginLeft: -3,\n        },\n    })\n);\n\ninterface InterchangeChipSetProps {\n    stnId: string;\n    setIndex: number;\n    onDelete: (i: number) => void;\n}\n\nconst InterchangeChipSet = (props: InterchangeChipSetProps) => {\n    const { stnId, setIndex, onDelete } = props;\n    const classes = intChipSetStyles();\n    const dispatch = useAppDispatch();\n\n    const intInfos = useAppSelector(store => store.param.stn_list[stnId].transfer.info[setIndex]);\n\n    const [chipSelected, setChipSelected] = React.useState(-1);\n    const [nameDialogOpened, setNameDialogOpened] = React.useState(false);\n\n    const handleClick = (index: number) => {\n        setChipSelected(index);\n        setNameDialogOpened(true);\n    };\n\n    const nameDialogUpdate = (key: string, value: any) => {\n        if (key === 'theme') {\n            const newInfo = (value as string[]).concat(Array(2)) as InterchangeInfo;\n            dispatch(updateInterchange(stnId, setIndex, chipSelected, newInfo));\n        }\n        if (key === 'name') {\n            const newInfo = Array(4).concat(value) as InterchangeInfo;\n            dispatch(updateInterchange(stnId, setIndex, chipSelected, newInfo));\n        }\n    };\n\n    const intChips = intInfos?.map((intInfo, i) => {\n        let label = (\n            <span style={{ color: intInfo[3] }}>\n                <span className={`${classes.intChipText} ${classes.intChipTextZH}`}>{intInfo[4]}</span>\n                <span className={`${classes.intChipText} ${classes.intChipTextEN}`}>{intInfo[5]}</span>\n            </span>\n        );\n        return (\n            <Chip\n                key={i}\n                label={label}\n                className={classes.intChip}\n                classes={{\n                    label: classes.intChipLabel,\n                    deleteIcon: classes.intChipDeleteIcon,\n                }}\n                style={{ backgroundColor: intInfo[2] }}\n                onDelete={() => onDelete(i)}\n                onClick={() => handleClick(i)}\n            />\n        );\n    });\n\n    return (\n        <div>\n            {intChips}\n\n            <ColourDialog\n                open={nameDialogOpened}\n                theme={\n                    intInfos?.[chipSelected] === undefined\n                        ? ([] as any as Theme)\n                        : [\n                              intInfos[chipSelected][0],\n                              intInfos[chipSelected][1],\n                              intInfos[chipSelected][2],\n                              intInfos[chipSelected][3] as MonoColour,\n                          ]\n                }\n                lineName={\n                    intInfos?.[chipSelected] === undefined\n                        ? ['', '']\n                        : [intInfos[chipSelected][4], intInfos[chipSelected][5]]\n                }\n                onUpdate={nameDialogUpdate}\n                onClose={() => setNameDialogOpened(false)}\n            />\n        </div>\n    );\n};\n\ninterface OSINameDialogProps {\n    open: boolean;\n    stnId: string;\n    setIndex: number;\n    onClose: () => void;\n}\n\nconst OSINameDialog = (props: OSINameDialogProps) => {\n    const { open, stnId, setIndex, onClose } = props;\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const osiName = useAppSelector(store => store.param.stn_list[stnId].transfer.osi_names[setIndex]) || [\n        '車站名',\n        'Stn Name',\n    ];\n\n    const handleUpdate =\n        (index: number) =>\n        ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\n            let newOSIName = osiName.map((val, i) => (i === index ? value : val)) as Name;\n            dispatch(updateStationOsiName(stnId, setIndex, newOSIName));\n        };\n\n    return (\n        <Dialog open={open} onClose={onClose}>\n            <DialogTitle>{t('stations.edit.interchange.osiName')}</DialogTitle>\n            <DialogContent dividers>\n                <List>\n                    <NameListItems onUpdate={handleUpdate} name={osiName} />\n                </List>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose} color=\"primary\" autoFocus>\n                    {t('dialog.done')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nconst InterchangeMore = (props: { stnId: string }) => {\n    const { stnId } = props;\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const { transfer } = useAppSelector(store => store.param.stn_list[stnId]);\n\n    return React.useMemo(() => {\n        const tickDirecChange = ({ target: { value } }: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n            let direction = value;\n            if (direction === ShortDirection.left || direction === ShortDirection.right) {\n                dispatch(updateStationTickDirection(stnId, direction as ShortDirection));\n            }\n        };\n\n        return (\n            <>\n                <Divider />\n                <ListItem>\n                    <ListItemText>\n                        <h3 style={{ margin: 0 }}>{t('stations.edit.interchange.settings')}</h3>\n                    </ListItemText>\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>format_textdirection_l_to_r</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('stations.edit.interchange.tickDirec.label')} />\n                    <ListItemSecondaryAction>\n                        <Select native value={transfer.tick_direc} onChange={tickDirecChange}>\n                            {Object.values(ShortDirection).map(d => (\n                                <option key={d} value={d}>\n                                    {t('stations.edit.interchange.tickDirec.' + d)}\n                                </option>\n                            ))}\n                        </Select>\n                    </ListItemSecondaryAction>\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>attach_money</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('stations.edit.interchange.paidArea')} />\n                    <ListItemSecondaryAction>\n                        <Switch\n                            color=\"primary\"\n                            edge=\"end\"\n                            onChange={(_, checked) => {\n                                dispatch(updateStationPaidArea(stnId, checked));\n                            }}\n                            checked={transfer.paid_area}\n                        />\n                    </ListItemSecondaryAction>\n                </ListItem>\n            </>\n        );\n    }, [stnId, t, dispatch, transfer.paid_area, transfer.tick_direc]);\n};\n"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","useStyles","makeStyles","createStyles","cityItem","display","flexDirection","alignItems","menuItemSpan","padding","button","borderRadius","height","width","minWidth","marginRight","inputColour","position","left","top","buttonContainer","flexShrink","PalettePanel","props","useTranslation","t","i18n","classes","lineList","theme","React","list","setList","listPromise","default","catch","useEffect","data","CityCode","colour","fg","MonoColour","toString","useLineList","length","filter","l","newTheme","onUpdate","List","component","disablePadding","CitySelectItem","value","onChange","event","target","slice","Divider","variant","ListItem","ListItemText","primary","TextField","select","style","line","disabled","MenuItem","className","backgroundColor","color","getTransText2","name","languages","CustomPanel","useState","hexTemp","setHexTemp","type","rgb","opacity","htmlFor","Tooltip","title","Button","borderColor","error","match","hex","val","idx","toUpperCase","Select","native","label","items","useMemo","cityList","c","CountryFlag","country","useEmojiStyles","img","codePoints","split","char","codePointAt","concat","LanguageCode","includes","language","navigator","platform","indexOf","src","process","join","alt","String","fromCodePoint","cp","parseInt","contentWrapper","overflow","paddingTop","spacing","paddingBottom","paddingLeft","paddingRight","breakpoints","down","contentLeft","maxWidth","contentControl","flexGrow","paperRoot","listItemPaper","justifyContent","iconRoot","palette","action","active","inputBaseRoot","inputBaseInputZH","textAlign","fontSize","inputBaseInputEN","chipWrapper","overflowX","chipRoot","lineHeight","margin","chipLabel","Dialog","open","onClose","DialogTitle","DialogContent","LineNameInput","lineName","RecentChipSet","ColourControl","DialogActions","onClick","nameChange","index","newName","Paper","Icon","InputBase","root","input","autoFocus","useAppSelector","store","param","line_name","stationList","stn_list","allInfos","Set","values","reduce","acc","info","transfer","JSON","stringify","reverse","chips","x","i","parse","txt","Chip","secondary","secondaryTypographyProps","tabIndex","setTabIndex","tabNav","Tabs","indicatorColor","textColor","_","scrollButtons","Tab","panel","listItemIcon","ListItemIcon","helperText","stnId","dispatch","useAppDispatch","rmgStyle","osiNameDialog0Opened","setOsiNameDialog0Opened","osiNameDialog1Opened","setOsiNameDialog1Opened","addClick","newInfo","addInterchange","deleteClick","setIdx","intIdx","removeInterchange","ListItemSecondaryAction","IconButton","InterchangeChipSet","setIndex","onDelete","RmgStyle","whiteSpace","osi_names","OSINameDialog","InterchangeMore","intChipSetStyles","intChip","intChipText","intChipTextZH","intChipTextEN","intChipLabel","intChipDeleteIcon","marginLeft","intInfos","chipSelected","setChipSelected","nameDialogOpened","setNameDialogOpened","intChips","intInfo","deleteIcon","undefined","key","Array","updateInterchange","osiName","dividers","newOSIName","updateStationOsiName","tick_direc","direction","ShortDirection","updateStationTickDirection","d","Switch","edge","checked","updateStationPaidArea","paid_area"],"sourceRoot":""}