{"version":3,"sources":["panels/stations/station-list.tsx","panels/stations/utils.ts","panels/stations/add-diag.tsx","panels/stations/edit-diag/dialog.tsx","panels/stations/edit-diag/index.ts","panels/stations/delete-diags.tsx","panels/stations/fabs.tsx","panels/stations/auto-num-diag.tsx","panels/stations/panel2.tsx","panels/stations/index.ts"],"names":["useStyles","makeStyles","theme","createStyles","listItemNum","marginRight","spacing","fontSize","listItemText","display","alignItems","whiteSpace","overflow","selectedItem","background","palette","action","hover","StationList","props","tpo","useContext","ParamContext","dense","disablePadding","map","stnId","Fragment","key","isSelected","selectedId","onAction","StationEntry","t","useTranslation","classes","rmgStyle","CanvasContext","param","dispatch","stn_list","linestart","name","num","useState","toggleEl","setToggleEl","handleAction","className","primary","secondary","replace","size","onClick","e","currentTarget","anchorEl","open","Boolean","onClose","type","getRandomId","Math","floor","random","pow","toString","padStart","getNameFromId","numsZH","split","numsEN","char","parseInt","join","dialogContent","padding","select","width","marginLeft","React","memo","stnList","allLocs","centre","upper","lower","newupper","newlower","prep","setPrep","pivot","setPivot","Object","keys","loc","setLoc","Array","fill","locOK","setLocOK","end","setEnd","endList","setEndList","newLocs","useMemo","length","y","getYShareMTR","state","res","parents","unshift","pop","children","push","shift","newBranchPossibleEnd","newStnPossibleLoc","useEffect","p","indexOf","handleClick","newId","includes","newInfo","secondaryName","services","branch","left","right","transfer","info","tick_direc","paid_area","osi_names","facility","newStnList","JSON","parse","stringify","slice","forEach","par","child","parChildLen","lineend","addStation","component","native","onChange","target","value","variant","formatStnName","idx","disabled","style","color","autoFocus","prevProps","nextProps","NameTab","lazy","InterchangeTab","BranchTab","MoreTab","tab","height","minWidth","flexDirection","minHeight","marginBottom","paddingLeft","DialogWrapper","useTheme","isMobile","useMediaQuery","breakpoints","down","fullScreen","dividers","Dialog","tabIndex","setTabIndex","tabNav","indicatorColor","textColor","_","val","scrollButtons","i","label","icon","role","Suspense","fallback","StationDeleteDialog","isError","setIsError","isLastMainBranchStn","id","console","log","parId","childId","childIdxOfPar","parIdxOfChild","splice","removeStation","current_stn_idx","newCurrentId","filter","i18nKey","ErrorDialog","fab","position","bottom","StationFabs","fabEl","setFabEl","title","aria-label","AutoNumDialog","branches","branch0","gridContainer","gridItem","PanelStations2","stnSelected","setStnSelected","isOpen","setIsOpen","isAddDialogOpen","setIsAddDialogOpen","isAutoNumDialogOpen","setIsAutoNumDialogOpen","stnToRemove","setStnToRemove","isDeleteDialogOpen","setIsDeleteDialogOpen","container","item","xs","md","Panel"],"mappings":"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","file":"static/js/panelStations.a4aec36e.chunk.js","sourcesContent":["import React, { useContext, useState } from 'react';\nimport {\n    makeStyles,\n    createStyles,\n    Paper,\n    List,\n    ListItem,\n    ListItemText,\n    Divider,\n    Icon,\n    Typography,\n    ListItemSecondaryAction,\n    IconButton,\n    Menu,\n    MenuItem,\n} from '@material-ui/core';\nimport { ParamContext, CanvasContext } from '../../context';\nimport { useTranslation } from 'react-i18next';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        listItemNum: {\n            marginRight: theme.spacing(1),\n            fontSize: '1.2rem',\n        },\n        listItemText: {\n            display: 'flex',\n            alignItems: 'baseline',\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            '& .MuiListItemText-primary': {\n                marginRight: theme.spacing(1),\n            },\n        },\n        selectedItem: {\n            background: theme.palette.action.hover,\n        },\n    })\n);\n\ninterface Props {\n    selectedId: string;\n    onAction: (stnId: string) => (action: 'edit' | 'remove') => void;\n}\n\nconst StationList = (props: Props) => {\n    const { tpo } = useContext(ParamContext);\n\n    return (\n        <Paper>\n            <List dense disablePadding>\n                {tpo.map(stnId => (\n                    <React.Fragment key={stnId}>\n                        <StationEntry\n                            stnId={stnId}\n                            isSelected={stnId === props.selectedId}\n                            onAction={props.onAction(stnId)}\n                        />\n                        <Divider />\n                    </React.Fragment>\n                ))}\n            </List>\n        </Paper>\n    );\n};\n\nexport default StationList;\n\nconst StationEntry = (props: { stnId: string; isSelected: boolean; onAction: (action: 'edit' | 'remove') => void }) => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const { rmgStyle } = useContext(CanvasContext);\n    const { param, dispatch } = useContext(ParamContext);\n\n    const { name, num } = param.stn_list[props.stnId] || param.stn_list.linestart;\n\n    const [toggleEl, setToggleEl] = useState<null | HTMLElement>(null);\n\n    const handleCurrent = () => {\n        dispatch({ type: 'SET_CURRENT_STATION', stnId: props.stnId });\n        setToggleEl(null);\n    };\n\n    const handleAction = (action: 'edit' | 'remove') => () => {\n        props.onAction(action);\n        setToggleEl(null);\n    };\n\n    return (\n        <ListItem className={props.isSelected ? classes.selectedItem : ''}>\n            {rmgStyle === 'gzmtr' && <Typography className={classes.listItemNum}>{num}</Typography>}\n            <ListItemText primary={name[0]} secondary={name[1].replace('\\\\', ' ')} className={classes.listItemText} />\n            <ListItemSecondaryAction>\n                <IconButton size=\"small\" onClick={e => setToggleEl(e.currentTarget)}>\n                    <Icon>more_vert</Icon>\n                </IconButton>\n                <Menu anchorEl={toggleEl} open={Boolean(toggleEl)} onClose={() => setToggleEl(null)}>\n                    <MenuItem onClick={handleCurrent}>{t('stations.current')}</MenuItem>\n                    <MenuItem onClick={handleAction('edit')}>{t('stations.edit.button')}</MenuItem>\n                    <MenuItem onClick={handleAction('remove')}>{t('stations.remove.button')}</MenuItem>\n                </Menu>\n            </ListItemSecondaryAction>\n        </ListItem>\n    );\n};\n","import { getYShareMTR } from '../../methods';\n\nexport const addStation = (\n    prep: 'before' | 'after',\n    stnId: string,\n    loc: 'centre' | 'upper' | 'lower' | 'newupper' | 'newlower',\n    end: string,\n    stnList: { [stnId: string]: StationInfo }\n): [string, StationDict] => {\n    // get new id\n    let newId = getRandomId();\n    while (Object.keys(stnList).includes(newId)) {\n        newId = getRandomId();\n    }\n    let newInfo: StationInfo = {\n        name: getNameFromId(newId),\n        secondaryName: false,\n        num: '00',\n        services: ['local'],\n        parents: [],\n        children: [],\n        branch: {\n            left: [],\n            right: [],\n        },\n        transfer: {\n            info: [[]],\n            // type: 'none',\n            tick_direc: 'r',\n            paid_area: true,\n            osi_names: [],\n        },\n        facility: '',\n    };\n\n    let newStnList = JSON.parse(JSON.stringify(stnList)) as StationDict;\n\n    if (prep === 'before') {\n        if (loc === 'centre') {\n            newInfo.parents = stnList[stnId].parents;\n            if (stnList[stnId].parents.length === 0 && getYShareMTR(stnId, stnList) !== 0) {\n                // todo: is this case really exist?\n                newInfo.children = stnList.linestart.children;\n            } else if (getYShareMTR(stnId, stnList) !== 0) {\n                // pivot on branch\n                newInfo.children = stnList[stnList[stnId].parents[0]].children.slice();\n                newInfo.branch.right = stnList[newInfo.parents[0]].branch.right;\n                newStnList[newInfo.parents[0]].branch.right = [];\n            } else {\n                // pivot on main\n                newInfo.children = [stnId];\n                newInfo.branch.left = stnList[stnId].branch.left;\n                newStnList[stnId].branch.left = [];\n            }\n            newInfo.parents.forEach(par => {\n                newStnList[par].children = [newId];\n            });\n            newInfo.children.forEach(child => {\n                newStnList[child].parents = [newId];\n            });\n        } else if (loc === 'upper') {\n            if (stnList[stnId].parents.length === 2) {\n                if (stnList[stnId].branch.left[1] === stnList[stnId].parents[0]) {\n                    newStnList[stnId].branch.left[1] = newId;\n                }\n\n                newInfo.parents = stnList[stnId].parents.slice(0, 1);\n                newInfo.children = [stnId];\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n                newStnList[stnId].parents[0] = newId;\n            } else {\n                // already on branch\n                newInfo.parents = stnList[stnId].parents;\n                newInfo.children = [stnId];\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children[0] = newId;\n\n                    if (stnList[par].branch.right[1] === stnId) {\n                        newStnList[par].branch.right[1] = newId;\n                    }\n                });\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n            }\n        } else if (loc === 'lower') {\n            if (stnList[stnId].parents.length === 2) {\n                if (stnList[stnId].branch.left[1] === stnList[stnId].parents[1]) {\n                    newStnList[stnId].branch.left[1] = newId;\n                }\n\n                newInfo.parents = stnList[stnId].parents.slice(1);\n                newInfo.children = [stnId];\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n                newStnList[stnId].parents[1] = newId;\n            } else {\n                // already on branch\n                newInfo.parents = stnList[stnId].parents;\n                newInfo.children = [stnId];\n                newInfo.parents.forEach(par => {\n                    let parChildLen = stnList[par].children.length;\n                    newStnList[par].children[parChildLen - 1] = newId;\n\n                    if (stnList[par].branch.right[1] === stnId) {\n                        newStnList[par].branch.right[1] = newId;\n                    }\n                });\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n            }\n        } else {\n            newStnList[stnId].branch.left = ['through', newId];\n            newStnList[end].branch.right = ['through', newId];\n            newInfo.parents = [end];\n            newInfo.children = [stnId];\n\n            if (loc === 'newupper') {\n                newStnList[end].children.unshift(newId);\n                newStnList[stnId].parents.unshift(newId);\n            } else {\n                newStnList[end].children.push(newId);\n                newStnList[stnId].parents.push(newId);\n            }\n        }\n    } else {\n        if (loc === 'centre') {\n            newInfo.children = stnList[stnId].children;\n            if (stnList[stnId].children.length === 0 && getYShareMTR(stnId, stnList) !== 0) {\n                newInfo.parents = stnList.lineend.parents;\n            } else if (getYShareMTR(stnId, stnList) !== 0) {\n                // pivot on branch\n                newInfo.parents = stnList[stnList[stnId].children[0]].parents;\n                newInfo.branch.left = stnList[newInfo.children[0]].branch.left;\n                newStnList[newInfo.children[0]].branch.left = [];\n            } else {\n                // pivot on main\n                newInfo.parents = [stnId];\n                newInfo.branch.right = stnList[stnId].branch.right;\n                newStnList[stnId].branch.right = [];\n            }\n            newInfo.children.forEach(child => {\n                newStnList[child].parents = [newId];\n            });\n            newInfo.parents.forEach(par => {\n                newStnList[par].children = [newId];\n            });\n        } else if (loc === 'upper') {\n            if (stnList[stnId].children.length === 2) {\n                if (stnList[stnId].branch.right[1] === stnList[stnId].children[0]) {\n                    newStnList[stnId].branch.right[1] = newId;\n                }\n\n                newInfo.children = stnList[stnId].children.slice(0, 1);\n                newInfo.parents = [stnId];\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n                newStnList[stnId].children[0] = newId;\n            } else {\n                // already on branch\n                newInfo.children = stnList[stnId].children;\n                newInfo.parents = [stnId];\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents[0] = newId;\n\n                    if (stnList[child].branch.left[1] === stnId) {\n                        newStnList[child].branch.left[1] = newId;\n                    }\n                });\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n            }\n        } else if (loc === 'lower') {\n            if (stnList[stnId].children.length === 2) {\n                if (stnList[stnId].branch.right[1] === stnList[stnId].children[1]) {\n                    newStnList[stnId].branch.right[1] = newId;\n                }\n\n                newInfo.children = stnList[stnId].children.slice(1);\n                newInfo.parents = [stnId];\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n                newStnList[stnId].children[1] = newId;\n            } else {\n                // already on branch\n                newInfo.children = stnList[stnId].children;\n                newInfo.parents = [stnId];\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents[stnList[child].parents.length === 1 ? 0 : 1] = newId;\n\n                    if (stnList[child].branch.left[1] === stnId) {\n                        newStnList[child].branch.left[1] = newId;\n                    }\n                });\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n            }\n        } else {\n            newStnList[stnId].branch.right = ['through', newId];\n            newStnList[end].branch.left = ['through', newId];\n\n            newInfo.children = [end];\n            newInfo.parents = [stnId];\n\n            if (loc === 'newupper') {\n                newStnList[end].parents.unshift(newId);\n                newStnList[stnId].children.unshift(newId);\n            } else {\n                newStnList[end].parents.push(newId);\n                newStnList[stnId].children.push(newId);\n            }\n        }\n    }\n\n    return [\n        newId,\n        {\n            ...newStnList,\n            [newId]: newInfo,\n        },\n    ];\n};\n\nconst getRandomId = () =>\n    Math.floor(Math.random() * Math.pow(36, 4))\n        .toString(36)\n        .padStart(4, '0');\n\nfunction getNameFromId(stnId: string): Name {\n    let numsZH = '癸甲乙丙丁戊己庚辛壬日月金木水火土竹戈十大中一弓人心手口尸廿山女田難卜重'.split('');\n    let numsEN = 'Zero One Two Three Four Five Six Seven Eight Nine Alfa Bravo Charlie Delta Echo Foxtrot Golf Hotel India Juliett Kilo Lima Mike November Oscar Papa Quebec Romeo Sierra Tango Uniform Victor Whiskey X-ray Yankee Zulu'.split(\n        ' '\n    );\n    return [\n        stnId\n            .split('')\n            .map(char => numsZH[parseInt(char, 36)])\n            .join(''),\n        stnId\n            .split('')\n            .map(char => numsEN[parseInt(char, 36)])\n            .join(' '),\n    ];\n}\n\n/**\n * Remove a station and update neighbour's parameters at the same time.\n * (All descriptions are based on MTR style. )\n */\nexport const removeStation = (stnId: string, stnList: StationDict) => {\n    let newStnList = JSON.parse(JSON.stringify(stnList)) as StationDict;\n    let parents = newStnList[stnId].parents;\n    let children = newStnList[stnId].children;\n\n    let isLastMainBranchStn = true;\n    for (let id in newStnList) {\n        if ([stnId, 'linestart', 'lineend'].includes(id)) continue;\n        if (getYShareMTR(id, newStnList) === 0) {\n            isLastMainBranchStn = false;\n            break;\n        }\n    }\n\n    if (parents.length === 2 && children.length === 2) {\n        // Todo: rewrite, join two branches rather than reject\n        return false;\n    } else if (isLastMainBranchStn) {\n        // Last main line station\n        return false;\n    } else if (Object.keys(newStnList).length === 4) {\n        // Last two stations\n        return false;\n    } else if (parents.length === 2 || children.length === 2) {\n        console.log('this case');\n        parents.forEach(parId => {\n            newStnList[parId].children = children;\n        });\n        children.forEach(childId => {\n            newStnList[childId].parents = parents;\n        });\n        if (parents.length === 1) {\n            newStnList[parents[0]].branch.right = newStnList[stnId].branch.right;\n        }\n        if (children.length === 1) {\n            newStnList[children[0]].branch.left = newStnList[stnId].branch.left;\n        }\n    } else if (newStnList[parents[0]].children.length === 2 && newStnList[children[0]].parents.length === 2) {\n        // 1 par 1 child, last station on upper/lower branch\n        // branch disappear\n        var childIdxOfPar = newStnList[parents[0]].children.indexOf(stnId);\n        var parIdxOfChild = newStnList[children[0]].parents.indexOf(stnId);\n        newStnList[parents[0]].children.splice(childIdxOfPar, 1);\n        newStnList[children[0]].parents.splice(parIdxOfChild, 1);\n\n        newStnList[parents[0]].branch.right = [];\n        newStnList[children[0]].branch.left = [];\n    } else {\n        // 1 par 1 child\n        parents.forEach(parId => {\n            var idx = newStnList[parId].children.indexOf(stnId);\n            if (children.length) {\n                newStnList[parId].children[idx] = children[0];\n            } else {\n                // Right dest\n                newStnList[parId].children.splice(idx, 1);\n            }\n\n            if (newStnList[parId].branch.right[1] === stnId) {\n                newStnList[parId].branch.right[1] = children[0];\n            }\n        });\n        children.forEach(childId => {\n            var idx = newStnList[childId].parents.indexOf(stnId);\n            if (parents.length) {\n                newStnList[childId].parents[idx] = parents[0];\n            } else {\n                // Left dest\n                newStnList[childId].parents.splice(idx, 1);\n            }\n\n            if (newStnList[childId].branch.left[1] === stnId) {\n                newStnList[childId].branch.left[1] = parents[0];\n            }\n        });\n    }\n\n    delete newStnList[stnId];\n\n    return newStnList;\n};\n","import React, { useContext, useMemo, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    List,\n    ListItem,\n    ListItemIcon,\n    Icon,\n    DialogActions,\n    Button,\n    makeStyles,\n    createStyles,\n    ListItemText,\n    Select,\n    Divider,\n} from '@material-ui/core';\nimport { formatStnName } from '../../utils';\nimport { getYShareMTR } from '../../methods';\nimport { addStation } from './utils';\nimport { CanvasContext, ParamContext } from '../../context';\n\nconst newBranchPossibleEnd = (prep: 'before' | 'after', pivot: string, stnList: StationDict) => {\n    let res: string[] = [];\n    if (prep === 'before') {\n        while (stnList[pivot].parents.length === 1) {\n            pivot = stnList[pivot].parents[0];\n            res.unshift(pivot);\n        }\n        res.pop();\n    } else {\n        while (stnList[pivot].children.length === 1) {\n            pivot = stnList[pivot].children[0];\n            res.push(pivot);\n        }\n        res.shift();\n    }\n    return res;\n};\n\nconst newStnPossibleLoc = (\n    prep: 'before' | 'after',\n    pivot: string,\n    stnList: { [stnId: string]: StationInfo }\n): [number, number, number, string[], string[]] => {\n    let deg = stnList[pivot] ? stnList[pivot][prep === 'before' ? 'parents' : 'children'].length : 0;\n    switch (deg) {\n        case 2:\n            // 1 -> 2\n            return [1, 1, 1, [], []];\n        case 1:\n            let y = getYShareMTR(pivot, stnList);\n            if (y === 0) {\n                // 1 -> 1\n                let state: string[] | 0 = newBranchPossibleEnd(prep, pivot, stnList);\n                state = state.length ? state : [];\n                return [1, 0, 0, state, state];\n                // [1,0,0,1,1];\n            } else if (y < 0) {\n                if (prep === 'before') {\n                    return [stnList[stnList[pivot].parents[0]].children.length - 1, 0, 1, [], []];\n                } else {\n                    return [stnList[stnList[pivot].children[0]].parents.length - 1, 0, 1, [], []];\n                }\n            } else {\n                if (prep === 'before') {\n                    return [stnList[stnList[pivot].parents[0]].children.length - 1, 1, 0, [], []];\n                } else {\n                    return [stnList[stnList[pivot].children[0]].parents.length - 1, 1, 0, [], []];\n                }\n            }\n    }\n    return [0, 0, 0, [], []];\n};\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        dialogContent: {\n            padding: 8,\n        },\n        select: {\n            width: 166,\n            marginLeft: 8,\n        },\n    })\n);\n\ninterface StationAddDialogProps {\n    open: boolean;\n    onClose: (action: 'close' | string) => void;\n}\n\nexport default React.memo(\n    function StationAddDialog(props: StationAddDialogProps) {\n        const { t } = useTranslation();\n        const classes = useStyles();\n\n        const { rmgStyle } = useContext(CanvasContext);\n        const { param, dispatch, tpo } = useContext(ParamContext);\n        const stnList = param.stn_list;\n\n        const allLocs = {\n            centre: t('stations.add.centre'),\n            upper: t('stations.add.upper'),\n            lower: t('stations.add.lower'),\n            newupper: t('stations.add.newUpper'),\n            newlower: t('stations.add.newLower'),\n        };\n\n        const [prep, setPrep] = React.useState('before' as 'before' | 'after');\n        const [pivot, setPivot] = React.useState(tpo[0]);\n        const [loc, setLoc] = React.useState(Object.keys(allLocs)[0]);\n        const [locOK, setLocOK] = React.useState(Array(5).fill(true) as boolean[]);\n\n        const [end, setEnd] = React.useState('');\n        const [endList, setEndList] = React.useState([] as string[]);\n\n        // Hook for updating loc list and end lists when pivot changed\n        const newLocs = useMemo(() => newStnPossibleLoc(prep, pivot, stnList), [prep, pivot, stnList]);\n        useEffect(\n            () => {\n                setLocOK(newLocs.map(p => (typeof p === 'number' ? Boolean(p) : Boolean(p.length))));\n                setEndList(newLocs[3]);\n            },\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [newLocs.toString()]\n        );\n\n        // Hook for updating loc selection (first available) when locOK list changed\n        useEffect(\n            () => setLoc(Object.keys(allLocs)[locOK.indexOf(true)]),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [locOK]\n        );\n\n        // Hook for updating end selection when end list changed\n        useEffect(() => {\n            if (endList.length === 0) return;\n            setEnd(endList[0]);\n        }, [endList]);\n\n        // Hook for setting new pivot in case of previous one being deleted\n        useEffect(\n            () => {\n                if (!(pivot in stnList)) setPivot(tpo[0]);\n            },\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [Object.keys(stnList).toString()]\n        );\n\n        const handleClick = (action: string) => {\n            if (action === 'close') {\n                props.onClose('close');\n            } else {\n                let [newId, res] = addStation(\n                    prep as 'before' | 'after',\n                    pivot,\n                    loc as 'centre' | 'upper' | 'lower' | 'newupper' | 'newlower',\n                    end as string,\n                    stnList\n                );\n                dispatch({ type: 'UPDATE_STATION_LIST', stnList: res });\n                props.onClose(newId);\n            }\n        };\n\n        return (\n            <Dialog open={props.open} onClose={() => handleClick('close')}>\n                <DialogTitle>{t('stations.add.title')}</DialogTitle>\n                <DialogContent className={classes.dialogContent}>\n                    <List component=\"div\" disablePadding>\n                        <ListItem>\n                            <ListItemIcon>\n                                <Icon>control_camera</Icon>\n                            </ListItemIcon>\n                            <ListItemText primary={t('stations.add.prep')} />\n                            <Select\n                                native\n                                onChange={e => setPrep(e.target.value as 'before' | 'after')}\n                                value={prep}\n                                className={classes.select}\n                            >\n                                {['before', 'after'].map(p => (\n                                    <option key={p} value={p}>\n                                        {t('stations.add.' + p)}\n                                    </option>\n                                ))}\n                            </Select>\n                        </ListItem>\n                        <Divider variant=\"middle\" />\n                        <ListItem>\n                            <ListItemIcon>\n                                <Icon>near_me</Icon>\n                            </ListItemIcon>\n                            <ListItemText primary={t('stations.add.pivot')} />\n                            <Select\n                                native\n                                onChange={e => setPivot(e.target.value as string)}\n                                value={pivot}\n                                className={classes.select}\n                            >\n                                {tpo.map(stnId => (\n                                    <option key={stnId} value={stnId}>\n                                        {formatStnName(stnList[stnId], rmgStyle)}\n                                    </option>\n                                ))}\n                            </Select>\n                        </ListItem>\n                        <Divider variant=\"middle\" />\n                        <ListItem>\n                            <ListItemIcon>\n                                <Icon>share</Icon>\n                            </ListItemIcon>\n                            <ListItemText primary={t('stations.add.loc')} />\n                            <Select\n                                native\n                                onChange={e => setLoc(e.target.value as string)}\n                                value={loc}\n                                className={classes.select}\n                            >\n                                {(Object.keys(allLocs) as (keyof typeof allLocs)[]).map((key, idx) => (\n                                    <option key={key} value={key} disabled={!locOK[idx]}>\n                                        {allLocs[key]}\n                                    </option>\n                                ))}\n                            </Select>\n                        </ListItem>\n                        <Divider\n                            variant=\"middle\"\n                            style={{ display: ['newupper', 'newlower'].includes(loc) ? 'flex' : 'none' }}\n                        />\n                        <ListItem style={{ display: ['newupper', 'newlower'].includes(loc) ? 'flex' : 'none' }}>\n                            <ListItemIcon>\n                                <Icon>undo</Icon>\n                            </ListItemIcon>\n                            <ListItemText primary={t('stations.add.end')} />\n                            <Select\n                                native\n                                onChange={e => setEnd(e.target.value as string)}\n                                value={end}\n                                className={classes.select}\n                            >\n                                {endList.map(stnId => (\n                                    <option key={stnId} value={stnId}>\n                                        {formatStnName(stnList[stnId], rmgStyle)}\n                                    </option>\n                                ))}\n                            </Select>\n                        </ListItem>\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => handleClick('close')} color=\"primary\">\n                        {t('dialog.cancel')}\n                    </Button>\n                    <Button onClick={() => handleClick('accept')} color=\"primary\" autoFocus>\n                        {t('dialog.ok')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    },\n    (prevProps, nextProps) => prevProps.open === nextProps.open\n);\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    Tabs,\n    Tab,\n    Icon,\n    Typography,\n    CircularProgress,\n    DialogActions,\n    Button,\n    useTheme,\n    useMediaQuery,\n    makeStyles,\n    createStyles,\n    Paper,\n} from '@material-ui/core';\n\nconst NameTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsName\" */ './name-tab'));\nconst InterchangeTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsInterchange\" */ './interchange-tab'));\nconst BranchTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsBranch\" */ './branch-tab'));\nconst MoreTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsMore\" */ './more-tab'));\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        tab: {\n            padding: '6px 24px',\n            height: 48,\n            minWidth: 'calc(100% / 4)',\n            '& .MuiTab-wrapper': {\n                flexDirection: 'row',\n            },\n            '&.MuiTab-labelIcon': {\n                minHeight: 'unset',\n                '& .MuiTab-wrapper': {\n                    '& > *:first-child': {\n                        marginBottom: 0,\n                    },\n                    '& > *:not(first-child)': {\n                        paddingLeft: 8,\n                    },\n                },\n            },\n        },\n    })\n);\n\ninterface StationEditDialogProps {\n    onClose: () => void;\n    open: boolean;\n    stnId: string;\n}\n\nexport default function StationEditDialog(props: StationEditDialogProps) {\n    const { t } = useTranslation();\n\n    const [tabIndex, setTabIndex] = React.useState(0);\n\n    const classes = useStyles();\n\n    const tabNav = React.useMemo(\n        () => (\n            <Tabs\n                value={tabIndex}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                onChange={(_, val) => setTabIndex(val)}\n                variant=\"scrollable\"\n                scrollButtons=\"off\"\n            >\n                {[\n                    ['name', 'title'],\n                    ['interchange', 'transfer_within_a_station'],\n                    ['branch', 'share'],\n                    ['more', 'more_horiz'],\n                ].map((val, i) => (\n                    <Tab\n                        label={<span>{t('stations.edit.tab.' + val[0])}</span>}\n                        icon={<Icon>{val[1]}</Icon>}\n                        key={i}\n                        className={classes.tab}\n                    />\n                ))}\n            </Tabs>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [tabIndex, classes.tab]\n    );\n\n    return (\n        <DialogWrapper {...props}>\n            {tabNav}\n            <Typography component=\"div\" role=\"tabpanel\">\n                <React.Suspense fallback={<CircularProgress />}>\n                    {(idx => {\n                        switch (idx) {\n                            case 0:\n                                return <NameTab stnId={props.stnId} />;\n                            case 1:\n                                return <InterchangeTab stnId={props.stnId} />;\n                            case 2:\n                                return <BranchTab stnId={props.stnId} />;\n                            case 3:\n                                return <MoreTab stnId={props.stnId} />;\n                        }\n                    })(tabIndex)}\n                </React.Suspense>\n            </Typography>\n        </DialogWrapper>\n    );\n}\n\nconst DialogWrapper = (props: { children: React.ReactNode } & StationEditDialogProps) => {\n    const { t } = useTranslation();\n\n    const theme = useTheme();\n    const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\n    const isDialog = useMediaQuery(theme.breakpoints.down('sm'));\n\n    return isDialog ? (\n        <Dialog onClose={props.onClose} open={props.open} fullScreen={isMobile}>\n            <DialogTitle>{t('stations.edit.title')}</DialogTitle>\n            <DialogContent dividers style={{ padding: '0 16px' }}>\n                {props.children}\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose} color=\"primary\">\n                    {t('dialog.done')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    ) : (\n        <Paper>{props.children}</Paper>\n    );\n};\n","import Dialog from './dialog';\n\nexport default Dialog;","import React, { useContext, useState, memo } from 'react';\nimport { useTranslation, Trans } from 'react-i18next';\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core';\nimport { ParamContext } from '../../context';\nimport { removeStation } from './utils';\n\ninterface Props {\n    open: boolean;\n    onClose: () => void;\n}\n\nexport default function StationDeleteDialog(props: Props & { stnId: string }) {\n    const { t } = useTranslation();\n\n    const { param, dispatch } = useContext(ParamContext);\n    const stnList = param.stn_list;\n\n    const [isError, setIsError] = useState(false);\n\n    const handleClick = (action: 'close' | 'accept') => () => {\n        if (action === 'accept') {\n            let res = removeStation(props.stnId, stnList);\n            if (res === false) {\n                setIsError(true);\n            } else {\n                if (param.current_stn_idx === props.stnId) {\n                    let newCurrentId = Object.keys(res).filter(id => !['linestart', 'lineend'].includes(id))[0];\n                    dispatch({ type: 'SET_CURRENT_STATION', stnId: newCurrentId });\n                }\n                dispatch({ type: 'UPDATE_STATION_LIST', stnList: res });\n            }\n        }\n        props.onClose();\n    };\n    return (\n        <>\n            <Dialog open={props.open} onClose={handleClick('close')}>\n                <DialogTitle>{t('stations.remove.title')}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        <Trans i18nKey=\"stations.remove.msg\">{{ name: stnList[props.stnId]?.name.join() }}</Trans>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClick('close')} color=\"primary\" autoFocus>\n                        {t('dialog.cancel')}\n                    </Button>\n                    <Button onClick={handleClick('accept')} color=\"primary\">\n                        {t('stations.remove.button')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <ErrorDialog open={isError} onClose={() => setIsError(false)} />\n        </>\n    );\n}\n\nconst ErrorDialog = memo(\n    (props: Props) => {\n        const { t } = useTranslation();\n        return (\n            <Dialog open={props.open} onClose={props.onClose}>\n                <DialogTitle>{t('stations.remove.error.title')}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>{t('stations.remove.error.msg')}</DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.onClose} color=\"primary\" autoFocus>\n                        {t('dialog.ok')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    },\n    (prevProps, nextProps) => prevProps.open === nextProps.open\n);\n","import React, { useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Fab,\n    Tooltip,\n    Icon,\n    Menu,\n    MenuItem,\n    createStyles,\n    makeStyles,\n    ListItemText,\n    ListItemIcon,\n} from '@material-ui/core';\nimport { CanvasContext } from '../../context';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        fab: {\n            position: 'fixed',\n            right: theme.spacing(2),\n            bottom: theme.spacing(2),\n        },\n    })\n);\n\ninterface Props {\n    onAction: (action: string) => void;\n}\n\nconst StationFabs = React.memo(\n    (props: Props) => {\n        const { t } = useTranslation();\n        const { rmgStyle } = useContext(CanvasContext);\n        const classes = useStyles();\n        const [fabEl, setFabEl] = React.useState<null | HTMLElement>(null);\n\n        const handleAction = (action: string) => () => {\n            setFabEl(null);\n            props.onAction(action);\n        };\n\n        return (\n            <>\n                <Tooltip title={t('stations.fabs.tooltip')} aria-label=\"options\">\n                    <Fab color=\"primary\" className={classes.fab} onClick={e => setFabEl(e.target as HTMLElement)}>\n                        <Icon>more_vert</Icon>\n                    </Fab>\n                </Tooltip>\n\n                <Menu anchorEl={fabEl} open={Boolean(fabEl)} onClose={() => setFabEl(null)}>\n                    <MenuItem onClick={handleAction('add')}>\n                        <ListItemIcon>\n                            <Icon>add_box</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('stations.fabs.add')} />\n                    </MenuItem>\n                    <MenuItem onClick={handleAction('reverse')}>\n                        <ListItemIcon>\n                            <Icon>cached</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('stations.fabs.reverse')} />\n                    </MenuItem>\n                    {rmgStyle === 'gzmtr' && (\n                        <MenuItem onClick={handleAction('autonum')}>\n                            <ListItemIcon>\n                                <Icon>filter_1</Icon>\n                            </ListItemIcon>\n                            <ListItemText primary={t('design.autoNum.button')} />\n                        </MenuItem>\n                    )}\n                </Menu>\n            </>\n        );\n    },\n    () => true\n);\n\nexport default StationFabs;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core';\nimport { ParamContext } from '../../context';\n\ninterface Props {\n    open: boolean;\n    onClose: () => void;\n}\n\nconst AutoNumDialog = (props: Props) => {\n    const { t } = useTranslation();\n\n    const { dispatch, branches } = React.useContext(ParamContext);\n\n    const handleClick = (action: 'ascend' | 'descend') => {\n        let branch0 = branches[0];\n        branch0.forEach((stnId, i) => {\n            let num: string;\n            if (action === 'ascend') {\n                num = i.toString().padStart(2, '0');\n            } else {\n                num = (branch0.length - 1 - i).toString().padStart(2, '0');\n            }\n            dispatch({ type: 'UPDATE_STATION_NUM', stnId, num });\n            // (window.myLine as RMGLineGZ).updateStnNum(stnId, num);\n        });\n        // props.paramUpdate('stn_list', getParams().stn_list);\n        props.onClose();\n    };\n\n    return React.useMemo(\n        () => (\n            <Dialog onClose={props.onClose} open={props.open}>\n                <DialogTitle>{t('design.autoNum.title')}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>{t('design.autoNum.msg')}</DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.onClose} color=\"primary\" autoFocus>\n                        {t('dialog.cancel')}\n                    </Button>\n                    <Button onClick={() => handleClick('ascend')} color=\"primary\">\n                        {t('design.autoNum.ascend')}\n                    </Button>\n                    <Button onClick={() => handleClick('descend')} color=\"primary\">\n                        {t('design.autoNum.descend')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.open]\n    );\n};\n\nexport default AutoNumDialog;\n","import React, { useState, useContext } from 'react';\nimport { Grid, makeStyles, createStyles } from '@material-ui/core';\nimport { ParamContext, CanvasContext } from '../../context';\n\nimport StationList from './station-list';\nimport StationAddDialog from './add-diag';\nimport StationEditDialog from './edit-diag';\nimport StationDeleteDialog from './delete-diags';\nimport StationFabs from './fabs';\nimport AutoNumDialog from './auto-num-diag';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        gridContainer: {\n            height: '100%',\n            overflow: 'hidden',\n        },\n        gridItem: {\n            height: '100%',\n            overflow: 'auto',\n        },\n    })\n);\n\nconst PanelStations2 = () => {\n    const classes = useStyles();\n\n    const { rmgStyle } = useContext(CanvasContext);\n    const { dispatch } = useContext(ParamContext);\n\n    const [stnSelected, setStnSelected] = useState('');\n    const [isOpen, setIsOpen] = useState(false);\n\n    const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n    const [isAutoNumDialogOpen, setIsAutoNumDialogOpen] = useState(false);\n\n    const [stnToRemove, setStnToRemove] = useState('');\n    const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n\n    const handleAction = (stnId: string) => (action: 'edit' | 'remove') => {\n        if (action === 'edit') {\n            setStnSelected(stnId);\n            setIsOpen(true);\n        }\n        if (action === 'remove') {\n            if (stnSelected === stnId) setStnSelected('');\n            setStnToRemove(stnId);\n            setIsDeleteDialogOpen(true);\n        }\n    };\n\n    const fabsAction = (action: string) => {\n        if (action === 'add') {\n            setIsAddDialogOpen(true);\n        }\n        if (action === 'reverse') {\n            dispatch({ type: 'REVERSE_STATIONS' });\n        }\n        if (action === 'autonum') {\n            setIsAutoNumDialogOpen(true);\n        }\n    };\n\n    const stnAddDialogClose = (action: 'close' | string) => {\n        setIsAddDialogOpen(false);\n        if (action !== 'close') {\n            setStnSelected(action);\n            setIsOpen(true);\n        }\n    };\n\n    return (\n        <>\n            <Grid container spacing={1} className={classes.gridContainer}>\n                <Grid item xs={12} md={4} className={classes.gridItem}>\n                    <StationList selectedId={stnSelected} onAction={handleAction} />\n                </Grid>\n                <Grid item xs={8} className={classes.gridItem}>\n                    {stnSelected && (\n                        <StationEditDialog open={isOpen} stnId={stnSelected} onClose={() => setIsOpen(false)} />\n                    )}\n                </Grid>\n            </Grid>\n\n            <StationFabs onAction={fabsAction} />\n\n            <StationAddDialog open={isAddDialogOpen} onClose={stnAddDialogClose} />\n            <StationDeleteDialog\n                open={isDeleteDialogOpen}\n                onClose={() => setIsDeleteDialogOpen(false)}\n                stnId={stnToRemove}\n            />\n            {rmgStyle === 'gzmtr' && (\n                <AutoNumDialog open={isAutoNumDialogOpen} onClose={() => setIsAutoNumDialogOpen(false)} />\n            )}\n        </>\n    );\n};\n\nexport default PanelStations2;\n","import Panel from './panel2';\n\nexport default Panel;\n"],"sourceRoot":""}