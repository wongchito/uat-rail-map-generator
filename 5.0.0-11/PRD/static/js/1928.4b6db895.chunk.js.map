{"version":3,"file":"static/js/1928.4b6db895.chunk.js","mappings":"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","sources":["svgs/indoor/station-shmetro.tsx","svgs/railmap/main/loop/loop-shmetro.tsx","svgs/railmap/main/station/station-shmetro.tsx","svgs/railmap/methods/share.ts","svgs/railmap/methods/shmetro-loop.ts"],"sourcesContent":["import React from 'react';\nimport { InterchangeInfo, Name, Services } from '../../constants/constants';\nimport { useAppSelector } from '../../redux';\n\nexport type NameDirection = 'upward' | 'downward' | 'left' | 'right';\n\ninterface Props {\n    stnId: string;\n    nameDirection: NameDirection;\n    services: Services[];\n}\n\nexport const StationSHMetro = (props: Props) => {\n    const { stnId, nameDirection, services } = props;\n    const param = useAppSelector(store => store.param);\n    const stnInfo = param.stn_list[stnId];\n\n    let stationIconStyle = '';\n    if (stnInfo.services.length === 3) stationIconStyle = 'direct_indoor_sh';\n    else if (stnInfo.services.length === 2) stationIconStyle = 'express_indoor_sh';\n    else if ([...stnInfo.transfer.info[0], ...(stnInfo.transfer.info[1] || [])].length > 0)\n        stationIconStyle = 'int2_indoor_sh';\n    else stationIconStyle = 'stn_indoor_sh';\n\n    const dr = nameDirection === 'left' || nameDirection === 'right' ? 90 : 0;\n    return (\n        <>\n            <StationNameGElement\n                name={stnInfo.name}\n                infos={stnInfo.transfer.info}\n                nameDirection={nameDirection}\n                services={services}\n            />\n            <use xlinkHref={`#${stationIconStyle}`} stroke=\"var(--rmg-theme-colour)\" transform={`rotate(${dr})`} />\n            {/* This should be in IntBoxGroupProps, put here because the station icon will cover this */}\n            {stnInfo.services.length > 1 && (\n                <text className=\"rmg-name__zh\" writingMode=\"tb\" fontSize=\"60%\" dy=\"-12\">\n                    {`大站车${stnInfo.services.length > 2 ? ' 直达车' : ''}停靠`}\n                </text>\n            )}\n        </>\n    );\n};\n\nexport default StationSHMetro;\n\ninterface StationNameGElementProps {\n    name: Name;\n    infos: InterchangeInfo[][];\n    nameDirection: NameDirection;\n    services: Services[];\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const { name, infos, nameDirection, services } = props;\n    const dy = { upward: 60, downward: -30, left: 0, right: 0 }[nameDirection];\n    const osi_dx = { upward: 0, downward: 0, left: 85, right: -85 }[nameDirection];\n    const osi_dy = { upward: -185, downward: 150, left: -30, right: -30 }[nameDirection];\n    const osysi_dx = (infos: InterchangeInfo[][]) =>\n        ({\n            upward: 0,\n            downward: 0,\n            left: infos[0].length + infos[1].length !== 0 ? 85 : 25,\n            right: infos[0].length + infos[1].length !== 0 ? -85 : -25,\n        }[nameDirection]);\n    const osysi_dy = (infos: InterchangeInfo[][], nameDirection: NameDirection, services: Services[]) =>\n        ({\n            upward: infos[1]?.length ? -210 : infos[0].length ? -180 : -100,\n            downward: (infos[1]?.length ? 190 : infos[0].length ? 160 : 75) + (services.length === 3 ? 40 : 0),\n            left: infos[1]?.length ? -60 : infos[0].length ? -30 : 0,\n            right: infos[1]?.length ? -60 : infos[0].length ? -30 : 0,\n        }[nameDirection]);\n    return (\n        <g transform={`translate(0,${dy})`}>\n            {nameDirection === 'upward' || nameDirection === 'downward' ? (\n                <>\n                    <line\n                        x1={-30}\n                        x2={30}\n                        y1={nameDirection === 'upward' ? -23 : -10}\n                        y2={nameDirection === 'upward' ? -23 : -10}\n                        stroke=\"black\"\n                    />\n                    <line\n                        y1={nameDirection === 'upward' ? -23 : -10}\n                        y2={nameDirection === 'upward' ? -23 - 25 : 20}\n                        stroke=\"black\"\n                    />\n                </>\n            ) : (\n                <>\n                    <line\n                        x1={nameDirection === 'left' ? -50 : 15}\n                        x2={nameDirection === 'left' ? -15 : 50}\n                        y1={0}\n                        y2={0}\n                        stroke=\"black\"\n                    />\n                    <line\n                        x1={nameDirection === 'left' ? -50 : 50}\n                        x2={nameDirection === 'left' ? -50 : 50}\n                        y1={-30}\n                        y2={30}\n                        stroke=\"black\"\n                    />\n                </>\n            )}\n\n            {[...infos[0], ...(infos[1] || [])].length > 0 && (\n                <IntBoxGroup\n                    intInfos={[...infos[0], ...(infos[1] || [])]}\n                    arrowDirection={nameDirection}\n                    services={services}\n                />\n            )}\n\n            <StationName stnName={name} nameDirection={nameDirection} fill=\"black\" />\n\n            {infos[1]?.length > 0 && (\n                <g transform={`translate(${osi_dx},${osi_dy})`}>\n                    <OSIText osiInfos={infos[1]} nameDirection={nameDirection} />\n                </g>\n            )}\n\n            {infos[2]?.length > 0 && (\n                <g transform={`translate(${osysi_dx(infos)},${osysi_dy(infos, nameDirection, services)})`}>\n                    <OSysIText osysiInfos={infos[2]} nameDirection={nameDirection} />\n                </g>\n            )}\n        </g>\n    );\n};\n\nconst StationName = React.forwardRef(\n    (\n        props: { stnName: Name; nameDirection: NameDirection } & React.SVGProps<SVGGElement>,\n        ref: React.Ref<SVGGElement>\n    ) => {\n        const { stnName, nameDirection, ...others } = props;\n        const name = stnName[0].split('\\\\');\n        const nameENLn = stnName[1].split('\\\\').length;\n        const dx = { upward: 0, downward: 0, left: -60, right: 60 }[nameDirection];\n        const dy = {\n            upward: -2,\n            downward: -30 - 12 * (nameENLn - 1),\n            left: -10 * (nameENLn - 1),\n            right: -10 * (nameENLn - 1),\n        }[nameDirection];\n        const anchor = { upward: 'middle', downward: 'middle', left: 'end', right: 'start' }[nameDirection];\n\n        return (\n            <g ref={ref} {...others} textAnchor={anchor} transform={`translate(${dx},${dy})`}>\n                {React.useMemo(\n                    () => (\n                        <>\n                            {name.map((txt, i, array) => (\n                                <text\n                                    key={i}\n                                    className=\"rmg-name__zh\"\n                                    dy={nameDirection === 'upward' ? 16 * i : (array.length - 1 - i) * -16}\n                                >\n                                    {txt}\n                                </text>\n                            ))}\n                            <g fontSize={9.6}>\n                                {stnName[1].split('\\\\').map((txt, i) => (\n                                    <text\n                                        key={i}\n                                        className=\"rmg-name__en\"\n                                        dy={\n                                            12 * (i + 1) +\n                                            (nameDirection === 'upward' ? (name.length > 1 ? name.length * 7.5 : 0) : 0)\n                                        }\n                                    >\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </>\n                    ),\n                    // eslint-disable-next-line react-hooks/exhaustive-deps\n                    [...stnName]\n                )}\n            </g>\n        );\n    }\n);\n\ninterface IntBoxGroupProps {\n    intInfos: InterchangeInfo[];\n    arrowDirection: NameDirection;\n    services: Services[];\n}\n\nconst IntBoxGroup = (props: IntBoxGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, arrowDirection, services } = props;\n\n    // name each different linearGradient that will fill the arrow\n    const intNameId = intInfos.map(intInfo => intInfo[2]).reduce((name, color) => name + color, '');\n\n    // get the interchange line names\n    const lineNames = [\n        intInfos\n            .filter(intInfo => intInfo[4].match(/^\\d+.*$/))\n            .map(intInfo => intInfo[4].replace(/^(\\d+)(.*)$/, '$1'))\n            .join('，')\n            .concat('号线'),\n        intInfos\n            .filter(intInfo => !intInfo[4].match(/^\\d+.*$/))\n            .map(intInfo => intInfo[4])\n            .join('，'),\n    ]\n        .filter(name => name && name !== '号线')\n        .join('，');\n    const lineNamesEn = [\n        'Line '.concat(\n            intInfos\n                .filter(intInfo => intInfo[5].match(/^L|line$/))\n                .map(intInfo => intInfo[5].replace('Line', '').replace('line', '').trim())\n                .join(',')\n        ),\n        intInfos\n            .filter(intInfo => !intInfo[5].match(/^L|line$/))\n            .map(intInfo => intInfo[5])\n            .join('，'),\n    ]\n        .filter(name => name && name !== 'Line ')\n        .join(',');\n\n    // for services contains three level (normal, express, direct)\n    // additional length is required on transfer arrow otherwise\n    // the station icon will be longer than the arrow itself\n    const arrowLength = services.length === 3 ? 80 : 45;\n    const transfer_dy = { upward: -145, downward: 125 + (services.length === 3 ? 40 : 0), left: 7, right: 7 }[\n        arrowDirection\n    ];\n\n    // bunch of constants for all four directions\n    const arrow_dx = { upward: 0, downward: 0, left: 20, right: -20 }[arrowDirection];\n    const arrow_dy = { upward: -74, downward: 44, left: 0, right: 0 }[arrowDirection];\n    const arrow_dr = { upward: 0, downward: 180, left: 90, right: -90 }[arrowDirection];\n    const transfer_dx = { upward: 0, downward: 0, left: 85, right: -85 }[arrowDirection];\n    const transfer_anchor = { upward: 'middle', downward: 'middle', left: 'start', right: 'end' }[arrowDirection];\n    return (\n        <g>\n            <path\n                id=\"int_indoor_arrow_sh\"\n                stroke=\"var(--rmg-black)\"\n                strokeWidth={1}\n                transform={`translate(${arrow_dx},${arrow_dy})rotate(${arrow_dr})`}\n                fill={intInfos.length === 1 ? intInfos[0][2] : `url(#grad${intNameId})`}\n                d={`M -7.5,0 v -${arrowLength} h -7.5 l 15,-15 l 15,15 h -7.5 v ${arrowLength} Z`}\n            />\n\n            {intInfos.length > 1 && (\n                <>\n                    <linearGradient\n                        id={`grad${intNameId}`}\n                        y1=\"0\"\n                        y2=\"0\"\n                        x1={arrowDirection === 'upward' ? '25%' : '75%'}\n                        x2={arrowDirection === 'upward' ? '75%' : '25%'}\n                    >\n                        {intInfos.map((intInfo, i) => (\n                            <React.Fragment key={i}>\n                                {/* more about React.Fragment on https://stackoverflow.com/a/59390967 */}\n                                <stop // start from\n                                    offset={`${(100 / intInfos.length) * (i + 0)}%`}\n                                    stopColor={intInfo[2]}\n                                />\n                                <stop // to\n                                    offset={`${(100 / intInfos.length) * (i + 1)}%`}\n                                    stopColor={intInfo[2]}\n                                />\n                            </React.Fragment>\n                        ))}\n                    </linearGradient>\n\n                    {/* a range inplementation [0, 1, 2 ... intInfos.length - 1] */}\n                    {/* {[...Array(intInfos.length - 1).keys()].map(i => (<line\n                        x1={-7.5 + (15 / intInfos.length) * (i + 1)}\n                        x2={-7.5 + (15 / intInfos.length) * (i + 1)}\n                        y1=\"-74\"\n                        y2={-104 - 7.5 - 7.5 / (intInfos.length - 1) * (i+1)}\n                        stroke=\"black\"\n                    />))} */}\n                </>\n            )}\n\n            <g transform={`translate(${transfer_dx},${transfer_dy})`} textAnchor={`${transfer_anchor}`}>\n                <text className=\"rmg-name__zh\" dy={-7}>\n                    {`换乘${lineNames}`}\n                </text>\n                <text className=\"rmg-name__en\" dy={5} fontSize={9.6}>\n                    {`Interchange ${lineNamesEn}`}\n                </text>\n            </g>\n        </g>\n    );\n};\n\nconst OSIText = (props: { osiInfos: InterchangeInfo[]; nameDirection: NameDirection }) => {\n    const anchor = { upward: 'middle', downward: 'middle', left: 'start', right: 'end' }[props.nameDirection];\n    return React.useMemo(\n        () => (\n            <g textAnchor={`${anchor}`} fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {`换乘${props.osiInfos.map(info => info[4]).join('，')}`}\n                </text>\n                <text className=\"rmg-name__zh\" dy={5}>\n                    仅限公共交通卡\n                </text>\n                <text className=\"rmg-name__en\" dy={12.5} fontSize=\"75%\">\n                    Only for Public Transportation Card\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.osiInfos.toString(), props.nameDirection]\n    );\n};\n\nconst OSysIText = (props: { osysiInfos: InterchangeInfo[]; nameDirection: NameDirection }) => {\n    const anchor = { upward: 'middle', downward: 'middle', left: 'start', right: 'end' }[props.nameDirection];\n    return React.useMemo(\n        () => (\n            <g textAnchor={`${anchor}`}>\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {`转乘${props.osysiInfos.map(info => info[4]).join('，')}`}\n                </text>\n                <text className=\"rmg-name__en\" dy={7.5} fontSize={9.6}>\n                    {`To ${props.osysiInfos.map(info => info[5]).join(', ')}`}\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.osysiInfos.toString(), props.nameDirection]\n    );\n};\n","import React from 'react';\nimport StationSHMetro from '../station/station-shmetro';\nimport { NameDirection, StationSHMetro as StationSHMetroIndoor } from '../../../indoor/station-shmetro';\nimport { Services } from '../../../../constants/constants';\nimport { useAppSelector } from '../../../../redux';\nimport { split_loop_stns, LoopStns, get_xshares_yshares_of_loop } from '../../methods/shmetro-loop';\n\nconst LoopSHMetro = (props: { bank_angle: boolean }) => {\n    const { bank_angle } = props;\n    const { branches } = useAppSelector(store => store.helper);\n    const {\n        current_stn_idx: current_stn_id,\n        svgWidth: svg_width,\n        svg_height,\n        padding,\n        direction,\n        loop_info,\n    } = useAppSelector(store => store.param);\n    const { left_and_right_factor, bottom_factor } = loop_info;\n\n    const loopline = branches[0].filter(stn_id => !['linestart', 'lineend'].includes(stn_id));\n\n    const loop_stns = split_loop_stns(loopline, current_stn_id, bottom_factor, left_and_right_factor);\n\n    const { x_shares, y_shares } = get_xshares_yshares_of_loop(loopline, loop_stns);\n    loopline.forEach(stn_id => {\n        // normalization\n        x_shares[stn_id] = (x_shares[stn_id] + 1) / 2;\n        y_shares[stn_id] = (y_shares[stn_id] + 1) / 2;\n    });\n\n    const width = bank_angle ? svg_width.railmap : svg_width.indoor;\n    const line_xs = [\n        (width * padding) / 100 + (bank_angle ? 50 : 0),\n        width * (1 - padding / 100) - (bank_angle ? 50 : 0),\n    ];\n    const xs = Object.keys(x_shares).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: line_xs[0] + x_shares[cur] * (line_xs[1] - line_xs[0]),\n        }),\n        {} as typeof x_shares\n    );\n    const line_ys = [175, svg_height - 75 - (bank_angle ? 0 : 125)] as [number, number];\n    const ys = Object.keys(x_shares).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: line_ys[0] + y_shares[cur] * (line_ys[1] - line_ys[0]),\n        }),\n        {} as typeof y_shares\n    );\n\n    // bank the right, bottom, left side if bank_angle\n    const bank = (bank_angle ? { l: 1, r: -1 }[direction] : 0) as -1 | 0 | 1;\n    [...loop_stns.right, ...loop_stns.left].forEach(stn_id => {\n        xs[stn_id] -= (ys[stn_id] - line_ys[0]) * bank;\n    });\n    loop_stns.bottom.forEach(stn_id => {\n        xs[stn_id] -= (line_ys[1] - line_ys[0]) * bank;\n    });\n\n    const path = _linePath(loop_stns, xs, ys, bank, line_ys);\n\n    return (\n        <>\n            <g id=\"loop\" transform={`translate(${bank * 150},0)`}>\n                <path stroke=\"var(--rmg-theme-colour)\" strokeWidth={12} fill=\"none\" d={path} strokeLinejoin=\"round\" />\n                <LoopStationGroup bank_angle={bank_angle} loop_stns={loop_stns} xs={xs} ys={ys} />\n            </g>\n        </>\n    );\n};\n\nexport default LoopSHMetro;\n\nexport const _linePath = (\n    loop_stns: LoopStns,\n    xs: { [stn_id: string]: number },\n    ys: { [stn_id: string]: number },\n    bank: -1 | 0 | 1,\n    line_ys: [number, number] // get Y_BOTTOM when no stations at bottom\n) => {\n    const [Y_TOP, Y_BOTTOM] = line_ys;\n\n    // calculate the corner point when two sides needs to be joined\n    const corner = (prev_x: number, prev_y: number, x: number, y: number, side: keyof LoopStns): [number, number] => {\n        return {\n            right: [x + (y - Y_TOP) * bank, prev_y] as [number, number],\n            bottom: [prev_x - (Y_BOTTOM - prev_y) * bank, y] as [number, number],\n            left: [x - (Y_BOTTOM - y) * bank, prev_y] as [number, number],\n            top: [prev_x + (prev_y - Y_TOP) * bank, y] as [number, number],\n        }[side];\n    };\n\n    const stn_pos = [] as [number, number][];\n    loop_stns.top.forEach(stn_id => {\n        stn_pos.push([xs[stn_id], ys[stn_id]]);\n    });\n    (['right', 'bottom', 'left'] as Exclude<keyof LoopStns, 'top'>[]).forEach(side => {\n        if (loop_stns[side].length > 0) {\n            stn_pos.push(\n                corner(stn_pos.at(-1)![0], stn_pos.at(-1)![1], xs[loop_stns[side][0]], ys[loop_stns[side][0]], side)\n            );\n            loop_stns[side].forEach(stn_id => {\n                stn_pos.push([xs[stn_id], ys[stn_id]]);\n            });\n        } else {\n            // simulate a fake station on the side\n            // this station in fact lays on the previous side with an extra_e dx\n            const extra_e = 100;\n            const extra = {\n                right: [stn_pos.at(-1)![0] + extra_e, stn_pos.at(-1)![1]] as [number, number],\n                bottom: [\n                    stn_pos.at(-1)![0] + (Y_BOTTOM - stn_pos.at(-1)![1]) * -bank,\n                    stn_pos.at(-1)![1] + (Y_BOTTOM - stn_pos.at(-1)![1]),\n                ] as [number, number],\n                left: [stn_pos.at(-1)![0] - extra_e, stn_pos.at(-1)![1]] as [number, number],\n            };\n            stn_pos.push(extra[side]);\n        }\n    });\n    stn_pos.push(corner(stn_pos.at(-1)![0], stn_pos.at(-1)![1], xs[loop_stns.top[0]], ys[loop_stns.top[0]], 'top'));\n\n    const path = stn_pos\n        .slice(1)\n        .map(([x, y]) => `L${x},${y}`)\n        .join(' ');\n    return `M${stn_pos[0][0]},${stn_pos[0][1]} ${path} Z`;\n};\n\nconst LoopStationGroup = (props: {\n    bank_angle: boolean;\n    loop_stns: LoopStns;\n    xs: {\n        [k: string]: number;\n    };\n    ys: {\n        [k: string]: number;\n    };\n}) => {\n    const { bank_angle, loop_stns, xs, ys } = props;\n\n    const railmap_bank: Record<keyof LoopStns, -1 | 0 | 1> = {\n        top: 0,\n        bottom: 0,\n        left: -1,\n        right: 1,\n    };\n    const railmap_direction: Record<keyof LoopStns, 'l' | 'r' | undefined> = {\n        left: 'r',\n        right: 'l',\n        top: undefined,\n        bottom: undefined,\n    };\n    const indoor_name_direction = (side: keyof LoopStns, i: number) =>\n        ({\n            top: i % 2 === 0 ? 'upward' : 'downward',\n            bottom: i % 2 === 0 ? 'upward' : 'downward',\n            left: 'left',\n            right: 'right',\n        }[side] as NameDirection);\n    return (\n        <g id=\"loop_stations\">\n            {bank_angle\n                ? Object.entries(loop_stns).map(([side, stn_ids]) =>\n                      stn_ids.map(stn_id => (\n                          <g key={stn_id} transform={`translate(${xs[stn_id]},${ys[stn_id]})`}>\n                              <StationSHMetro\n                                  stnId={stn_id}\n                                  stnState={1}\n                                  bank={railmap_bank[side as keyof LoopStns]}\n                                  direction={railmap_direction[side as keyof LoopStns]}\n                              />\n                          </g>\n                      ))\n                  )\n                : Object.entries(loop_stns).map(([side, stn_ids]) =>\n                      stn_ids.map((stn_id, i) => (\n                          <g key={stn_id} transform={`translate(${xs[stn_id]},${ys[stn_id]})`}>\n                              <StationSHMetroIndoor\n                                  stnId={stn_id}\n                                  nameDirection={indoor_name_direction(side as keyof LoopStns, i)}\n                                  services={[Services.local]}\n                              />\n                          </g>\n                      ))\n                  )}\n        </g>\n    );\n};\n","import React, { useRef, memo } from 'react';\nimport { InterchangeInfo, Name, Facilities, ColourHex } from '../../../../constants/constants';\nimport { useAppSelector } from '../../../../redux';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n    color?: ColourHex; // Control the station color if coline is in effect.\n    bank?: -1 | 0 | 1; // Loopline requires station element to be horizontal. Default to 0 (no bank to other side).\n    direction?: 'l' | 'r'; // Loopline requires station element to change direction. Default to current param.\n}\n\nconst StationSHMetro = (props: Props) => {\n    const { stnId, stnState, color, bank: bank_, direction: direction_override } = props;\n    const { direction: direction_param, info_panel_type, stn_list } = useAppSelector(store => store.param);\n    const stnInfo = stn_list[stnId];\n    const direction = direction_override ?? direction_param;\n\n    // shift station name if the line bifurcate here\n    const branchNameDX =\n        ([...stnInfo.branch.left, ...stnInfo.branch.right].length ? 8 + 12 * stnInfo.name[1].split('\\\\').length : 0) *\n        (direction === 'r' ? -1 : 1);\n\n    let stationIconStyle = '';\n    let stationIconColor: { [pos: string]: string } = {};\n    if (info_panel_type === 'sh2020') {\n        if (stnInfo.services.length === 3) stationIconStyle = 'stn_sh_2020_direct';\n        else if (stnInfo.services.length === 2) stationIconStyle = 'stn_sh_2020_express';\n        else stationIconStyle = 'stn_sh_2020';\n        stationIconColor.fill = stnState === -1 ? 'gray' : color ? color : 'var(--rmg-theme-colour)';\n    } else {\n        // param.info_panel_type === 'sh' or others (from other styles)\n        if (stnInfo.services.length === 3) stationIconStyle = 'direct_sh';\n        else if (stnInfo.services.length === 2) stationIconStyle = 'express_sh';\n        else if ([...stnInfo.transfer.info[0], ...(stnInfo.transfer.info[1] || [])].length > 0)\n            stationIconStyle = 'int2_sh';\n        else stationIconStyle = 'stn_sh';\n        stationIconColor.stroke = stnState === -1 ? 'gray' : color ? color : 'var(--rmg-theme-colour)';\n    }\n\n    const bank = bank_ ?? 0;\n    const dx = (direction === 'l' ? 6 : -6) + branchNameDX + bank * 30;\n    const dy = (info_panel_type === 'sh2020' ? -20 : -6) + Math.abs(bank) * (info_panel_type === 'sh2020' ? 25 : 11);\n    const dr = bank ? 0 : direction === 'l' ? -45 : 45;\n    return (\n        <>\n            <use\n                xlinkHref={`#${stationIconStyle}`}\n                {...stationIconColor} // different styles use either `fill` or `stroke`\n                // sh and sh2020 have different headings of int_sh, so -1 | 1 is multiplied\n                transform={\n                    `translate(${bank * (info_panel_type === 'sh2020' ? 5 : 0)},0)` +\n                    `rotate(${bank * 90 * (info_panel_type === 'sh2020' ? 1 : -1)})`\n                }\n            />\n            <g transform={`translate(${dx},${dy})rotate(${dr})`}>\n                <StationNameGElement\n                    name={stnInfo.name}\n                    infos={stnInfo.transfer.info}\n                    stnState={stnState}\n                    direction={direction}\n                    facility={stnInfo.facility}\n                    bank={bank}\n                />\n            </g>\n        </>\n    );\n};\n\nexport default StationSHMetro;\n\ninterface StationNameGElementProps {\n    name: Name;\n    infos: InterchangeInfo[][];\n    stnState: -1 | 0 | 1;\n    direction: 'l' | 'r';\n    facility: Facilities;\n    bank: -1 | 0 | 1;\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const { name, infos, stnState, direction, facility, bank } = props;\n    const nameENLn = props.name[1].split('\\\\').length;\n\n    // get the exact station name width so that the\n    // interchange station icon can be right after the station name\n    const stnNameEl = useRef<SVGGElement | null>(null);\n    // the original name position\n    const [bBox, setBBox] = React.useState({ width: 0 } as DOMRect);\n    React.useEffect(\n        () => setBBox(stnNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [...name]\n    );\n    // the original name position's right x\n    const x = bBox.width + 5;\n\n    // rotate the station info now\n    // other wise the bcr will be inaccurate due to the rotation\n    // Chito: so, use BBox instead\n\n    // simplify the calculation times\n    const directionPolarity = direction === 'l' ? 1 : -1;\n\n    // main elements icon's dx will change if there is a facility icon or not\n    const mainDx = facility !== Facilities.none ? 30 : 0;\n\n    // interchange will have a line under the name, and should be stretched when placed horizontal in loop\n    const lineDx = bank ? -12 : 0;\n\n    return (\n        <>\n            {infos.flat().length > 0 && (\n                <>\n                    <line\n                        x1={(lineDx + mainDx) * directionPolarity}\n                        x2={(mainDx + x) * directionPolarity}\n                        stroke={stnState === -1 ? 'gray' : 'black'}\n                        strokeWidth={0.5}\n                    />\n                    <IntBoxGroup\n                        intInfos={infos}\n                        transform={`translate(${(mainDx + x) * directionPolarity},-10.75)`}\n                        direction={direction}\n                    />\n                </>\n            )}\n\n            {facility !== Facilities.none && <use xlinkHref={'#' + facility} x={10 * directionPolarity} y={-30} />}\n\n            <g\n                textAnchor={direction === 'l' ? 'start' : 'end'}\n                transform={`translate(${mainDx * directionPolarity},${-14.15625 - 2 - 12 * (nameENLn - 1)})`}\n            >\n                <StationName\n                    ref={stnNameEl}\n                    stnName={name}\n                    fill={stnState === -1 ? 'gray' : stnState === 0 ? 'red' : 'black'}\n                />\n\n                {/* deal out-of-station here as it is a y axis element. leave out-of-system in IntBoxGroup*/}\n                {infos[1]?.length > 0 && (\n                    <g\n                        transform={`translate(${\n                            (x + infos.reduce((sum, infos) => sum + infos.length, 0) * 15) * directionPolarity\n                        },-30)`}\n                    >\n                        <OSIText osiInfos={infos[1]} />\n                    </g>\n                )}\n            </g>\n        </>\n    );\n};\n\nconst StationName = React.forwardRef(\n    (props: { stnName: Name } & React.SVGProps<SVGGElement>, ref: React.Ref<SVGGElement>) => {\n        const { stnName, ...others } = props;\n\n        return (\n            <g ref={ref} {...others}>\n                {React.useMemo(\n                    () => (\n                        <>\n                            {stnName[0].split('\\\\').map((txt, i, array) => (\n                                <text key={i} className=\"rmg-name__zh\" dy={(array.length - 1 - i) * -15}>\n                                    {txt}\n                                </text>\n                            ))}\n                            <g fontSize={9.6}>\n                                {stnName[1].split('\\\\').map((txt, i) => (\n                                    <text key={i} className=\"rmg-name__en\" dy={12 * (i + 1)}>\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </>\n                    ),\n                    // eslint-disable-next-line react-hooks/exhaustive-deps\n                    [...stnName]\n                )}\n            </g>\n        );\n    }\n);\n\nconst IntBoxGroup = (props: { intInfos: InterchangeInfo[][]; direction: 'l' | 'r' } & React.SVGProps<SVGGElement>) => {\n    const { intInfos, direction, ...others } = props;\n\n    // also known as non out-of-system transfers\n    const boxInfos = [\n        ...intInfos[0],\n        ...(intInfos[1] || []),\n        // some dirty tricks here as shmetro shows maglev icon even it is a out-of-system transfer\n        // and display a maglev icon is much easier in boxInfos than in OSysIText\n        ...(intInfos[2]?.filter(info => Boolean(info[4].match(/^磁(悬)*浮/))) || []),\n    ];\n\n    let dx = 0; // update in every boxInfos\n\n    return (\n        <g fontSize={14} textAnchor=\"middle\" {...others}>\n            {boxInfos.map((info, i) => {\n                const isLineNumber = Boolean(info[4].match(/^\\d.*$/));\n                const isMaglev = Boolean(info[4].match(/^磁(悬)*浮/));\n\n                if (props.direction === 'r') {\n                    dx -= (isLineNumber || isMaglev ? 20 : info[4].length * 14 + 12 + 0) + (i === 0 ? 0 : 5);\n                }\n\n                let el = <g />;\n                if (isMaglev) {\n                    el = (\n                        <g transform={`translate(${dx},-16)scale(0.1428571429)`} key={i}>\n                            <IntBoxMaglev info={info} />\n                        </g>\n                    );\n                } else if (isLineNumber) {\n                    el = (\n                        <g transform={`translate(${dx},0)`} key={i}>\n                            <IntBoxNumber info={info} />\n                        </g>\n                    );\n                } else {\n                    el = (\n                        <g transform={`translate(${dx},0)`} key={i}>\n                            <IntBoxLetter info={info} />\n                        </g>\n                    );\n                }\n\n                if (props.direction === 'l') {\n                    dx += isLineNumber || isMaglev ? 20 + 5 : info[4].length * 14 + 12 + 5;\n                }\n                return el;\n            })}\n\n            {[...(intInfos[2] || [])].length > 0 && (\n                <g transform={`translate(${dx - (props.direction === 'r' ? 5 : 0)},0)`} key={boxInfos.length + 1}>\n                    <OSysIText osysiInfos={intInfos[2]} direction={props.direction} />\n                </g>\n            )}\n        </g>\n    );\n};\n\nconst IntBoxMaglev = memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_maglev\" fill={props.info[2]} stroke={props.info[2]} />\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxNumber = memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_number\" fill={props.info[2]} />\n            <text x={10} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                {/* // line starts with numbers */}\n                {props.info[4].match(/(\\d*)\\w+/)![0]}\n            </text>\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxLetter = memo(\n    (props: { info: InterchangeInfo }) => {\n        // box width: 16 * number of characters + 12\n        const textCount = props.info[4].split('\\\\')[0].length;\n        return (\n            <>\n                <rect height={22} width={textCount * 14 + 12} y={-11} fill={props.info[2]} />\n                <text x={textCount * 7 + 6} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                    {props.info[4].split('\\\\')[0]}\n                </text>\n            </>\n        );\n    },\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst OSIText = (props: { osiInfos: InterchangeInfo[] }) => {\n    // get the all names from the out of station interchanges\n    const lineNames = props.osiInfos.map(info => info[4]).join('，');\n    return React.useMemo(\n        () => (\n            <g textAnchor=\"middle\" fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {`换乘${lineNames}`}\n                </text>\n                <text className=\"rmg-name__zh\" dy={5}>\n                    仅限公共交通卡\n                </text>\n                <text className=\"rmg-name__en\" dy={12.5} fontSize=\"75%\">\n                    Only for Public Transportation Card\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [lineNames.toString()]\n    );\n};\n\nconst OSysIText = (props: { osysiInfos: InterchangeInfo[]; direction: 'l' | 'r' }) => {\n    // get the all names from out of system transfers\n    const lineNames = props.osysiInfos.map(info => info[4]).join('，');\n    const lineNamesEn = props.osysiInfos.map(info => info[5]).join(', ');\n\n    return React.useMemo(\n        () => (\n            <g textAnchor={props.direction === 'l' ? 'start' : 'end'} fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={3}>\n                    转乘{lineNames}\n                </text>\n                <text className=\"rmg-name__en\" dy={10} fontSize=\"75%\">\n                    To {lineNamesEn}\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.osysiInfos.toString(), props.direction]\n    );\n};\n","import * as Global from '../../../methods';\nimport { RMGParam, ShortDirection, StationDict, StationInfo } from '../../../constants/constants';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (\n                          direction === ShortDirection.right\n                              ? _isSuccessor(currentId, cur, routes)\n                              : _isPredecessor(currentId, cur, routes)\n                      )\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as StationDict;\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number\n    ) {\n        var [prevId, prevY, prevX] = [] as unknown as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 2;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + e}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - e}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number = 9.68\n    ) {\n        let linePaths = { main: [] as string[], pass: [] as string[] };\n        branches.forEach((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branch: string[], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n    let lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n    let linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n    if (lineMainStns.length === 1) {\n        linePassStns = branch;\n    }\n\n    if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n        // if two set disjoint\n        if (linePassStns[0] === branch[0]) {\n            // -1 -1 1 1\n            linePassStns.push(lineMainStns[0]);\n        } else if (\n            lineMainStns[0] === branch[0] &&\n            lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n            linePassStns.length\n        ) {\n            linePassStns = branch;\n            lineMainStns = [];\n        } else {\n            // 1 1 -1 -1\n            linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n        }\n    }\n\n    return {\n        main: lineMainStns,\n        pass: linePassStns,\n    };\n};\n","import { ShortDirection, StationDict } from '../../../constants/constants';\n\n/**\n * Split the loopline into four sides according to left_and_right_factor and bottom_factor.\n * It assumes parameters will follow these rules:\n *     1. loopline.length > bottom_factor + left_and_right_factor * 2\n *     2. bottom_factor >= 0\n *     3. left_and_right_factor >= 0\n *     4. left_and_right_factor + bottom_factor > 0\n *\n * @param loopline The loop line aka branches[0].\n * @param current_stn_id Current station id.\n * @param bottom_factor How many stations the bottom side will have.\n * @param left_and_right_factor How many stations the left and right side will have.\n * @returns Each array returned should be consecutive, and when combined in top -> right -> bottom -> left order,\n * it will also be consecutive. Note that the length of right, bottom, and left can be 0.\n */\nexport const split_loop_stns = (\n    loopline: string[],\n    current_stn_id: string,\n    bottom_factor: number,\n    left_and_right_factor: number\n) => {\n    const top_factor = loopline.length - left_and_right_factor * 2 - bottom_factor;\n    const current_stn_idx = loopline.findIndex(val => val === current_stn_id);\n    const non_undefined_loopline = [...loopline, ...loopline, ...loopline];\n    const split_a = loopline.length + current_stn_idx - Math.floor(top_factor / 2) + (top_factor % 2 === 0 ? 1 : 0);\n    const split_b = loopline.length + current_stn_idx + Math.floor(top_factor / 2);\n    return {\n        top: non_undefined_loopline.slice(split_a, split_b + 1),\n        left: non_undefined_loopline.slice(split_a - left_and_right_factor, split_a),\n        right: non_undefined_loopline.slice(split_b + 1, split_b + 1 + left_and_right_factor),\n        bottom: non_undefined_loopline.slice(\n            split_b + 1 + left_and_right_factor,\n            split_b + 1 + left_and_right_factor + bottom_factor\n        ),\n    };\n};\n\nexport type LoopStns = ReturnType<typeof split_loop_stns>;\n\n/**\n * Calculate the xshares and yshares of the loop stations.\n *\n * @param loopline The loop line aka branches[0].\n * @param loop_stns Object returned from split_loop_stns.\n * @returns Values sit between -1 and 1.\n */\nexport const get_xshares_yshares_of_loop = (loopline: string[], loop_stns: LoopStns) => {\n    const x_shares = Object.fromEntries(loopline.map(stn_id => [stn_id, -1]));\n    const y_shares = Object.fromEntries(loopline.map(stn_id => [stn_id, -1]));\n\n    const [Y_TOP, Y_BOTTOM, X_LEFT, X_RIGHT] = [-1, 1, -1, 1];\n\n    // make sure first and last station do not position at the corner\n    const e = 0.1; // e should be smaller than 1\n\n    loop_stns.top.forEach((stn_id, i) => {\n        x_shares[stn_id] = -(1 - e) + ((2 - 2 * e) / loop_stns.top.length) * i + (1 - e) / loop_stns.top.length;\n        y_shares[stn_id] = Y_TOP;\n    });\n    loop_stns.right.forEach((stn_id, i) => {\n        x_shares[stn_id] = X_RIGHT;\n        y_shares[stn_id] = -(1 - e) + ((2 - 2 * e) / loop_stns.right.length) * i + (1 - e) / loop_stns.right.length;\n    });\n    loop_stns.bottom.forEach((stn_id, i) => {\n        x_shares[stn_id] = 1 - e - ((2 - 2 * e) / loop_stns.bottom.length) * i - (1 - e) / loop_stns.bottom.length;\n        y_shares[stn_id] = Y_BOTTOM;\n    });\n    loop_stns.left.forEach((stn_id, i) => {\n        x_shares[stn_id] = X_LEFT;\n        y_shares[stn_id] = 1 - e - ((2 - 2 * e) / loop_stns.left.length) * i - (1 - e) / loop_stns.left.length;\n    });\n\n    return {\n        x_shares: x_shares,\n        y_shares: y_shares,\n    };\n};\n\n/**\n * Get pivot stations from the loop line.\n */\nexport const get_pivot_stations = (\n    branches: string[][],\n    direction: ShortDirection,\n    stn_list: StationDict,\n    current_stn_id: string\n) => {\n    const loop_line = branches[0].filter(stn_id => !['linestart', 'lineend'].includes(stn_id));\n    const _ = [...loop_line, ...loop_line, ...loop_line];\n    const non_undefined_loop_line = direction === 'r' ? _ : _.reverse();\n    const current_stn_idx = non_undefined_loop_line.findIndex(stn_id => current_stn_id === stn_id) + loop_line.length;\n    return non_undefined_loop_line\n        .slice(current_stn_idx + 1)\n        .filter(stn_id => stn_list[stn_id].loop_pivot)\n        .slice(undefined, 2);\n};\n"],"names":["StationSHMetro","props","stnId","nameDirection","services","stnInfo","useAppSelector","store","param","stn_list","stationIconStyle","length","transfer","info","dr","StationNameGElement","name","infos","xlinkHref","stroke","transform","className","writingMode","fontSize","dy","upward","downward","left","right","osi_dx","osi_dy","x1","x2","y1","y2","IntBoxGroup","intInfos","arrowDirection","StationName","stnName","fill","OSIText","osiInfos","osysi_dx","osysi_dy","OSysIText","osysiInfos","React","ref","others","split","nameENLn","dx","anchor","textAnchor","map","txt","i","array","intNameId","intInfo","reduce","color","lineNames","filter","match","replace","join","concat","lineNamesEn","trim","arrowLength","transfer_dy","arrow_dx","arrow_dy","arrow_dr","transfer_dx","transfer_anchor","id","strokeWidth","d","offset","stopColor","toString","bank_angle","branches","helper","current_stn_id","current_stn_idx","svg_width","svgWidth","svg_height","padding","direction","loop_info","left_and_right_factor","bottom_factor","loopline","stn_id","includes","loop_stns","split_loop_stns","get_xshares_yshares_of_loop","x_shares","y_shares","forEach","width","railmap","indoor","line_xs","xs","Object","keys","acc","cur","line_ys","ys","bank","l","r","bottom","path","_linePath","strokeLinejoin","LoopStationGroup","Y_TOP","Y_BOTTOM","corner","prev_x","prev_y","x","y","side","top","stn_pos","push","at","extra","slice","railmap_bank","railmap_direction","undefined","indoor_name_direction","entries","stnState","Services","bank_","direction_override","direction_param","info_panel_type","branchNameDX","branch","stationIconColor","Math","abs","facility","stnNameEl","useRef","bBox","setBBox","current","getBBox","directionPolarity","mainDx","Facilities","lineDx","flat","sum","boxInfos","Boolean","isLineNumber","isMaglev","el","IntBoxMaglev","IntBoxNumber","IntBoxLetter","memo","prevProps","nextProps","dominantBaseline","textCount","height","adjacencyList","stnList","leftW","rightW","children","a","c","criticalPathMethod","from","to","adjMat","len","nodes","allLengths","criticalPaths","child","cp","unshift","maxLength","max","indexOf","getXShareMTR","criticalPath","branchOfStn","partSource","partSink","leftOpenJaw","lens","getStnState","currentId","routes","console","log","Set","ShortDirection","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","yShares","xShares","namePoss","leftWideFactor","rightWideFactor","pathWeight","Infinity","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","parents","stnPred","res","getYShare","stnIds","lineXs","realXs","realYs","e","prevId","prevY","prevX","stnDX","stnExtraH","stnSpareH","warn","stations","stnStates","linePaths","main","pass","lineMainStns","linePassStns","drawLine","top_factor","findIndex","val","non_undefined_loopline","split_a","floor","split_b","fromEntries","get_pivot_stations","loop_line","_","non_undefined_loop_line","reverse","loop_pivot"],"sourceRoot":""}